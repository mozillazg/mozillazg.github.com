<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Huang Huang 的博客</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/others.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2019-01-03T00:00:00+00:00</updated><entry><title>rate limiting 之 token bucket</title><link href="https://mozillazg.com/2019/01/rate-limiting-intro-token-bucket.html" rel="alternate"></link><updated>2019-01-03T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2019-01-03:2019/01/rate-limiting-intro-token-bucket.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在实现限速功能的时候，其中一种常用的方法是使用 token bucket 算法来实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="token-bucket"&gt;
&lt;h2 id="hidtoken-bucket"&gt;token bucket&lt;a class="headerlink" href="#hidtoken-bucket" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="token bucket" src="/static/images/other/token_bucket.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(图片来自 &lt;a class="reference external" href="https://gateoverflow.in/39720/gate2016-1-54"&gt;https://gateoverflow.in/39720/gate2016-1-54&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;token bucket 常见的中文解释是：令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务 &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[1]&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;维基百科 &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[2]&lt;/a&gt; 上 token bucket 算法的简单描述如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A token is added to the bucket every 1/r seconds.
每隔 1/r 秒向 bucket 中增加一个 token。&lt;/li&gt;
&lt;li&gt;The bucket can hold at the most b tokens. If a token arrives when the bucket is full, it is discarded.
这个 bucket 最多只能存放 b 个 token。如果放置 token 时 bucket 已经满了，丢弃这个 token。&lt;/li&gt;
&lt;li&gt;When a packet (network layer PDU) of n bytes arrives,
当一个包含 n 个字节的数据包进来的时候，&lt;ul&gt;
&lt;li&gt;if at least n tokens are in the bucket, n tokens are removed from the bucket, and the packet is sent to the network.
如果 bucket 中有 &amp;gt;= n 个 token，将从 bucket 中移除 n 个 token，然后把这个数据包发送出去。&lt;/li&gt;
&lt;li&gt;if fewer than n tokens are available, no tokens are removed from the bucket, and the packet is considered to be non-conformant.
如果可用的 token &amp;lt; n，此时不会从 bucket 中移除任何的 token，但是这个数据包会被认为是被限制的数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;常见实现方法&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般有两种实现方法。&lt;/p&gt;
&lt;p&gt;一种是按照 token bucket 的说明，真的做放 token 的操作：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;后台有个线程每 1/n 秒将 bucket 中的 token 数量加一，直至达到 bucket 容量。&lt;/li&gt;
&lt;li&gt;主线程检查限速时，比较 bucket 中 token 的数量，如果少于需要的数量，表示当前被限制。
（比如，一个请求进来，检查 bucket 中的 token 数量是否 &amp;gt; 1，如果 &amp;gt; 1请求放行同时把 token 数量减 1，
如果 &amp;lt; 1 说明当前请求已超出速率限制，请求被拒绝。）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法有一个很大的缺点，那就是因为每个 token bucket 都会有一个繁忙的后台线程在更新 token 数量，会
导致严重占用系统 CPU 出现严重的性能问题。假设我们的限速是限制为 1000/s，此时后台每隔 1ms 就会更新一次 token 数量，可以想像每个后台线程都会频繁占用 CPU，用这种方法实现的 rate limiting 处理不了几个请求就会出现 CPU 接近 100% 的情况。所以实践中一般用另一种方法来实现 token bucket。&lt;/p&gt;
&lt;p&gt;另一种是在取 token 时计算上次取跟这次取之间按照速率会产生多少个 token 加上上次剩余的 token ，然后比较剩余 token 数是否满足需要。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;总结&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍了一下 token bucket 算法以及两种常见的实现方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Token_bucket"&gt;Token bucket - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/juju/ratelimit"&gt;juju/ratelimit: Efficient token-bucket-based rate limiter package.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/falconry/token-bucket"&gt;falconry/token-bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gateoverflow.in/39720/gate2016-1-54"&gt;GATE2016-1-54 - GATE Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://colobu.com/2014/11/13/rate-limiting/"&gt;流量调整和限流技术 | 鸟窝&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://colobu.com/2014/11/13/rate-limiting/"&gt;流量调整和限流技术 | 鸟窝&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Token_bucket"&gt;Token bucket - Wikipedia&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="rate-limiting"></category><category term="token-bucket"></category></entry><entry><title>调用远程服务的一些备忘录</title><link href="https://mozillazg.com/2018/08/call-remote-service-checklist.html" rel="alternate"></link><updated>2018-08-16T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2018-08-16:2018/08/call-remote-service-checklist.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;大部分程序或多或少都会调用其他远程服务，比如访问 HTTP API、操作数据等各种远程操作。
因为是调用其他服务所以会有很多不可控的因素，在编写相关代码的时候需要有一些注意事项或者说是备忘录。&lt;/p&gt;
&lt;p&gt;本文就列一些常见的备忘录（主要针对调用网络服务）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;超时&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了防止对方服务响应时间太长或者因为网络等各种因素导致响应时间变长，导致拖慢我们自己的程序，
在调用远程服务的时候记得配置或实现合适的超时机制。&lt;/p&gt;
&lt;p&gt;如果设置的超时时间不合理或者没有实现超时功能的话，
就会出现对方服务故障或与对方服务通信故障拖垮我们自己服务的尴尬情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;重试&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当调用远程服务失败的时候，就涉及到是否需要重试的问题。是否需要重试设计到各种情况：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;连接未到达对方服务，可以安全重试&lt;/li&gt;
&lt;li&gt;连接到达对方服务，对方服务故障，无法处理请求，可以安全重试&lt;/li&gt;
&lt;li&gt;连接到达对方服务，对方处理了请求，看情况重试:&lt;ul&gt;
&lt;li&gt;虽然处理了请求，但是响应信息提示请求的参数有问题，无需重试，因为是我们自己代码的问题，重试也是一样的结果&lt;/li&gt;
&lt;li&gt;对方处理请求时间过长导致超时，根据实际情况，酌情重试&lt;/li&gt;
&lt;li&gt;操作是幂等的，可以安全重试&lt;/li&gt;
&lt;li&gt;其他场景，主要是要考虑重试是否会产生非预期的副作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重试的时候所使用的重试策略也需要精心考虑，不能无脑重试、无限重试：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;限制重试次数，增加重试间隔&lt;/li&gt;
&lt;li&gt;重试间隔一般不要是固定间隔，间隔时间可以是指数递增，也可以加上在一定区间内波动的随机数，
防止出现雪崩效应，打垮对方服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于重试及重试策略可以参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/transient-faults"&gt;Retry general guidance | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="circuit-breaker"&gt;
&lt;h2 id="hidcircuit-breaker"&gt;熔断/断路器（Circuit Breaker）&lt;a class="headerlink" href="#hidcircuit-breaker" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了处理调用远程服务短时间内失败率很高或者总是失败的场景，程序可以考虑实现自动熔断/断路器的功能。
即：如果发现失败率比较高的时候，自动在后续一段时间内逐步减少对对方服务的调用
（限制请求，对部分操作直接报错不访问远程服务），
当发现成功率上去后逐步放开限制直至恢复正常访问。&lt;/p&gt;
&lt;p&gt;关于熔断/断路器可以参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker"&gt;Circuit Breaker | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/cloud/garage/content/manage/practice_circuit_breaker_pattern/"&gt;Preventing system failure with the Circuit Breaker pattern - IBM Cloud Garage Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;降级&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的熔断是调用方程序实现在失败率很高时减少请求数，降级的话就是可以外部介入程序的功能。
比如当通过监控发现调用远程服务故障率特别高，或者收到通知对方服务在某个时间不可用，
可以直接降级到这个功能，彻底不发送任何请求。&lt;/p&gt;
&lt;p&gt;比如，我们有个服务同时支持微信支付收款和支付宝支付收款，当发现微信支付大面积故障的时候，
可以人工/第三方程序自动降级掉程序里的微信支付功能，此时用户付款的时候就只会看到一个支付宝支付的功能，
微信支付的功能会被临时下掉。&lt;/p&gt;
&lt;p&gt;关于降级的另一种应用是: fallback，即：调用主服务失败时，改为调用备用服务。
比如上传图片，平时都把图片上传到阿里云 oss，这次调用是发现 oss 故障，然后程序就尝试改为
调用腾讯云 cos，把图片上传到 cos。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;日志&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当程序正常运行或出现故障时我们可能都需要借助日志来提供有用的信息。&lt;/p&gt;
&lt;p&gt;比如当调用远程服务故障时，可能需要记录一些有用的信息:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;调用的服务信息，比如请求的 url、ip、端口之类的&lt;/li&gt;
&lt;li&gt;请求参数，可以用于复现或 debug 的相关请求参数&lt;/li&gt;
&lt;li&gt;失败原因，比如异常信息，根据需要区分不同的异常&lt;/li&gt;
&lt;li&gt;如果有响应返回的话，响应中包含的有用信息，比如 http 响应码、http response 中的有用信息等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当时在记日志的时候也需要注意一些问题：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;日志数量问题，有些场景下日志量太大会影响程序性能，不要随意记无用的日志&lt;/li&gt;
&lt;li&gt;不要记录敏感数据，记得对日志内容脱密，比如：不要记密码、token 等敏感信息&lt;/li&gt;
&lt;li&gt;单条日志大小问题，需要考虑控制单条日志大小，比如上面说的 http response 之类的无法预料到大小的信息
需要考虑对大的信息进行截断处理或者干脆不记录（比如调用上传文件接口之类的不记录文件内容）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;异常处理&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;调用失败时往往伴随着各种异常，比如上面的超时的功能，一般超时的时候都会以异常的方式体现。&lt;/p&gt;
&lt;p&gt;对于调用时出现的各种异常要根据实际情况进行区别，对不同的异常采取不同的措施：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;判断异常是系统异常还是用户异常，针对不同的异常可能需要不同的处理方法&lt;/li&gt;
&lt;li&gt;判断异常是否是表示特定功能的某种状态的异常，比如上面的超时/重试/熔断 之类的功能
都会有特定的异常用来对应某种状态&lt;/li&gt;
&lt;li&gt;判断异常是否是可重试解决的异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;慎重考虑忽略异常的情况，不要一股脑的忽略所有异常同时还不记日志
（将来进行 debug 的人会喷死你，这个人还有可能会是你自己）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;监控&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过监控我们可以掌握程序的各种运行指标/状况，这样就可以及时/提前发现问题。&lt;/p&gt;
&lt;p&gt;常见的针对远程调用的监控指标如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;响应时间&lt;/li&gt;
&lt;li&gt;调用失败计数&lt;/li&gt;
&lt;li&gt;特定错误计数&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2 id="hidid9"&gt;告警&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;虽然有了监控数据，但是我们不可能 24 小时不眠不休的盯着监控数据，此时就需要有告警程序来帮助我们
自动发现可能的异常和已经出现的问题。&lt;/p&gt;
&lt;p&gt;这样即可以及时发现问题也可以解放生产力， 在没有异常的时候去做更有创造力的事情。&lt;/p&gt;
&lt;p&gt;根据告警数据的不同有一些常见的针对远程调用的告警：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;响应时间阈值告警&lt;/li&gt;
&lt;li&gt;一段时间内特定错误/失败数告警&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2 id="hidid10"&gt;总结&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文罗列了一些编写调用远程服务相关代码时需要注意的一下注意事项。&lt;/p&gt;
&lt;p&gt;其中有几个功能在进行远程调用时建议最好都实现，就算是写一个临时 debug 或
临时运维用的小脚本也要考虑实现这几个功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;超时：必需要实现/配置合适的超时时间&lt;/li&gt;
&lt;li&gt;重试：酌情重试，不是说一定要重新发送请求，而是说要对某些可以重试的异常进行重试处理&lt;/li&gt;
&lt;li&gt;异常处理：酌情处理，如果程序中会多次进行远程调用的话，就必须要考虑异常处理，
至少要防止因为异常导致的非预期的程序提前退出&lt;/li&gt;
&lt;li&gt;日志：最好是有，就算是用 &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; 代替也好过没有记录任何信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于是否实现 熔断/降级/监控/告警 需要看实际情况：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;临时的/一次性的运维脚本之类的可能就没必要实现了&lt;/li&gt;
&lt;li&gt;基础设施不完善或者没有对应的基础设施的话，实现这些功能可能就不适合了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欢迎大家在评论里一起讨论/补充其他的注意事项。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2 id="hidid11"&gt;参考资料&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/transient-faults"&gt;Retry general guidance | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker"&gt;Circuit Breaker | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/cloud/garage/content/manage/practice_circuit_breaker_pattern/"&gt;Preventing system failure with the Circuit Breaker pattern - IBM Cloud Garage Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pragprog.com/book/mnee2/release-it-second-edition"&gt;Release It! Second Edition: Design and Deploy Production-Ready Software by Michael Nygard | The Pragmatic Bookshelf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="checklist"></category></entry><entry><title>jq 常用操作</title><link href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html" rel="alternate"></link><updated>2018-01-28T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2018-01-28:2018/01/jq-use-examples-cookbook.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; 是个非常强大的处理 JSON 数据的命令行工具。这里记录一下最近使用 jq 所使用的一些操作，方便以后使用的时候直接参考。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;基本操作&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;jq 的命令行使用方法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jq -h
jq - commandline JSON processor &lt;span class="o"&gt;[&lt;/span&gt;version 1.5&lt;span class="o"&gt;]&lt;/span&gt;
Usage: jq &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &amp;lt;jq filter&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;file...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本文主要讲的是常用的 &amp;lt;jq filter&amp;gt;。&lt;/p&gt;
&lt;div class="section" id="json"&gt;
&lt;h3 id="hidjson"&gt;输出原始的 JSON 数据&lt;a class="headerlink" href="#hidjson" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认不指定 filter 就会原样输出，也可以使用 &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; 过滤器&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play 在线运行链接：&lt;a class="reference external" href="https://jqplay.org/s/KhRuUFCP2h"&gt;https://jqplay.org/s/KhRuUFCP2h&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="object"&gt;
&lt;h3 id="hidobject"&gt;object 操作&lt;a class="headerlink" href="#hidobject" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="key"&gt;
&lt;h4 id="hidkey"&gt;获取某个 key 的值&lt;a class="headerlink" href="#hidkey" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.key&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.foo.bar&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.[&amp;quot;key&amp;quot;]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .url
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[&amp;quot;url&amp;quot;]&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Tn7NUbP4Dr"&gt;https://jqplay.org/s/Tn7NUbP4Dr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以在后面加个问号表示当输入不是 object 时不会报错 &lt;tt class="docutils literal"&gt;.key?&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.a&amp;#39;&lt;/span&gt;
jq: error &lt;span class="o"&gt;(&lt;/span&gt;at &amp;lt;stdin&amp;gt;:1&lt;span class="o"&gt;)&lt;/span&gt;: Cannot index number with string &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.a?&amp;#39;&lt;/span&gt;
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;?&lt;/tt&gt; 规则适合所有正确的 filter，在 filter 最后加上 &lt;tt class="docutils literal"&gt;?&lt;/tt&gt; 可以忽略错误信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4 id="hidid2"&gt;所有的 key 组成的数组&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;keys&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq keys
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/_5KiPRS75r"&gt;https://jqplay.org/s/_5KiPRS75r&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="value"&gt;
&lt;h4 id="hidvalue"&gt;所有的 value&lt;a class="headerlink" href="#hidvalue" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/6HRvEND8AB"&gt;https://jqplay.org/s/6HRvEND8AB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4 id="hidid3"&gt;所有的 value 组成的数组&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[.[]]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;[]]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/JGIX6hTt_8"&gt;https://jqplay.org/s/JGIX6hTt_8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;数组操作&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4 id="hidid5"&gt;取出所有元素&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Y9UgK_4xxE"&gt;https://jqplay.org/s/Y9UgK_4xxE&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slice"&gt;
&lt;h4 id="hidslice"&gt;切分(slice)&lt;a class="headerlink" href="#hidslice" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[1]&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.[0:2]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;jim&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;jim&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[&lt;/span&gt;0:2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/seNL7hW38W"&gt;https://jqplay.org/s/seNL7hW38W&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4 id="hidid6"&gt;操作 object 组成的数组&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;比如取出数组元素中 name 的值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;.name
&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Z5qjhJnRyn"&gt;https://jqplay.org/s/Z5qjhJnRyn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以用下面会提到的管道操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.[]|.name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要将结果重新组成数组，可以这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;[]&lt;/span&gt;.name&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以使用下面会提到的 &lt;tt class="docutils literal"&gt;map&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;map(.name)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="filter"&gt;
&lt;h3 id="hidfilter"&gt;使用多个 filter&lt;a class="headerlink" href="#hidfilter" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;,&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.url, .name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/02CPHO1ESj"&gt;https://jqplay.org/s/02CPHO1ESj&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;高级操作&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;管道&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; 实现类似管道的功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.|.url&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/L5bu1ovLr-"&gt;https://jqplay.org/s/L5bu1ovLr-&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;获取内容的长度(字符串，数组的长度)&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;length&lt;/tt&gt; 可以获取字符串或数组的长度:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.url|length&amp;#39;&lt;/span&gt;
13
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.|length&amp;#39;&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/9TqdXbe0lo"&gt;https://jqplay.org/s/9TqdXbe0lo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="map"&gt;
&lt;h3 id="hidmap"&gt;map&lt;a class="headerlink" href="#hidmap" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;map(foo)&lt;/tt&gt; 可以实现对数组的每一项进行操作，然后合并结果的功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(length)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  13,
  9
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/BjgdGsjPem"&gt;https://jqplay.org/s/BjgdGsjPem&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filter-select"&gt;
&lt;h3 id="hidfilter-select"&gt;filter(select)&lt;a class="headerlink" href="#hidfilter-select" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;select(foo)&lt;/tt&gt; 可以实现对输入项进行判断，只返回符合条件的项:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(select(.|length &amp;gt; 9))&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/8Zrwy7dDxW"&gt;https://jqplay.org/s/8Zrwy7dDxW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3 id="hidid10"&gt;字符串插值，拼接&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;\(foo)&lt;/tt&gt; 实现字符串插值功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;&amp;quot;hi \(.name)&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;hi mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意要用双引号包围起来，表示是一个字符串。&lt;/p&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/k90JFcDqPz"&gt;https://jqplay.org/s/k90JFcDqPz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; 实现字符串拼接:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;&amp;quot;hi &amp;quot; + .name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;hi mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if-elif-else"&gt;
&lt;h3 id="hidif-elif-else"&gt;if/elif/else&lt;a class="headerlink" href="#hidif-elif-else" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;if .. then .. elif .. then .. else .. end&lt;/tt&gt; 实现条件判断:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[0, 1, 2, 3]&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(if . == 0 then &amp;quot;zero&amp;quot; elif . == 1 then &amp;quot;one&amp;quot; elif . == 2 then &amp;quot;two&amp;quot; else &amp;quot;many&amp;quot; end)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;zero&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;many&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/y8WwvHISH4"&gt;https://jqplay.org/s/y8WwvHISH4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3 id="hidid11"&gt;构造 object 或数组&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt; 构造新的 object 或 数组。&lt;/p&gt;
&lt;p&gt;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;{name: .[1]}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/sccwJi75jb"&gt;https://jqplay.org/s/sccwJi75jb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数组:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;[.name, .url]&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/LYflwM4kJM"&gt;https://jqplay.org/s/LYflwM4kJM&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;, &amp;quot;ages&amp;quot;: [1, 2]}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;{name, age: .ages[]}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: 2
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="join"&gt;
&lt;h3 id="hidjoin"&gt;数组 join&lt;a class="headerlink" href="#hidjoin" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;join&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.|join(&amp;quot; | &amp;quot;)&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com | mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="split"&gt;
&lt;h3 id="hidsplit"&gt;字符串 split&lt;a class="headerlink" href="#hidsplit" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;split&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;mozillazg.com | mozillazg&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;split(&amp;quot; | &amp;quot;)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多的函数和用法详见 &lt;a class="reference external" href="https://stedolan.github.io/jq/manual/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2 id="hidid12"&gt;参考资料&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jqplay.org/"&gt;jq play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="jq"></category></entry><entry><title>ZooKeeper FastLeader 选举</title><link href="https://mozillazg.com/2017/03/zookeeper-fastleader-elect-leader.html" rel="alternate"></link><updated>2017-03-11T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2017-03-11:2017/03/zookeeper-fastleader-elect-leader.html</id><summary type="html">&lt;p&gt;ZooKeeper 在集群模式下默认会使用 FastLeader 算法来选举 leader。下面将说说 ZooKeeper 集群使用 FastLeader 算法选举的具体过程。写的过程中参考了多篇文章，详见文末的参考资料。&lt;/p&gt;
&lt;p&gt;首先需要明确几个概念:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;节点状态：每个集群中的节点都有一个状态 LOOKING/FOLLOWING/LEADING/OBSERVING。每个节点启动的时候都是 LOOKING 状态，如果这个节点参与选举但最后不是leader，则状态是 FOLLOWING，如果不参与选举则是 OBSERVING，leader 的状态是 LEADING。&lt;/li&gt;
&lt;li&gt;epoch: 表示选举轮数。&lt;/li&gt;
&lt;li&gt;zxid: 事务 zxid 包含了本地数据的最后更新时间相关的信息。&lt;/li&gt;
&lt;li&gt;serverid: 当前 server 的 ID, 通过配置文件指定(比如: &lt;tt class="docutils literal"&gt;echo '1' &amp;gt; myid&lt;/tt&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先用文字描述一下大概的选举思想：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在没有遇到比我牛的人之前，第一票推荐我自己&lt;/li&gt;
&lt;li&gt;当接收到其他人的选举信息时，如果他们推荐的人没我牛，那我还是推荐我自己&lt;/li&gt;
&lt;li&gt;我有一个票箱，保存了当前这一轮选举中自己的推荐人以及接收到的推荐人信息，一人一票，重复或过期的票概不接受&lt;/li&gt;
&lt;li&gt;当我发现了比我牛的人的时候，改为推荐这个牛人&lt;/li&gt;
&lt;li&gt;如果我发现我的选举轮数落后了，清空票箱，改为推荐接收到的最新选举中大家推荐的最牛的那个人（如果没有人比我牛，那还是推荐我自己）&lt;/li&gt;
&lt;li&gt;不断的重复上面的过程，不断的告诉别人“我的投票是第几轮”、“我推举的人是谁”。直到我的票箱中“我推举的最牛的人”收到了不少于 &lt;strong&gt;N / 2 + 1&lt;/strong&gt; 的推举投票，此时这个人就是我认定的最终 leader。&lt;/li&gt;
&lt;li&gt;当我确定了谁是最终 leader 并且这个 leader 一切正常，我就更新我的状态为 FOLLOWING/LEADING（我自己是最终  leader 则是 LEADING 否则就是 FOLLOWING），之后的选举中都直接反馈我确定的这个最终 leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么，以什么标准来确定一个节点可以成为一个 leader 呢？
依次比较 epoch, zxid, serverid ：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;接收到的消息中，有 epoch 比我大的，则选 epoch 大的消息中确定的 server&lt;/li&gt;
&lt;li&gt;如果 epoch 相等，则选 zxid 最大的 server&lt;/li&gt;
&lt;li&gt;如果 zxid 也相等，则选 serverid 最大的 server (有的节点生来就是当 leader 的 😂）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//LOOKING消息，则&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;LOOKING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="c1"&gt;//检查下收到的这张选票是否可以胜出，依次比较选举轮数epoch，事务zxid，服务器编号server id&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalOrderPredicate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;zxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peerEpoch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;proposedLeader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proposedZxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proposedEpoch&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//胜出了，就把自己的投票修改为对方的，然后广播消息&lt;/span&gt;
        &lt;span class="n"&gt;updateProposal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;zxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peerEpoch&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;sendNotifications&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;totalOrderPredicate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;newId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;newZxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;newEpoch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;curId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;curZxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;curEpoch&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEpoch&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curEpoch&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;newEpoch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;curEpoch&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;newZxid&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curZxid&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;newZxid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;curZxid&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newId&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curId&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从网上找了一个流程图，可以看看：&lt;/p&gt;
&lt;p&gt;&lt;img alt="flow.png" src="/static/images/zookeeper/elect-leader.png" /&gt;&lt;/p&gt;
&lt;p&gt;举个例子，理想情况下，先后启动三个节点的选举过程如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;第一轮：每个节点广播选自己（此时只有 node1)&lt;/li&gt;
&lt;li&gt;第二轮：node2 启动了，发起一轮投票。node1 收到了 node2 选它自己的投票，发现 node2 比自己牛，广播选 node2。此时 node1 发现 node2 获得了2票 &amp;gt;= N / 2 + 1，认定 node2 为 leader 进入 following 状态。
node2 收到了 node1 选自己的广播，此时 node2 发现自己 获得了2票 &amp;gt;= N / 2 + 1，进入 leading 状态。&lt;/li&gt;
&lt;li&gt;第三轮：node3 启动了，发起一轮投票。node1 和 node2 都选 node2 , node3 通过比对发现 node2 的票数 &amp;gt;= N /2 + 1，认定 node2 是 leader 进入 following 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面就是 FastLeader 算法选举的简单介绍了，更详细的信息可以查阅官方文档和代码。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://codemacro.com/2014/10/19/zk-fastleaderelection/"&gt;图解zookeeper FastLeader选举算法 - loop in codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/xhh198781/article/details/6619203"&gt;zookeeper3.3.3源码分析(二)FastLeader选举算法 - xhh198781的专栏 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://iwinit.iteye.com/blog/1773531"&gt;深入浅出Zookeeper之五 Leader选举 - 吊丝码农 - ITeye技术网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cnblogs.com/yuyijq/p/4116365.html"&gt;Zookeeper-Zookeeper leader选举 - 横刀天笑 - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/yinwenjie/article/details/47613309"&gt;hadoop系列：zookeeper（2）——zookeeper核心原理（选举） - JAVA入门中 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java"&gt;zookeeper/FastLeaderElection.java at branch-3.4 · apache/zookeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html#sc_configuration"&gt;ZooKeeper Administrator's Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="zookeeper"></category><category term="leader选举"></category></entry><entry><title>pinyin-data: 汉字拼音数据库</title><link href="https://mozillazg.com/2016/03/introduce-pinyin-data.html" rel="alternate"></link><updated>2016-03-07T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2016-03-07:2016/03/introduce-pinyin-data.html</id><summary type="html">&lt;h2&gt;缘起&lt;/h2&gt;
&lt;!-- 因为我维护了三个拼音相关的仓库（
[python-pinyin][1]
[go-pinyin][2]
[rust-pinyin][3]
），每次修改拼音数据的时候都需要手动修改不同编程语言版本的
拼音库，感觉这样不是很方便。

同时也  --&gt;

&lt;p&gt;希望建立一个跟编程语言无关的拼音数据库，
方便大家使用这个拼音数据库去开发不同编程语言的拼音模块。&lt;/p&gt;
&lt;h2&gt;项目介绍&lt;/h2&gt;
&lt;p&gt;项目地址: &lt;a href="https://github.com/mozillazg/pinyin-data"&gt;https://github.com/mozillazg/pinyin-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要用的是 &lt;a href="http://unicode.org/"&gt;Unicode.org&lt;/a&gt; 旗下的 &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 项目里的拼音数据。
通过程序自动解析和合并 &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中的拼音数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据格式：&lt;code&gt;{code point}: {pinyins}  # {hanzi}&lt;/code&gt; （示例：&lt;code&gt;U+4E2D: zhōng,zhòng  # 中&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kHanyuPinyin.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kHanyuPinyin"&gt;kHanyuPinyin&lt;/a&gt; 部分的拼音数据（来源于《漢語大字典》的拼音数据）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kHanyuPinlu.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kHanyuPinlu"&gt;kHanyuPinlu&lt;/a&gt; 部分的拼音数据（来源于《現代漢語頻率詞典》的拼音数据）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kXHC1983.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kXHC1983"&gt;kXHC1983&lt;/a&gt; 部分的拼音数据（来源于《现代汉语词典》的拼音数据）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonCJKUI.txt&lt;/code&gt;: 不属于 &lt;a href="https://en.wikipedia.org/wiki/CJK_Unified_Ideographs"&gt;CJK Unified Ideograph&lt;/a&gt; 但是却有拼音的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kMandarin.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kMandarin"&gt;kMandarin&lt;/a&gt; 部分的拼音数据（普通话中最常用的一个读音。zh-CN 为主，如果 zh-CN 中没有则使用 zh-TW 中的拼音）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overwrite.txt&lt;/code&gt;: 手工校验的拼音数据（上面的拼音数据都是自动生成的，修改的话只修改这个就可以了）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pinyin.txt&lt;/code&gt;: 合并上述文件后的拼音数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zdic.txt&lt;/code&gt;: &lt;a href="http://zdic.net"&gt;汉典网&lt;/a&gt; 的拼音数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;后续计划&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将 &lt;a href="https://github.com/mozillazg/python-pinyin"&gt;python-pinyin&lt;/a&gt;, &lt;a href="https://github.com/mozillazg/go-pinyin"&gt;go-pinyin&lt;/a&gt;, &lt;a href="https://github.com/mozillazg/rust-pinyin"&gt;rust-pinyin&lt;/a&gt; 里的拼音数据改为基于 &lt;a href="https://github.com/mozillazg/pinyin-data"&gt;pinyin-data&lt;/a&gt; 自动生成相关代码。
  然后统一在 &lt;a href="https://github.com/mozillazg/rust-pinyin"&gt;pinyin-data&lt;/a&gt; 这个项目中维护拼音数据（在 README 或 CONTRIBUTING.md 中增加提示）。&lt;/li&gt;
&lt;li&gt;向 &lt;a href="https://github.com/hotoo/pinyin"&gt;hotoo/pinyin&lt;/a&gt; 提一下这个仓库，看他是否有意使用这个仓库的数据。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pinyin"></category></entry><entry><title>multipart form data 的数据格式</title><link href="https://mozillazg.com/2016/02/http-multipart-form-data.html" rel="alternate"></link><updated>2016-02-19T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2016-02-19:2016/02/http-multipart-form-data.html</id><summary type="html">&lt;p&gt;假设 form 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/upload&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Username: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Password: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    File: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;header&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;body&lt;/h2&gt;
&lt;h3&gt;普通 input 数据&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Tom&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;文件上传 input 数据&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;plain&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Transfer-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;binary&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;hello&lt;/span&gt; &lt;span class="nt"&gt;word&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;结束标志&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--{boundary}--\r\n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;数据示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/upload&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;172.16.100.128:5000&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;394 &lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;multipart/form-data; boundary=----WebKitFormBoundaryLumpDpF3AwbRwRBn&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;http://172.16.100.128:5000/&lt;/span&gt;

------WebKitFormBoundaryUNZIuug9PIVmZWuw
Content-Disposition: form-data; name=&amp;quot;username&amp;quot;

Tom
------WebKitFormBoundaryUNZIuug9PIVmZWuw
Content-Disposition: form-data; name=&amp;quot;password&amp;quot;

passwd
------WebKitFormBoundaryUNZIuug9PIVmZWuw
Content-Disposition: form-data; name=&amp;quot;file&amp;quot;; filename=&amp;quot;myfile.txt&amp;quot;
Content-Type: text/plain

hello world
------WebKitFormBoundaryUNZIuug9PIVmZWuw--
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc2388"&gt;https://tools.ietf.org/html/rfc2388&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2"&gt;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/satox/20110726/1311665904"&gt;http://d.hatena.ne.jp/satox/20110726/1311665904&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mugenup-tech.hatenadiary.com/entry/2014/08/28/100910"&gt;http://mugenup-tech.hatenadiary.com/entry/2014/08/28/100910&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="http"></category></entry><entry><title>解决 gitlab 配置不正确导致 ci 中 git clone 时出现 “You appear to have cloned an empty repository” 的问题</title><link href="https://mozillazg.com/2015/11/gitlab-ci-fix-reference-is-not-a-tree-you-appear-to-have-cloned-an-empty.html" rel="alternate"></link><updated>2015-11-02T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-11-02:2015/11/gitlab-ci-fix-reference-is-not-a-tree-you-appear-to-have-cloned-an-empty.html</id><summary type="html">&lt;p&gt;最近在使用 gitlab 的 ci 服务时出现了如下问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitlab-ci-multi-runner ...
...

Cloning repository... 
Cloning into &amp;#39;/builds/...&amp;#39;... 
warning: You appear to have cloned an empty repository. 
Checking out 2c80f515 as develop... 
fatal: reference is not a tree: 1b53f5157b357f4c006ceccf0e36035bad340185
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过多翻搜索验证后发现是 gitlab-git-http-server 的配置问题：
这个 gitlab 服务没有使用内置的 nginx 来反向代理 gitlab 服务而是使用的 yum 安装的 nginx。
由于配置有问题导致 ci 任务一直失败。&lt;/p&gt;
&lt;p&gt;解决办法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;, 找到如下配置并修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx[&amp;#39;enabled&amp;#39;] = false
gitlab_git_http_server[&amp;#39;listen_network&amp;#39;] = &amp;quot;tcp&amp;quot;
# 这个端口修改为你实际需要的端口
gitlab_git_http_server[&amp;#39;listen_addr&amp;#39;] = &amp;quot;localhost:8081&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用更改 &lt;code&gt;sudo gitlab-ctl reconfigure&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载官方 nginx 配置（选择相应版本分支下的文件）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://gitlab.com/gitlab-org/gitlab-ce/raw/v8.1.2/lib/support/nginx/gitlab -O /etc/nginx/conf.d/gitlab.conf
# 如果你的 ci 服务器使用的是独立的域名或者使用了 ssl 的话，可以去
# https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/support/nginx
# 下载相应的配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 nginx 配置文件中的 &lt;code&gt;upstream&lt;/code&gt;， &lt;code&gt;server_name&lt;/code&gt;, &lt;code&gt;root&lt;/code&gt;，提示：
   如果不存在 &lt;code&gt;/home/git/gitlab/public&lt;/code&gt; 目录的话，那么 &lt;code&gt;root&lt;/code&gt; 就是
   &lt;code&gt;/opt/gitlab/embedded/service/gitlab-rails/public&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;reload nginx: &lt;code&gt;nginx -t &amp;amp;&amp;amp; nginx -s reload&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/2727"&gt;https://gitlab.com/gitlab-org/gitlab-ce/issues/2727&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#gitlab"&gt;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#gitlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/support/nginx"&gt;https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/support/nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gitlab"></category><category term="gitlab-git-http-server"></category></entry><entry><title>修复 gitlab 中 fork 失败，提示 "visibility level private visibility has been restricted"</title><link href="https://mozillazg.com/2015/10/gitlab-fix-fork-error-because-visibility-level-private-visibility-has-been-restricted-by-your-gitlab-administrator.html" rel="alternate"></link><updated>2015-10-20T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-10-20:2015/10/gitlab-fix-fork-error-because-visibility-level-private-visibility-has-been-restricted-by-your-gitlab-administrator.html</id><summary type="html">&lt;p&gt;版本：Gitlab 8.0.4, 错误截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="gitlab-fork-error-1.png" src="/static/images/2015/gitlab-fork-error-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;出现这个错误是因为管理员没有配置 private 仓库允许 被 fork。解决办法如下（管理员身份操作）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入【admin area】                 &lt;br /&gt;
&lt;img alt="" src="/static/images/2015/gitlab-fork-error-2.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【settings】             &lt;br /&gt;
&lt;img alt="" src="/static/images/2015/gitlab-fork-error-3.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改【Restricted visibility levels】，&lt;strong&gt;取消&lt;/strong&gt; Private 的选中状态          &lt;br /&gt;
&lt;img alt="" src="/static/images/2015/gitlab-fork-error-4.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="gitlab"></category></entry><entry><title>微信开发过程中遇到的问题</title><link href="https://mozillazg.com/2015/06/wechat-develop-note.html" rel="alternate"></link><updated>2015-06-08T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-06-08:2015/06/wechat-develop-note.html</id><summary type="html">&lt;div class="section" id="jssdk"&gt;
&lt;h2 id="hidjssdk"&gt;JSSDK&lt;a class="headerlink" href="#hidjssdk" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;invalid signature&lt;/strong&gt;, 排查:&lt;/p&gt;
&lt;p&gt;前端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;url&lt;/tt&gt; 参数动态获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;注意参数大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
appId: '',         //  I 大写
timestamp: 134xxx, // 全小写, 必须与后端签名时 timestamp 的值一致
nonceStr: '',      //  ** 尤其注意 S 是大写 **, 必须与后端签名时 noncestr 的值一致
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;确保 jsapi_ticket 未过期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;确认参与签名的参数，注意大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
noncestr        // 全小写，** 尤其注意 s 是小写 **
jsapi_ticket    // 全小写
timestamp       // 全小写
url             // 小写，必须是前端动态获取
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;签名算法
* 是否按字段名的ASCII 码从小到大排序
* 使用 sha1 签名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微信支付 &lt;strong&gt;商户签名错误&lt;/strong&gt;, 排查:&lt;/p&gt;
&lt;p&gt;前端:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;检查参数大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
timestamp: 0,                     // ** 小写 **
nonceStr: '',                     // S 大写
package: 'prepay_id=wx2015xxxx',  // 内容是否对了？
paySign: 'MD5',                   // 新版是 MD5
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后端:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;检查参与签名的参数大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
appId            // I 大写
timeStamp        // ** S 大写 **
nonceStr         // S 大写
package          // prepay_id=wx2015xxxx
signType         // 新版是 MD5
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://pay.weixin.qq.com/wiki/doc/api/index.php?chapter=4_3"&gt;签名算法&lt;/a&gt; 是否正确&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;微信支付&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; 模块发送请求时，如何使用商户证书?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cert = ('/path/to/apiclient_cert.pem', '/path/to/apiclient_key.pem')
requests.post(url, data=data, cert=cert)
&lt;/pre&gt;
&lt;p&gt;使用证书发送请求时，出现 &lt;tt class="docutils literal"&gt;UnicodeEncodeError&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
File &amp;quot;/xxx/lib/python2.7/ssl.py&amp;quot;, line 198, in send
v = self._sslobj.write(data)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 363-364: ordinal not in range(128)
&lt;/pre&gt;
&lt;p&gt;ssl data 不支持 unicode, data 参数不要传 &lt;tt class="docutils literal"&gt;unicode&lt;/tt&gt;, 改为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;utf-8&lt;/span&gt;&lt;/tt&gt; 编码字符串:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
xml = u'&amp;lt;xml&amp;gt;巴拉巴拉巴拉&amp;lt;xml&amp;gt;'
requests.post(url, data=xml, cert=cert)   # UnicodeEncodeError
改为
requests.post(url, data=xml.encode('utf8'), cert=cert)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;企业付款&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;参数错误:输入的商户号有误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;检查提交的参数名称是否有误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mch_appid         # ** 在其他支付 api 中参数的名称是 appid **
mchid             # ** 在其他支付 api 中参数的名称是 mch_id **
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="微信"></category></entry><entry><title>解决通过 ifttt 把 Feed 中的图片转发到 twritter 时，总是出现 "image not found" 的问题</title><link href="https://mozillazg.com/2015/05/fix-ifttt-feed-image-not-found.html" rel="alternate"></link><updated>2015-08-27T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-05-01:2015/05/fix-ifttt-feed-image-not-found.html</id><summary type="html">&lt;p&gt;之前使用 ifttt 把 Feed 中的图片转发到 twritter 时，总是出现 "image not found"。然后就不再使用 ifttt 转发图片了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image not found" src="/static/images/ifttt-image-not-found.png" /&gt;&lt;/p&gt;
&lt;p&gt;趁着今天给 &lt;a href="http://comic.mozillazg.com"&gt;comic.mozillazg.com&lt;/a&gt; 增加 Atom Feed 的功能的时候，研究了一下 ifttt 获取图片的规则。通过搜索后得知，ifttt 只会从文章内容的开头位置获取图片地址，如果获取不到的话，就 "image not found":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- bad: &amp;quot;image not found&amp;quot;  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;content&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;译自：http://explosm.net/comics/3908/&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; AT 2015-05-01 &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://tmp-images.qiniudn.com/comics/3908.you-should.zh-cn.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cyanide &amp;amp; Happiness #3908：你应该&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- good --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;content&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://tmp-images.qiniudn.com/comics/3908.you-should.zh-cn.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cyanide &amp;amp; Happiness #3908：你应该&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;译自：http://explosm.net/comics/3908/&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; AT 2015-05-01 &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ifttt/status/372166382172925952"&gt;https://twitter.com/ifttt/status/372166382172925952&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Excerpthttps://winwar.co.uk/2015/02/include-wordpress-posts-featured-image-rss-feed-excerpt/"&gt;How To Include Your WordPress Post’s Featured Image in a RSS Feed Excerpt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>修复无法启动 Oracle SQL Developer，提示：could not install some modules</title><link href="https://mozillazg.com/2014/11/fix-could-not-install-some-modules-when-start-Oracle-SQL-Developer.html" rel="alternate"></link><updated>2014-11-02T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2014-11-02:2014/11/fix-could-not-install-some-modules-when-start-Oracle-SQL-Developer.html</id><summary type="html">&lt;p&gt;今天启动 Oracle SQL Developer时，提示如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Warning - could not install some modules:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导致不能成功启动 Oracle SQL Developer。&lt;/p&gt;
&lt;p&gt;最后的解决办法是（ &lt;strong&gt;注意，这个办法会导致丢失所有之前定义的数据库连接配置&lt;/strong&gt; ）：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除 c:\Users\yourusername\AppData\Roaming\SQL Developer\ 目录下的 system4.0.0.12.84 文件夹&lt;/strong&gt; 。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.oracle.com/thread/2560920?start=0&amp;amp;tstart=0"&gt;Sql Developer 4.0 EA Winsdows 7 Could not insta... | Oracle Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>修复启动 sqldeveloper 时出现“Unable to create an instance of the Java Virtual Machine Located at path”错误</title><link href="https://mozillazg.com/2014/07/fix-Unable-to-create-an-instance-of-the-Java-Virtual-Machine-Located-at-path-error-for-oracle-sqldeveloper.html" rel="alternate"></link><updated>2014-07-17T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2014-07-17:2014/07/fix-Unable-to-create-an-instance-of-the-Java-Virtual-Machine-Located-at-path-error-for-oracle-sqldeveloper.html</id><summary type="html">&lt;p&gt;刚才打开 sqldeveloper 时提示如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Unable to create an instance of the Java Virtual Machine
Located at path:
x:\xxxx\jre\bin\client\jvm.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后的解决办法是：编辑 &lt;code&gt;sqldeveloper.exe&lt;/code&gt; 所在目录下的 &lt;code&gt;ide\bin\ide.conf&lt;/code&gt; 文件，
将 38 行左右的 &lt;code&gt;AddVMOption  -Xmx800M&lt;/code&gt; 改为 &lt;code&gt;AddVMOption -Xmx512M&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# AddVMOption  -Xmx800M
AddVMOption -Xmx512M
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pisceansheart.wordpress.com/2009/08/06/solution-to-unable-to-create-an-instance-of-the-java-virtual-machine-for-jdeveloper/"&gt;Solution to ‘Unable to Create an Instance of the Java Virtual Machine’ for JDeveloper | In Piscean's Heart &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="sqldeveloper"></category></entry><entry><title>给终端文字加点颜色和特效</title><link href="https://mozillazg.com/2013/08/ansi-escape-sequences.html" rel="alternate"></link><updated>2013-08-25T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-08-25:2013/08/ansi-escape-sequences.html</id><summary type="html">&lt;p&gt;这个叫做：ANSI Escape Sequences/Code 。&lt;/p&gt;
&lt;p&gt;文字特效相关的字符格式是：&lt;code&gt;ESC[#;#;....;#m&lt;/code&gt; ，其中 # 的取值见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;# 的值&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;python 代码&lt;/th&gt;
&lt;th&gt;截图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;00 或 0&lt;/td&gt;
&lt;td&gt;正常显示&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[00m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01 或 1&lt;/td&gt;
&lt;td&gt;粗体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[01m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;02 或 2&lt;/td&gt;
&lt;td&gt;模糊&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[02m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;03 或 3&lt;/td&gt;
&lt;td&gt;斜体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[03m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;04 或 4&lt;/td&gt;
&lt;td&gt;下划线&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[04m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/04.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;05 或 5&lt;/td&gt;
&lt;td&gt;闪烁（慢）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[05m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;06 或 6&lt;/td&gt;
&lt;td&gt;闪烁（快）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[06m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;07 或 7&lt;/td&gt;
&lt;td&gt;反转显示（前景色与背景色调过来）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[07m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/07.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;08 或 8&lt;/td&gt;
&lt;td&gt;隐藏&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[08m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/08.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[22m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;不斜体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[23m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;无下划线&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[24m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;不闪烁&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[25m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;不反转&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[26m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;不隐藏&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[27m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前景色&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;黑色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[30m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/30.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[31m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/31.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;绿色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[32m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/32.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;黄色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[33m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/33.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[34m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/34.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;品红/紫红&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[35m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/35.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;青色/蓝绿&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[36m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/36.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;白色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[37m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/37.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;xterm-256 色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[38;5;7m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/38.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;默认色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[39m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;背景色&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;黑色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[40m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/38.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[41m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/41.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;绿色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[42m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/42.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;黄色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[43m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/43.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[44m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/44.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;品红/紫红&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[45m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/45.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;青色/蓝绿&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[46m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/46.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;白色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[47m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/47.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;xterm-256 色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[48;5;7m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/48.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;默认色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[49m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--
https://github.com/robertknight/konsole/blob/master/tests/color-spaces.pl
Quoting &lt;https://github.com/robertknight/konsole/blob/master/user-doc/README.moreColors&gt;:
   ESC[ … 38;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt; … m Select RGB foreground color
   ESC[ … 48;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt; … m Select RGB background color

## 示例

print('\033[31m \033[44m' + 'some red text' + '\033[0;39m' + 'ab')
--&gt;

&lt;p&gt;同时指定背景及前景色： &lt;code&gt;'\033[47;31m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/47-31.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.isthe.com/chongo/tech/comp/ansi_escapes.html"&gt;ANSI Escape Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape code - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pixelbeat.org/docs/terminal_colours/"&gt;Terminal colour highlights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Xterm"&gt;xterm - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ansi"></category><category term="color"></category><category term="terminal"></category></entry><entry><title>Cygwin 中的软件包管理工具： apt-cyg</title><link href="https://mozillazg.com/2013/06/cygwin-install-packages-by-apt-cyg.html" rel="alternate"></link><updated>2013-06-23T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-06-23:2013/06/cygwin-install-packages-by-apt-cyg.html</id><summary type="html">&lt;p&gt;apt-cyg 可以在 Cygwin 中实现类似 linux 下的 &lt;code&gt;yum&lt;/code&gt; 或 &lt;code&gt;apt-get&lt;/code&gt; 的功能。&lt;/p&gt;
&lt;h2&gt;主页&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/apt-cyg/"&gt;http://code.google.com/p/apt-cyg/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn --force &lt;span class="nb"&gt;export&lt;/span&gt; http://apt-cyg.googlecode.com/svn/trunk/ /bin/
$ chmod +x /bin/apt-cyg
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg install &amp;lt;package names&amp;gt;      # 安装软件包&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-cyg install bind-utils
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg remove &amp;lt;package names&amp;gt;      # 移除软件包&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg update     # 更新 setup.ini 文件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg show      # 列出已安装的软件包&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg find &amp;lt;pattern(s)&amp;gt;     # 查找名称匹配的软件包&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg describe &amp;lt;pattern(s)&amp;gt;     # 查找描述匹配的软件包&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg packageof &amp;lt;commands or files&amp;gt;     # 定位命令或文件属于哪个软件包&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-cyg packageof dig
Found usr/bin/dig in the package bind-utils
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg     # 显示帮助信息&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-cyg
apt-cyg: Installs and removes Cygwin packages.
&lt;span class="s2"&gt;&amp;quot;apt-cyg install &amp;lt;package names&amp;gt;&amp;quot;&lt;/span&gt; to install packages
&lt;span class="s2"&gt;&amp;quot;apt-cyg remove &amp;lt;package names&amp;gt;&amp;quot;&lt;/span&gt; to remove packages
&lt;span class="s2"&gt;&amp;quot;apt-cyg update&amp;quot;&lt;/span&gt; to update setup.ini
&lt;span class="s2"&gt;&amp;quot;apt-cyg show&amp;quot;&lt;/span&gt; to show installed packages
&lt;span class="s2"&gt;&amp;quot;apt-cyg find &amp;lt;patterns&amp;gt;&amp;quot;&lt;/span&gt; to find packages matching patterns
&lt;span class="s2"&gt;&amp;quot;apt-cyg describe &amp;lt;patterns&amp;gt;&amp;quot;&lt;/span&gt; to describe packages matching patterns
&lt;span class="s2"&gt;&amp;quot;apt-cyg packageof &amp;lt;commands or files&amp;gt;&amp;quot;&lt;/span&gt; to locate parent packages
Options:
--mirror, -m &amp;lt;url&amp;gt; : &lt;span class="nb"&gt;set&lt;/span&gt; mirror
--cache, -c &amp;lt;dir&amp;gt;  : &lt;span class="nb"&gt;set&lt;/span&gt; cache
--file, -f &amp;lt;file&amp;gt;  : &lt;span class="nb"&gt;read&lt;/span&gt; package names from file
--noupdate, -u     : don&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t update setup.ini from mirror
--help
--version
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Cygwin"></category></entry><entry><title>pelican 使用笔记</title><link href="https://mozillazg.com/2013/03/pelican-notes.html" rel="alternate"></link><updated>2013-03-04T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-03-04:2013/03/pelican-notes.html</id><summary type="html">&lt;p&gt;记录一些使用 Pelican 写博客的经验。&lt;/p&gt;
&lt;h2&gt;Markdown&lt;/h2&gt;
&lt;h3&gt;多级列表&lt;/h3&gt;
&lt;p&gt;官方的 Markdown 语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* list
  * sublist
  * sublist
* list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelican 使用的是 python-markdown 来解析 markdown 文件，
而 python-markdown 的关于多级列表的语法跟官方的有点不一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* list
    * sublist
    * sublist
* list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;子列表与父列表之间的对齐方式是：至少空出4个空格或1一个 Tab 键。
官方的语法兼容 python-markdown 的语法，所以不要担心兼容性。&lt;/p&gt;
&lt;h3&gt;语法高亮&lt;/h3&gt;
&lt;p&gt;python-markdown 使用 pygments 来实现语法高亮的功能，并且支持指定编程语言。&lt;/p&gt;
&lt;p&gt;比如，指定代码用的是 Python 编程语言：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:::python
print &amp;#39;hello, world&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello, world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我用的比较多的语言标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:::text&lt;/li&gt;
&lt;li&gt;:::python&lt;/li&gt;
&lt;li&gt;:::django&lt;/li&gt;
&lt;li&gt;:::html+django&lt;/li&gt;
&lt;li&gt;:::bash&lt;/li&gt;
&lt;li&gt;:::console&lt;/li&gt;
&lt;li&gt;:::nginx&lt;/li&gt;
&lt;li&gt;:::apacheconf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的语言标记，可以通过查看网站 &lt;a href="http://pygments.org/demo/"&gt;Pygments — Python syntax highlighter&lt;/a&gt; 的源代码操作相关的语言标记（查看 id 为 flt_lang 的 select 的 option 值）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：该语法不兼容官方 markdown 语法。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/"&gt;Pelican — Pelican documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite Extension — Python Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="markdown"></category><category term="pygments"></category><category term="python-markdown"></category></entry><entry><title>更改 phpMyAdmin 默认访问端口(apache2)</title><link href="https://mozillazg.com/2013/02/change-phpmyadmin-default-visit-port.html" rel="alternate"></link><updated>2013-02-27T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-02-27:2013/02/change-phpmyadmin-default-visit-port.html</id><summary type="html">&lt;p&gt;将访问 phpMyAdmin 的端口从默认的 80 改为 8081 。&lt;/p&gt;
&lt;p&gt;本文的 phpmyadmin 目录：&lt;code&gt;/var/www/phpmyadmin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编辑 apache 配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vi /etc/apache2/sites-available/phpmyadmin&lt;/span&gt;

&amp;lt;VirtualHost *:8081&amp;gt;
    ServerName 127.0.0.1
    DocumentRoot /var/www/phpmyadmin
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置 apache 监听 8081 端口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vi /etc/apache2/ports.conf&lt;/span&gt;

&lt;span class="c1"&gt;# 添加&lt;/span&gt;
NameVirtualHost *:8081
Listen 8081
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启 apache 服务：&lt;code&gt;service apache2 restart&lt;/code&gt;，
现在可以通过 http://ip:8081/phpmyadmin/ 访问 phpMyAdmin 了。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ubuntuforums.org/showthread.php?t=1329607"&gt;PHPMyAdmin Port Change - Ubuntu Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="phpmyadmin"></category><category term="mysql"></category><category term="ubuntu"></category></entry><entry><title>修改 pelican 3.1 使之支持中文文件夹作为分类目录</title><link href="https://mozillazg.com/2013/01/fix-pelican-use-chinese-folder-as-category.html" rel="alternate"></link><updated>2013-01-31T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-01-31:2013/01/fix-pelican-use-chinese-folder-as-category.html</id><summary type="html">&lt;p&gt;前提：&lt;/p&gt;
&lt;p&gt;windows + pelican 3.1 + python 2.6    &lt;br /&gt;
并且 pelican 配置文件中设置了 &lt;code&gt;USE_FOLDER_AS_CATEGORY = True&lt;/code&gt;（默认为 True，只要不设置为 False 即可）&lt;/p&gt;
&lt;p&gt;默认情况下，pelican 不支持中文文件夹作为分类目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;d:\myblog&amp;gt;pelican content -o output -s pelicanconf.py -D&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;

&lt;span class="go"&gt;CRITICAL: &amp;#39;utf8&amp;#39; codec can&amp;#39;t decode byte 0xd3 in position 2: invalid continuation byte&lt;/span&gt;
&lt;span class="go"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\Scripts\pelican-script.py&amp;quot;, line 9, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    load_entry_point(&amp;#39;pelican==3.1&amp;#39;, &amp;#39;console_scripts&amp;#39;, &amp;#39;pelican&amp;#39;)()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\site-packages\pelican\__init__.py&amp;quot;, line 319, in main&lt;/span&gt;
&lt;span class="go"&gt;    pelican.run()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\site-packages\pelican\__init__.py&amp;quot;, line 152, in run&lt;/span&gt;
&lt;span class="go"&gt;    p.generate_context()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\site-packages\pelican\generators.py&amp;quot;, line 337, in generate_context&lt;/span&gt;
&lt;span class="go"&gt;    .decode(&amp;#39;utf-8&amp;#39;)&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\encodings\utf_8.py&amp;quot;, line 16, in decode&lt;/span&gt;
&lt;span class="go"&gt;    return codecs.utf_8_decode(input, errors, True)&lt;/span&gt;
&lt;span class="go"&gt;UnicodeDecodeError: &amp;#39;utf8&amp;#39; codec can&amp;#39;t decode byte 0xd3 in position 2: invalid continuation byte&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从错误信息中我们可以看到 pelican 对文件夹名称默认按 utf8 编码进行解码，而在 windows 下文件（夹）名称默认是按 gbk 进行编码的，所以就出现了编码错误。&lt;/p&gt;
&lt;p&gt;下面我们来修复这个错误。&lt;/p&gt;
&lt;p&gt;编辑文件 &lt;code&gt;C:\Python26\lib\site-packages\pelican\generators.py&lt;/code&gt; 进行以下两步操作即可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先导入 sys 模块：&lt;code&gt;import sys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后编辑第 338 行左右的&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;\
           &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;\
           &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此处的修改是为了让程序使用系统默认的输入编码（简体中文版 Windows 下默认是 gbk）进行解码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进行相关修改后，再次执行 &lt;code&gt;pelican content -o output -s pelicanconf.py -D&lt;/code&gt; 生成 html 文件，执行过程一切顺利。&lt;/p&gt;
&lt;p&gt;但也有一个不完美的地方：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-issue-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-issue-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然在浏览器中这个不会是乱码，但看起来还是有点不爽。
下面我们要将它变成中文拼音，这样就不会乱码了。&lt;/p&gt;
&lt;p&gt;继续编辑 generators.py 文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入相关模块：&lt;code&gt;from pelican.utils import slugify&lt;/code&gt; 。
   这个模块的作用是将非 ASCII 字符转换为 ASCII 字符，比如，将 &lt;code&gt;中国&lt;/code&gt; 转换为 &lt;code&gt;zhong-guo&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;将 199 行左右的&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arts&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;arts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arts&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;arts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改后的效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-fixed-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-fixed-02.png" /&gt;&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category></entry><entry><title>使用 Pelican 生成静态博客</title><link href="https://mozillazg.com/2013/01/use-pelican-to-generate-static-blog.html" rel="alternate"></link><updated>2013-01-15T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-01-15:2013/01/use-pelican-to-generate-static-blog.html</id><summary type="html">&lt;h2&gt;安装 Pelican&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sudo pip install pelican&lt;/span&gt;
&lt;span class="go"&gt;sudo pip install webassets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;h3&gt;主题&lt;/h3&gt;</summary><category term="pelican"></category></entry></feed>