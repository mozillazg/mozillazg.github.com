<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mozillazg's Blog</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/others.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2024-11-02T00:00:00+00:00</updated><entry><title>Major Changes in ptcpdump versions 1.16 to 1.26</title><link href="https://mozillazg.com/2024/11/whats-new-ptcpdump-v1.16-v1.26-en.html" rel="alternate"></link><published>2024-11-02T00:00:00+00:00</published><updated>2024-11-02T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2024-11-02:2024/11/whats-new-ptcpdump-v1.16-v1.26-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It has been several months since the
&lt;a class="reference external" href="https://mozillazg.com/2024/07/ebpf-ptcpdump-capturing-the-network-traffic-of-a-process-or-container-or-pod.html"&gt;last introduction&lt;/a&gt;
of the &lt;a class="reference external" href="https://github.com/mozillazg/ptcpdump"&gt;ptcpdump&lt;/a&gt; project.
Over these past months, I have been continuously developing this project.
This article will introduce the major changes released from the previous v1.16
version to the latest v1.26 version in chronological order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="main-changes"&gt;
&lt;h2 id="hidmain-changes"&gt;Main changes&lt;a class="headerlink" href="#hidmain-changes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="compatible-with-older-versions-of-tencentos-opencloudos-system"&gt;
&lt;h3 id="hidcompatible-with-older-versions-of-tencentos-opencloudos-system"&gt;Compatible with older versions of TencentOS/OpenCloudOS system&lt;a class="headerlink" href="#hidcompatible-with-older-versions-of-tencentos-opencloudos-system" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Base on user &lt;a class="reference external" href="https://github.com/mozillazg/ptcpdump/issues/89"&gt;feedback&lt;/a&gt;
the older versions were not compatible with previous editions of TencentOS/OpenCloudOS.
However, the current update now includes support for the following TencentOS/OpenCloudOS
releases: OpenCloudOS 7/8/9 and TencentOS Server 2.4/2.6/3.1/3.2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-parent-process-information-to-the-output"&gt;
&lt;h3 id="hidadd-parent-process-information-to-the-output"&gt;Add parent process information to the output&lt;a class="headerlink" href="#hidadd-parent-process-information-to-the-output" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Old version:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:44:41.529003 eth0 In IP (tos 0x4, ttl 45, id 45428, offset 0, flags [DF], proto TCP (6), length 52)
    139.178.84.217.443 &amp;gt; 172.19.0.2.42606: Flags [.], cksum 0x5284, seq 3173118145, ack 1385712707, win 118, options [nop,nop,TS val 134560683 ecr 1627716996], length 0
    Process (pid 553587, cmd /usr/bin/wget, args wget kernel.org)
    Container (...)
    Pod (...)
&lt;/pre&gt;
&lt;p&gt;Latest update:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:44:41.529003 eth0 In IP (tos 0x4, ttl 45, id 45428, offset 0, flags [DF], proto TCP (6), length 52)
    139.178.84.217.443 &amp;gt; 172.19.0.2.42606: Flags [.], cksum 0x5284, seq 3173118145, ack 1385712707, win 118, options [nop,nop,TS val 134560683 ecr 1627716996], length 0
    Process (pid 553587, cmd /usr/bin/wget, args wget kernel.org)
    ParentProc (pid 553296, cmd /bin/sh, args sh)
    Container (...)
    Pod (...)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="support-using-an-older-version-of-kubernetes-environment-with-dockershim"&gt;
&lt;h3 id="hidsupport-using-an-older-version-of-kubernetes-environment-with-dockershim"&gt;Support using an older version of Kubernetes environment with Dockershim&lt;a class="headerlink" href="#hidsupport-using-an-older-version-of-kubernetes-environment-with-dockershim" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The earlier release couldn't gather Pod data in legacy Kubernetes setups running
Dockershim (specifically CRI v1alpha2). The latest update is now compatible with such environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fix-for-filtering-by-pod-name-containing-periods"&gt;
&lt;h3 id="hidfix-for-filtering-by-pod-name-containing-periods"&gt;Fix for filtering by Pod name containing periods&lt;a class="headerlink" href="#hidfix-for-filtering-by-pod-name-containing-periods" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the past, when filtering by Pod name, names with periods were not supported.
The latest version now allows names with periods to be filtered:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--pod-name foo.bar.default
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="fix-the-scenario-where-filtering-by-pod-does-not-support-pods-with-multiple-containers"&gt;
&lt;h3 id="hidfix-the-scenario-where-filtering-by-pod-does-not-support-pods-with-multiple-containers"&gt;Fix the scenario where filtering by Pod does not support Pods with multiple containers&lt;a class="headerlink" href="#hidfix-the-scenario-where-filtering-by-pod-does-not-support-pods-with-multiple-containers" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In previous versions, filtering by Pod did not support scenarios where Pods contain multiple containers.
This issue has been resolved in the new version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supporting-the-concurrent-execution-of-multiple-ptcpdump-instances"&gt;
&lt;h3 id="hidsupporting-the-concurrent-execution-of-multiple-ptcpdump-instances"&gt;Supporting the Concurrent Execution of Multiple ptcpdump Instances&lt;a class="headerlink" href="#hidsupporting-the-concurrent-execution-of-multiple-ptcpdump-instances" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Previously, only one ptcpdump process could run at a time. Running multiple ptcpdump processes simultaneously
would cause the old process to malfunction (capture no traffic). The latest version has resolved this issue.
In the new version, multiple ptcpdump processes can run concurrently without interfering
with each other or causing problems with packet capture for other processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="support-filtering-multiple-process-pid-simultaneously"&gt;
&lt;h3 id="hidsupport-filtering-multiple-process-pid-simultaneously"&gt;Support Filtering Multiple Process PID Simultaneously&lt;a class="headerlink" href="#hidsupport-filtering-multiple-process-pid-simultaneously" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--pid&lt;/span&gt;&lt;/tt&gt; parameter supports filtering multiple PIDs simultaneously:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--pid pid1 --pid pid2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="new-parameters-micro-nano-time-stamp-precision-added-to-control-the-time-format-in-the-output"&gt;
&lt;h3 id="hidnew-parameters-micro-nano-time-stamp-precision-added-to-control-the-time-format-in-the-output"&gt;New parameters --micro, --nano, --time-stamp-precision added to control the time format in the output&lt;a class="headerlink" href="#hidnew-parameters-micro-nano-time-stamp-precision-added-to-control-the-time-format-in-the-output" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;New parameters &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--micro&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--nano&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--time-stamp-precision&lt;/span&gt;&lt;/tt&gt; have been added to control the
time format in the output, mirroring the functionality and usage of tcpdump.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--micro&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--time-stamp-precision=micro&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:36:05.701978 IP 10.0.2.15.22 &amp;gt; 10.0.2.2.59874: Flags [P.], seq 1370707216:1370707292, ack 4569736, win 62780, length 76
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--nano&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--time-stamp-precision=nano&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:36:05.701978488 IP 10.0.2.15.22 &amp;gt; 10.0.2.2.59874: Flags [P.], seq 1370707216:1370707292, ack 4569736, win 62780, length 76
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="add-parameters-a-x-xx-x-xx-to-control-the-output-format-of-the-data"&gt;
&lt;h3 id="hidadd-parameters-a-x-xx-x-xx-to-control-the-output-format-of-the-data"&gt;Add parameters -A, -x, -xx, -X, -XX to control the output format of the data&lt;a class="headerlink" href="#hidadd-parameters-a-x-xx-x-xx-to-control-the-output-format-of-the-data" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Add functionality and usage comparison of tcpdump flags &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-xx&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-XX&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
E..nHL&amp;#64;.&amp;#64;...
..........P.G..vbbEP.......GET / HTTP/1.1
Host: qq.com
User-Agent: curl/7.81.0
Accept: */*
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  4500 006e 484c 4000 4006 1bc4 0a00 020f
        0x0010:  cbcd fe9d d0e6 0050 c447 8e98 7662 6245
        0x0020:  5018 faf0 d6da 0000 4745 5420 2f20 4854
        0x0030:  5450 2f31 2e31 0d0a 486f 7374 3a20 7171
        0x0040:  2e63 6f6d 0d0a 5573 6572 2d41 6765 6e74
        0x0050:  3a20 6375 726c 2f37 2e38 312e 300d 0a41
        0x0060:  6363 6570 743a 202a 2f2a 0d0a 0d0a
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-xx&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  0050 56eb bc4e 000c 298e 31f3 0800 4500
        0x0010:  006e 484c 4000 4006 1bc4 0a00 020f cbcd
        0x0020:  fe9d d0e6 0050 c447 8e98 7662 6245 5018
        0x0030:  faf0 d6da 0000 4745 5420 2f20 4854 5450
        0x0040:  2f31 2e31 0d0a 486f 7374 3a20 7171 2e63
        0x0050:  6f6d 0d0a 5573 6572 2d41 6765 6e74 3a20
        0x0060:  6375 726c 2f37 2e38 312e 300d 0a41 6363
        0x0070:  6570 743a 202a 2f2a 0d0a 0d0a
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  4500 006e 484c 4000 4006 1bc4 0a00 020f  E..nHL&amp;#64;.&amp;#64;.......
        0x0010:  cbcd fe9d d0e6 0050 c447 8e98 7662 6245  .......P.G..vbbE
        0x0020:  5018 faf0 d6da 0000 4745 5420 2f20 4854  P.......GET / HT
        0x0030:  5450 2f31 2e31 0d0a 486f 7374 3a20 7171  TP/1.1..Host: qq
        0x0040:  2e63 6f6d 0d0a 5573 6572 2d41 6765 6e74  .com..User-Agent
        0x0050:  3a20 6375 726c 2f37 2e38 312e 300d 0a41  : curl/7.81.0..A
        0x0060:  6363 6570 743a 202a 2f2a 0d0a 0d0a       ccept: */*....
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-XX&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  0050 56eb bc4e 000c 298e 31f3 0800 4500  .PV..N..).1...E.
        0x0010:  006e 484c 4000 4006 1bc4 0a00 020f cbcd  .nHL&amp;#64;.&amp;#64;.........
        0x0020:  fe9d d0e6 0050 c447 8e98 7662 6245 5018  .....P.G..vbbEP.
        0x0030:  faf0 d6da 0000 4745 5420 2f20 4854 5450  ......GET / HTTP
        0x0040:  2f31 2e31 0d0a 486f 7374 3a20 7171 2e63  /1.1..Host: qq.c
        0x0050:  6f6d 0d0a 5573 6572 2d41 6765 6e74 3a20  om..User-Agent:
        0x0060:  6375 726c 2f37 2e38 312e 300d 0a41 6363  curl/7.81.0..Acc
        0x0070:  6570 743a 202a 2f2a 0d0a 0d0a            ept: */*....
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="create-docker-images-for-compiling-and-running-ptcpdump"&gt;
&lt;h3 id="hidcreate-docker-images-for-compiling-and-running-ptcpdump"&gt;Create Docker Images for Compiling and Running ptcpdump&lt;a class="headerlink" href="#hidcreate-docker-images-for-compiling-and-running-ptcpdump" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Create a Docker image for compiling programs: &lt;tt class="docutils literal"&gt;quay.io/ptcpdump/develop:latest&lt;/tt&gt; and
a Docker image for running ptcpdump through Docker: &lt;tt class="docutils literal"&gt;quay.io/ptcpdump/ptcpdump:latest&lt;/tt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Compile eBPF programs and ptcpdump programs as needed using &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;build-bpf-via-docker&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;build-via-docker&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You can run ptcpdump through Docker using a command similar to the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
docker run --privileged --rm -t --net=host --pid=host \
  -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
  quay.io/ptcpdump/ptcpdump:latest ptcpdump -i any -c 2 tcp
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-new-feature-generating-corresponding-tls-key-log-file-when-capturing-go-program-s-network-traffic"&gt;
&lt;h3 id="hidexperimental-new-feature-generating-corresponding-tls-key-log-file-when-capturing-go-program-s-network-traffic"&gt;Experimental New Feature: Generating Corresponding TLS Key Log File When Capturing Go Program's Network Traffic&lt;a class="headerlink" href="#hidexperimental-new-feature-generating-corresponding-tls-key-log-file-when-capturing-go-program-s-network-traffic" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A new experimental feature has been implemented in the latest version:
generating the corresponding TLS Key Log file when capturing Go program's network traffic.&lt;/p&gt;
&lt;p&gt;The TLS Key Log file, also known as &lt;a class="reference external" href="https://tlswg.org/sslkeylogfile/draft-ietf-tls-keylogfile.html"&gt;SSLKEYLOGFILE&lt;/a&gt; ,
corresponds to the pre-master secret configuration in Wireshark.
Third-party programs can decrypt captured TLS traffic using the information recorded in this file.&lt;/p&gt;
&lt;p&gt;Please note: This feature is experimental and is only supported by Go programs compiled with version 1.18 or above (supports stripped binary).
It also requires running the target Go program via ptcpdump.&lt;/p&gt;
&lt;p&gt;You can try out this feature using the following two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--write-keylog-file&lt;/span&gt;&lt;/tt&gt; argument or the &lt;tt class="docutils literal"&gt;SSLKEYLOGFILE&lt;/tt&gt; environment variable to specify the location
where the SSLKEYLOGFILE file will be saved:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ptcpdump -i any --write-keylog-file /tmp/keylogfile.txt -w /tmp/go.pcapng -- ./gohttpapp
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;By specifying the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--embed-keylog-to-pcapng&lt;/span&gt;&lt;/tt&gt; parameter, embed the contents of the SSLKEYLOGFILE into
the saved data in the pcapng format file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ptcpdump -i any --embed-keylog-to-pcapng -w /tmp/gotls.pcapng -- ./gohttpapp
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Later, you can decrypt the saved TLS data using the recorded SSLKEYLOGFILE content with Wireshark or tshark:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo tshark -r /tmp/go.pcapng -o tls.keylog_file:/tmp/keylogfile.txt | grep HTTP -B 2
Running as user &amp;quot;root&amp;quot; and group &amp;quot;root&amp;quot;. This could be dangerous.
   18 0.518380586    10.0.2.15 → 13.35.238.63 TLSv1.3 118 Change Cipher Spec, Finished
   19 0.519208290 13.35.238.63 → 10.0.2.15    TCP 60 443 → 47606 [ACK] Seq=5508 Ack=340 Win=64240 Len=0
   20 0.519914720    10.0.2.15 → 13.35.238.63 HTTP 179 GET /foo/bar HTTP/1.1


$ tshark -r /tmp/gotls.pcapng | grep HTTP -B 2
   20 0.525662563    10.0.2.15 → 13.35.238.114 TLSv1.3 118 Change Cipher Spec, Finished
   21 0.526138582 13.35.238.114 → 10.0.2.15    TCP 60 443 → 37618 [ACK] Seq=5987 Ack=340 Win=64240 Len=0
   22 0.526977836    10.0.2.15 → 13.35.238.114 HTTP 179 GET /foo/bar HTTP/1.1
&lt;/pre&gt;
&lt;p&gt;ptcpdump plans to eventually have built-in support for decrypting TLS data using SSLKEYLOGFILE
and to automatically decrypt TLS data in real-time while capturing packets.
Currently, this can only be achieved using third-party tools for decrypting TLS data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="output-tcp-options-by-default"&gt;
&lt;h3 id="hidoutput-tcp-options-by-default"&gt;Output TCP options by default&lt;a class="headerlink" href="#hidoutput-tcp-options-by-default" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The new version will by default output TCP Options information:&lt;/p&gt;
&lt;p&gt;Old version:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:09:54.324433 ens33 curl.26570 Out IP (..).43772 &amp;gt; (..).443: Flags [S], seq 1674193846, win 64240, length 0, ParentProc [ptcpdump.26560]
&lt;/pre&gt;
&lt;p&gt;Latest version:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:09:54.324433 ens33 curl.26570 Out IP (..).43772 &amp;gt; (..).443: Flags [S], seq 1674193846, win 64240, options [mss 1460,sackOK,TS val 2107137325 ecr 0,nop,wscale 7], length 0, ParentProc [ptcpdump.26560]
&lt;/pre&gt;
&lt;p&gt;Moreover, the latest update includes support for TCP SACK (Selective Acknowledgment) and TFO (TCP Fast Open).&lt;/p&gt;
&lt;p&gt;SACK:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
19:03:36.220872 IP6 dead:beef:2::2.35288 &amp;gt; dead:beef:2::1.10029: Flags [.], seq 731670714, ack 2274465610, win 201, options [nop,nop,TS val 1253137130 ecr 837820024,nop,nop,sack 1 {2274467010:2274483378},mptcp 12 dss ack 16301812255838552430], length 0
&lt;/pre&gt;
&lt;p&gt;TFO:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
19:22:26.586851 IP6 dead:beef:1::2.54040 &amp;gt; dead:beef:1::1.10056: Flags [S], seq 271661201, win 64800, options [mss 1440,sackOK,TS val 2947503028 ecr 0,nop,wscale 7,tfo  cookiereq,nop,nop,mptcp 4 capable v1 flags [H]], length 0
19:22:26.591736 IP6 dead:beef:1::1.10056 &amp;gt; dead:beef:1::2.54040: Flags [S.], seq 1229575956, ack 271661202, win 64260, options [mss 1440,nop,nop,sackOK,nop,wscale 7,tfo  cookie 29b3cc66639d427d,nop,nop,mptcp 12 capable v1 flags [H] {0xc87438912bc26cb7}], length 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="output-the-mptcp-information-in-the-tcp-options"&gt;
&lt;h3 id="hidoutput-the-mptcp-information-in-the-tcp-options"&gt;Output the MPTCP information in the TCP Options&lt;a class="headerlink" href="#hidoutput-the-mptcp-information-in-the-tcp-options" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;According to the &lt;a class="reference external" href="https://github.com/mozillazg/ptcpdump/issues/148"&gt;requirement&lt;/a&gt; from
the MPTCP (MultiPath TCP) community, support for MPTCP should be added:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
15:31:51.696224 IP 10.0.1.2.60958 &amp;gt; 10.0.1.1.10004: Flags [S], seq 3019570341, win 64240, options [mss 1460,sackOK,TS val 1007819908 ecr 0,nop,wscale 7,mptcp 4 capable v1 flags [H]], length 0
15:31:51.696346 IP 10.0.1.1.10004 &amp;gt; 10.0.1.2.60958: Flags [S.], seq 2367868313, ack 3019570342, win 65160, options [mss 1460,sackOK,TS val 162498895 ecr 1007819908,nop,wscale 7,mptcp 12 capable v1 flags [H] {0x8ea1df6e0d588003}], length 0
15:31:51.696587 IP 10.0.1.2.60958 &amp;gt; 10.0.1.1.10004: Flags [.], seq 3019570342, ack 2367868314, win 502, options [nop,nop,TS val 1007819909 ecr 162498895,mptcp 20 capable v1 flags [H] {0x465bcd01b5d78120,0x8ea1df6e0d588003}], length 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="add-a-new-parameter-netns-to-support-capturing-network-interfaces-in-other-network-namespaces"&gt;
&lt;h3 id="hidadd-a-new-parameter-netns-to-support-capturing-network-interfaces-in-other-network-namespaces"&gt;Add a new parameter --netns to support capturing network interfaces in other network namespaces&lt;a class="headerlink" href="#hidadd-a-new-parameter-netns-to-support-capturing-network-interfaces-in-other-network-namespaces" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The previous version only supported capturing network interfaces in the current network namespace.
The new version now supports capturing network interfaces in other network namespaces
by adding the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--netns&lt;/span&gt;&lt;/tt&gt; parameter:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ptcpdump -i lo --netns /run/netns/foobar
sudo ptcpdump -i any --netns /run/netns/foobar
sudo ptcpdump -i any --netns /proc/26/ns/net
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pcapng-format-enhancement-reading-writing-network-interface-names-and-inbound-outbound-information"&gt;
&lt;h3 id="hidpcapng-format-enhancement-reading-writing-network-interface-names-and-inbound-outbound-information"&gt;PcapNg format enhancement: reading/writing network interface names and Inbound/Outbound information&lt;a class="headerlink" href="#hidpcapng-format-enhancement-reading-writing-network-interface-names-and-inbound-outbound-information" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In previous versions, using &lt;tt class="docutils literal"&gt;ptcpdump &lt;span class="pre"&gt;-r&lt;/span&gt; &amp;lt;file.pcapng&amp;gt;&lt;/tt&gt; to read a pcapng file did not display
the recorded network interface names and Inbound/Outbound information.
This issue has been resolved in the new version:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ptcpdump -r demo.pcapng
14:36:35.880947 ens33 curl.244103 Out IP 10.0.2.15.37668 &amp;gt; 114.114.114.114.53: 44427+ A? qq.com. (24), ParentProc [ptcpdump.244094]
14:36:35.882099 ens33 curl.244103 Out IP 10.0.2.15.37668 &amp;gt; 114.114.114.114.53: 31415+ AAAA? qq.com. (24), ParentProc [ptcpdump.244094]
14:36:35.954613 ens33 curl.244103 In IP 114.114.114.114.53 &amp;gt; 10.0.2.15.37668: 44427 3/0/0 A 203.205.254.157, A 113.108.81.189, A 123.150.76.218 (72), ParentProc [ptcpdump.244094]
&lt;/pre&gt;
&lt;p&gt;When saving the captured traffic information as a PcapNg format file, the new version will automatically
write Inbound/Outbound information (previous versions already wrote network interface information),
thus supporting the epb_flags (&lt;a class="reference external" href="https://www.ietf.org/archive/id/draft-tuexen-opsawg-pcapng-05.html#name-enhanced-packet-block-flags"&gt;Enhanced Packet Block Flags Word&lt;/a&gt; )
flag for the PcapNg format.&lt;/p&gt;
&lt;p&gt;If you have any additional improvements or new feature suggestions for ptcpdump,
feel free to leave a comment in the comments section or project issues.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="ptcpdump"></category></entry><entry><title>ptcpdump v1.16 ~ v1.26 的主要变更内容</title><link href="https://mozillazg.com/2024/11/whats-new-ptcpdump-v1.16-v1.26.html" rel="alternate"></link><published>2024-11-02T00:00:00+00:00</published><updated>2024-11-02T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2024-11-02:2024/11/whats-new-ptcpdump-v1.16-v1.26.html</id><summary type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2 id="hidsection-1"&gt;前言&lt;a class="headerlink" href="#hidsection-1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;距离 &lt;a class="reference external" href="https://mozillazg.com/2024/07/ebpf-ptcpdump-capturing-the-network-traffic-of-a-process-or-container-or-pod.html"&gt;上次首次介绍&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/mozillazg/ptcpdump"&gt;ptcpdump&lt;/a&gt; 项目已经过去好几个月了，
最近这几个月我一直在持续开发这个项目，
本文将按变更顺序介绍一下从上次的 v1.16 版本到最新的 v1.26 版本期间所发布的主要变更内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2 id="hidsection-2"&gt;主要变更内容&lt;a class="headerlink" href="#hidsection-2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="tencentos-opencloudos"&gt;
&lt;h3 id="hidtencentos-opencloudos"&gt;兼容老版本的 TencentOS/OpenCloudOS 系统&lt;a class="headerlink" href="#hidtencentos-opencloudos" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;根据用户 &lt;a class="reference external" href="https://github.com/mozillazg/ptcpdump/issues/89"&gt;反馈&lt;/a&gt; ，
之前的版本无法在老版本的 TencentOS/OpenCloudOS 上运行，
当前最新版本已经支持了如下 TencentOS/OpenCloudOS 系统版本：
OpenCloudOS 7/8/9 and TencentOS Server 2.4/2.6/3.1/3.2 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h3 id="hidsection-3"&gt;在输出中增加父进程信息&lt;a class="headerlink" href="#hidsection-3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;老版本:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:44:41.529003 eth0 In IP (tos 0x4, ttl 45, id 45428, offset 0, flags [DF], proto TCP (6), length 52)
    139.178.84.217.443 &amp;gt; 172.19.0.2.42606: Flags [.], cksum 0x5284, seq 3173118145, ack 1385712707, win 118, options [nop,nop,TS val 134560683 ecr 1627716996], length 0
    Process (pid 553587, cmd /usr/bin/wget, args wget kernel.org)
    Container (...)
    Pod (...)
&lt;/pre&gt;
&lt;p&gt;新版本:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:44:41.529003 eth0 In IP (tos 0x4, ttl 45, id 45428, offset 0, flags [DF], proto TCP (6), length 52)
    139.178.84.217.443 &amp;gt; 172.19.0.2.42606: Flags [.], cksum 0x5284, seq 3173118145, ack 1385712707, win 118, options [nop,nop,TS val 134560683 ecr 1627716996], length 0
    Process (pid 553587, cmd /usr/bin/wget, args wget kernel.org)
    ParentProc (pid 553296, cmd /bin/sh, args sh)
    Container (...)
    Pod (...)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="dockershim-kubernetes"&gt;
&lt;h3 id="hiddockershim-kubernetes"&gt;支持使用 Dockershim 的老版本 Kubernetes 环境&lt;a class="headerlink" href="#hiddockershim-kubernetes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;之前的版本无法在使用 Dockershim （准确的说是基于 CRI v1alpha2）的老版本 Kubernetes 环境中获取 Pod 信息，新版本已兼容这种环境。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pod"&gt;
&lt;h3 id="hidpod"&gt;修复按 Pod 名称过滤时，无法支持包含点号的名称&lt;a class="headerlink" href="#hidpod" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;之前的版本中按 Pod 名称过滤时，过滤的名称不能包含英文点号，新版本已兼容包含点号的名称:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--pod-name foo.bar.default
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pod-pod"&gt;
&lt;h3 id="hidpod-pod"&gt;修复按 Pod 过滤时，无法支持包含多个容器的 Pod 的场景&lt;a class="headerlink" href="#hidpod-pod" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;之前的版本中按 Pod 过滤时，无法支持 Pod 中存在多个容器的场景，新版本已修复该问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ptcpdump"&gt;
&lt;h3 id="hidptcpdump"&gt;支持同时运行多个 ptcpdump 实例&lt;a class="headerlink" href="#hidptcpdump" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;之前的版本同时只能运行一个 ptcpdump 进程，当运行多个 ptcpdump 进程时，老的进程将不能正常工作（抓不到任何流量），
新版本已修复该问题，在新版本中可以同时运行多个 ptcpdump 进程，多个 ptcpdump 进程不会出现互相干扰或导致其他进程无法抓包的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pid"&gt;
&lt;h3 id="hidpid"&gt;支持同时过滤多个进程 PID&lt;a class="headerlink" href="#hidpid" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--pid&lt;/span&gt;&lt;/tt&gt; 参数支持过滤多个 pid 了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--pid pid1 --pid pid2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="micro-nano-time-stamp-precision"&gt;
&lt;h3 id="hidmicro-nano-time-stamp-precision"&gt;新增参数 --micro, --nano, --time-stamp-precision 用于控制输出中的时间格式&lt;a class="headerlink" href="#hidmicro-nano-time-stamp-precision" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;新增参数 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--micro&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--nano&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--time-stamp-precision&lt;/span&gt;&lt;/tt&gt; ，作用和用法对标 tcpdump。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--micro&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--time-stamp-precision=micro&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:36:05.701978 IP 10.0.2.15.22 &amp;gt; 10.0.2.2.59874: Flags [P.], seq 1370707216:1370707292, ack 4569736, win 62780, length 76
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--nano&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--time-stamp-precision=nano&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
13:36:05.701978488 IP 10.0.2.15.22 &amp;gt; 10.0.2.2.59874: Flags [P.], seq 1370707216:1370707292, ack 4569736, win 62780, length 76
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="a-x-xx-x-xx"&gt;
&lt;h3 id="hida-x-xx-x-xx"&gt;新增参数 -A, -x, -xx, -X, -XX 用于控制数据输出格式&lt;a class="headerlink" href="#hida-x-xx-x-xx" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;新增作用和用法对标 tcpdump 的参数 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-xx&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-XX&lt;/span&gt;&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
E..nHL&amp;#64;.&amp;#64;...
..........P.G..vbbEP.......GET / HTTP/1.1
Host: qq.com
User-Agent: curl/7.81.0
Accept: */*
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  4500 006e 484c 4000 4006 1bc4 0a00 020f
        0x0010:  cbcd fe9d d0e6 0050 c447 8e98 7662 6245
        0x0020:  5018 faf0 d6da 0000 4745 5420 2f20 4854
        0x0030:  5450 2f31 2e31 0d0a 486f 7374 3a20 7171
        0x0040:  2e63 6f6d 0d0a 5573 6572 2d41 6765 6e74
        0x0050:  3a20 6375 726c 2f37 2e38 312e 300d 0a41
        0x0060:  6363 6570 743a 202a 2f2a 0d0a 0d0a
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-xx&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  0050 56eb bc4e 000c 298e 31f3 0800 4500
        0x0010:  006e 484c 4000 4006 1bc4 0a00 020f cbcd
        0x0020:  fe9d d0e6 0050 c447 8e98 7662 6245 5018
        0x0030:  faf0 d6da 0000 4745 5420 2f20 4854 5450
        0x0040:  2f31 2e31 0d0a 486f 7374 3a20 7171 2e63
        0x0050:  6f6d 0d0a 5573 6572 2d41 6765 6e74 3a20
        0x0060:  6375 726c 2f37 2e38 312e 300d 0a41 6363
        0x0070:  6570 743a 202a 2f2a 0d0a 0d0a
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  4500 006e 484c 4000 4006 1bc4 0a00 020f  E..nHL&amp;#64;.&amp;#64;.......
        0x0010:  cbcd fe9d d0e6 0050 c447 8e98 7662 6245  .......P.G..vbbE
        0x0020:  5018 faf0 d6da 0000 4745 5420 2f20 4854  P.......GET / HT
        0x0030:  5450 2f31 2e31 0d0a 486f 7374 3a20 7171  TP/1.1..Host: qq
        0x0040:  2e63 6f6d 0d0a 5573 6572 2d41 6765 6e74  .com..User-Agent
        0x0050:  3a20 6375 726c 2f37 2e38 312e 300d 0a41  : curl/7.81.0..A
        0x0060:  6363 6570 743a 202a 2f2a 0d0a 0d0a       ccept: */*....
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-XX&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:36:38.159559 ens33 curl.244103 Out IP 10.0.2.15.53478 &amp;gt; 203.205.254.157.80: Flags [P.], seq 3293023896:3293023966, ack 1986159173, win 64240, length 70, ParentProc [ptcpdump.244094]
        0x0000:  0050 56eb bc4e 000c 298e 31f3 0800 4500  .PV..N..).1...E.
        0x0010:  006e 484c 4000 4006 1bc4 0a00 020f cbcd  .nHL&amp;#64;.&amp;#64;.........
        0x0020:  fe9d d0e6 0050 c447 8e98 7662 6245 5018  .....P.G..vbbEP.
        0x0030:  faf0 d6da 0000 4745 5420 2f20 4854 5450  ......GET / HTTP
        0x0040:  2f31 2e31 0d0a 486f 7374 3a20 7171 2e63  /1.1..Host: qq.c
        0x0050:  6f6d 0d0a 5573 6572 2d41 6765 6e74 3a20  om..User-Agent:
        0x0060:  6375 726c 2f37 2e38 312e 300d 0a41 6363  curl/7.81.0..Acc
        0x0070:  6570 743a 202a 2f2a 0d0a 0d0a            ept: */*....
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="ptcpdump-docker"&gt;
&lt;h3 id="hidptcpdump-docker"&gt;新增用于编译和运行 ptcpdump 的 Docker 镜像&lt;a class="headerlink" href="#hidptcpdump-docker" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;新增用于编译程序的 Docker 镜像： &lt;tt class="docutils literal"&gt;quay.io/ptcpdump/develop:latest&lt;/tt&gt;
以及用于通过 Docker 运行 ptcpdump 的镜像： &lt;tt class="docutils literal"&gt;quay.io/ptcpdump/ptcpdump:latest&lt;/tt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;可以通过 &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;build-bpf-via-docker&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;make &lt;span class="pre"&gt;build-via-docker&lt;/span&gt;&lt;/tt&gt; 按需编译 eBPF 程序和 ptcpdump 程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;可以使用类似下面的命令，通过 docker 运行 ptcpdump:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
docker run --privileged --rm -t --net=host --pid=host \
  -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
  quay.io/ptcpdump/ptcpdump:latest ptcpdump -i any -c 2 tcp
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="go-tls-key-log"&gt;
&lt;h3 id="hidgo-tls-key-log"&gt;实验性新功能：在对 Go 程序进行抓包时生成相应的 TLS Key Log 文件&lt;a class="headerlink" href="#hidgo-tls-key-log" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在新版本中还尝试了一个实验性的功能：在对 Go 程序进行抓包时生成相应的 TLS Key Log 文件。&lt;/p&gt;
&lt;p&gt;TLS Key Log 文件又叫 &lt;a class="reference external" href="https://tlswg.org/sslkeylogfile/draft-ietf-tls-keylogfile.html"&gt;SSLKEYLOGFILE&lt;/a&gt; ，
在 Wireshark 中对应的是 pre-master secret 配置，
第三方程序可以通过这个文件中记录的信息解密抓取的 TLS 流量。&lt;/p&gt;
&lt;p&gt;注意：该功能是一个实验性的功能，只支持 1.18+ 版本的 Go 编译的程序（支持 stripped 的二进制），
并且只支持通过 ptcpdump 运行目标 Go 程序。&lt;/p&gt;
&lt;p&gt;可以通过下面两种方法试用这个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--write-keylog-file&lt;/span&gt;&lt;/tt&gt; 参数或者环境变量 &lt;tt class="docutils literal"&gt;SSLKEYLOGFILE&lt;/tt&gt; 指定 SSLKEYLOGFILE 文件的保存路径:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ptcpdump -i any --write-keylog-file /tmp/keylogfile.txt -w /tmp/go.pcapng -- ./gohttpapp
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;通过指定 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--embed-keylog-to-pcapng&lt;/span&gt;&lt;/tt&gt; 参数在保存数据到 pcapng 格式文件时内嵌 SSLKEYLOGFILE 文件内容:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ptcpdump -i any --embed-keylog-to-pcapng -w /tmp/gotls.pcapng -- ./gohttpapp
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过 Wireshark 或 tshark 使用记录的 SSLKEYLOGFILE 内容对保存的 TLS 数据进行解密:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo tshark -r /tmp/go.pcapng -o tls.keylog_file:/tmp/keylogfile.txt | grep HTTP -B 2
Running as user &amp;quot;root&amp;quot; and group &amp;quot;root&amp;quot;. This could be dangerous.
   18 0.518380586    10.0.2.15 → 13.35.238.63 TLSv1.3 118 Change Cipher Spec, Finished
   19 0.519208290 13.35.238.63 → 10.0.2.15    TCP 60 443 → 47606 [ACK] Seq=5508 Ack=340 Win=64240 Len=0
   20 0.519914720    10.0.2.15 → 13.35.238.63 HTTP 179 GET /foo/bar HTTP/1.1


$ tshark -r /tmp/gotls.pcapng | grep HTTP -B 2
   20 0.525662563    10.0.2.15 → 13.35.238.114 TLSv1.3 118 Change Cipher Spec, Finished
   21 0.526138582 13.35.238.114 → 10.0.2.15    TCP 60 443 → 37618 [ACK] Seq=5987 Ack=340 Win=64240 Len=0
   22 0.526977836    10.0.2.15 → 13.35.238.114 HTTP 179 GET /foo/bar HTTP/1.1
&lt;/pre&gt;
&lt;p&gt;ptcpdump 计划未来内置支持使用 SSLKEYLOGFILE 对 TLS 数据进行解密的能力，
以及在抓包时实时获取 SSLKEYLOGFILE 并自动解密的能力，
目前暂时只能使用第三方工具实现 TLS 数据解密。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tcp-options"&gt;
&lt;h3 id="hidtcp-options"&gt;默认输出 TCP Options&lt;a class="headerlink" href="#hidtcp-options" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;新版本将默认输出 TCP Options 信息：&lt;/p&gt;
&lt;p&gt;老版本:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:09:54.324433 ens33 curl.26570 Out IP (..).43772 &amp;gt; (..).443: Flags [S], seq 1674193846, win 64240, length 0, ParentProc [ptcpdump.26560]
&lt;/pre&gt;
&lt;p&gt;新版本:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
14:09:54.324433 ens33 curl.26570 Out IP (..).43772 &amp;gt; (..).443: Flags [S], seq 1674193846, win 64240, options [mss 1460,sackOK,TS val 2107137325 ecr 0,nop,wscale 7], length 0, ParentProc [ptcpdump.26560]
&lt;/pre&gt;
&lt;p&gt;同时新版本还新增对 TCP SACK (Selective Acknowledgment) 和 TFO (TCP Fast Open) 的支持:&lt;/p&gt;
&lt;p&gt;SACK:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
19:03:36.220872 IP6 dead:beef:2::2.35288 &amp;gt; dead:beef:2::1.10029: Flags [.], seq 731670714, ack 2274465610, win 201, options [nop,nop,TS val 1253137130 ecr 837820024,nop,nop,sack 1 {2274467010:2274483378},mptcp 12 dss ack 16301812255838552430], length 0
&lt;/pre&gt;
&lt;p&gt;TFO:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
19:22:26.586851 IP6 dead:beef:1::2.54040 &amp;gt; dead:beef:1::1.10056: Flags [S], seq 271661201, win 64800, options [mss 1440,sackOK,TS val 2947503028 ecr 0,nop,wscale 7,tfo  cookiereq,nop,nop,mptcp 4 capable v1 flags [H]], length 0
19:22:26.591736 IP6 dead:beef:1::1.10056 &amp;gt; dead:beef:1::2.54040: Flags [S.], seq 1229575956, ack 271661202, win 64260, options [mss 1440,nop,nop,sackOK,nop,wscale 7,tfo  cookie 29b3cc66639d427d,nop,nop,mptcp 12 capable v1 flags [H] {0xc87438912bc26cb7}], length 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="tcp-options-mptcp"&gt;
&lt;h3 id="hidtcp-options-mptcp"&gt;输出 TCP Options 中的 MPTCP 信息&lt;a class="headerlink" href="#hidtcp-options-mptcp" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;应 MPTCP (MultiPath TCP) 社区的 &lt;a class="reference external" href="https://github.com/mozillazg/ptcpdump/issues/148"&gt;需求&lt;/a&gt;  ，
新增对 MPTCP 的支持:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
15:31:51.696224 IP 10.0.1.2.60958 &amp;gt; 10.0.1.1.10004: Flags [S], seq 3019570341, win 64240, options [mss 1460,sackOK,TS val 1007819908 ecr 0,nop,wscale 7,mptcp 4 capable v1 flags [H]], length 0
15:31:51.696346 IP 10.0.1.1.10004 &amp;gt; 10.0.1.2.60958: Flags [S.], seq 2367868313, ack 3019570342, win 65160, options [mss 1460,sackOK,TS val 162498895 ecr 1007819908,nop,wscale 7,mptcp 12 capable v1 flags [H] {0x8ea1df6e0d588003}], length 0
15:31:51.696587 IP 10.0.1.2.60958 &amp;gt; 10.0.1.1.10004: Flags [.], seq 3019570342, ack 2367868314, win 502, options [nop,nop,TS val 1007819909 ecr 162498895,mptcp 20 capable v1 flags [H] {0x465bcd01b5d78120,0x8ea1df6e0d588003}], length 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="netns"&gt;
&lt;h3 id="hidnetns"&gt;新增参数 --netns 支持对在其他网络命名空间中的网络接口进行抓包&lt;a class="headerlink" href="#hidnetns" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;之前的版本只支持对当前网络命名空间中的网络接口进行抓包，新版本通过新增 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--netns&lt;/span&gt;&lt;/tt&gt;
参数支持对其他网络命名空间中的网络接口进行抓包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo ptcpdump -i lo --netns /run/netns/foobar
sudo ptcpdump -i any --netns /run/netns/foobar
sudo ptcpdump -i any --netns /proc/26/ns/net
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pcapng-inbound-outbound"&gt;
&lt;h3 id="hidpcapng-inbound-outbound"&gt;PcapNg 格式增强：读取/写入网络接口名称和 Inbound/Outbound 信息&lt;a class="headerlink" href="#hidpcapng-inbound-outbound" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在之前的版本中使用 &lt;tt class="docutils literal"&gt;ptcpdump &lt;span class="pre"&gt;-r&lt;/span&gt; &amp;lt;file.pcapng&amp;gt;&lt;/tt&gt; 读取 pcapng 文件不会读取其中记录的网络接口名称以及 Inbound/Outbound 信息，
在新版本中已经解决了这个问题:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ptcpdump -r demo.pcapng
14:36:35.880947 ens33 curl.244103 Out IP 10.0.2.15.37668 &amp;gt; 114.114.114.114.53: 44427+ A? qq.com. (24), ParentProc [ptcpdump.244094]
14:36:35.882099 ens33 curl.244103 Out IP 10.0.2.15.37668 &amp;gt; 114.114.114.114.53: 31415+ AAAA? qq.com. (24), ParentProc [ptcpdump.244094]
14:36:35.954613 ens33 curl.244103 In IP 114.114.114.114.53 &amp;gt; 10.0.2.15.37668: 44427 3/0/0 A 203.205.254.157, A 113.108.81.189, A 123.150.76.218 (72), ParentProc [ptcpdump.244094]
&lt;/pre&gt;
&lt;p&gt;同时新版在将捕获的流量信息保存为 PcapNg 格式的文件时，会自动写入 Inbound/Outbound 信息（之前的版本已写入网络接口信息），
即支持 PcapNg 格式的
epb_flags （&lt;a class="reference external" href="https://www.ietf.org/archive/id/draft-tuexen-opsawg-pcapng-05.html#name-enhanced-packet-block-flags"&gt;Enhanced Packet Block Flags Word&lt;/a&gt; ）
标记。&lt;/p&gt;
&lt;p&gt;如果你对 ptcpdump 有额外的改进或新功能建议，欢迎在评论区或项目 issues 中留言。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="ptcpdump"></category></entry><entry><title>我参与写作的新书《eBPF 云原生安全：原理与实践》目前正在新鲜发售中</title><link href="https://mozillazg.com/2024/09/new-book-cloud-native-security-with-ebpf.html" rel="alternate"></link><published>2024-09-28T00:00:00+00:00</published><updated>2024-09-28T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2024-09-28:2024/09/new-book-cloud-native-security-with-ebpf.html</id><summary type="html">&lt;p&gt;我跟同事合著的新书《eBPF 云原生安全：原理与实践》在 8 月底的时候已经正式对外发售了。
好像还没在博客中宣传过这个消息，今天特意发篇文章来打个广告。&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2 id="hidsection-1"&gt;广告时间&lt;a class="headerlink" href="#hidsection-1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我跟同事合著的由机械工业出版社出版的新书《eBPF 云原生安全：原理与实践》现已正式出版发售，各大电商平台上均有现货！
推荐对 eBPF 或安全感兴趣的朋友们关注一下。下面是一些链接资源，供大家参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;出版社旗下公众号的介绍页面：&lt;a class="reference external" href="https://mp.weixin.qq.com/s/EWsKxgRFNiqF1HEqVNEQ5w"&gt;https://mp.weixin.qq.com/s/EWsKxgRFNiqF1HEqVNEQ5w&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;豆瓣介绍页面：&lt;a class="reference external" href="https://book.douban.com/subject/37022239/"&gt;https://book.douban.com/subject/37022239/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;京东购买链接：&lt;a class="reference external" href="https://item.jd.com/10111206687256.html"&gt;https://item.jd.com/10111206687256.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;天猫购买链接：&lt;a class="reference external" href="https://detail.tmall.com/item.htm?id=82"&gt;https://detail.tmall.com/item.htm?id=82&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;书中所有示例程序的完整源代码：&lt;a class="reference external" href="https://github.com/mozillazg/cloud-native-security-with-ebpf"&gt;https://github.com/mozillazg/cloud-native-security-with-ebpf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2 id="hidsection-2"&gt;关于这本书&lt;a class="headerlink" href="#hidsection-2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我从 2022 年开始参与本书的写作，耗时 2 年多，期间经历了新冠疫情封控、疫情结束、各种拖延症发作，
最后终于在 2024 年 8 月底正式对外出版发售了！&lt;/p&gt;
&lt;p&gt;在这里我想感谢家人和朋友们的支持和帮助、感谢机械工业出版社的各位主编、编辑、设计、文案、市场、营销、策划、印刷等
老师的支持和帮助、感谢同事和领导的支持和帮助。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;尤其要感谢出版社的杨福川老师给予我们写作本书的机会以及老师对我们写作和出版的帮助和督促；&lt;/li&gt;
&lt;li&gt;感谢出版社的陈洁老师专业的编辑水平和素养以及专业和细致认真的审稿和出版支持；&lt;/li&gt;
&lt;li&gt;感谢匡大虎老师愿意合作参与本书的写作，感谢匡老师带我飞；&lt;/li&gt;
&lt;li&gt;感谢易立、李鹏两位老板的大力支持，感谢两位老板在百忙中抽空为本书撰写推荐语；&lt;/li&gt;
&lt;li&gt;感谢姜坦、杜岚两位老师百忙中抽空为本书撰写推荐语；&lt;/li&gt;
&lt;li&gt;感谢 &lt;a class="reference external" href="https://github.com/Zheaoli"&gt;&amp;#64;Zheaoli&lt;/a&gt; 、 &lt;a class="reference external" href="https://github.com/jschwinger233"&gt;&amp;#64;jschwinger233&lt;/a&gt; 两位老师在百忙中抽空阅读本书并撰写推荐语；&lt;/li&gt;
&lt;li&gt;感谢我的妻子的支持，感谢她对我写作的支持和包容；&lt;/li&gt;
&lt;li&gt;感谢 &lt;a class="reference external" href="https://github.com/Zheaoli"&gt;&amp;#64;Zheaoli&lt;/a&gt; 老师在网上向网友们推荐本书；&lt;/li&gt;
&lt;li&gt;感谢 &lt;a class="reference external" href="https://x.com/yihong0618"&gt;&amp;#64;yihong0618&lt;/a&gt; 老师在网上向网友们推荐本书；&lt;/li&gt;
&lt;li&gt;感谢已经购买和即将购买这本书的读者朋友们的支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，关于这本书的质量：我只能保证这本书不是一本烂书、书中所有的代码都能跑通并且结果可以复现（
可以在上面的源码仓库中查看所有示例代码的编译和运行说明），至于是否是好书就见仁见智了。
因为是第一次写书以及本人水平有限，难免会存在各种各样的问题，大家如果有任何建议或发现任何问题可以在前面的源码仓库中通过 issue 的形式反馈
或者加我微信反馈（下方有我的微信二维码链接，相信细心的你一定能找到），也可以在下方评论区反馈。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>使用 except 命令解决无法在无 tty 的环境里执行 kubectl exec -it 命令的问题</title><link href="https://mozillazg.com/2024/03/fix-can-not-run-kubectl-exec-it-in-no-tty-env.html" rel="alternate"></link><published>2024-03-23T00:00:00+00:00</published><updated>2024-03-23T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2024-03-23:2024/03/fix-can-not-run-kubectl-exec-it-in-no-tty-env.html</id><summary type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2 id="hidsection-1"&gt;问题&lt;a class="headerlink" href="#hidsection-1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当我们在无 tty 环境下执行 &lt;tt class="docutils literal"&gt;kubectl exec &lt;span class="pre"&gt;-it&lt;/span&gt;&lt;/tt&gt; 命令的时候，
kubectl 会输出如下警告然后自动禁用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/tt&gt; 选项:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Unable to use a TTY - input is not a terminal or the right kind of file
&lt;/pre&gt;
&lt;p&gt;无 tty 的场景包括但不限于：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在未启用 tty 的容器中执行 kubectl 命令&lt;/li&gt;
&lt;li&gt;使用 nohup 执行包含 kubectl 命令的脚本（可以使用该方法在不修改原脚本的情况下复现上面的报错）&lt;/li&gt;
&lt;li&gt;使用管道或 &lt;tt class="docutils literal"&gt;&amp;lt;&lt;/tt&gt; 作为 kubectl 命令的输入&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2 id="hidsection-2"&gt;解决方法&lt;a class="headerlink" href="#hidsection-2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于无需进行交互式操作的场景，通常可以通过主动去除 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/tt&gt; 选项来去掉该告警。
但是有时我们的场景确实需要进行交互式操作，
或者我们的场景是即便不需要进行交互式操作也会需要依赖 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/tt&gt; 选项（比如，为了测试 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/tt&gt; 选项的功能）。&lt;/p&gt;
&lt;p&gt;此时，我们可以通过 &lt;a class="reference external" href="https://linux.die.net/man/1/expect"&gt;except&lt;/a&gt; 这个工具来启用一个 tty，
满足 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/tt&gt; 选项所依赖的环境:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cat &amp;lt;&amp;lt;EOF &amp;gt; test.sh

# 执行 kubectl exec -it 命令
spawn kubectl exec -it xxxx yyy

# 可以通过 send 和 expect 进行交互式操作
# send &amp;quot;&amp;lt;CMD&amp;gt;\r&amp;quot;
# expect &amp;quot;&amp;lt;STR&amp;gt;&amp;quot;

# 发送 exit 命令，退出交互式终端
# send &amp;quot;exit\r&amp;quot;
# expect eof

EOF

except -f test.sh
&lt;/pre&gt;
&lt;p&gt;关于 &lt;tt class="docutils literal"&gt;except&lt;/tt&gt; 命令的详细使用方式大家可以在网络上自行搜索。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="kubectl"></category></entry><entry><title>一份大但不全的配置中心知识备忘</title><link href="https://mozillazg.com/2019/09/production-ready-distributed-configuration-service-configuration-center.html" rel="alternate"></link><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2019-09-13:2019/09/production-ready-distributed-configuration-service-configuration-center.html</id><summary type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2 id="hidsection-2"&gt;前言&lt;a class="headerlink" href="#hidsection-2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录一下关于配置中心各方面（主要是功能方面）的一些思考和备忘知识。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2 id="hidsection-3"&gt;基本功能&lt;a class="headerlink" href="#hidsection-3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为配置中心需要具备如下基本的核心功能:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;配置的增删改查&lt;/li&gt;
&lt;li&gt;支持静态配置和动态配置（或者说所有配置都是动态配置，取决于用户程序中怎么去使用它）&lt;/li&gt;
&lt;li&gt;动态配置的变更推送功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2 id="hidsection-4"&gt;高级功能&lt;a class="headerlink" href="#hidsection-4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般还会具有下面的高级功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;权限控制&lt;/li&gt;
&lt;li&gt;相同配置项在不同环境下（不同机房、不同单元、不同集群等）配置不同的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他功能在下面的多个主题下中穿插说明。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web"&gt;
&lt;h2 id="hidweb"&gt;面向用户的 Web 面板&lt;a class="headerlink" href="#hidweb" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在哪个系统还没个 Web 面板呢，配置中心也不例外。
至少需要一个面向用户的 Web 面板，不然用户体验也太差了。&lt;/p&gt;
&lt;p&gt;这个 Web 面板一般有下面的功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;帐号体系，基本的用户管理和用户权限控制、配置的访问控制&lt;/li&gt;
&lt;li&gt;用户增删改查有权限的不同服务的配置&lt;/li&gt;
&lt;li&gt;版本控制：显式配置项值的不同版本，方便实现回退功能以及查看历史值&lt;/li&gt;
&lt;li&gt;回退：把配置项的值回退到过去某个版本&lt;/li&gt;
&lt;li&gt;变更记录(变更审计)：显式配置项增删改的所有变更记录，方便追溯&lt;/li&gt;
&lt;li&gt;配置项导入、导出功能&lt;/li&gt;
&lt;li&gt;变更审批功能：某些场景下修改配置项需要接入多人 double check + 审批的流程&lt;/li&gt;
&lt;li&gt;敏感配置加密功能：面板上接入第三方敏感信息加解密系统，配置中心只存储加密后的配置，配置的加解密由第三方敏感信息加解密系统来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他 Web 面板功能会在下面的主题中穿插说明。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2 id="hidsection-5"&gt;开关&lt;a class="headerlink" href="#hidsection-5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;开关其实可以作为一种特殊的配置项来实现，比如业务系统中的功能/特性开关可以通过动态配置来实现，
只不过是约定了一个特定规范用于实现开关配置项（比如，值只能是 true 或 false 或者只能是 0~100, 配置项必须以 &lt;tt class="docutils literal"&gt;switch:&lt;/tt&gt; 开头）， 这个约定需要 SDK 和 Web 面板一起协作来完成，通过 SDK 和面板的协作对用户屏蔽这一内部实现细节（API 端需要校验值的合法性）。&lt;/p&gt;
&lt;p&gt;开关配置既可以用来实现新功能的灰度/开启开关，
也可以用于实现系统故障场景下的功能降级/关闭开关、fallback 启用开关等各类动态切换的场景。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2 id="hidsection-6"&gt;配置灰度&lt;a class="headerlink" href="#hidsection-6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;微服务场景下功能灰度是个非常重要的功能，功能灰度既可以通过金丝雀发布的方式实现，特定场景下也可以通过功能开关的方式实现。比如前面所说的开关配置，如果约定开关配置的值是 0~100.00 的话，可以通过不同的值控制功能打开的概率从而实现功能灰度。&lt;/p&gt;
&lt;p&gt;不只是功能需要灰度，配置也需要灰度，毕竟配置的变更对系统的影响也是非常大的，不亚于功能的变更。&lt;/p&gt;
&lt;p&gt;一般可以考虑支持如下其中一个、几个或全部的配置项变更灰度纬度:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;机房&lt;/li&gt;
&lt;li&gt;单元&lt;/li&gt;
&lt;li&gt;集群&lt;/li&gt;
&lt;li&gt;某些特定客户端IP/hostname&lt;/li&gt;
&lt;li&gt;一定比例的业务系统实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2 id="hidsection-7"&gt;稳定性&lt;a class="headerlink" href="#hidsection-7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;没有一个系统能够保证 100% 不出问题，配置中心也不例外。所以在设计客户端和服务端的时候需要应用一些面向失败设计的模式。&lt;/p&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h3 id="hidsection-8"&gt;客户端&lt;a class="headerlink" href="#hidsection-8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;客户端一定要实现的一个功能就是：本地缓存。
用于在无法连接服务端或者服务端异常时客户端有个本地兜底，不会因为配置中心异常导致用户服务异常。&lt;/p&gt;
&lt;p&gt;本地缓存一般包括内存缓存和本地文件缓存，可以考虑实现其中一个或两个都实现。&lt;/p&gt;
&lt;p&gt;以及需要注意之前 &lt;a class="reference external" href="https://mozillazg.com/2018/08/call-remote-service-checklist.html"&gt;调用远程服务的一些备忘录&lt;/a&gt; 和 &lt;a class="reference external" href="https://mozillazg.com/2019/03/safe-client-behaviour-notes-retry-jitter-back-off-more.html#hidsafer-clients-expose-information-to-server"&gt;安全友好的客户端行为&lt;/a&gt;  中提到的那些超时、重试等注意事项，毕竟这个也是调用远程服务的一个场景。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h3 id="hidsection-9"&gt;服务端&lt;a class="headerlink" href="#hidsection-9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;服务端主要需要考虑如下方案：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;熔断: 在特定场景下通过熔断对外部依赖的请求或来自客户端的请求来保障服务端的稳定性&lt;/li&gt;
&lt;li&gt;降级: 在特定场景下通过降级某些功能或某些外部依赖来保障核心功能的稳定性&lt;/li&gt;
&lt;li&gt;限流/限速: 根据需要对用户、服务、IP 或者推送进行限流或限速，
至少要有一个宽松的默认限流策略，防止被异常的突发流量打垮系统。&lt;/li&gt;
&lt;li&gt;隔离（舱壁模式）：通过隔离技术来保护大部分用户不受少部分异常用户的影响或者核心组件受次要组件故障所影响。
常见的隔离技术有线程池隔离、进程隔离（比如剥离增删改查功能和推送功能独立部署或者在流量入口处按功能划分不同节点，比如部署单独的节点只提供推送服务）、集群隔离（为特定用户群体部署专享的独立集群，防止受主集群影响）等等。&lt;/li&gt;
&lt;li&gt;日志、监控、告警：根据实际情况来记录有用的日志、指标数据、以及配置必要的告警&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以进一步参考 &lt;a class="reference external" href="https://mozillazg.com/2019/06/release-it-design-and-deploy-production-ready-software-second-edition-2th-read-note-1"&gt;《Release It! Second Edition》阅读笔记（一）&lt;/a&gt; 和 &lt;a class="reference external" href="https://mozillazg.com/2019/06/release-it-design-and-deploy-production-ready-software-second-edition-2th-read-note-2"&gt;《Release It! Second Edition》阅读笔记（二）&lt;/a&gt; 中的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-10"&gt;
&lt;h2 id="hidsection-10"&gt;治理&lt;a class="headerlink" href="#hidsection-10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;配置中心不仅仅只是一个存放配置的地方，同样还应该承担起配置治理和收口的职责，
同时，没有考虑各方面治理的中间件只能说是一个软件或服务，而不能说是一个成熟的产品。&lt;/p&gt;
&lt;p&gt;下面简单记录一些常见的治理场景。&lt;/p&gt;
&lt;div class="section" id="section-11"&gt;
&lt;h3 id="hidsection-11"&gt;通用配置治理&lt;a class="headerlink" href="#hidsection-11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的通用配置指的是各个服务都会去配置的一些配置项，如果不治理的话，一方面配置项的名称会五花八门不利于用户服务的后续交接和维护，另一方面因为没有统一治理规范化，导致无法快速的根据需要调整或统计公司内部所有业务服务所使用的通用配置。&lt;/p&gt;
&lt;p&gt;希望通过治理后能够规范化通用配置，实现统一约定通用配置项名称方便业务系统的日常维护以及赋予平台统一管控的能力。&lt;/p&gt;
&lt;p&gt;下面举一些通用配置的例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;业务系统所使用的微服务框架本身包含了各种各样的配置，可以对这些配置项的名称和取值作统一规范化，用户按照规范在配置中心配置相应的配置，框架按照规范从配置中心去获取对应的配置。&lt;/li&gt;
&lt;li&gt;框架内置的各组件的功能特性的降级和开启开关&lt;/li&gt;
&lt;li&gt;基于框架实现的服务间调用的服务级别和接口级别的降级和开启开关&lt;/li&gt;
&lt;li&gt;服务启动时的启动参数控制、jvm 参数控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-12"&gt;
&lt;h3 id="hidsection-12"&gt;基础服务配置治理&lt;a class="headerlink" href="#hidsection-12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;同样，基础服务配置治理也是为了规范化业务系统对基础服务依赖的相关配置，方便业务系统的日常维护以及赋予平台统一管控的能力。&lt;/p&gt;
&lt;p&gt;下面举几个基础服务配置的例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;数据库连接信息和连接参数&lt;/li&gt;
&lt;li&gt;消息队列连接信息&lt;/li&gt;
&lt;li&gt;限流/限速组件的配置信息&lt;/li&gt;
&lt;li&gt;其他基础服务（redis、es、oss等基础服务）的客户端所需的配置信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-13"&gt;
&lt;h3 id="hidsection-13"&gt;遗留配置治理&lt;a class="headerlink" href="#hidsection-13" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;随着时间的推移，配置中心上会存在很多遗留的不再使用的旧配置，为了避免成为配置坟场，需要对配置的使用情况进行治理。&lt;/p&gt;
&lt;p&gt;需要客户端/框架和服务端一起来实现配置使用的治理，客户端/框架中收集和上报用户系统真正在使用的配置项，
如果服务端能够感知到的话也可以在服务端主动记录。&lt;/p&gt;
&lt;p&gt;收集到真正在使用的配置项后，需要 Web 面板配置在页面上展示配置项的使用情况，方便用户清理不再使用的配置（可以主动提示用户某些配置项很久没使用了，是否是已废弃配置，请及时清理）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-14"&gt;
&lt;h3 id="hidsection-14"&gt;用户使用姿势治理&lt;a class="headerlink" href="#hidsection-14" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;没有哪个系统和服务是万能的，每个服务都有它预设的使用场景限制/约定，配置中心也不例外。&lt;/p&gt;
&lt;p&gt;所以在设计和开发配置中心的时候需要要定下它服务的场景和使用约束，提前发现或及时发现不合理的使用姿势，甚至直接拒绝不合理的使用姿势从源头就扼杀而不是等到后面再来治理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-15"&gt;
&lt;h3 id="hidsection-15"&gt;客户端治理&lt;a class="headerlink" href="#hidsection-15" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;还有一个就是客户端的治理。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;版本治理:无论是官方实现的客户端还是第三方实现的客户端，随着时间的推移都需要治理，比如统计旧版及关键版本的使用情况，
根据使用情况废弃旧版或推动旧版业务方升级改造。
所以所有客户端的请求信息中必须包含符合规范的客户端名称和版本号（比如 http 协议的话可以考虑放在 User-Agent 里），方便服务端记录和统计客户端信息&lt;/li&gt;
&lt;li&gt;实现方式治理：如果是官方实现的客户端的话，可以很好的把控客户端的实现方式，但是第三方实现的客户端可能会包含各种影响服务端稳定性的不正确实现姿势或使用姿势。一方面服务端需要防范和应对会来自客户端的异常请求，另一方面也要实现能够帮助配置中心开发人员及时或提前发现可能的或已存在的异常请求，进而调整官方客户端的实现以及协调第三方客户端改进实现，比如应用上面【稳定性-客户端】那里提到的本地缓存以及各种客户端实现注意事项。再通过上面的版本治理来推进用户升级客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-16"&gt;
&lt;h2 id="hidsection-16"&gt;故障排查&lt;a class="headerlink" href="#hidsection-16" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;配置中心作为一个所有业务系统都会使用的一个中间件，为了减轻开发的排障压力需要主动收集关键信息或提供排障工具用于快速排障或自证清白。&lt;/p&gt;
&lt;p&gt;可以考虑收集如下信息:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;配置使用追踪（何时哪个客户端获取(使用)了哪个配置项）&lt;/li&gt;
&lt;li&gt;变更推送追踪（何时推送了哪个配置项的啥变更给哪个客户端）&lt;/li&gt;
&lt;li&gt;客户端异常情况（日志或打点）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并提供工具、手段或页面方便用户快速自行 debug：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一份包含常见问题的答疑和 debug 步骤文档&lt;/li&gt;
&lt;li&gt;以某种方式在 Web 面板页面展示上面收集的信息&lt;/li&gt;
&lt;li&gt;API 或 SDK 的错误或异常信息中包含对应问题 case 的原因说明或解决办法的文档 URL 地址&lt;/li&gt;
&lt;li&gt;提供工具用于用户在他们出现异常的机器上进行简单的自动诊断，比如自动检测与服务端的网络连接情况、分析客户端的错误日志、根据已知的各种常见问题 case 的异常原因和检查步骤自动分析并给出相应的建议&lt;/li&gt;
&lt;li&gt;提供工具分析用户的代码检测出不符合规范的代码用法给予提示、改进建议甚至是自动重新源代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要根据日常答疑和 debug 经验丰富上面的手段和方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-17"&gt;
&lt;h2 id="hidsection-17"&gt;控制面板&lt;a class="headerlink" href="#hidsection-17" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个控制面板是一个面向配置中心开发人员和运维人员的 Web 面板（不一定是一个面板，也可能指的是包含公司内部各基础服务系统的一组面板集合），
用于观测配置中心运行过程中的各种状态信息（观测方面的需求也可以通过接入监控系统来实现）
以及在不重启配置中心不同组件服务的前提下动态控制配置中心的各种内部功能和细节。&lt;/p&gt;
&lt;p&gt;动态控制方面，常见的有如下需求：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;变更特定服务配置的访问控制信息&lt;/li&gt;
&lt;li&gt;变更对用户/客户端的限速、优先级、黑白名单等配置&lt;/li&gt;
&lt;li&gt;drop 或屏蔽一些请求&lt;/li&gt;
&lt;li&gt;后端服务节点的控制，比如上下线变更&lt;/li&gt;
&lt;li&gt;内部功能的开启和关闭、配置的变更（也可以直接通过面向用户的 Web 面板控制，即配置中心本身也通过配置中心来托管配置）&lt;/li&gt;
&lt;li&gt;SDK 特定功能的开启和关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;观测方面的需求一般通过接入监控系统来实现，详见下面的监控告警主题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-18"&gt;
&lt;h2 id="hidsection-18"&gt;监控告警&lt;a class="headerlink" href="#hidsection-18" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接入监控告警可以帮助配置中心开发人员和运维人员观测系统的运行状况，提前或及时发现异常情况，提高系统的稳定性以及故障处理速度。&lt;/p&gt;
&lt;p&gt;客户端和服务端可以考虑上报/提供如下指标数据，用于监控和告警。同样只是一些简单的例子，需要考虑实际场景添加合适的指标。&lt;/p&gt;
&lt;div class="section" id="section-19"&gt;
&lt;h3 id="hidsection-19"&gt;服务端&lt;a class="headerlink" href="#hidsection-19" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;客户端请求情况：基本的请求信息(请求方、api、响应情况（成功、失败、响应时间等）&lt;/li&gt;
&lt;li&gt;配置变更&lt;/li&gt;
&lt;li&gt;变更推送&lt;/li&gt;
&lt;li&gt;限速、黑白名单触发&lt;/li&gt;
&lt;li&gt;其他内部关注的点&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-20"&gt;
&lt;h3 id="hidsection-20"&gt;客户端&lt;a class="headerlink" href="#hidsection-20" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API 调用：api、成功、失败（失败原因）、响应时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-21"&gt;
&lt;h2 id="hidsection-21"&gt;周边生态&lt;a class="headerlink" href="#hidsection-21" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;目标是希望围绕配置中心形成一个生态，而不是所有需求都由配置中心来实现。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;微服务调用方或被调用方的限流功能，可能是由专门的组件或服务来实现限流功能，
但是每个服务的限流配置可以规范化存放在配置中心，帮助限流组件省去重复实现配置管理和变更推送的功能。&lt;/li&gt;
&lt;li&gt;基于各服务方使用配置中心实现功能开关来控制调用降级的前提，可以实现一个在不同故障场景下批量切换多个调用链上下游的降级开关，实现故障时上下游快速降级的需求（一键降级）。这个需求虽然可以在配置中心上实现，但是会给配置中心增加不必要的复杂度，可以考虑实现一个单独的系统，这个系统会调用配置中心的 api 来实现相应的开关切换，在那个系统中实现这个需求所需的各种繁琐的业务流程。&lt;/li&gt;
&lt;li&gt;其他需要实现配置管理和配置变更推送的场景，都可以把配置规范化存放在配置中心，围绕配置中心形成一个庞大的生态系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-22"&gt;
&lt;h2 id="hidsection-22"&gt;文档&lt;a class="headerlink" href="#hidsection-22" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果没有文档的话，用户可能都不知道怎么用你的产品，你的产品做的再好也没有用。&lt;/p&gt;
&lt;p&gt;文档主要包括面向用户的文档和面向内部开发和运维人员的文档。&lt;/p&gt;
&lt;p&gt;面向用户的文档：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用文档，包括 Web 面板的使用文档、API 文档、SDK 使用文档、debug 工具使用文档等等&lt;/li&gt;
&lt;li&gt;答疑文档，包括常见问题解答、常见异常 debug 步骤和解决方法等等&lt;/li&gt;
&lt;li&gt;介绍文档，包括适用的场景、解决的问题、不适用的场景、使用约束等等&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向开发和运维的文档：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;开发文档&lt;/li&gt;
&lt;li&gt;部署和运维文档&lt;/li&gt;
&lt;li&gt;监控和告警&lt;/li&gt;
&lt;li&gt;常见故障恢复方法和步骤&lt;/li&gt;
&lt;li&gt;常见问题 debug 步骤和解决方法（包括用户遇到的问题以及内部问题）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-23"&gt;
&lt;h2 id="hidsection-23"&gt;其他&lt;a class="headerlink" href="#hidsection-23" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;# TODO&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-24"&gt;
&lt;h2 id="hidsection-24"&gt;总结&lt;a class="headerlink" href="#hidsection-24" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录了一下配置中心的一些备忘知识，后面有空的时候再补充更新。&lt;/p&gt;
&lt;p&gt;BTW，开发一个配置中心或配置管理平台的时候不一定需要实现上面的所有的内容，可以是它的超集也可以是它的子集，同时也不要想着一次性就实现最终产品，可以考虑通过小步试错，快速迭代的方式一步步的实现和落地各种功能和方案（通过一个个的阶段性迭代和目标来实现最终目的，不要想着一蹴而就或者在一个大的迭代中完成目标）。
重要的是要考虑实际场景，组织架构风格，组织或团队的短期和长期目标（&amp;lt;del&amp;gt;比如某些团队或个人会把项目作为升职加薪的跳板，这样的话就需要取舍，哪些功能/需求是可以快速做出闪亮成绩的，哪些是需要时间才能证明其价值。不是时常会听说某个公司内某个/些项目在晋升季一过就没人维护甚至直接就黄了嘛[1]&amp;lt;/del&amp;gt;）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-25"&gt;
&lt;h2 id="hidsection-25"&gt;参考资料&lt;a class="headerlink" href="#hidsection-25" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pragprog.com/book/mnee2/release-it-second-edition"&gt;《Release It! Second Edition》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2018/08/call-remote-service-checklist.html"&gt;调用远程服务的一些备忘录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/03/safe-client-behaviour-notes-retry-jitter-back-off-more.html#hidsafer-clients-expose-information-to-server"&gt;安全友好的客户端行为&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-1.html"&gt;《Release It! Second Edition》阅读笔记（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-2.html"&gt;《Release It! Second Edition》阅读笔记（二）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- [1]: https://twitter.com/laixintao/status/1163356711769427973 --&gt;
&lt;/div&gt;
</summary><category term="configuration-service"></category><category term="configuration-center"></category></entry><entry><title>负载均衡策略之有限负载一致性哈希</title><link href="https://mozillazg.com/2019/04/load-balancing-strategy-algorithm-Consistent-Hashing-with-Bounded-Loads.html" rel="alternate"></link><published>2019-04-21T00:00:00+00:00</published><updated>2019-04-21T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2019-04-21:2019/04/load-balancing-strategy-algorithm-Consistent-Hashing-with-Bounded-Loads.html</id><summary type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2 id="hidsection-2"&gt;前言&lt;a class="headerlink" href="#hidsection-2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍一下有限负载一致性哈希（Consistent Hashing with Bounded Loads）（或者叫有界负载一致性哈希、有负载界限/上限的一致性哈希）这个负载均衡策略。&lt;/p&gt;
&lt;p&gt;之前介绍的 &lt;a class="reference external" href="https://mozillazg.com/2019/03/load-balancing-strategy-algorithm-Consistent-hashing.html"&gt;一致性哈希策略&lt;/a&gt; 有一个缺陷，那就是没有解决热点问题：当有部分资源是热点资源或者部分用户请求量比较大的时候，会出现部分节点需要处理大量请求（这些请求根据一致性哈希策略都选中了固定的部分节点），出现负载非常不均的情况，因为是一致性哈希所以这些请求没法分摊到其他节点上，导致出现持续的负载不均和热点问题。下面要介绍的 Consistent Hashing with Bounded Loads 就是一种解决这个问题的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consistent-hashing-with-bounded-loads"&gt;
&lt;h2 id="hidconsistent-hashing-with-bounded-loads"&gt;有限负载一致性哈希（Consistent Hashing with Bounded Loads）&lt;a class="headerlink" href="#hidconsistent-hashing-with-bounded-loads" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有限负载一致性哈希（Consistent Hashing with Bounded Loads） 出自论文 &lt;a class="reference external" href="https://arxiv.org/abs/1608.01350"&gt;Consistent Hashing with Bounded Loads&lt;/a&gt; ，主要思路是，根据当前负载情况对所有节点限制一个最大负载，在一致性哈希中对 hash 环进行查找时将跳过达到最大负载限制的节点，通过把过载的请求转移到其他节点上来解决热点和不均衡问题：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;R&lt;/tt&gt;: 当前所有节点的总负载（正在处理的总请求数）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;T&lt;/tt&gt;: 节点总个数&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L&lt;/tt&gt;: 当前所有节点的平均负载&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L = R/T&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ε&lt;/tt&gt;: 一个参数用于表示在平均负载的基础上能够承受的额外负载上限，可以按照实际需求进行设置（根据 vimeo 分享的 &lt;a class="reference external" href="https://medium.com/vimeo-engineering-blog/improving-load-balancing-with-a-new-consistent-hashing-algorithm-9f1bd75709ed"&gt;经验&lt;/a&gt; 这个值推荐设置为 0.25~1）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M&lt;/tt&gt;: 节点的最大负载上限&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M = &lt;span class="pre"&gt;L*(1+ε)&lt;/span&gt; = &lt;span class="pre"&gt;R*(1+ε)/T&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;一致性哈希中进行节点查找时，增加检查匹配的节点的负载（正在处理的请求数）是否达到负载上限 &lt;tt class="docutils literal"&gt;M&lt;/tt&gt; 的操作，如果达到了上限则跳过当前节点继续往后查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上面可以发现 Consistent Hashing with Bounded Loads 结合了 &lt;a class="reference external" href="https://mozillazg.com/2019/02/load-balancing-strategy-algorithm-weighted-least-connection.html"&gt;最少连接策略&lt;/a&gt; 和一致性哈希 策略各自的优点，即平衡了负载又兼顾了一致性哈希，并且还可以通过调整转化为最少请求策略或一致性哈希策略：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;当 &lt;tt class="docutils literal"&gt;ε&lt;/tt&gt; 的值是 0 的时候，就实现了最少连接策略的效果&lt;/li&gt;
&lt;li&gt;当 &lt;tt class="docutils literal"&gt;ε&lt;/tt&gt; 的值是无穷大的时候，就是传统的一致性哈希策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2 id="hidsection-3"&gt;权重问题&lt;a class="headerlink" href="#hidsection-3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的方法是没有区分节点权重的，如果要支持节点权重的话，需要做一点改动:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;R&lt;/tt&gt;: 当前所有节点的总负载（正在处理的总请求数）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;T&lt;/tt&gt;: 所有节点的权重总和&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L&lt;/tt&gt;: 当前所有节点的平均负载（基于权重的平均负载）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L = R/T&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;W&lt;/tt&gt;: 当前节点的权重值&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ε&lt;/tt&gt;: 一个参数用于表示在平均负载的基础上能够承受的额外负载上限。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M&lt;/tt&gt;: 节点的最大负载上限&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M = &lt;span class="pre"&gt;W*L*(1+ε)&lt;/span&gt; = &lt;span class="pre"&gt;W*R*(1+ε)/T&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;一致性哈希中进行节点查找时，增加检查匹配的节点的负载（正在处理的请求数）是否达到负载上限 &lt;tt class="docutils literal"&gt;M&lt;/tt&gt; 的操作，如果达到了上限则跳过当前节点继续往后查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到主要区别是算平均负载的时候是基于节点的权重和来计算的，算负载上限的时候是按权重比来计算的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2 id="hidsection-4"&gt;总结&lt;a class="headerlink" href="#hidsection-4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单介绍了一下 Consistent Hashing with Bounded Loads ，更详细的内容请参考参考资料。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2 id="hidsection-5"&gt;参考资料&lt;a class="headerlink" href="#hidsection-5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ai.googleblog.com/2017/04/consistent-hashing-with-bounded-loads.html"&gt;Google AI Blog: Consistent Hashing with Bounded Loads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://arxiv.org/abs/1608.01350"&gt;[1608.01350] Consistent Hashing with Bounded Loads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/vimeo-engineering-blog/improving-load-balancing-with-a-new-consistent-hashing-algorithm-9f1bd75709ed"&gt;Improving load balancing with a new consistent-hashing algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/haproxy/haproxy/commit/4f88c636097bf5f7651c790700a8bf3fb82e5f67"&gt;MEDIUM: server: Implement bounded-load hash algorithm · haproxy/haproxy&amp;#64;4f88c63&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/haproxy/haproxy/blob/d0e095c2aa54f020de8fc50db867eff1ef73350e/doc/configuration.txt#L3776"&gt;haproxy/configuration.txt at master · haproxy/haproxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.laisky.com/p/consistent-hashing/#CHBL"&gt;laisky-blog: 一致性哈希&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/02/load-balancing-strategy-algorithm-weighted-least-connection.html"&gt;负载均衡策略之最少连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/03/load-balancing-strategy-algorithm-consistent-hashing#comment-4389770157"&gt;负载均衡策略之一致性哈希&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="load-balancing"></category><category term="load-balancer"></category></entry></feed>