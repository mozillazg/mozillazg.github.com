<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mozillazg's blog</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/all-en.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2022-06-20T00:00:00+00:00</updated><entry><title>docker-credential-acr-helper: A docker credential helper for Alibaba Cloud Container Registry (ACR)</title><link href="https://mozillazg.com/2022/06/use-docker-credential-acr-helper-help-auth-alibaba-cloud-container-registry-with-temporary-password-without-docker-login-en.html" rel="alternate"></link><updated>2022-06-20T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2022-06-20:2022/06/use-docker-credential-acr-helper-help-auth-alibaba-cloud-container-registry-with-temporary-password-without-docker-login-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Normally, if we want to do &lt;tt class="docutils literal"&gt;docker pull&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;docker push&lt;/tt&gt; on private images on
Alibaba Cloud Container Registry (ACR),
we need to configure the corresponding access credentials via
&lt;tt class="docutils literal"&gt;docker login&lt;/tt&gt; command in advance.&lt;/p&gt;
&lt;p&gt;The method of configuring a username and password via the &lt;tt class="docutils literal"&gt;docker login&lt;/tt&gt;
command has several problems, as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Requires users to record and maintain an additional set of docker-specific passwords,
and password management is a bit of a pain.&lt;/li&gt;
&lt;li&gt;ACR only supports the configuration of a fixed password with no expiration time.
The cost of password change and revocation is high, and users are easily afraid to operate.&lt;/li&gt;
&lt;li&gt;It is not possible to finely configure the permissions for fixed passwords,
and it is not possible to achieve the permission control requirements like only
allowing pull operations but not push operations.&lt;/li&gt;
&lt;li&gt;Although it is possible to obtain an unlimited number of temporary passwords through the Open API,
&lt;tt class="docutils literal"&gt;docker login&lt;/tt&gt; does not support the automatic refresh of temporary passwords.
If you use a temporary password for &lt;tt class="docutils literal"&gt;docker login&lt;/tt&gt;, you will need to get
the temporary password frequently and then update it with &lt;tt class="docutils literal"&gt;docker login&lt;/tt&gt;, which is also a hassle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, Docker provides a mechanism called &lt;a class="reference external" href="https://docs.docker.com/engine/reference/commandline/login/#credential-helpers"&gt;Credential helper&lt;/a&gt;, through which Credential helper can be plugged in in a way that The Credential helper extends the way docker can get access credentials, and is no longer limited to configuring access credentials via &lt;tt class="docutils literal"&gt;docker login&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/mozillazg/docker-credential-acr-helper"&gt;docker-credential-acr-helper&lt;/a&gt;
developed for ACR is a project to help docker get access credentials to ACR image repositories project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2 id="hidintroduction"&gt;Introduction&lt;a class="headerlink" href="#hidintroduction" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, &lt;a class="reference external" href="https://github.com/mozillazg/docker-credential-acr-helper"&gt;docker-credential-acr-helper&lt;/a&gt; is a project developed specifically for ACR to help docker get access credentials to ACR image repositories.&lt;/p&gt;
&lt;p&gt;docker-credential-acr-helper solves the aforementioned problems.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Based on Aliyun's existing authentication system, you can directly use the user's familiar Aliyun access credentials, no need to record and maintain additional docker-specific username and password.&lt;/li&gt;
&lt;li&gt;Automatically obtain temporary passwords for docker operations, not relying on fixed passwords, and no need to manually refresh temporary passwords frequently.&lt;/li&gt;
&lt;li&gt;Users can configure AliCloud RAM access control policies to achieve the need for granular permission control for temporary passwords, as described in the &lt;a class="reference external" href="https://www.alibabacloud.com/help/doc-detail/72334.html"&gt;ACR documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2 id="hidusage"&gt;Usage&lt;a class="headerlink" href="#hidusage" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can experience the features provided by this project by following these steps.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Go to the &lt;a class="reference external" href="https://github.com/mozillazg/docker-credential-acr-helper/releases"&gt;github releases&lt;/a&gt; page and download the latest version of the compiled binary archive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use the checksums.txt file on the page to verify the archive, and extract the archive to get the corresponding binaries &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;docker-credential-acr-helper&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;chmod +x &lt;span class="pre"&gt;docker-credential-acr-helper&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;cp &lt;span class="pre"&gt;docker-credential-acr-helper&lt;/span&gt; /usr/local/bin&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Configure alibaba cloud access credentials, for example, use the configuration file to specify the access credentials:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat ~/.alibabacloud/credentials
[default] # Default client
type = access_key # The authentication method is access_key
access_key_id = foo # Key
access_key_secret = bar # Secret
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;6. Exit the ACR registry domain you want to test with &lt;tt class="docutils literal"&gt;docker logout &amp;lt;acr_registry_domain&amp;gt;&lt;/tt&gt; and clean up the corresponding saved docker credentials.
Confirm that you do not have access to the corresponding ACR private image by &lt;tt class="docutils literal"&gt;docker pull &amp;lt;acr_image&amp;gt;&lt;/tt&gt;.
8. Modify the &lt;tt class="docutils literal"&gt;credHelpers&lt;/tt&gt; configuration item in the docker configuration file &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.docker/config.json&lt;/span&gt;&lt;/tt&gt; to specify to use docker-credential-acr-helper to get access credentials when accessing an ACR registry domain (See the &lt;a class="reference external" href="https://docs.docker.com/engine/reference/commandline/login/#configure-credential-helpers"&gt;Official Docker Documentation&lt;/a&gt; or the project README for more details on this configuration) . Example configuration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
  &amp;quot;credHelpers&amp;quot; : {
    &amp;quot;registry.cn-beijing.aliyuncs.com&amp;quot; : &amp;quot;acr-helper&amp;quot;
  }
}
&lt;/pre&gt;
&lt;ol class="arabic simple" start="9"&gt;
&lt;li&gt;Verify that the configuration is complete with &lt;tt class="docutils literal"&gt;docker pull &amp;lt;acr_image&amp;gt;&lt;/tt&gt; and you can access the corresponding ACR private image again.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="integrated-into-third-party-projects-as-a-golang-package"&gt;
&lt;h2 id="hidintegrated-into-third-party-projects-as-a-golang-package"&gt;Integrated into third-party projects as a golang package&lt;a class="headerlink" href="#hidintegrated-into-third-party-projects-as-a-golang-package" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is also possible to use this project as a golang package, integrating the project's capabilities into third-party projects.&lt;/p&gt;
&lt;p&gt;For example, when using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;github.com/google/go-containerregistry/pkg/crane&lt;/span&gt;&lt;/tt&gt; to operate the
docker registry, you can integrate docker-credential-acr-helper in your project using the following method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;github.com/google/go-containerregistry/pkg/authn&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;github.com/google/go-containerregistry/pkg/crane&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;github.com/mozillazg/docker-credential-acr-helper/pkg/credhelper&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;kc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;authn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewMultiKeychain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;authn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefaultKeychain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;authn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewKeychainFromHelper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;credhelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewACRHelper&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;- here&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;REPO_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;crane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;crane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WithAuthFromKeychain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;got digest for %q:\n%s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The full sample code is here： &lt;a class="reference external" href="https://github.com/mozillazg/docker-credential-acr-helper/blob/master/examples/go-containerregistry-auth/main.go"&gt;examples/go-containerregistry-auth&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="faq"&gt;
&lt;h2 id="hidfaq"&gt;FAQ&lt;a class="headerlink" href="#hidfaq" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="whether-to-support-acr-enterprise-edition"&gt;
&lt;h3 id="hidwhether-to-support-acr-enterprise-edition"&gt;Whether to support ACR Enterprise Edition?&lt;a class="headerlink" href="#hidwhether-to-support-acr-enterprise-edition" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-implement-different-alibaba-cloud-access-credentials-for-different-acr-domains"&gt;
&lt;h3 id="hidhow-to-implement-different-alibaba-cloud-access-credentials-for-different-acr-domains"&gt;How to implement different Alibaba Cloud access credentials for different ACR domains?&lt;a class="headerlink" href="#hidhow-to-implement-different-alibaba-cloud-access-credentials-for-different-acr-domains" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;this can be achieved by writing separate shell scripts for different access credentials.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat /usr/local/bin/docker-credential-acr-helper-user-1
#!/usr/bin/env bash

# export ALIBABA_CLOUD_ACCESS_KEY_ID=foo
# export ALIBABA_CLOUD_ACCESS_KEY_SECRET=bar
export ALIBABA_CLOUD_CREDENTIALS_FILE=/path/to/user-1-credentials

exec /usr/local/bin/docker-credential-acr-helper &amp;quot;$&amp;#64;&amp;quot;

$ chmod +x /usr/local/bin/docker-credential-acr-helper-user-1
&lt;/pre&gt;
&lt;p&gt;Then configure &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.docker/config.json&lt;/span&gt;&lt;/tt&gt; to implement different ACR domains using shell scripts configured with different access credentials:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
  &amp;quot;credHelpers&amp;quot; : {
    &amp;quot;registry.cn-beijing.aliyuncs.com&amp;quot; : &amp;quot;acr-helper&amp;quot;,
    &amp;quot;registry.cn-hangzhou.aliyuncs.com&amp;quot; : &amp;quot;acr-helper-user-1&amp;quot;,
    &amp;quot;registry.cn-shenzhen.aliyuncs.com&amp;quot; : &amp;quot;acr-helper-user-2&amp;quot;
  }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.docker.com/engine/reference/commandline/login/"&gt;docker login | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/docker/docker-credential-helpers"&gt;docker/docker-credential-helpers: Programs to keep Docker login credentials safe by storing in platform keystores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/docker-credential-acr-helper"&gt;mozillazg/docker-credential-acr-helper: A credential helper for the Docker daemon that makes it easier to use Alibaba Cloud Container Registry(ACR).&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://help.aliyun.com/document_detail/72334.html"&gt;GetAuthorizationToken - ACR Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="ACR"></category><category term="en-version"></category></entry><entry><title>libbpfgo example: using ebpf map in kernel and userspace</title><link href="https://mozillazg.com/2022/05/ebpf-libbpfgo-use-map-example-en.html" rel="alternate"></link><updated>2022-05-22T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2022-05-22:2022/05/ebpf-libbpfgo-use-map-example-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Document how to use the ebpf map in the libbpfgo program (see the references for the ebpf map itself).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-ebpf-map-in-ebpf-programs"&gt;
&lt;h2 id="hidusing-ebpf-map-in-ebpf-programs"&gt;Using ebpf map in ebpf programs&lt;a class="headerlink" href="#hidusing-ebpf-map-in-ebpf-programs" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="define-map"&gt;
&lt;h3 id="hiddefine-map"&gt;Define map&lt;a class="headerlink" href="#hiddefine-map" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let's look at defining an ebpf map, such as a map of type &lt;tt class="docutils literal"&gt;BPF_MAP_TYPE_HASH&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BPF_MAP_TYPE_HASH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;event_map&lt;/span&gt; &lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.maps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that you mainly need to specify the fields &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;key&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;value&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;max_entries&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="operate-on-map"&gt;
&lt;h3 id="hidoperate-on-map"&gt;Operate on map&lt;a class="headerlink" href="#hidoperate-on-map" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The map object can be manipulated in the ebpf program by using the following common helper functions:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;void bpf_map_lookup_elem(map, void *key. &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt; Perform a lookup in map for an entry associated to key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpf_map_lookup_elem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="c1"&gt;// key not exist&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;void bpf_map_update_elem(map, void *key, &lt;span class="pre"&gt;...,&lt;/span&gt; __u64 flags)&lt;/tt&gt; Add or update the value of the entry associated to key in map with value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* File: include/uapi/linux/bpf.h */&lt;/span&gt;
&lt;span class="cm"&gt;/* flags for BPF_MAP_UPDATE_ELEM command */&lt;/span&gt;
&lt;span class="cp"&gt;#define BPF_ANY       0 &lt;/span&gt;&lt;span class="cm"&gt;/* create new element or update existing */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define BPF_NOEXIST   1 &lt;/span&gt;&lt;span class="cm"&gt;/* create new element only if it didn&amp;#39;t exist */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define BPF_EXIST     2 &lt;/span&gt;&lt;span class="cm"&gt;/* only update existing element */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;bpf_map_update_elem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BPF_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;void bpf_map_delete_elem(map, void *key)&lt;/tt&gt; Delete entry with key from map.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bpf_map_delete_elem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full sample codes on Github: &lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/08-map-map-type-hash-kernel"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/08-map-map-type-hash-kernel&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pin-map"&gt;
&lt;h3 id="hidpin-map"&gt;pin map&lt;a class="headerlink" href="#hidpin-map" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The pin map is used to save the map to the local filesystem for persistence. In libbpf, it is automatically saved to the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/sys/fs/bpf/&amp;lt;map_name&amp;gt;&lt;/span&gt;&lt;/tt&gt; path.&lt;/p&gt;
&lt;p&gt;The method for defining a pin map is simply to add a &lt;tt class="docutils literal"&gt;pinning&lt;/tt&gt; field to the normal map:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BPF_MAP_TYPE_HASH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;event_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pinning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LIBBPF_PIN_BY_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;- pin&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;event_map&lt;/span&gt; &lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.maps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full sample codes on Github:  &lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/11-map-pin"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/11-map-pin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="using-ebpf-map-in-go-program"&gt;
&lt;h2 id="hidusing-ebpf-map-in-go-program"&gt;Using ebpf map in go program&lt;a class="headerlink" href="#hidusing-ebpf-map-in-go-program" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The ebpf map defined in the ebpf program can be manipulated in the go program using libbpfgo.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3 id="hidid1"&gt;Operate on map&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Get the map object defined by &lt;tt class="docutils literal"&gt;bpfmap, err := &lt;span class="pre"&gt;bpfModule.GetMap(&amp;quot;bpf_map&amp;quot;)&lt;/span&gt;&lt;/tt&gt;, and then you can
do some common operations:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Update(key, value unsafe.Pointer) error&lt;/tt&gt; Add or update the value of the entry associated to key in map with value and use &lt;tt class="docutils literal"&gt;BPF_ANY&lt;/tt&gt; as flag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="nx"&gt;keyPtr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;unsafe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;valuePtr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;unsafe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;bpfmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyPtr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;valuePtr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;GetValue(key unsafe.Pointer) &lt;span class="pre"&gt;([]byte,&lt;/span&gt; error)&lt;/tt&gt; Perform a lookup in map for an entry associated to key. Return an error when the key is not exist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;keyPtr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;unsafe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bpfmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyPtr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;DeleteKey(key unsafe.Pointer) error&lt;/tt&gt; Delete entry with key from map. Return an error when the key is not exist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;keyPtr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;unsafe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bpfmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeleteKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyPtr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full codes on Github: &lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/09-map-map-type-hash-userspace"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/09-map-map-type-hash-userspace&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/"&gt;BCC to libbpf conversion guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/libbpfgo"&gt;aquasecurity/libbpfgo: eBPF library for Go, wrapping libbpf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://prototype-kernel.readthedocs.io/en/latest/bpf/ebpf_maps.html"&gt;eBPF maps — Prototype Kernel 0.0.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://man7.org/linux/man-pages/man2/bpf.2.html"&gt;bpf(2) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="libbpf"></category><category term="libbpfgo"></category><category term="go"></category><category term="golang"></category><category term="en-version"></category></entry><entry><title>Frequently asked questions about using tracepoint with ebpf/libbpf programs</title><link href="https://mozillazg.com/2022/05/ebpf-libbpf-tracepoint-common-questions-en.html" rel="alternate"></link><updated>2022-05-15T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2022-05-15:2022/05/ebpf-libbpf-tracepoint-common-questions-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Note some common problems related to tracepoint when writing ebpf/libbpf programs (such as &lt;tt class="docutils literal"&gt;BPF_PROG_TYPE_TRACEPOINT&lt;/tt&gt; program).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-events-can-be-monitored-by-tracepoint"&gt;
&lt;h2 id="hidwhat-events-can-be-monitored-by-tracepoint"&gt;What events can be monitored by tracepoint&lt;a class="headerlink" href="#hidwhat-events-can-be-monitored-by-tracepoint" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The events that tracepoint can monitor can be found by looking at the contents of the &lt;tt class="docutils literal"&gt;/sys/kernel/debug/tracing/available_events&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;The format of each line in the file is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;category&amp;gt;:&amp;lt;name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
syscalls:sys_enter_execve
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="format-of-sec-content"&gt;
&lt;h2 id="hidformat-of-sec-content"&gt;Format of SEC content&lt;a class="headerlink" href="#hidformat-of-sec-content" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The SEC format for the tracepoint event is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SEC(&amp;quot;tracepoint/&amp;lt;category&amp;gt;/&amp;lt;name&amp;gt;&amp;quot;)

// for example:
// SEC(&amp;quot;tracepoint/syscalls/sys_enter_openat&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SEC(&amp;quot;tp/&amp;lt;category&amp;gt;/&amp;lt;name&amp;gt;&amp;quot;)

// for example:
// SEC(&amp;quot;tp/syscalls/sys_enter_openat&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;he values of &lt;tt class="docutils literal"&gt;&amp;lt;category&amp;gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;lt;name&amp;gt;&lt;/tt&gt; both take the values listed in the available_events file earlier.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SEC(&amp;quot;tp/xx/yy&amp;quot;)&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SEC(&amp;quot;tracepoint/xx/yy&amp;quot;)&lt;/span&gt;&lt;/tt&gt; are actually equivalent, depending on personal preference, which one can be used at will.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-determine-the-parameter-type-of-the-tracepoint-event-handler-and-get-the-corresponding-kernel-call-parameters"&gt;
&lt;h2 id="hidhow-to-determine-the-parameter-type-of-the-tracepoint-event-handler-and-get-the-corresponding-kernel-call-parameters"&gt;How to determine the parameter type of the tracepoint event handler and get the corresponding kernel call parameters&lt;a class="headerlink" href="#hidhow-to-determine-the-parameter-type-of-the-tracepoint-event-handler-and-get-the-corresponding-kernel-call-parameters" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Suppose that we want to monitor the &lt;tt class="docutils literal"&gt;fchmodat&lt;/tt&gt; system call involved in the &lt;tt class="docutils literal"&gt;chmod&lt;/tt&gt; command via tracepoint. Then, how do we determine the types of parameters of the event handler functions in ebpf and how do we get the contents of the corresponding &lt;tt class="docutils literal"&gt;fchmodat&lt;/tt&gt; system call parameters? For example, get the name of the file to be operated on and the value of the permission mode to be operated on.&lt;/p&gt;
&lt;p&gt;The first step is to determine the system call used by &lt;tt class="docutils literal"&gt;chmod&lt;/tt&gt;, which is relatively simple and can be done in a variety of ways, such as through the &lt;tt class="docutils literal"&gt;strace&lt;/tt&gt; command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace chmod 600 a.txt
...
fchmodat(AT_FDCWD, &amp;quot;a.txt&amp;quot;, 0600)       = 0
...
&lt;/pre&gt;
&lt;p&gt;The second step is to find the tracepoint event that can be used for this system call:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo cat /sys/kernel/debug/tracing/available_events |grep fchmodat
syscalls:sys_exit_fchmodat
syscalls:sys_enter_fchmodat
&lt;/pre&gt;
&lt;p&gt;As you can see, there are &lt;tt class="docutils literal"&gt;sys_enter_fchmodat&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;sys_exit_fchmodat&lt;/tt&gt; events. Here choose
&lt;tt class="docutils literal"&gt;sys_enter_fchmodat&lt;/tt&gt; event for subsequent explanation.&lt;/p&gt;
&lt;p&gt;The third step is to determine the argument type of the function. This needs to be found in the &lt;tt class="docutils literal"&gt;vmlinux.h&lt;/tt&gt; file, generally &lt;tt class="docutils literal"&gt;sys_enter_xx&lt;/tt&gt; corresponds to &lt;tt class="docutils literal"&gt;trace_event_raw_sys_enter&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sys_exit_xx&lt;/tt&gt; corresponds to &lt;tt class="docutils literal"&gt;trace_event_raw_sys_exit&lt;/tt&gt;, and the others generally correspond to &lt;tt class="docutils literal"&gt;trace_event_raw_sys_enter&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;trace_event_raw_&amp;lt;name&amp;gt;&lt;/tt&gt;, if you don't find it, you can refer to the &lt;tt class="docutils literal"&gt;trace_event_raw_sys_enter&lt;/tt&gt; example to find its similar struct.&lt;/p&gt;
&lt;p&gt;For &lt;tt class="docutils literal"&gt;sys_enter_fchmodat&lt;/tt&gt;, we use the struct &lt;tt class="docutils literal"&gt;trace_event_raw_sys_enter&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;trace_event_raw_sys_enter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;trace_entry&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;__data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;args&lt;/tt&gt; stores the information we can get about the event, and what information is contained in them is what we need to determine in step 4.&lt;/p&gt;
&lt;p&gt;The fourth step is to determine what information is available in the event itself, although we know that the &lt;tt class="docutils literal"&gt;fchmodat&lt;/tt&gt; system call requires the file name and mode information.
However, we are not sure if this information is available in the ebpf program. This can be done by looking at
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/sys/kernel/debug/tracing/events/&amp;lt;category&amp;gt;/&amp;lt;name&amp;gt;/format&lt;/span&gt;&lt;/tt&gt; file to see what information we can get.
For example, the &lt;tt class="docutils literal"&gt;sys_enter_fchmodat&lt;/tt&gt; event &lt;tt class="docutils literal"&gt;/sys/kernel/debug/tracing/events/syscalls/sys_enter_fchmodat/format&lt;/tt&gt; is as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo cat /sys/kernel/debug/tracing/events/syscalls/sys_enter_fchmodat/format
name: sys_enter_fchmodat
ID: 647
format:
        field:unsigned short common_type;       offset:0;       size:2; signed:0;
        field:unsigned char common_flags;       offset:2;       size:1; signed:0;
        field:unsigned char common_preempt_count;       offset:3;       size:1; signed:0;
        field:int common_pid;   offset:4;       size:4; signed:1;

        field:int __syscall_nr; offset:8;       size:4; signed:1;
        field:int dfd;  offset:16;      size:8; signed:0;
        field:const char * filename;    offset:24;      size:8; signed:0;
        field:umode_t mode;     offset:32;      size:8; signed:0;

print fmt: &amp;quot;dfd: 0x%08lx, filename: 0x%08lx, mode: 0x%08lx&amp;quot;, ((unsigned long)(REC-&amp;gt;dfd)), ((unsigned long)(REC-&amp;gt;filename)), ((unsigned long)(REC-&amp;gt;mode))
&lt;/pre&gt;
&lt;p&gt;The fields referenced in &lt;tt class="docutils literal"&gt;print fmt&lt;/tt&gt; are all information that we can get in the ebpf program.
From the above, we can see that we can get the &lt;tt class="docutils literal"&gt;sys_enter_fchmodat&lt;/tt&gt; event &lt;tt class="docutils literal"&gt;dfd&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;filename&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;mode&lt;/tt&gt; information.  Here contains the previously mentioned file name and permission mode information.
The values of these fields can be obtained from the &lt;tt class="docutils literal"&gt;args&lt;/tt&gt; array of &lt;tt class="docutils literal"&gt;trace_event_raw_sys_enter&lt;/tt&gt;, i.e. &lt;tt class="docutils literal"&gt;args[0]&lt;/tt&gt; for &lt;tt class="docutils literal"&gt;dfd&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;args[1]&lt;/tt&gt; for &lt;tt class="docutils literal"&gt;filename&lt;/tt&gt; and so on.&lt;/p&gt;
&lt;p&gt;Once the information has been determined, you can write the program. For example, the example ebpf program for the &lt;tt class="docutils literal"&gt;sys_enter_fchmodat&lt;/tt&gt; event above is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tracepoint/syscalls/sys_enter_fchmodat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tracepoint__syscalls__sys_enter_fchmodat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;trace_event_raw_sys_enter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;

        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filename_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;bpf_core_read_user_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;filename_ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BPF_CORE_READ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full example codes on Github:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/07-tracepoint-args"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/07-tracepoint-args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/14-tracepoint-args-sched_switch"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/14-tracepoint-args-sched_switch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nakryiko.com/posts/bpf-core-reference-guide/"&gt;BPF CO-RE reference guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/libbpf/libbpf/blob/12e932ac0e18546dd7247e66ea1b4aa236d2ef38/src/libbpf.c#L9002-L9081"&gt;libbpf/libbpf.c at 12e932ac0e18546dd7247e66ea1b4aa236d2ef38 · libbpf/libbpf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/"&gt;BCC to libbpf conversion guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="tracepoint"></category><category term="libbpf"></category><category term="libbpfgo"></category><category term="go"></category><category term="golang"></category><category term="en-version"></category></entry><entry><title>libbpfgo example: get process info in eBPF program</title><link href="https://mozillazg.com/2022/05/ebpf-libbpfgo-get-process-info-en.html" rel="alternate"></link><updated>2022-05-13T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2022-05-13:2022/05/ebpf-libbpfgo-get-process-info-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Most ebpf-based applications need to obtain information about the process that triggered the event when the corresponding event occurred in the ebpf program. This article documents how to obtain common process information in ebpf programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="get-process-information"&gt;
&lt;h2 id="hidget-process-information"&gt;Get process information&lt;a class="headerlink" href="#hidget-process-information" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In linux, the &lt;a class="reference external" href="https://elixir.bootlin.com/linux/v5.13/source/include/linux/sched.h#L657"&gt;task_struct&lt;/a&gt; structure contains process-related information, so we can get the process information we want from the task instance obtained from &lt;tt class="docutils literal"&gt;bpf_get_ current_task()&lt;/tt&gt; from the task instance we get: pid, ppid, process name, process namespace information, etc.&lt;/p&gt;
&lt;p&gt;Also, &lt;a class="reference external" href="https://man7.org/linux/man-pages/man7/bpf-helpers.7.html"&gt;bpf-helpers&lt;/a&gt; provides some helper functions to assist us in getting relevant information, such as the &lt;tt class="docutils literal"&gt;bpf_get_current_task ()&lt;/tt&gt; function.&lt;/p&gt;
&lt;div class="section" id="get-host-level-pid-information"&gt;
&lt;h3 id="hidget-host-level-pid-information"&gt;Get host-level pid information&lt;a class="headerlink" href="#hidget-host-level-pid-information" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first is how to get the pid information at the host level. The reason for adding a host level is that in a container-like case, the process has two pid information, one is the pid seen on the host, and the other is the pid seen under a specific pid namespace in the container.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;bpf_get_current_pid_tgid()&lt;/tt&gt; function (which encapsulates calls to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;task-&amp;gt;tgid&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;task-&amp;gt;pid&lt;/span&gt;&lt;/tt&gt;) provided by bpf-helpers can be used to obtain the corresponding host-level pid information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt; &lt;span class="n"&gt;host_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpf_get_current_pid_tgid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With pid, you will generally also need ppid, the pid of the parent process. ppid we will have to get from the task.&lt;/p&gt;
&lt;p&gt;First, you need to get the task information of the parent process through &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;task-&amp;gt;real_parent&lt;/span&gt;&lt;/tt&gt;, and then get the corresponding pid information through &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;task-&amp;gt;tgid&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;task_struct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;task_struct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;bpf_get_current_task&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;u32&lt;/span&gt; &lt;span class="n"&gt;host_ppid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;real_parent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tgid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="get-the-pid-information-at-the-userspace-level"&gt;
&lt;h3 id="hidget-the-pid-information-at-the-userspace-level"&gt;Get the pid information at the userspace level&lt;a class="headerlink" href="#hidget-the-pid-information-at-the-userspace-level" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned above, in scenarios where containers use separate pid namspace, the pid seen under the corresponding pid namespace is not the same as the pid on the host, So we also need to get the pid information at the userspace level.&lt;/p&gt;
&lt;p&gt;It is mainly through &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;task-&amp;gt;nsproxy&lt;/span&gt;&lt;/tt&gt; that we get the &lt;a class="reference external" href="https://elixir.bootlin.com/linux/v5.13/source/include/linux/nsproxy.h#L31"&gt;nsproxy&lt;/a&gt; information, and the structure definition of &lt;tt class="docutils literal"&gt;nsproxy&lt;/tt&gt; is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * A structure to contain pointers to all per-process&lt;/span&gt;
&lt;span class="cm"&gt; * namespaces - fs (mount), uts, network, sysvipc, etc.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The pid namespace is an exception -- it&amp;#39;s accessed using&lt;/span&gt;
&lt;span class="cm"&gt; * task_active_pid_ns.  The pid namespace here is the&lt;/span&gt;
&lt;span class="cm"&gt; * namespace that children will use.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * &amp;#39;count&amp;#39; is the number of tasks holding a reference.&lt;/span&gt;
&lt;span class="cm"&gt; * The count for each namespace, then, will be the number&lt;/span&gt;
&lt;span class="cm"&gt; * of nsproxies pointing to it, not the number of tasks.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The nsproxy is shared by tasks which share all namespaces.&lt;/span&gt;
&lt;span class="cm"&gt; * As soon as a single namespace is cloned or unshared, the&lt;/span&gt;
&lt;span class="cm"&gt; * nsproxy is copied.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;nsproxy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;atomic_t&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;uts_namespace&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;uts_ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;ipc_namespace&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ipc_ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;mnt_namespace&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mnt_ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pid_namespace&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pid_ns_for_children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;net&lt;/span&gt;           &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;net_ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;time_namespace&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time_ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;time_namespace&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time_ns_for_children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;cgroup_namespace&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cgroup_ns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that &lt;tt class="docutils literal"&gt;nsproxy&lt;/tt&gt; contains various namespace information related to the process.&lt;/p&gt;
&lt;p&gt;You can get the required userspace level pid information by using the following method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nsproxy&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pid_ns_for_children&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;u32&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;group_leader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;thread_pid&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The method of getting the corresponding ppid is similar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;real_parent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nsproxy&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pid_ns_for_children&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;u32&lt;/span&gt; &lt;span class="n"&gt;ppid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;real_parent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;group_leader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;thread_pid&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p_level&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="get-namespace-information"&gt;
&lt;h2 id="hidget-namespace-information"&gt;Get namespace information&lt;a class="headerlink" href="#hidget-namespace-information" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As we saw earlier, &lt;tt class="docutils literal"&gt;nsproxy&lt;/tt&gt; contains various namespace information, so you can get the namespace related information directly through it.&lt;/p&gt;
&lt;p&gt;For example, get the id of the pid namespace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt; &lt;span class="n"&gt;pid_ns_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nsproxy&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pid_ns_for_children&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ium&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full codes on Github: &lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/05-get-process-info"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/05-get-process-info&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://man7.org/linux/man-pages/man7/bpf-helpers.7.html"&gt;bpf-helpers(7) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://elixir.bootlin.com/linux/v5.13/source/include/linux/sched.h#L657"&gt;task_struct - sched.h - include/linux/sched.h - Linux source code (v5.13) - Bootlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/libbpfgo"&gt;aquasecurity/libbpfgo: eBPF library for Go, wrapping libbpf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/tracee"&gt;aquasecurity/tracee: Linux Runtime Security and Forensics using eBPF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="libbpf"></category><category term="libbpfgo"></category><category term="go"></category><category term="golang"></category><category term="en-version"></category></entry><entry><title>libbpfgo example: Write an eBPF program that uses perfbuf map</title><link href="https://mozillazg.com/2022/05/ebpf-libbpfgo-use-perfbuf-map-en.html" rel="alternate"></link><updated>2022-05-04T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2022-05-04:2022/05/ebpf-libbpfgo-use-perfbuf-map-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article briefly documents how to write an ebpf program that uses a perfbuf map to transfer data, and how to use libbpfgo to process data stored in the perfbuf map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ebpf-codes"&gt;
&lt;h2 id="hidebpf-codes"&gt;ebpf codes&lt;a class="headerlink" href="#hidebpf-codes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The way perfbuf map is used in ebpf c code is in two main steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define a &lt;tt class="docutils literal"&gt;BPF_MAP_TYPE_PERF_EVENT_ARRAY&lt;/tt&gt; map&lt;/li&gt;
&lt;li&gt;write data via the &lt;tt class="docutils literal"&gt;bpf_perf_event_output&lt;/tt&gt; function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The sample code snippet is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* BPF perfbuf map */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BPF_MAP_TYPE_PERF_EVENT_ARRAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.maps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kprobe/do_sys_openat2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;kprobe__do_sys_openat2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pt_regs&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpf_get_current_pid_tgid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// write data&lt;/span&gt;
                &lt;span class="n"&gt;bpf_perf_event_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BPF_F_CURRENT_CPU&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="golang-codes"&gt;
&lt;h2 id="hidgolang-codes"&gt;golang codes&lt;a class="headerlink" href="#hidgolang-codes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are three main steps to read the data in this map using libbpfgo:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Call the &lt;tt class="docutils literal"&gt;InitPerfBuf&lt;/tt&gt; method to initialize a perfbuf map data receiving instance.&lt;/li&gt;
&lt;li&gt;Start the instance with &lt;tt class="docutils literal"&gt;Start()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Receive and decode data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The sample code snippet is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;eventsChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;lostChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;uint64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bpfModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InitPerfBuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventsChannel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lostChannel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;eventsChannel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;// decode data: u32 pid&lt;/span&gt;
                &lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LittleEndian&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Uint32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pid %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;lostChannel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lost %d events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full codes on Github: &lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/02-perf-buf"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/02-perf-buf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/libbpfgo"&gt;aquasecurity/libbpfgo: eBPF library for Go, wrapping libbpf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="libbpf"></category><category term="libbpfgo"></category><category term="go"></category><category term="golang"></category><category term="en-version"></category></entry><entry><title>libbpfgo example: Write an eBPF program that uses ringbuf map</title><link href="https://mozillazg.com/2022/05/ebpf-libbpfgo-use-ringbuf-map-en.html" rel="alternate"></link><updated>2022-05-04T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2022-05-04:2022/05/ebpf-libbpfgo-use-ringbuf-map-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article briefly documents how to write an ebpf program that uses a ringbuf map to transfer data, and how to use libbpfgo to process data stored in the ringbuf map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ebpf-codes"&gt;
&lt;h2 id="hidebpf-codes"&gt;ebpf codes&lt;a class="headerlink" href="#hidebpf-codes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The way ringbuf map is used in ebpf c code is in three main steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define a &lt;tt class="docutils literal"&gt;BPF_MAP_TYPE_RINGBUF&lt;/tt&gt; map&lt;/li&gt;
&lt;li&gt;Before writing data, apply for memory space through &lt;tt class="docutils literal"&gt;bpf_ringbuf_reserve&lt;/tt&gt;, and write data only after the application is successful, if this step is missing, the program execution will prompt &lt;tt class="docutils literal"&gt;libbpf: load bpf program failed: Invalid argument&lt;/tt&gt; error.&lt;/li&gt;
&lt;li&gt;write data via the &lt;tt class="docutils literal"&gt;bpf_ringbuf_submit&lt;/tt&gt; function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The sample code snippet is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* BPF ringbuf map */&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BPF_MAP_TYPE_RINGBUF&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;__uint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="cm"&gt;/* 256 KB */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.maps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kprobe/do_sys_openat2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;kprobe__do_sys_openat2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pt_regs&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="c1"&gt;// xx&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpf_ringbuf_reserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpf_get_current_pid_tgid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="c1"&gt;// xx&lt;/span&gt;
                &lt;span class="n"&gt;bpf_ringbuf_submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="golang-codes"&gt;
&lt;h2 id="hidgolang-codes"&gt;golang codes&lt;a class="headerlink" href="#hidgolang-codes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are three main steps to read the data in this map using libbpfgo:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Call the &lt;tt class="docutils literal"&gt;InitRingBuf&lt;/tt&gt; method to initialize a ringbuf map data receiving instance.&lt;/li&gt;
&lt;li&gt;Start the instance with &lt;tt class="docutils literal"&gt;Start()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Receive and decode data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The sample code snippet is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;eventsChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bpfModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InitRingBuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventsChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;eventsChannel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;// decode data: u32 pid&lt;/span&gt;
                &lt;span class="nx"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LittleEndian&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Uint32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pid %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full codes on Github: &lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/03-ring-buf"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/03-ring-buf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/libbpfgo"&gt;aquasecurity/libbpfgo: eBPF library for Go, wrapping libbpf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nakryiko.com/posts/bpf-ringbuf/"&gt;BPF ring buffer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="libbpf"></category><category term="libbpfgo"></category><category term="go"></category><category term="golang"></category><category term="en-version"></category></entry><entry><title>libbpfgo example: setting up the development environment and writing the first eBPF program</title><link href="https://mozillazg.com/2022/05/ebpf-libbpfgo-develop-env-and-hello-world-en.html" rel="alternate"></link><updated>2022-05-03T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2022-05-03:2022/05/ebpf-libbpfgo-develop-env-and-hello-world-en.html</id><summary type="html">&lt;div class="section" id="preface"&gt;
&lt;h2 id="hidpreface"&gt;Preface&lt;a class="headerlink" href="#hidpreface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article documents setting up the &lt;a class="reference external" href="https://github.com/aquasecurity/libbpfgo"&gt;libbpfgo&lt;/a&gt; development environment and writing a simple eBPF sample application using libbpfgo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-a-development-environment"&gt;
&lt;h2 id="hidsetting-up-a-development-environment"&gt;Setting up a development environment&lt;a class="headerlink" href="#hidsetting-up-a-development-environment" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For simplicity, I'm using &lt;a class="reference external" href="https://www.vagrantup.com/"&gt;vagrant&lt;/a&gt; to build the VM development environment:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;install vagrant-env plugin：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vagrant plugin install vagrant-env
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;clone sample codes:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/mozillazg &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/mozillazg &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  git clone https://github.com/mozillazg/hello-libbpfgo.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; hello-libbpfgo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  git submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;setting up .env file:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cp .env.example .env
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;start the VM:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vagrant up
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;ssh into the VM:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vagrant ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="write-sample-program"&gt;
&lt;h2 id="hidwrite-sample-program"&gt;Write sample program&lt;a class="headerlink" href="#hidwrite-sample-program" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is a brief introduction to the sample program using the sample program in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;01-hello-world&lt;/span&gt;&lt;/tt&gt; directory of hello-libbpfgo as an example.&lt;/p&gt;
&lt;p&gt;main.ebpf.c:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;vmlinux.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;bpf/bpf_helpers.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;bpf/bpf_tracing.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;SEC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kprobe/do_sys_openat2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;kprobe__do_sys_openat2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;pt_regs&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;bpf_probe_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;PT_REGS_PARM2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

                &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;open file %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;bpf_trace_printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;main.ebpf.c&lt;/tt&gt;  is a simple program that hooks &lt;tt class="docutils literal"&gt;do_sys_openat2&lt;/tt&gt;, a kernel function call.
The filename information in the function call parameters is recorded.&lt;/p&gt;
&lt;p&gt;The main point is to see how to call this ebpf program in a go program using libbpfgo.&lt;/p&gt;
&lt;p&gt;main.go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;

        &lt;span class="nx"&gt;bpf&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/aquasecurity/libbpfgo&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;bpfModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bpf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewModuleFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main.bpf.o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;bpfModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bpfModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BPFLoadObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bpfModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;kprobe__do_sys_openat2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;prog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AttachKprobe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;do_sys_openat2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Waiting...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from the go program above, there are four main steps in calling the ebpf program using libbpfgo:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Read the compiled .o file with the &lt;tt class="docutils literal"&gt;bpf.NewModuleFromFile&lt;/tt&gt; method.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;bpfModule.BPFLoadObject()&lt;/tt&gt; to load the object information from the read .o file.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;bpfModule.GetProgram&lt;/tt&gt; to get the corresponding hook function in the ebpf program.&lt;/li&gt;
&lt;li&gt;If the function is a kprobe hook, then the &lt;tt class="docutils literal"&gt;prog.AttachKprobe&lt;/tt&gt; method is called to attach it to the corresponding kernel function hook.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's compile the program and then looks at the corresponding results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vagrant ssh
$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/mozillazg/hello-libbpfgo/01-hello-world
$ make
$ sudo ./main
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open another terminal to see output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vagrant ssh
$ sudo cat /sys/kernel/debug/tracing/trace_pipe

runc:&lt;span class="o"&gt;[&lt;/span&gt;2:INIT&lt;span class="o"&gt;]&lt;/span&gt;-100616  &lt;span class="o"&gt;[&lt;/span&gt;000&lt;span class="o"&gt;]&lt;/span&gt; d...  5527.233315: bpf_trace_printk: open file /proc/self/fd

runc:&lt;span class="o"&gt;[&lt;/span&gt;2:INIT&lt;span class="o"&gt;]&lt;/span&gt;-100616  &lt;span class="o"&gt;[&lt;/span&gt;000&lt;span class="o"&gt;]&lt;/span&gt; d...  5527.233641: bpf_trace_printk: open file /proc/self/status

runc:&lt;span class="o"&gt;[&lt;/span&gt;2:INIT&lt;span class="o"&gt;]&lt;/span&gt;-100616  &lt;span class="o"&gt;[&lt;/span&gt;000&lt;span class="o"&gt;]&lt;/span&gt; d...  5527.233802: bpf_trace_printk: open file /etc/passwd

runc:&lt;span class="o"&gt;[&lt;/span&gt;2:INIT&lt;span class="o"&gt;]&lt;/span&gt;-100616  &lt;span class="o"&gt;[&lt;/span&gt;000&lt;span class="o"&gt;]&lt;/span&gt; d...  5527.233829: bpf_trace_printk: open file /etc/group
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out full codes on Github: &lt;a class="reference external" href="https://github.com/mozillazg/hello-libbpfgo/tree/master/01-hello-world"&gt;https://github.com/mozillazg/hello-libbpfgo/tree/master/01-hello-world&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.aquasec.com/libbpf-ebpf-programs"&gt;How to Build eBPF Programs with libbpfgo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/btfhub"&gt;aquasecurity/btfhub: BTFHub, together with BTFHub Archive repository, provides BTF files for existing published kernels that don't support embedded BTF.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/libbpfgo"&gt;aquasecurity/libbpfgo: eBPF library for Go, wrapping libbpf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aquasecurity/tracee"&gt;aquasecurity/tracee: Linux Runtime Security and Forensics using eBPF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="libbpf"></category><category term="libbpfgo"></category><category term="go"></category><category term="golang"></category><category term="en-version"></category></entry><entry><title>jq usage examples</title><link href="https://mozillazg.com/2018/01/jq-use-examples-cookbook-en.html" rel="alternate"></link><updated>2018-01-28T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2018-01-28:2018/01/jq-use-examples-cookbook-en.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; is a very powerful command line tool for processing JSON data. Here is a record of some of the operations used by jq recently, for direct reference when you have similar needs in the future.&lt;/p&gt;
&lt;div class="section" id="basic-operation"&gt;
&lt;h2 id="hidbasic-operation"&gt;Basic operation&lt;a class="headerlink" href="#hidbasic-operation" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The command line usage of jq is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jq -h
jq - commandline JSON processor &lt;span class="o"&gt;[&lt;/span&gt;version 1.5&lt;span class="o"&gt;]&lt;/span&gt;
Usage: jq &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &amp;lt;jq filter&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;file...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This article focuses on the commonly used &lt;tt class="docutils literal"&gt;&amp;lt;jq filter&amp;gt;&lt;/tt&gt;. Most of the operations can be tested directly online with &lt;a class="reference external" href="https://jqplay.org"&gt;jq play&lt;/a&gt; .&lt;/p&gt;
&lt;div class="section" id="output-raw-json-data"&gt;
&lt;h3 id="hidoutput-raw-json-data"&gt;Output raw JSON data&lt;a class="headerlink" href="#hidoutput-raw-json-data" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The default is to output as is without specifying a filter, or you can use the
&lt;tt class="docutils literal"&gt;.&lt;/tt&gt; filter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play online running link：&lt;a class="reference external" href="https://jqplay.org/s/KhRuUFCP2h"&gt;https://jqplay.org/s/KhRuUFCP2h&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="object-operation"&gt;
&lt;h3 id="hidobject-operation"&gt;object operation&lt;a class="headerlink" href="#hidobject-operation" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="get-the-value-of-a-key"&gt;
&lt;h4 id="hidget-the-value-of-a-key"&gt;Get the value of a key&lt;a class="headerlink" href="#hidget-the-value-of-a-key" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.key&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.foo.bar&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.[&amp;quot;key&amp;quot;]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .url
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[&amp;quot;url&amp;quot;]&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Tn7NUbP4Dr"&gt;https://jqplay.org/s/Tn7NUbP4Dr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can put a question mark after it to indicate that no error will be reported
when the input is not an object &lt;tt class="docutils literal"&gt;.key?&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.a&amp;#39;&lt;/span&gt;
jq: error &lt;span class="o"&gt;(&lt;/span&gt;at &amp;lt;stdin&amp;gt;:1&lt;span class="o"&gt;)&lt;/span&gt;: Cannot index number with string &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.a?&amp;#39;&lt;/span&gt;
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;?&lt;/tt&gt; rule fits all correct filters, and adding &lt;tt class="docutils literal"&gt;?&lt;/tt&gt; can ignore the error message&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-array-of-all-the-keys"&gt;
&lt;h4 id="hidan-array-of-all-the-keys"&gt;An array of all the keys&lt;a class="headerlink" href="#hidan-array-of-all-the-keys" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;keys&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq keys
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/_5KiPRS75r"&gt;https://jqplay.org/s/_5KiPRS75r&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="all-values"&gt;
&lt;h4 id="hidall-values"&gt;All values&lt;a class="headerlink" href="#hidall-values" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/6HRvEND8AB"&gt;https://jqplay.org/s/6HRvEND8AB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-array-of-all-values"&gt;
&lt;h4 id="hidan-array-of-all-values"&gt;An array of all values&lt;a class="headerlink" href="#hidan-array-of-all-values" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[.[]]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;[]]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/JGIX6hTt_8"&gt;https://jqplay.org/s/JGIX6hTt_8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="array-operations"&gt;
&lt;h3 id="hidarray-operations"&gt;Array operations&lt;a class="headerlink" href="#hidarray-operations" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="fetch-all-elements"&gt;
&lt;h4 id="hidfetch-all-elements"&gt;Fetch all elements&lt;a class="headerlink" href="#hidfetch-all-elements" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Y9UgK_4xxE"&gt;https://jqplay.org/s/Y9UgK_4xxE&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slice"&gt;
&lt;h4 id="hidslice"&gt;slice&lt;a class="headerlink" href="#hidslice" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[1]&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.[0:2]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;jim&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;jim&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[&lt;/span&gt;0:2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/seNL7hW38W"&gt;https://jqplay.org/s/seNL7hW38W&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manipulating-arrays-of-objects"&gt;
&lt;h4 id="hidmanipulating-arrays-of-objects"&gt;Manipulating arrays of objects&lt;a class="headerlink" href="#hidmanipulating-arrays-of-objects" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For example, to retrieve the value of name from an array element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;.name
&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Z5qjhJnRyn"&gt;https://jqplay.org/s/Z5qjhJnRyn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to use the following pipeline operations that will be mentioned below.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.[]|.name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to recompose the result into an array, you can do so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;[]&lt;/span&gt;.name&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use the &lt;tt class="docutils literal"&gt;map&lt;/tt&gt; that will be mentioned below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;map(.name)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use-multiple-filters"&gt;
&lt;h3 id="hiduse-multiple-filters"&gt;Use multiple filters&lt;a class="headerlink" href="#hiduse-multiple-filters" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;,&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.url, .name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/02CPHO1ESj"&gt;https://jqplay.org/s/02CPHO1ESj&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-operations"&gt;
&lt;h2 id="hidadvanced-operations"&gt;Advanced Operations&lt;a class="headerlink" href="#hidadvanced-operations" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="pipeline-to-do-secondary-or-multiple-processing-of-the-processed-results"&gt;
&lt;h3 id="hidpipeline-to-do-secondary-or-multiple-processing-of-the-processed-results"&gt;Pipeline (to do secondary or multiple processing of the processed results)&lt;a class="headerlink" href="#hidpipeline-to-do-secondary-or-multiple-processing-of-the-processed-results" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; to implement a pipeline like function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.|.url&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/L5bu1ovLr-"&gt;https://jqplay.org/s/L5bu1ovLr-&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;tests&amp;quot;: [{&amp;quot;foobar&amp;quot;: &amp;quot;v1&amp;quot;}, {&amp;quot;foobar&amp;quot;: &amp;quot;v2&amp;quot;}]}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.tests |.[] |.foobar&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;v2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/9UcLXKEgaT"&gt;https://jqplay.org/s/9UcLXKEgaT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also use the shell's &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; implementation directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.url&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;tests&amp;quot;: [{&amp;quot;foobar&amp;quot;: &amp;quot;v1&amp;quot;}, {&amp;quot;foobar&amp;quot;: &amp;quot;v2&amp;quot;}]}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.tests&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.foobar&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;v2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="get-the-length-of-the-content-string-length-of-an-array"&gt;
&lt;h3 id="hidget-the-length-of-the-content-string-length-of-an-array"&gt;Get the length of the content (string, length of an array)&lt;a class="headerlink" href="#hidget-the-length-of-the-content-string-length-of-an-array" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;length&lt;/tt&gt; can get the length of a string or an array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.url|length&amp;#39;&lt;/span&gt;
13
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.|length&amp;#39;&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/9TqdXbe0lo"&gt;https://jqplay.org/s/9TqdXbe0lo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="map"&gt;
&lt;h3 id="hidmap"&gt;map&lt;a class="headerlink" href="#hidmap" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;map(foo)&lt;/tt&gt; can operate on each item of an array and then merge the results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(length)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  13,
  9
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/BjgdGsjPem"&gt;https://jqplay.org/s/BjgdGsjPem&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filter-select"&gt;
&lt;h3 id="hidfilter-select"&gt;filter(select)&lt;a class="headerlink" href="#hidfilter-select" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;select(foo)&lt;/tt&gt; can be used to select an input item and return
only the items that match the conditions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(select(.|length &amp;gt; 9))&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/8Zrwy7dDxW"&gt;https://jqplay.org/s/8Zrwy7dDxW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="string-interpolation-splicing-join"&gt;
&lt;h3 id="hidstring-interpolation-splicing-join"&gt;String interpolation, splicing/join&lt;a class="headerlink" href="#hidstring-interpolation-splicing-join" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use &lt;tt class="docutils literal"&gt;\(foo)&lt;/tt&gt; to implement the string interpolation function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;&amp;quot;hi \(.name)&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;hi mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that it should be enclosed in double quotes to indicate that it is a string.&lt;/p&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/k90JFcDqPz"&gt;https://jqplay.org/s/k90JFcDqPz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String concatenation using &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;&amp;quot;hi &amp;quot; + .name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;hi mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="output-the-raw-string-value-instead-of-the-json-serialized-string-value"&gt;
&lt;h3 id="hidoutput-the-raw-string-value-instead-of-the-json-serialized-string-value"&gt;Output the raw string value instead of the JSON serialized string value&lt;a class="headerlink" href="#hidoutput-the-raw-string-value-instead-of-the-json-serialized-string-value" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/tt&gt; option to output the raw value of the string instead of
the serialized value of json:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;value&amp;quot;: &amp;quot;{\&amp;quot;url\&amp;quot;: \&amp;quot;mozillazg.com\&amp;quot;}&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .value
&lt;span class="s2"&gt;&amp;quot;{\&amp;quot;url\&amp;quot;: \&amp;quot;mozillazg.com\&amp;quot;}&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;value&amp;quot;: &amp;quot;{\&amp;quot;url\&amp;quot;: \&amp;quot;mozillazg.com\&amp;quot;}&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq -r .value
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if-elif-else"&gt;
&lt;h3 id="hidif-elif-else"&gt;if/elif/else&lt;a class="headerlink" href="#hidif-elif-else" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use &lt;tt class="docutils literal"&gt;if ... then ... elif ... then ... else ... end&lt;/tt&gt;
to implement conditional judgments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[0, 1, 2, 3]&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(if . == 0 then &amp;quot;zero&amp;quot; elif . == 1 then &amp;quot;one&amp;quot; elif . == 2 then &amp;quot;two&amp;quot; else &amp;quot;many&amp;quot; end)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;zero&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;many&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/y8WwvHISH4"&gt;https://jqplay.org/s/y8WwvHISH4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constructing-objects-or-arrays"&gt;
&lt;h3 id="hidconstructing-objects-or-arrays"&gt;Constructing objects or arrays&lt;a class="headerlink" href="#hidconstructing-objects-or-arrays" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;New objects or arrays can be constructed with &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt; .&lt;/p&gt;
&lt;p&gt;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;{name: .[1]}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/sccwJi75jb"&gt;https://jqplay.org/s/sccwJi75jb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;[.name, .url]&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/LYflwM4kJM"&gt;https://jqplay.org/s/LYflwM4kJM&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;, &amp;quot;ages&amp;quot;: [1, 2]}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;{name, age: .ages[]}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: 2
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/s1GiNkp_Ed"&gt;https://jqplay.org/s/s1GiNkp_Ed&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="array-join"&gt;
&lt;h3 id="hidarray-join"&gt;Array join&lt;a class="headerlink" href="#hidarray-join" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;join&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.|join(&amp;quot; | &amp;quot;)&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com | mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/1ckAfiLKA3"&gt;https://jqplay.org/s/1ckAfiLKA3&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="string-split"&gt;
&lt;h3 id="hidstring-split"&gt;String split&lt;a class="headerlink" href="#hidstring-split" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;split&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;mozillazg.com | mozillazg&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;split(&amp;quot; | &amp;quot;)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/_7uGMWvmUh"&gt;https://jqplay.org/s/_7uGMWvmUh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For more functions and usage, see the &lt;a class="reference external" href="https://stedolan.github.io/jq/manual/"&gt;official docs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2 id="hidreferences"&gt;References&lt;a class="headerlink" href="#hidreferences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jqplay.org/"&gt;jq play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="jq"></category><category term="en-version"></category></entry></feed>