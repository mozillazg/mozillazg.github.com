<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Huang Huang 的博客</title><link>https://mozillazg.com/</link><description></description><atom:link href="https://mozillazg.com/feeds/mozillazg.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 26 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Python: multiprocessing.Queue 在特定场景下会出现内部锁异常</title><link>https://mozillazg.com/2019/10/python-multiprocessing-queue-both-full-and-empty-are-true-internal-deadlock.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如题所述，multiprocessing.Queue 在特定场景下会出现内部锁异常，
导致 &lt;tt class="docutils literal"&gt;Queue&lt;/tt&gt; 实例出现既无法写入数据也无法读取数据的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;读取方意外退出导致内部异常&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一个场景是当读取方意外退出后，即便后来又有了新的读取方，
还是会出现内部异常最终导致写入方无法写入的问题。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;复现问题&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过下面的代码复现这个问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reader error: {!r}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_nowait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;write&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;writer error: {!r}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reader pid: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reader dead, start new reader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiprocessing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reader pid: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行这段代码，在代码运行过程中 kill 掉 reader 进程模拟读取方意外退出的情况:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3.8 reader_deadlock.py
reader pid: 53
write
write
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt;
write
write
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt;
...
&lt;span class="nb"&gt;read&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt;
reader dead, start new reader   &lt;span class="c1"&gt;# &amp;lt;-- kill 53&lt;/span&gt;
reader pid: 55
write
write
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
reader error: Empty&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
reader error: Empty&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，在杀掉 reader 进程后，即便后来再重新启动了一个 reader 进程，
还是出现了 writer 写不进去、reader 读不出来的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;原因&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为什么会出现这个问题呢？看一下 Queue 内部 &lt;tt class="docutils literal"&gt;get&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;put&lt;/tt&gt; 方法的
&lt;a class="reference external" href="https://github.com/python/cpython/blob/v3.8.0/Lib/multiprocessing/queues.py#L34"&gt;关键代码&lt;/a&gt; :&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# ctx.Lock:  class Lock(SemLock)&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BoundedSemaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_recv_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- 释放 semaphore&lt;/span&gt;
         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;
&lt;span class="hll"&gt;             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- 获取锁&lt;/span&gt;
&lt;/span&gt;                 &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;
             &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="hll"&gt;                     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- 阻塞直到有数据或超时&lt;/span&gt;
&lt;/span&gt;                         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;
                 &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_poll&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                     &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;
                 &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_recv_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;lt;- 释放 semaphore&lt;/span&gt;
             &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;- 释放获取的锁&lt;/span&gt;
&lt;/span&gt;         &lt;span class="c1"&gt;# unserialize the data after having released the lock&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_ForkingPickler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put_nowait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;为什么 kill 掉 reader 进程后就会出现前面的问题呢，
因为当 reader 进程阻塞在 &lt;tt class="docutils literal"&gt;get(timeout=5)&lt;/tt&gt; 调用时，实际是阻塞在上面的 24 行代码那里，
此时 reader 进程已经通过 19 行的代码获取到了 &lt;tt class="docutils literal"&gt;self._rlock&lt;/tt&gt; 这个锁，
当 kill reader 进程时，reader 进程退出并且退出的时候不会执行 31 行的释放锁操作。
当重新启动一个 reader 进程后，新 reader 进程执行 &lt;tt class="docutils literal"&gt;get(timeout=5)&lt;/tt&gt; 调用时
会因为 19 行获取不到 &lt;tt class="docutils literal"&gt;self._rlock&lt;/tt&gt; 这个锁导致总是抛出 &lt;tt class="docutils literal"&gt;Empty&lt;/tt&gt; 异常，因为这个锁在前面那个 reader 进程里被 acquire 了，但是没有被 release 也永远都不会被 release 了，导致内部的 &lt;tt class="docutils literal"&gt;self._rlock&lt;/tt&gt; 这个锁异常。&lt;/p&gt;
&lt;p&gt;新的 reader 进程因为内部的 &lt;tt class="docutils literal"&gt;self._rlock&lt;/tt&gt; 锁异常导致一直无法读取数据，进而导致 writer 进程无法写入数据，因为队列一直是满的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;验证&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;修改一下前面的代码来验证一下上面所说的原因：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reader error: {!r}, {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 增加显式 _rlock 信息&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;验证:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python reader_deadlock_rlock.py
reader pid: 464
write
write
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
...
&lt;span class="nb"&gt;read&lt;/span&gt;
&lt;span class="nb"&gt;read&lt;/span&gt;
reader dead, start new reader
reader pid: 466
write
write
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
...
reader error: Empty&lt;span class="o"&gt;()&lt;/span&gt;, &amp;lt;Lock&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SomeOtherProcess&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;  &lt;span class="c1"&gt;# _rlock 一直被其他进程所占用&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
...
reader error: Empty&lt;span class="o"&gt;()&lt;/span&gt;, &amp;lt;Lock&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SomeOtherProcess&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;  &lt;span class="c1"&gt;# _rlock 一直被其他进程所占用&lt;/span&gt;
writer error: Full&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;写入方意外退出导致内部异常&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;另一个场景是当写入方意外退出后，极端情况下会出现内部异常导致读取方无法读取数据、
同时新加入的写入方也无法写入数据的问题。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3 id="hidid7"&gt;复现问题&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;因为是极端情况下会出现的问题，暂时没找到 100% 复现问题的方法，只能从代码实现层面分析。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;原因&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先来看一下 &lt;tt class="docutils literal"&gt;Queue&lt;/tt&gt; 的 &lt;a class="reference external" href="https://github.com/python/cpython/blob/v3.8.0/Lib/multiprocessing/queues.py"&gt;内部实现逻辑&lt;/a&gt; :&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_maxsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maxsize&lt;/span&gt;
&lt;span class="hll"&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duplex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_opid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;win32&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

         &lt;span class="c1"&gt;# 使用 BoundedSemaphore 控制队列大小&lt;/span&gt;
&lt;span class="hll"&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BoundedSemaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_after_fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;win32&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;register_after_fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_after_fork&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_after_fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Queue._after_fork()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_notempty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="hll"&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_jointhread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_joincancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_closed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_send_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_bytes&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_recv_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv_bytes&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_poll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;poll&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Queue {self!r} is closed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="hll"&gt;         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;             &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Full&lt;/span&gt;
         &lt;span class="c1"&gt;# acquire 后 _sem 中的 count - 1，表示当前 queue 可用大小减一&lt;/span&gt;

         &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_notempty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_start_thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="c1"&gt;# 数据放到 buffer 里，通知后台线程去读取 buffer 里的数据&lt;/span&gt;
&lt;span class="hll"&gt;             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_notempty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Queue {self!r} is closed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="c1"&gt;# 从 Pipe 中读取数据&lt;/span&gt;
&lt;span class="hll"&gt;                 &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_recv_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;             &lt;span class="c1"&gt;# release 后 _sem 中的 count + 1，当前 queue 可用大小加一&lt;/span&gt;
&lt;span class="hll"&gt;             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                 &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;
             &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;
                 &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_poll&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                     &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;
                 &lt;span class="c1"&gt;# 从 Pipe 中读取数据&lt;/span&gt;
&lt;span class="hll"&gt;                 &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_recv_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;                 &lt;span class="c1"&gt;# release 后 _sem 中的 count + 1，当前 queue 可用大小加一&lt;/span&gt;
&lt;span class="hll"&gt;                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;             &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="c1"&gt;# unserialize the data after having released the lock&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_ForkingPickler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_poll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;full&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_semlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_is_zero&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_nowait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put_nowait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_start_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Queue._start_thread()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="c1"&gt;# Start thread which transfers data from buffer to pipe&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_feed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_notempty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_send_bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wlock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_ignore_epipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_on_queue_feeder_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sem&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QueueFeederThread&amp;#39;&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

         &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;doing self._thread.start()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;... done self._thread.start()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="c1"&gt;# ...&lt;/span&gt;

     &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;notempty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send_bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writelock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore_epipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;onerror&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue_sem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;starting thread to feed data to pipe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;nacquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;notempty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;
         &lt;span class="n"&gt;nrelease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;notempty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;
         &lt;span class="n"&gt;nwait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;notempty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;
         &lt;span class="n"&gt;bpopleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;
         &lt;span class="n"&gt;sentinel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_sentinel&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;win32&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;wacquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writelock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;
             &lt;span class="n"&gt;wrelease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writelock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;
         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="n"&gt;wacquire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

         &lt;span class="c1"&gt;# 在这个后台线程中把 buffer 里的数据写入到 Pipe&lt;/span&gt;
         &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="n"&gt;nacquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                 &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                         &lt;span class="n"&gt;nwait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                 &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;nrelease&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                 &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;                         &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpopleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;                         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;sentinel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                             &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;feeder thread got sentinel -- exiting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                             &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                             &lt;span class="k"&gt;return&lt;/span&gt;

                         &lt;span class="c1"&gt;# serialize the data before acquiring the lock&lt;/span&gt;
                         &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_ForkingPickler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;wacquire&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;                             &lt;span class="n"&gt;send_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;                         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                             &lt;span class="n"&gt;wacquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                             &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="hll"&gt;                                 &lt;span class="n"&gt;send_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;                             &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                                 &lt;span class="n"&gt;wrelease&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                 &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;pass&lt;/span&gt;
             &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ignore_epipe&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;errno&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPIPE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="k"&gt;return&lt;/span&gt;
                 &lt;span class="c1"&gt;# Since this runs in a daemon thread the resources it uses&lt;/span&gt;
                 &lt;span class="c1"&gt;# may be become unusable while the process is cleaning up.&lt;/span&gt;
                 &lt;span class="c1"&gt;# We ignore errors which happen after the process has&lt;/span&gt;
                 &lt;span class="c1"&gt;# started to cleanup.&lt;/span&gt;
                 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_exiting&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                     &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error in queue thread: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="k"&gt;return&lt;/span&gt;
                 &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                     &lt;span class="c1"&gt;# Since the object has not been sent in the queue, we need&lt;/span&gt;
                     &lt;span class="c1"&gt;# to decrease the size of the queue. The error acts as&lt;/span&gt;
                     &lt;span class="c1"&gt;# if the object had been silently removed from the queue&lt;/span&gt;
                     &lt;span class="c1"&gt;# and this step is necessary to have a properly working&lt;/span&gt;
                     &lt;span class="c1"&gt;# queue.&lt;/span&gt;
                     &lt;span class="n"&gt;queue_sem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                     &lt;span class="n"&gt;onerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;从上面的代码可以得知，put 和 get 方法的与这个问题有关的关键流程如下:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;队列大小是通过 &lt;tt class="docutils literal"&gt;_sem&lt;/tt&gt; 这个 &lt;tt class="docutils literal"&gt;BoundedSemaphore(maxsize)&lt;/tt&gt; 实例控制的。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;get&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;put&lt;/tt&gt; 之间的数据是通过 pipe 传递的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;put(obj)&lt;/tt&gt; 操作:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;执行 &lt;tt class="docutils literal"&gt;_sem.acquire()&lt;/tt&gt; ，如果获取不到 semaphore 的话，表示当前队列已满。&lt;/li&gt;
&lt;li&gt;获取到 semaphore 后（内部计数器加一，此时队列可用大小减一），把数据放到 buffer 中。&lt;/li&gt;
&lt;li&gt;后台有个线程会去从 buffer 中读取数据，然后写入到 pipe 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;get()&lt;/tt&gt; 操作:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;从 pipe 中读取数据。&lt;/li&gt;
&lt;li&gt;读到数据后，执行 &lt;tt class="docutils literal"&gt;_sem.release()&lt;/tt&gt; ，semaphore 内部计数器减一，此时队列可用大小加一。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;问题出现的场景就是，上面 &lt;tt class="docutils literal"&gt;put(object)&lt;/tt&gt; 中的后台线程
从 buffer 中读取数据然后写入 pipe 的过程中进程意外退出了，
此时因为数据没有写入到 pipe 中， &lt;tt class="docutils literal"&gt;get()&lt;/tt&gt; 操作不会执行第2步的 &lt;tt class="docutils literal"&gt;_sem.release()&lt;/tt&gt; 操作，
导致 &lt;tt class="docutils literal"&gt;put(object)&lt;/tt&gt; 中 acquire 的 semaphore 永远不会被释放，也就是说当前队列可用大小会比实际大小小1。
如果这个进程意外退出的场景多出现几次，最终的结果就是有很多个 semaphore 永远不会被释放，极端情况下出现队列可用大小为 0 的情况，但是实际上队列中并没有数据，出现既写不进去数据又读取不了数据的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2 id="hidid9"&gt;总结&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2 id="hidid10"&gt;参考资料&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugs.python.org/issue20527"&gt;Issue 20527: multiprocessing.Queue deadlocks after “reader” process death - Python tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.8/library/multiprocessing.html#pipes-and-queues"&gt;multiprocessing — Process-based parallelism — Python 3.8.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python/cpython/blob/v3.8.0/Lib/multiprocessing/queues.py"&gt;cpython/queues.py at v3.8.0 · python/cpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/34756406/posix-name-semaphore-does-not-release-after-process-exits"&gt;c - POSIX name semaphore does not release after process exits - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-10-26:2019/10/python-multiprocessing-queue-both-full-and-empty-are-true-internal-deadlock.html</guid><category>multiprocessing</category><category>Queue</category></item><item><title>一份大但不全的配置中心知识备忘</title><link>https://mozillazg.com/2019/09/production-ready-distributed-configuration-service-configuration-center.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录一下关于配置中心各方面（主要是功能方面）的一些思考和备忘知识。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;基本功能&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作为配置中心需要具备如下基本的核心功能:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;配置的增删改查&lt;/li&gt;
&lt;li&gt;支持静态配置和动态配置（或者说所有配置都是动态配置，取决于用户程序中怎么去使用它）&lt;/li&gt;
&lt;li&gt;动态配置的变更推送功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;高级功能&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般还会具有下面的高级功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;权限控制&lt;/li&gt;
&lt;li&gt;相同配置项在不同环境下（不同机房、不同单元、不同集群等）配置不同的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他功能在下面的多个主题下中穿插说明。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web"&gt;
&lt;h2 id="hidweb"&gt;面向用户的 Web 面板&lt;a class="headerlink" href="#hidweb" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在哪个系统还没个 Web 面板呢，配置中心也不例外。
至少需要一个面向用户的 Web 面板，不然用户体验也太差了。&lt;/p&gt;
&lt;p&gt;这个 Web 面板一般有下面的功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;帐号体系，基本的用户管理和用户权限控制、配置的访问控制&lt;/li&gt;
&lt;li&gt;用户增删改查有权限的不同服务的配置&lt;/li&gt;
&lt;li&gt;版本控制：显式配置项值的不同版本，方便实现回退功能以及查看历史值&lt;/li&gt;
&lt;li&gt;回退：把配置项的值回退到过去某个版本&lt;/li&gt;
&lt;li&gt;变更记录(变更审计)：显式配置项增删改的所有变更记录，方便追溯&lt;/li&gt;
&lt;li&gt;配置项导入、导出功能&lt;/li&gt;
&lt;li&gt;变更审批功能：某些场景下修改配置项需要接入多人 double check + 审批的流程&lt;/li&gt;
&lt;li&gt;敏感配置加密功能：面板上接入第三方敏感信息加解密系统，配置中心只存储加密后的配置，配置的加解密由第三方敏感信息加解密系统来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他 Web 面板功能会在下面的主题中穿插说明。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;开关&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;开关其实可以作为一种特殊的配置项来实现，比如业务系统中的功能/特性开关可以通过动态配置来实现，
只不过是约定了一个特定规范用于实现开关配置项（比如，值只能是 true 或 false 或者只能是 0~100, 配置项必须以 &lt;tt class="docutils literal"&gt;switch:&lt;/tt&gt; 开头）， 这个约定需要 SDK 和 Web 面板一起协作来完成，通过 SDK 和面板的协作对用户屏蔽这一内部实现细节（API 端需要校验值的合法性）。&lt;/p&gt;
&lt;p&gt;开关配置既可以用来实现新功能的灰度/开启开关，
也可以用于实现系统故障场景下的功能降级/关闭开关、fallback 启用开关等各类动态切换的场景。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;配置灰度&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;微服务场景下功能灰度是个非常重要的功能，功能灰度既可以通过金丝雀发布的方式实现，特定场景下也可以通过功能开关的方式实现。比如前面所说的开关配置，如果约定开关配置的值是 0~100.00 的话，可以通过不同的值控制功能打开的概率从而实现功能灰度。&lt;/p&gt;
&lt;p&gt;不只是功能需要灰度，配置也需要灰度，毕竟配置的变更对系统的影响也是非常大的，不亚于功能的变更。&lt;/p&gt;
&lt;p&gt;一般可以考虑支持如下其中一个、几个或全部的配置项变更灰度纬度:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;机房&lt;/li&gt;
&lt;li&gt;单元&lt;/li&gt;
&lt;li&gt;集群&lt;/li&gt;
&lt;li&gt;某些特定客户端IP/hostname&lt;/li&gt;
&lt;li&gt;一定比例的业务系统实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;稳定性&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;没有一个系统能够保证 100% 不出问题，配置中心也不例外。所以在设计客户端和服务端的时候需要应用一些面向失败设计的模式。&lt;/p&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;客户端&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;客户端一定要实现的一个功能就是：本地缓存。
用于在无法连接服务端或者服务端异常时客户端有个本地兜底，不会因为配置中心异常导致用户服务异常。&lt;/p&gt;
&lt;p&gt;本地缓存一般包括内存缓存和本地文件缓存，可以考虑实现其中一个或两个都实现。&lt;/p&gt;
&lt;p&gt;以及需要注意之前 &lt;a class="reference external" href="https://mozillazg.com/2018/08/call-remote-service-checklist.html"&gt;调用远程服务的一些备忘录&lt;/a&gt; 和 &lt;a class="reference external" href="https://mozillazg.com/2019/03/safe-client-behaviour-notes-retry-jitter-back-off-more.html#hidsafer-clients-expose-information-to-server"&gt;安全友好的客户端行为&lt;/a&gt;  中提到的那些超时、重试等注意事项，毕竟这个也是调用远程服务的一个场景。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;服务端&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;服务端主要需要考虑如下方案：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;熔断: 在特定场景下通过熔断对外部依赖的请求或来自客户端的请求来保障服务端的稳定性&lt;/li&gt;
&lt;li&gt;降级: 在特定场景下通过降级某些功能或某些外部依赖来保障核心功能的稳定性&lt;/li&gt;
&lt;li&gt;限流/限速: 根据需要对用户、服务、IP 或者推送进行限流或限速，
至少要有一个宽松的默认限流策略，防止被异常的突发流量打垮系统。&lt;/li&gt;
&lt;li&gt;隔离（舱壁模式）：通过隔离技术来保护大部分用户不受少部分异常用户的影响或者核心组件受次要组件故障所影响。
常见的隔离技术有线程池隔离、进程隔离（比如剥离增删改查功能和推送功能独立部署或者在流量入口处按功能划分不同节点，比如部署单独的节点只提供推送服务）、集群隔离（为特定用户群体部署专享的独立集群，防止受主集群影响）等等。&lt;/li&gt;
&lt;li&gt;日志、监控、告警：根据实际情况来记录有用的日志、指标数据、以及配置必要的告警&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以进一步参考 &lt;a class="reference external" href="https://mozillazg.com/2019/06/release-it-design-and-deploy-production-ready-software-second-edition-2th-read-note-1"&gt;《Release It! Second Edition》阅读笔记（一）&lt;/a&gt; 和 &lt;a class="reference external" href="https://mozillazg.com/2019/06/release-it-design-and-deploy-production-ready-software-second-edition-2th-read-note-2"&gt;《Release It! Second Edition》阅读笔记（二）&lt;/a&gt; 中的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2 id="hidid10"&gt;治理&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;配置中心不仅仅只是一个存放配置的地方，同样还应该承担起配置治理和收口的职责，
同时，没有考虑各方面治理的中间件只能说是一个软件或服务，而不能说是一个成熟的产品。&lt;/p&gt;
&lt;p&gt;下面简单记录一些常见的治理场景。&lt;/p&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3 id="hidid11"&gt;通用配置治理&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的通用配置指的是各个服务都会去配置的一些配置项，如果不治理的话，一方面配置项的名称会五花八门不利于用户服务的后续交接和维护，另一方面因为没有统一治理规范化，导致无法快速的根据需要调整或统计公司内部所有业务服务所使用的通用配置。&lt;/p&gt;
&lt;p&gt;希望通过治理后能够规范化通用配置，实现统一约定通用配置项名称方便业务系统的日常维护以及赋予平台统一管控的能力。&lt;/p&gt;
&lt;p&gt;下面举一些通用配置的例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;业务系统所使用的微服务框架本身包含了各种各样的配置，可以对这些配置项的名称和取值作统一规范化，用户按照规范在配置中心配置相应的配置，框架按照规范从配置中心去获取对应的配置。&lt;/li&gt;
&lt;li&gt;框架内置的各组件的功能特性的降级和开启开关&lt;/li&gt;
&lt;li&gt;基于框架实现的服务间调用的服务级别和接口级别的降级和开启开关&lt;/li&gt;
&lt;li&gt;服务启动时的启动参数控制、jvm 参数控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3 id="hidid12"&gt;基础服务配置治理&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;同样，基础服务配置治理也是为了规范化业务系统对基础服务依赖的相关配置，方便业务系统的日常维护以及赋予平台统一管控的能力。&lt;/p&gt;
&lt;p&gt;下面举几个基础服务配置的例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;数据库连接信息和连接参数&lt;/li&gt;
&lt;li&gt;消息队列连接信息&lt;/li&gt;
&lt;li&gt;限流/限速组件的配置信息&lt;/li&gt;
&lt;li&gt;其他基础服务（redis、es、oss等基础服务）的客户端所需的配置信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3 id="hidid13"&gt;遗留配置治理&lt;a class="headerlink" href="#hidid13" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;随着时间的推移，配置中心上会存在很多遗留的不再使用的旧配置，为了避免成为配置坟场，需要对配置的使用情况进行治理。&lt;/p&gt;
&lt;p&gt;需要客户端/框架和服务端一起来实现配置使用的治理，客户端/框架中收集和上报用户系统真正在使用的配置项，
如果服务端能够感知到的话也可以在服务端主动记录。&lt;/p&gt;
&lt;p&gt;收集到真正在使用的配置项后，需要 Web 面板配置在页面上展示配置项的使用情况，方便用户清理不再使用的配置（可以主动提示用户某些配置项很久没使用了，是否是已废弃配置，请及时清理）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3 id="hidid14"&gt;用户使用姿势治理&lt;a class="headerlink" href="#hidid14" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;没有哪个系统和服务是万能的，每个服务都有它预设的使用场景限制/约定，配置中心也不例外。&lt;/p&gt;
&lt;p&gt;所以在设计和开发配置中心的时候需要要定下它服务的场景和使用约束，提前发现或及时发现不合理的使用姿势，甚至直接拒绝不合理的使用姿势从源头就扼杀而不是等到后面再来治理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3 id="hidid15"&gt;客户端治理&lt;a class="headerlink" href="#hidid15" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;还有一个就是客户端的治理。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;版本治理:无论是官方实现的客户端还是第三方实现的客户端，随着时间的推移都需要治理，比如统计旧版及关键版本的使用情况，
根据使用情况废弃旧版或推动旧版业务方升级改造。
所以所有客户端的请求信息中必须包含符合规范的客户端名称和版本号（比如 http 协议的话可以考虑放在 User-Agent 里），方便服务端记录和统计客户端信息&lt;/li&gt;
&lt;li&gt;实现方式治理：如果是官方实现的客户端的话，可以很好的把控客户端的实现方式，但是第三方实现的客户端可能会包含各种影响服务端稳定性的不正确实现姿势或使用姿势。一方面服务端需要防范和应对会来自客户端的异常请求，另一方面也要实现能够帮助配置中心开发人员及时或提前发现可能的或已存在的异常请求，进而调整官方客户端的实现以及协调第三方客户端改进实现，比如应用上面【稳定性-客户端】那里提到的本地缓存以及各种客户端实现注意事项。再通过上面的版本治理来推进用户升级客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2 id="hidid16"&gt;故障排查&lt;a class="headerlink" href="#hidid16" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;配置中心作为一个所有业务系统都会使用的一个中间件，为了减轻开发的排障压力需要主动收集关键信息或提供排障工具用于快速排障或自证清白。&lt;/p&gt;
&lt;p&gt;可以考虑收集如下信息:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;配置使用追踪（何时哪个客户端获取(使用)了哪个配置项）&lt;/li&gt;
&lt;li&gt;变更推送追踪（何时推送了哪个配置项的啥变更给哪个客户端）&lt;/li&gt;
&lt;li&gt;客户端异常情况（日志或打点）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并提供工具、手段或页面方便用户快速自行 debug：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一份包含常见问题的答疑和 debug 步骤文档&lt;/li&gt;
&lt;li&gt;以某种方式在 Web 面板页面展示上面收集的信息&lt;/li&gt;
&lt;li&gt;API 或 SDK 的错误或异常信息中包含对应问题 case 的原因说明或解决办法的文档 URL 地址&lt;/li&gt;
&lt;li&gt;提供工具用于用户在他们出现异常的机器上进行简单的自动诊断，比如自动检测与服务端的网络连接情况、分析客户端的错误日志、根据已知的各种常见问题 case 的异常原因和检查步骤自动分析并给出相应的建议&lt;/li&gt;
&lt;li&gt;提供工具分析用户的代码检测出不符合规范的代码用法给予提示、改进建议甚至是自动重新源代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要根据日常答疑和 debug 经验丰富上面的手段和方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2 id="hidid17"&gt;控制面板&lt;a class="headerlink" href="#hidid17" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个控制面板是一个面向配置中心开发人员和运维人员的 Web 面板（不一定是一个面板，也可能指的是包含公司内部各基础服务系统的一组面板集合），
用于观测配置中心运行过程中的各种状态信息（观测方面的需求也可以通过接入监控系统来实现）
以及在不重启配置中心不同组件服务的前提下动态控制配置中心的各种内部功能和细节。&lt;/p&gt;
&lt;p&gt;动态控制方面，常见的有如下需求：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;变更特定服务配置的访问控制信息&lt;/li&gt;
&lt;li&gt;变更对用户/客户端的限速、优先级、黑白名单等配置&lt;/li&gt;
&lt;li&gt;drop 或屏蔽一些请求&lt;/li&gt;
&lt;li&gt;后端服务节点的控制，比如上下线变更&lt;/li&gt;
&lt;li&gt;内部功能的开启和关闭、配置的变更（也可以直接通过面向用户的 Web 面板控制，即配置中心本身也通过配置中心来托管配置）&lt;/li&gt;
&lt;li&gt;SDK 特定功能的开启和关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;观测方面的需求一般通过接入监控系统来实现，详见下面的监控告警主题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h2 id="hidid18"&gt;监控告警&lt;a class="headerlink" href="#hidid18" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接入监控告警可以帮助配置中心开发人员和运维人员观测系统的运行状况，提前或及时发现异常情况，提高系统的稳定性以及故障处理速度。&lt;/p&gt;
&lt;p&gt;客户端和服务端可以考虑上报/提供如下指标数据，用于监控和告警。同样只是一些简单的例子，需要考虑实际场景添加合适的指标。&lt;/p&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3 id="hidid19"&gt;服务端&lt;a class="headerlink" href="#hidid19" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;客户端请求情况：基本的请求信息(请求方、api、响应情况（成功、失败、响应时间等）&lt;/li&gt;
&lt;li&gt;配置变更&lt;/li&gt;
&lt;li&gt;变更推送&lt;/li&gt;
&lt;li&gt;限速、黑白名单触发&lt;/li&gt;
&lt;li&gt;其他内部关注的点&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h3 id="hidid20"&gt;客户端&lt;a class="headerlink" href="#hidid20" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API 调用：api、成功、失败（失败原因）、响应时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h2 id="hidid21"&gt;周边生态&lt;a class="headerlink" href="#hidid21" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;目标是希望围绕配置中心形成一个生态，而不是所有需求都由配置中心来实现。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;微服务调用方或被调用方的限流功能，可能是由专门的组件或服务来实现限流功能，
但是每个服务的限流配置可以规范化存放在配置中心，帮助限流组件省去重复实现配置管理和变更推送的功能。&lt;/li&gt;
&lt;li&gt;基于各服务方使用配置中心实现功能开关来控制调用降级的前提，可以实现一个在不同故障场景下批量切换多个调用链上下游的降级开关，实现故障时上下游快速降级的需求（一键降级）。这个需求虽然可以在配置中心上实现，但是会给配置中心增加不必要的复杂度，可以考虑实现一个单独的系统，这个系统会调用配置中心的 api 来实现相应的开关切换，在那个系统中实现这个需求所需的各种繁琐的业务流程。&lt;/li&gt;
&lt;li&gt;其他需要实现配置管理和配置变更推送的场景，都可以把配置规范化存放在配置中心，围绕配置中心形成一个庞大的生态系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;h2 id="hidid22"&gt;文档&lt;a class="headerlink" href="#hidid22" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果没有文档的话，用户可能都不知道怎么用你的产品，你的产品做的再好也没有用。&lt;/p&gt;
&lt;p&gt;文档主要包括面向用户的文档和面向内部开发和运维人员的文档。&lt;/p&gt;
&lt;p&gt;面向用户的文档：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用文档，包括 Web 面板的使用文档、API 文档、SDK 使用文档、debug 工具使用文档等等&lt;/li&gt;
&lt;li&gt;答疑文档，包括常见问题解答、常见异常 debug 步骤和解决方法等等&lt;/li&gt;
&lt;li&gt;介绍文档，包括适用的场景、解决的问题、不适用的场景、使用约束等等&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向开发和运维的文档：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;开发文档&lt;/li&gt;
&lt;li&gt;部署和运维文档&lt;/li&gt;
&lt;li&gt;监控和告警&lt;/li&gt;
&lt;li&gt;常见故障恢复方法和步骤&lt;/li&gt;
&lt;li&gt;常见问题 debug 步骤和解决方法（包括用户遇到的问题以及内部问题）&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h2 id="hidid23"&gt;其他&lt;a class="headerlink" href="#hidid23" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;# TODO&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h2 id="hidid24"&gt;总结&lt;a class="headerlink" href="#hidid24" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录了一下配置中心的一些备忘知识，后面有空的时候再补充更新。&lt;/p&gt;
&lt;p&gt;BTW，开发一个配置中心或配置管理平台的时候不一定需要实现上面的所有的内容，可以是它的超集也可以是它的子集，同时也不要想着一次性就实现最终产品，可以考虑通过小步试错，快速迭代的方式一步步的实现和落地各种功能和方案（通过一个个的阶段性迭代和目标来实现最终目的，不要想着一蹴而就或者在一个大的迭代中完成目标）。
重要的是要考虑实际场景，组织架构风格，组织或团队的短期和长期目标（&amp;lt;del&amp;gt;比如某些团队或个人会把项目作为升职加薪的跳板，这样的话就需要取舍，哪些功能/需求是可以快速做出闪亮成绩的，哪些是需要时间才能证明其价值。不是时常会听说某个公司内某个/些项目在晋升季一过就没人维护甚至直接就黄了嘛[1]&amp;lt;/del&amp;gt;）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id25"&gt;
&lt;h2 id="hidid25"&gt;参考资料&lt;a class="headerlink" href="#hidid25" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pragprog.com/book/mnee2/release-it-second-edition"&gt;《Release It! Second Edition》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2018/08/call-remote-service-checklist.html"&gt;调用远程服务的一些备忘录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/03/safe-client-behaviour-notes-retry-jitter-back-off-more.html#hidsafer-clients-expose-information-to-server"&gt;安全友好的客户端行为&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-1.html"&gt;《Release It! Second Edition》阅读笔记（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-2.html"&gt;《Release It! Second Edition》阅读笔记（二）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- [1]: https://twitter.com/laixintao/status/1163356711769427973 --&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-09-13:2019/09/production-ready-distributed-configuration-service-configuration-center.html</guid><category>configuration-service</category><category>configuration-center</category></item><item><title>《Release It! Second Edition》阅读笔记（二）</title><link>https://mozillazg.com/2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-2.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文是 &lt;a class="reference external" href="https://pragprog.com/book/mnee2/release-it-second-edition"&gt;《Release It! Second Edition》&lt;/a&gt; 这本书的流水账式阅读笔记。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stability-patterns"&gt;
&lt;h2 id="hidstability-patterns"&gt;Stability Patterns&lt;a class="headerlink" href="#hidstability-patterns" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这章将介绍一些提高系统稳定性的模式，当然不要觉得系统中应用的模式越多稳定性就越高。&lt;/p&gt;
&lt;div class="section" id="timeouts"&gt;
&lt;h3 id="hidtimeouts"&gt;Timeouts&lt;a class="headerlink" href="#hidtimeouts" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;对外部依赖、阻塞线程以及慢响应使用超时技术。&lt;/li&gt;
&lt;li&gt;使用超时技术从非预期的故障中恢复。&lt;/li&gt;
&lt;li&gt;考虑延迟重试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="circuit-breaker"&gt;
&lt;h3 id="hidcircuit-breaker"&gt;Circuit Breaker&lt;a class="headerlink" href="#hidcircuit-breaker" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;与重试不同，熔断器用于阻止操作而不是重复执行操作。
软件中应用熔断器的方法是使用一个组件包装危险的操作，这个组件可以在系统不健康时避开对其的调用，一旦系统恢复健康重新恢复对其的调用。&lt;/p&gt;
&lt;p&gt;当熔断器处于【closed】状态的时候，它会执行常规的操作，如果操作失败的话，熔断器会记录失败情况。
一旦失败次数（或者是失败频率）达到了阈值，熔断器触发熔断，进入【open】状态。&lt;/p&gt;
&lt;p&gt;[图]&lt;/p&gt;
&lt;p&gt;当熔断处于【open】状态的时候，所有经过熔断器的调用都将立即失败，不会去执行真正的操作。
一段时间后，熔断器进入【half-open】状态，这个状态下，下一次的调用将执行真正的操作，如果调用成功了，
熔断器会被重置并进入【closed】状态，如果调用失败了，熔断器将进入【open】状态直到触发超时（不会一直保持 open 会有个超时期限）。&lt;/p&gt;
&lt;p&gt;当熔断器开启时，必须对进来的调用进行处理。 最简单的答案是调用立即失败，
也许可以抛出一个异常(最好是一个不同于普通超时的异常，这样调用者可以提供有用的反馈)。
熔断器也可能有一个 fallback 策略。 也许它会返回最后一个好的响应或者一个缓存的值。
它可能返回一个通用的答案，而不是一个个性化的答案。
或者它甚至可以在主服务不可用时调用备用服务。&lt;/p&gt;
&lt;p&gt;熔断器是在系统受到压力时实现自动降级的一种方法。
无论采用何种 fallbak 策略，都会对系统业务产生影响。
因此，在决定如何处理熔断打开发出的调用时，必须让系统的利益相关者参与进来，也就是要根据对应的业务场景来处理。&lt;/p&gt;
&lt;p&gt;有一些有趣的实现细节需要考虑。 首先，什么是&amp;quot;太多的失败&amp;quot;？
一个简单的记录所有错误的计数器可能并不那么有趣，
观察在五小时内均匀分布的五个错误和在最后三十秒内发生的五个错误之间有着天壤之别。
我们通常对故障密度比总计数更感兴趣。我喜欢漏桶模式（Leaky Bucket）。
这是一个简单的计数器，可以在每次发现错误时递增。
在后台，一个线程或计时器周期性地递减计数器(当然是递减到零) 如果计数超过一个阈值，那么你就知道错误到来的非常的快。&lt;/p&gt;
&lt;p&gt;系统中熔断器的状态对另一些利益相关的人员来说非常的重要：运维/操作人员。
应该始终记录熔断器状态的更改事件，并且应该公开当前状态以便查询和监控。
事实上，状态变更的频率是一个随时间变化的有用指标; 它是发现企业其他部门问题的先行指标。
同样，运维/操作人员需要一些方法来直接跳闸或复位熔断器。
熔断器器也是一个方便收集调用量和响应时间指标的好地方。&lt;/p&gt;
&lt;p&gt;一个熔断器应该建立在单进程的范围内。 也就是说，
相同的熔断器状态会影响进程中的每个线程，但不会跨多个进程共享。
这确实意味着，当调用方的多个实例各自独立地发现提供方程序宕机时，效率会有所下降。
然而，共享熔断器状态引入了另一种进程外通信机制。 这意味着安全机制将引入一个新的故障模式！&lt;/p&gt;
&lt;p&gt;即便只在一个进程中共享，熔断器也受制于多线程编程的各种陷阱。 确保不会意外出现一个线程处理所有对外部系统的调用的情况！
每种语言和框架都有对应的开源熔断器库，最好是从中选一个来使用。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果会带来坏的影响就别做。如果外部依赖有严重的问题，那就暂时别调用它。&lt;/li&gt;
&lt;li&gt;结合超时机制一起使用&lt;/li&gt;
&lt;li&gt;公开，追踪，报告状态变更事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bulkheads"&gt;
&lt;h3 id="hidbulkheads"&gt;Bulkheads&lt;a class="headerlink" href="#hidbulkheads" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;舱壁模式指的是对操作或服务做隔离，来实现类似故障隔离的功能，减轻故障对整个系统的影响。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;拯救船上其他部分。当故障发生的时候，通过舱壁模式提供的隔离功能来保护部分功能。&lt;/li&gt;
&lt;li&gt;选择一个合适的隔离粒度。可以隔离应用中的不同线程池、服务器上的不同 CPU 或者是集群里的不同服务器。&lt;/li&gt;
&lt;li&gt;考虑使用舱壁模式，尤其是共享服务模式下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="steady-state"&gt;
&lt;h3 id="hidsteady-state"&gt;Steady State&lt;a class="headerlink" href="#hidsteady-state" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;稳态模式认为，对于每一个积累资源的机制，都必须有一些其他的机制来回收这些资源。
让我们来看看几种可以积累的污泥，以及如何避免搅拌的需要。&lt;/p&gt;
&lt;p&gt;Data Purging&lt;/p&gt;
&lt;p&gt;Log Files&lt;/p&gt;
&lt;p&gt;In-Memory Caching&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Avoid fiddling. 人为干预会导致问题。 消除重复人工干预的必要性。 你的系统应该至少运行一个典型的部署周期，而不需要手动清理磁盘或每晚重新启动。&lt;/li&gt;
&lt;li&gt;使用应用本身的逻辑来清理数据。&lt;/li&gt;
&lt;li&gt;限制缓存。&lt;/li&gt;
&lt;li&gt;滚动切割日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="fail-fast"&gt;
&lt;h3 id="hidfail-fast"&gt;Fail Fast&lt;a class="headerlink" href="#hidfail-fast" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;阻止慢响应，尽量快速失败。如果你的系统无法满足 SLA 标准，那就快速告诉调用方，不要让调用方一直等待，一直等到超时，那样只是把你的问题传递到了他们那里。&lt;/li&gt;
&lt;li&gt;谨慎对待资源，尽早验证依赖。不要做无用的工作。&lt;/li&gt;
&lt;li&gt;使用输入校验。在请求资源前先对用户输入做基本的校验，不要出现获取了数据库连接，查询并获取了结果，最后给出少了个必选参数的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="let-it-crash"&gt;
&lt;h3 id="hidlet-it-crash"&gt;Let It Crash&lt;a class="headerlink" href="#hidlet-it-crash" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有时创建系统级稳定性的最佳方法是放弃组件级稳定性。在 Erlang 中，这被称为&amp;quot;Let It Crash&amp;quot;的哲学。&lt;/p&gt;
&lt;p&gt;程序最干净的状态是在启动之后。 &amp;quot;Let It Crash&amp;quot;的方法表明错误恢复是困难的和不可靠的，所以我们的目标应该是尽快回到干净的启动状态。&lt;/p&gt;
&lt;p&gt;为了让&amp;quot;Let It Crash&amp;quot;起作用，我们的系统中有几件事必须是确定的。&lt;/p&gt;
&lt;p&gt;Limited Granularity&lt;/p&gt;
&lt;p&gt;崩溃必须有一个边界。我们想崩溃的是一个隔离的组件。系统的剩余部分必须要能够在一个级联故障中保护自己。&lt;/p&gt;
&lt;p&gt;Fast Replacement&lt;/p&gt;
&lt;p&gt;我们必须能够回到干净状态，并尽快恢复正常运行。 否则，当太多的实例在同时重启时，我们将看到性能下降。 极限情况下，由于所有实例都在忙于重启，我们的服务可能会无法对外提供服务。&lt;/p&gt;
&lt;p&gt;服务实例更加棘手。 这取决于需要启动多少&amp;quot;堆栈&amp;quot;。 下面有几个例子:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;我们在一个容器中运行 Go 二进制文件。 新容器和其中的进程的启动时间以毫秒为单位。 可以让整个容器崩溃。&lt;/li&gt;
&lt;li&gt;这是一个在 AWS 长期运行的虚拟机上运行的 NodeJS 服务。 启动 NodeJS 进程需要毫秒级别，但启动一个新的虚拟机需要几分钟。 在这种情况下，只崩溃 NodeJS 进程。&lt;/li&gt;
&lt;li&gt;一个带有 API 的老旧 JavaEE 应用程序，在一个数据中心的虚拟机上运行。 启动时间以分钟为单位。 &amp;quot;Let It Crash&amp;quot;不是正确的策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Supervision&lt;/p&gt;
&lt;p&gt;需要有相应的守护程序或系统来重启崩溃的进程或实例。&lt;/p&gt;
&lt;p&gt;Reintegration&lt;/p&gt;
&lt;p&gt;进程/实例从崩溃中恢复后，需要有一种机制能让这个恢复后的服务能够重新对外提供服务，恢复处理外部请求。比如：当负载均衡器的健康检查发现实例恢复健康后，实例应当能够重新被加入负载均衡器中并开始接受外部请求。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;通过崩溃某个/些组件来维持整个系统的整体稳定性&lt;/li&gt;
&lt;li&gt;快速重启然后自动重新提供服务&lt;/li&gt;
&lt;li&gt;隔离组件以便可以独立的崩溃。使用熔断器（Circuit Breakers）帮助调用方从崩溃的组件中脱离出来。使用守护程序/系统（supervisors）来确定那部分需要快速重启，并保证崩溃不会影响不相关的功能。&lt;/li&gt;
&lt;li&gt;不要崩溃单体/巨大的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="handshaking"&gt;
&lt;h3 id="hidhandshaking"&gt;Handshaking&lt;a class="headerlink" href="#hidhandshaking" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;握手（Handshaking）就是让服务器通过控制自己的工作负载来保护自己。 服务器应该有一种拒绝传入工作的方法，而不是成为对它提出的任何要求的牺牲品。&lt;/p&gt;
&lt;p&gt;比如服务提供一个健康检查接口供负载均衡器使用，以便在异常/过载时拒绝外部请求。
健康检查这种方式只是一个粗糙的方法，最好的方法是在你实现的任何自定义协议中实现握手机制（handshaking）。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create cooperative demand control。&lt;/li&gt;
&lt;li&gt;考虑健康检查。&lt;/li&gt;
&lt;li&gt;在你自己的底层协议中实现握手机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="test-harnesses"&gt;
&lt;h3 id="hidtest-harnesses"&gt;Test Harnesses&lt;a class="headerlink" href="#hidtest-harnesses" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;开发环境、QA 环境以及集成测试环境中都无法测试部分分布式系统的失败模型，我们需要有一个测试套件（test harness）来帮助我们测试这些失败模型。&lt;/p&gt;
&lt;p&gt;考虑构建一个测试套件，它可以代替每个 web 服务都会调用的远端服务。因为远程调用需要使用网络，基于 socket 的连接容易出现下面的故障：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;连接可能被拒绝。&lt;/li&gt;
&lt;li&gt;可能会待在 listen 队列中，直到调用方超时。&lt;/li&gt;
&lt;li&gt;远端在回复了 SYN/ACK 后就不再发送任何数据了。&lt;/li&gt;
&lt;li&gt;远端只发送 RESET 包。&lt;/li&gt;
&lt;li&gt;远端反馈接收窗口满了，但是却不消费数据。&lt;/li&gt;
&lt;li&gt;连接可以建立，但是远端不发送任何数据。&lt;/li&gt;
&lt;li&gt;连接可以建立，但是丢包导致延迟重传。&lt;/li&gt;
&lt;li&gt;连接可以建立，但是远端不发送确认收到的回复，导致无限重传。&lt;/li&gt;
&lt;li&gt;服务可以接受请求，发送响应 header, 但是一直不发送响应 body。&lt;/li&gt;
&lt;li&gt;服务每 30 秒发送一个字节的响应。&lt;/li&gt;
&lt;li&gt;服务发送了一个 HTML 响应而不是预期的 XML。&lt;/li&gt;
&lt;li&gt;服务发送了 MB 级别的数据而不是预期的 KB 级别。&lt;/li&gt;
&lt;li&gt;服务拒绝所有身份验证凭据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些故障可以分为不同的类别: 网络传输问题、网络协议问题、应用协议问题和应用逻辑问题。&lt;/p&gt;
&lt;p&gt;这种类似的测试套件其实是类似 &amp;quot;chaos engineering&amp;quot; 的思路。这个后面会讲到。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;模拟不合规的故障。&lt;/li&gt;
&lt;li&gt;对调用方施加压力。测试工具可以产生缓慢的响应、无响应或垃圾响应。 然后可以可以观察你的应用程序是如何处理这些情况的。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="decoupling-middleware"&gt;
&lt;h3 id="hiddecoupling-middleware"&gt;Decoupling Middleware&lt;a class="headerlink" href="#hiddecoupling-middleware" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decide at the last responsible moment. 其他稳定性模式可以在不对设计或架构进行大规模更改的情况下实现。 解耦中间件是一个架构决策。 它会波及到系统的每一个部分。 这是几乎不可逆转的决定之一，应尽早而不是推迟作出。&lt;/li&gt;
&lt;li&gt;通过完全解耦来避免多个故障模式。解耦单个服务、层和应用程序越完全，外部依赖、级联故障、慢响应和线程阻塞的问题就越少。 你会发现，解耦的应用程序也具有更强的适应性，因为你可以在不依赖其他参与者的情况下变更依赖。&lt;/li&gt;
&lt;li&gt;学习多种架构，并在其中进行选择。不是每个系统都需要成为一个带有关系数据库的三层应用程序。 学习多种架构风格，为手头的问题选择最好的架构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="shed-load"&gt;
&lt;h3 id="hidshed-load"&gt;Shed Load&lt;a class="headerlink" href="#hidshed-load" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;服务、微服务、网站和开放 api 都有一个共同特征: 它们没法控制外部请求。在任何时候，超过10亿台设备都可以发出请求。 无论你的负载均衡器有多强大，或者你的扩容速度有多快，这个世界总是会产生超出你能力的负载。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;你无法超越整个世界。如果你的服务暴露于无法控制的环境，那么你需要能够在全世界为你疯狂时甩掉/消减负载。&lt;/li&gt;
&lt;li&gt;使用 Shed Load（消减负载）来阻止慢响应。&lt;/li&gt;
&lt;li&gt;使用负载均衡器作为减震器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="create-back-pressure"&gt;
&lt;h3 id="hidcreate-back-pressure"&gt;Create Back Pressure&lt;a class="headerlink" href="#hidcreate-back-pressure" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;每个性能问题都开始于某个地方的队列开始阻塞了。可能是 socket 的 listen 队列，也可能是操作系统的运行队列或者是数据库的 I/O 队列。&lt;/p&gt;
&lt;p&gt;无限队列基本是不可接受的，因为它们会吃掉所有可用的内存。如果队列是有限的的，我们就需要决定在队列阻塞时做啥操作，只有少量的选项：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;假装接受新条目，但是实际上会直接把它丢弃。&lt;/li&gt;
&lt;li&gt;真的接受新条目，然后把队列中的一些数据给丢弃。&lt;/li&gt;
&lt;li&gt;拒绝新条目。&lt;/li&gt;
&lt;li&gt;阻塞生产者，直到队列有空位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于某些用例，丢弃新条目可能是最好的选择。 对于价值随年龄(age)迅速下降的数据，删除队列中最老的条目可能是最佳选择。&lt;/p&gt;
&lt;p&gt;阻塞生产者是一种流量控制手段。 它允许队列向上游施加&amp;quot;反压力/背压(back pressure)&amp;quot;。 据推测，背压(back pressure)会一直传递到最终的客户端，在队列释放新的空间前，客户端的速度会被降低。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;背压（Back Pressure）通过降低（服务）消费方的消费速度来创造安全性。（服务）消费方将经历减速。 唯一的替代选择是让他们崩溃（服务）提供方。&lt;/li&gt;
&lt;li&gt;在一个系统的边界应用背压（Back Pressure）模式。跨越界限，转而关注负载的减少。尤其是当互联网是你的用户基础的时候。&lt;/li&gt;
&lt;li&gt;为了让响应时间有限，队列必须是有限的。当队列满的时候，你只有有限的几个选择。 所有这些选择都是令人不快的: 丢失数据、拒绝工作或阻塞。（服务）消费方必须小心，不要永远阻塞在那。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="governor"&gt;
&lt;h3 id="hidgovernor"&gt;Governor&lt;a class="headerlink" href="#hidgovernor" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;自动化没有判断力。 当它出错的时候，往往很快就会出错。 当一个人察觉到问题的时候，它就是一个恢复而不是干预的问题。 我们怎么能允许人为干预而不让人参与其中呢？ 我们应该使用自动化来处理人类不擅长的事情: 重复性任务和快速响应。 我们应该用人来做自动化不擅长的事情: 在更高的层次上感知整个状况。&lt;/p&gt;
&lt;p&gt;我们可以创建调节器（Governor）来降低操作的速度。 Reddit 通过为他们的自动扩容装置添加一次只能关闭一定百分比的实例的逻辑来实现这一特性。&lt;/p&gt;
&lt;p&gt;调节器（Governor）是有状态和时间意识的。 它知道在一段时间内做了什么操作。 它也应该是不对称的。 大多数材质都有一个&amp;quot;安全&amp;quot;方向和一个&amp;quot;不安全&amp;quot;方向。 关闭实例是不安全的。 删除数据是不安全的。 阻止客户端 IP 地址是不安全的。&lt;/p&gt;
&lt;p&gt;你经常会在&amp;quot;安全&amp;quot;的定义之间找到对立。 关闭实例对于可用性是不安全的，而拉起实例对于成本是不安全的。 这些对立并不互相抵消。 相反，他们定义了一个 u 型曲线，在这个曲线上，向任何一个方向走得太远都是不好的。 这意味着操作在规定的范围内是安全的，在范围外是不安全的。
你的 AWS 预算可能允许一千个 EC2 实例，但是如果自动扩容程序开始朝着扩容两千个实例的方向前进的话，那么它需要放慢速度。&lt;/p&gt;
&lt;p&gt;你可以将这个 u 型曲线看作是定义调节器（Governor）的响应曲线。 在安全区内行动迅速。 在范围之外调节器（Governor）增加阻力。&lt;/p&gt;
&lt;p&gt;调节器（Governor）的全部意义就是让事情慢下来，足以让人类参与进来。 当然，这意味着连接监控系统以便警告人类有异常情况，并给他们足够的可见性来了解正在发生的事情。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;让事情慢下来，以便可以人工介入。当事情即将偏离轨道时，我们常常发现自动化工具会将其推向极限。 人类更善于基于场景的思考，所以我们需要创造机会让自己能够介入其中。&lt;/li&gt;
&lt;li&gt;在不安全的方向施加阻力。 有些动作本身就是不安全的。 关闭，删除，阻塞... 这些都有可能中断服务。 自动化将使它们运行得更快，因此你应该应用调节器（Governor）来为人工介入预留时间。&lt;/li&gt;
&lt;li&gt;考虑响应曲线。考虑一个响应曲线。在规定的范围内，操作可能是安全的。 在这个范围之外，它们应该遇到越来越大的&amp;quot;阻力&amp;quot;（通过减慢它们发生的速度）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-06-26:2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-2.html</guid><category>stability</category></item><item><title>《Release It! Second Edition》阅读笔记（一）</title><link>https://mozillazg.com/2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-1.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文是 &lt;a class="reference external" href="https://pragprog.com/book/mnee2/release-it-second-edition"&gt;《Release It! Second Edition》&lt;/a&gt; 这本书的流水账式阅读笔记。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="living-in-production"&gt;
&lt;h2 id="hidliving-in-production"&gt;Living in Production&lt;a class="headerlink" href="#hidliving-in-production" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;软件只有在线上（上线）才能体现它的价值。上线之前的开发、测试、计划等等都是上线前的前奏。这本书讲的是围绕上线以及线上稳定性的各方面的知识。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-stability"&gt;
&lt;h2 id="hidcreate-stability"&gt;Create Stability&lt;a class="headerlink" href="#hidcreate-stability" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="case-study-the-exception-that-grounded-an-airline"&gt;
&lt;h3 id="hidcase-study-the-exception-that-grounded-an-airline"&gt;Case Study: The Exception That Grounded an Airline&lt;a class="headerlink" href="#hidcase-study-the-exception-that-grounded-an-airline" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;举了一个航空公司的系统故障的例子，在这个例子中因为一个未捕获的 SQLException 异常导致整个航空系统瘫痪了数小时。&lt;/p&gt;
&lt;p&gt;讲了一下用到的方法：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;通过 jvm 的 thread dumps 找到各个服务 block 的地方&lt;/li&gt;
&lt;li&gt;通过反编译的方式拿到了关键问题的 java 代码，从而最终确定了 bug 是哪段代码导致的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bug 总是不可避免的，谁也不能保证再也不会出现 bug。这个例子中最糟糕的问题不是这个 bug 本身，而是这个 bug 瘫痪了整个系统：
一个系统中的 bug 所产生的影响传递到了所有相关的系统。我们要解决的问题是：如何阻止一个系统中的 bug 影响其他所有的系统。
后面的章节会讲如何组织这类问题的一些设计模式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stabilize-your-system"&gt;
&lt;h3 id="hidstabilize-your-system"&gt;Stabilize Your System&lt;a class="headerlink" href="#hidstabilize-your-system" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="extending-your-life-span"&gt;
&lt;h4 id="hidextending-your-life-span"&gt;Extending Your Life Span&lt;a class="headerlink" href="#hidextending-your-life-span" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;测试可以发现很多问题，一切没有通过测试发现的问题最终都将会发生：如果你没有测试一下在七天后会发生的内存泄露问题，那么七天后就会发生内存泄露。&lt;/p&gt;
&lt;p&gt;问题是，大部分测试运行的时间都太短了，测试环境、开发环境的服务都会频繁的重启，并没有像生产环境一样一个服务持续运行很长一段时间，
这样就会导致很多问题无法在测试和开发的过程中发现，直到到了生产环境才在某天触发。&lt;/p&gt;
&lt;p&gt;如何应对这类需要长时间运行才能发现的问题，并在生产环境之前提前发现这类问题？你需要准备一个类似的长时间运行的环境，如果条件不允许的话，
简单的一台机器上运行长时间的服务，然后负载测试的时候不要只跑一会儿，试试持续跑几个小时甚至几天。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="failure-modes"&gt;
&lt;h4 id="hidfailure-modes"&gt;Failure Modes&lt;a class="headerlink" href="#hidfailure-modes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;为你的系统设计故障方法，你可以设计一些安全的故障方法，在出现故障的时候保护系统的其他部分不受故障的影响。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stopping-crack-propagation"&gt;
&lt;h4 id="hidstopping-crack-propagation"&gt;Stopping Crack Propagation&lt;a class="headerlink" href="#hidstopping-crack-propagation" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;不要让故障持续传递&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chain-of-failure"&gt;
&lt;h4 id="hidchain-of-failure"&gt;Chain of Failure&lt;a class="headerlink" href="#hidchain-of-failure" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;故障链上的每一个步故障可能都会导致后面系统的故障，导致出现雪崩效应，出现一个小 bug 导致链路上的所有系统都故障的问题。&lt;/p&gt;
&lt;p&gt;一种为每个可能故障的做准备的方法是，检查所有外部调用、所有 I/O 调用、所有资源使用以及所有预期的结果，自问一下：『所有的这些操作可能会出现哪些异常情况？』：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;无法完成初始化连接会咋样？&lt;/li&gt;
&lt;li&gt;如果建立一个连接需要 10 分钟会咋样？&lt;/li&gt;
&lt;li&gt;连接建立了然后又被断开了呢？&lt;/li&gt;
&lt;li&gt;可以建立连接但是无法获取的响应信息？&lt;/li&gt;
&lt;li&gt;如果我的查询需要 2 分钟才能获得响应呢？&lt;/li&gt;
&lt;li&gt;当尝试写一个关键的错误日志（比如前面的 SQLException）的时候磁盘满了呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一次线上故障都是唯一的，但是我们可以从这些故障中找到一些故障模型，通过分析这些故障模型就可以找到一些通用的解决办法。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stability-antipatterns"&gt;
&lt;h2 id="hidstability-antipatterns"&gt;Stability Antipatterns&lt;a class="headerlink" href="#hidstability-antipatterns" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本章讲一些可能会摧毁你的系统的反模式。&lt;/p&gt;
&lt;div class="section" id="integration-points"&gt;
&lt;h3 id="hidintegration-points"&gt;Integration Points&lt;a class="headerlink" href="#hidintegration-points" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;现在大部分系统的结构已经从之前的单体架构变成了集成多个服务的类似网状的结构，网状结构中的各个依赖链路是摧毁你系统的一个关键点，
下面看看这些依赖链路是怎么在各种场景下成为毁灭者的，以及你可以如何应对。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="socket-based-protocols"&gt;
&lt;h3 id="hidsocket-based-protocols"&gt;Socket-Based Protocols&lt;a class="headerlink" href="#hidsocket-based-protocols" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大多数高级协议都是基于 socket 实现的。虽然这些高级协议都有自己的故障模型，但是它们都会受 socket 层故障的影响。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;connection refused 是最容易处理、一般也不会被忽略的一种异常情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;TCP 三次握手（SYN、SYN/ACK、ACK）期间的异常情况：
* 如果远程服务没有监听指定的端口，客户端会收到 RST 报，这个过程的响应特别快，调用方会得到一个异常/错误返回码
* 远程服务监听了指定端口，监控端口的同时会有一个 listen queue（在队列内的连接处于发送了 SYN，但是还没收到 SYN/ACK 回复的 pending 状态）:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;队列满了：新进来的连接会被拒绝（不放到 listen queue 中，不回复 SYN/ACK），客户端会反复重传 SYN 包&lt;/li&gt;
&lt;li&gt;队列没满，但是没有 accept 回复 SYN/ACK 的话，客户端会反复重传 SYN 包&lt;/li&gt;
&lt;li&gt;open() 调用在三次握手没完成的时候都会阻塞在那里，直到连接成功或超时（connection timeout）。
连接超时的阻塞时间一般都是分钟级别的，甚至十几分钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;客户端连接成功了并且发送了一个请求，但是服务端可能会花很长时间才会完成读取请求并返回一个响应的操作。
在服务端返回响应前， read() 调用会一直阻塞在那里，通常这个阻塞是没有时间限制的，如果你想唤醒这个阻塞调用的话，必须得设置 socket 超时时间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络故障通常有两种方式：快速或者缓慢。类似 connection refused 的快速故障调用者可以在几毫秒内就获知这个结果，
类似 ACK 包被丢弃的缓慢故障会导致分钟级别的线程阻塞问题，阻塞的线程无法处理其他事物，如果所有线程都阻塞的话，可能会导致整个系统宕机。&lt;/p&gt;
&lt;p&gt;所以，缓慢的响应比没有响应（快速得到结果）更糟。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-5-a-m-problem"&gt;
&lt;h3 id="hidthe-5-a-m-problem"&gt;The 5 A.M. Problem&lt;a class="headerlink" href="#hidthe-5-a-m-problem" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过抓包工具（tcpdump、Wireshark）来调查 socket 相关的问题。&lt;/p&gt;
&lt;p&gt;作者讲了一个因为链路中的一个防火墙频繁丢弃了 ACK 包导致服务 hang 住最终导致整条链路都挂了的案例
（有个连接池，连接池中每个空闲连接的超时时间是一个小时，因为丢包问题导致无法及时剔除有问题的连接，然后使用连接的时候用了有问题的连接出现服务 block）。&lt;/p&gt;
&lt;p&gt;一般需要二十分钟 socket 库才能感知到重传导致的超时问题（tcp_retries2），上面案例中他们用的系统需要三十分钟才能感知到超时，
也就是说他们服务中的 write socket 操作会出现长达三十分钟的 block 问题，read socket 操作会 block forever!&lt;/p&gt;
&lt;p&gt;这个例子想说的是，有时候故障不一定是应用层面导致的问题，有时可能是上层或下层导致的问题，你需要知道如何深挖至少两层来找到真正的问题所在。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http-protocols"&gt;
&lt;h3 id="hidhttp-protocols"&gt;HTTP Protocols&lt;a class="headerlink" href="#hidhttp-protocols" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;HTTP 协议也是基于 socket 的，所以它有上面提到 socket 相关的所有问题，同时它也有自己特殊的问题：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;服务端可能接受了 TCP 连接，但是不响应 HTTP 请求&lt;/li&gt;
&lt;li&gt;服务端可能接受连接，但是不读取请求。如果请求的 body 特别大的话，可能会超出服务的的 TCP 窗口大小，这会导致
调用方的 TCP buffer 被填满，这将导致 write socket 操作 block 住。这种情况下正在发送的请求永远都不会完成&lt;/li&gt;
&lt;li&gt;服务端可能会返回一个调用方无法处理的响应，比如 &amp;quot;418 I’m a teapot.&amp;quot; 或者 &amp;quot;451 Resource censored.&amp;quot;&lt;/li&gt;
&lt;li&gt;服务端可能会返回一个调用方非预期的或者无法处理的内容类型，比如，返回一个 404 的 Html 页面而不是预期的 JSON 响应。（比如，有些 ISP 在 dns 查询失败的时候会返回一个 html 的错误页面）&lt;/li&gt;
&lt;li&gt;服务端声明会返回一个 JSON 数据，但是实际上是个普通的纯文本数据或者二进制数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;推荐使用那种可以详细控制超时（包括连接超时和读取超时）以及如何处理响应的客户端库，不要用那种直接把响应映射为对象的库，应该在确认获取到了预期的数据后再把响应作为合法数据进行处理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vendor-api-libraries"&gt;
&lt;h3 id="hidvendor-api-libraries"&gt;Vendor API Libraries&lt;a class="headerlink" href="#hidvendor-api-libraries" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;供应商提供的 API 库通常意味着：代码质量差、bug 多、bug 修复周期长、有些甚至看不到源代码无法自助修复 bug。&lt;/p&gt;
&lt;p&gt;供应商 API 库主要的稳定性杀手是其中的 block 操作：内部连接池/资源池、socket read 调用、HTTP 连接或者是不安全的序列化操作。
供应商 API 库布满了大量不安全的代码实践。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="countering-integration-point-problems"&gt;
&lt;h3 id="hidcountering-integration-point-problems"&gt;Countering Integration Point Problems&lt;a class="headerlink" href="#hidcountering-integration-point-problems" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如何防范集成链路中各个依赖的问题，下面有一些建议：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;警惕必然会出现的问题：链路上的每个依赖必然会出现某种故障，你需要为这些故障做预案和准备。&lt;/li&gt;
&lt;li&gt;为多种形式的故障准备预案。&lt;/li&gt;
&lt;li&gt;故障会快速传递：远程系统中的故障会快速成为你的系统中的问题，如果你的代码防御性不够的话，这个问题通常会演变成瀑布式故障（故障风暴）。&lt;/li&gt;
&lt;li&gt;应用一些模式来抵御链路中的问题：通过熔断（Circuit Breaker）、超时（ Timeouts）、解耦中间件 （Decoupling Middleware）、握手（Handshaking）这些防御式编程方法来帮助你抵御链路上的危险问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chain-reactions"&gt;
&lt;h3 id="hidchain-reactions"&gt;Chain Reactions&lt;a class="headerlink" href="#hidchain-reactions" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;目前的架构风格一般分为水平扩展和垂直扩展，然后大部分服务都是水平扩展架构的。&lt;/p&gt;
&lt;p&gt;水平扩展的模式一下，一般都有类似负载均衡或集群的模式。
水平扩展虽然不容易受单点故障问题的影响，但是仍旧有负载相关的失败模式。
比如，有一个节点因为内存泄露导致服务异常了，此时这个节点上的流量通过负载均衡器会分摊到剩下的健康节点上，
但是剩下的节点可能也会因为这些新的流量也导致出现异常（因为这些节点也有内存泄露问题，只是暂时还未达到临界点）。
解决这种连锁反（chain reaction）应的唯一办法是修复导致问题的 bug。&lt;/p&gt;
&lt;p&gt;把一层分隔为多个池的舱壁模式（Bulkhead）可以减轻连锁反应说带来的影响。&lt;/p&gt;
&lt;p&gt;连锁反应有时是因为一些阻塞的线程而导致的问题，比如一个节点中所有处理请求的线程都阻塞了，这会导致服务无法响应请求，
新进来的连接会分散到同一层的其他节点上，加大其他节点出现问题的几率。&lt;/p&gt;
&lt;p&gt;Remember This:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;意识到，有时一个服务宕机会危及剩下的服务，导致它们也出现宕机的问题。连锁反应可能会导致整个层的服务都宕机， 其他依赖这层的服务必须保护自己，否则它们可能会因为失败风暴导致宕机。&lt;/li&gt;
&lt;li&gt;追杀资源泄露问题。大部分连锁反应都是内存泄露导致的问题。&lt;/li&gt;
&lt;li&gt;追杀令人费解的时间相关的 bug。如果一个节点出现死锁问题，很有可能会导致其他节点也出现死锁问题。&lt;/li&gt;
&lt;li&gt;使用自动扩容功能。随着时间的推移，自动扩容的速度将超过连锁反应的传递速度，最终终止连锁反应。&lt;/li&gt;
&lt;li&gt;使用舱壁(Bulkheads)模式进行防御：在服务端使用舱壁模式阻止连锁反应危及整个服务， 在客户端使用熔断器（Circuit Breaker）模式来处理一部分服务宕机的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cascading-failures"&gt;
&lt;h3 id="hidcascading-failures"&gt;Cascading Failures&lt;a class="headerlink" href="#hidcascading-failures" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;瀑布式故障，故障雪崩，指的是某一层的服务的故障导致调用方那一层也出现故障。&lt;/p&gt;
&lt;p&gt;瀑布式故障通常是低层次的故障导致资源池异常的结果，比如请求依赖的外部服务时没有设置超时。&lt;/p&gt;
&lt;p&gt;下游服务的故障会导致上游服务触发重试逻辑，然后随着下游服务故障的加重最后触发了重试风暴，最终打挂下游服务。
针对这种重试风暴的情况，调用方需要应用熔断器（Circuit Breaker）模式。&lt;/p&gt;
&lt;p&gt;最高效的对付瀑布式故障的模式是熔断器（Circuit Breaker）和超时。&lt;/p&gt;
&lt;p&gt;Remember This:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;确保你的服务在外部依赖异常时不会受牵连导致宕机。&lt;/li&gt;
&lt;li&gt;仔细检查各种资源池。资源池异常通常会导致瀑布式故障。比如，长时间无法获取到需要的资源的连接池，获取连接的线程会一直阻塞，其他等待连接的线程也会阻塞。 安全的资源池应该限制一个线程获取资源的等待时间。&lt;/li&gt;
&lt;li&gt;通过超时和熔断器（Circuit Breaker）模式来防御瀑布式故障问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="users"&gt;
&lt;h3 id="hidusers"&gt;Users&lt;a class="headerlink" href="#hidusers" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;用户太少是个问题，用户太多其实也会成为问题。比如未准备好的促销活动或者网红转发导致的用户量暴增，这些个的用户增长可能都会打垮服务。&lt;/p&gt;
&lt;div class="section" id="traffic"&gt;
&lt;h4 id="hidtraffic"&gt;Traffic&lt;a class="headerlink" href="#hidtraffic" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;流量同样也有类似的问题，一般服务都有自己的预估容量，如果超出了可支撑的容量就会导致问题。
如果你的服务是跑在云上的话，云服务的自动扩容功能是好手段，不过有可能会出现因为自动扩容导致巨额账单的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heap-memory"&gt;
&lt;h4 id="hidheap-memory"&gt;Heap Memory&lt;a class="headerlink" href="#hidheap-memory" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;基于内存的 session 中应该保存尽可能少的数据。可以通过各个语言提供的弱引用（weak references）相关的技术来保证及时释放内存。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="off-heap-memory-off-host-memory"&gt;
&lt;h4 id="hidoff-heap-memory-off-host-memory"&gt;Off-Heap Memory, Off-Host Memory&lt;a class="headerlink" href="#hidoff-heap-memory-off-host-memory" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;善用把数据存放到外部进程的方式来代替进程内的用户数据内存，比如 Memcached、Redis&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sockets"&gt;
&lt;h4 id="hidsockets"&gt;Sockets&lt;a class="headerlink" href="#hidsockets" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;一个服务器所能处理的接入连接数是有限制的，主要是端口数限制，解决的办法是虚拟 ip 地址，服务通过监听网卡上的多个虚拟 ip 的方式来突破端口数量限制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="closed-sockets"&gt;
&lt;h4 id="hidclosed-sockets"&gt;Closed Sockets&lt;a class="headerlink" href="#hidclosed-sockets" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;关闭 socket 有时也可能会触发问题。比如记得留意一下 TIME_WAIT 状态的连接。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expensive-to-serve"&gt;
&lt;h4 id="hidexpensive-to-serve"&gt;Expensive to Serve&lt;a class="headerlink" href="#hidexpensive-to-serve" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;有些用户可能比其他用户更难服务，比如大部分用户可能只是浏览一下商品页面，这些页面的内容通常可以使用缓存，
还有一部分用户会下单、付款，这些功能对服务的要求更高，可能会触发一些问题。&lt;/p&gt;
&lt;p&gt;对于这类问题的发现方法是压力测试，比如你预期的转化率是 2% 那你在做压力测试的时候就可以考虑测试 4%、6%、10% 的转化率。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unwanted-users"&gt;
&lt;h4 id="hidunwanted-users"&gt;Unwanted Users&lt;a class="headerlink" href="#hidunwanted-users" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;不是所有的用户/请求都是服务想要的，比如不恰当的客户端导致的 DDoS 攻击、不遵守规范的网络爬虫等等。
你的服务需要考虑如何应对这些不想要的用户，让他们处于你们的控制下否则害虫就会大量滋生。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="malicious-users"&gt;
&lt;h4 id="hidmalicious-users"&gt;Malicious Users&lt;a class="headerlink" href="#hidmalicious-users" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;同样也不乏怀有恶意的用户，比如各种脚本小子、攻击者等等，比如最常见的 DDoS 攻击、各种安全漏洞攻击之类的，需要对这些恶意用户保持警惕。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;用户会消耗内存：每个用户 session 都需要一点内存，最小化内存使用可以提高服务的容量。&lt;/li&gt;
&lt;li&gt;用户会做古怪的、随机的事情：真实世界的用户会做你无法预测的事情。测试脚本对这种情况可能不是特别有用，可以考虑看看fuzzing toolkits, property- based testing, or simulation testing。&lt;/li&gt;
&lt;li&gt;恶意用户无处不在：确保你的系统可以方便的进行各类漏洞的修补工作，及时更新使用的框架、持续学习。&lt;/li&gt;
&lt;li&gt;用户有时会像暴徒一样涌进来，比如有网红推荐了你的网站，大量涌入的用户可能会触发 hang 住、死锁等问题，需要对这些情况有所预案，比如对热链进行压力测试等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="blocked-threads"&gt;
&lt;h3 id="hidblocked-threads"&gt;Blocked Threads&lt;a class="headerlink" href="#hidblocked-threads" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;很多时候服务故障的时候并不会崩溃而是所有线程都阻塞在那等待着一些不能完成的事情。&lt;/p&gt;
&lt;p&gt;所以建议不只是要有内部监控（日志抓取、进程监控、端口监控等）也可以有个外部监控，比如一个模拟真实用户操作的客户端，如果这个客户端无法得到预期的结果的话，肯定是哪里有问题了，即便服务还在运行。&lt;/p&gt;
&lt;p&gt;metric 监控同样也可以帮助快速发现问题，比如登录成功数、支付失败数等计数类 metric 监控。&lt;/p&gt;
&lt;p&gt;线程阻塞可能发生在任何时候：从连接池中获取一个连接、处理缓存或对象登记、或者是进行一次外部调用。&lt;/p&gt;
&lt;p&gt;不安全的多线程代码通常有四种情况：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;错误情况和异常的组合数太多了，导致测试无法完全覆盖&lt;/li&gt;
&lt;li&gt;非预期的交互会把问题引入到前面安全的代码中&lt;/li&gt;
&lt;li&gt;时间非常重要，应用可能会同时 hang 住多个并发请求&lt;/li&gt;
&lt;li&gt;开发者从来没测试过应用处理 1 万个并发请求的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开发环境很难发现 hang 住的情况。不要总想着自己实现连接池，实现一个可靠、安全、高性能的连接池比你想象的要更困难。&lt;/p&gt;
&lt;p&gt;尽量不要在同步方法里修改共享对象，建议是把这些共享对象实现为不可变的或者在同步方法里使用一个原对象的副本。&lt;/p&gt;
&lt;div class="section" id="spot-the-blocking"&gt;
&lt;h4 id="hidspot-the-blocking"&gt;Spot the Blocking&lt;a class="headerlink" href="#hidspot-the-blocking" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Use Caching, Carefully:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;所有应用级别的缓存都需要配置最大内存使用&lt;/li&gt;
&lt;li&gt;需要监控缓存命中率&lt;/li&gt;
&lt;li&gt;不要缓存没意义或者可以很快生成不需要放入缓存的数据&lt;/li&gt;
&lt;li&gt;缓存数据自身应该使用弱引用（weak reference）来帮助 gc 释放内存&lt;/li&gt;
&lt;li&gt;缓存要适时更新或过期，不要出现旧数据导致出问题的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="libraries"&gt;
&lt;h4 id="hidlibraries"&gt;Libraries&lt;a class="headerlink" href="#hidlibraries" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;第三方库是万恶之源，大部分阻塞的线程都来自第三方库。很多作为一个服务的客户端的库都有一个内置的资源池，它们通常会在出问题时永久阻塞发送请求的线程。
以及它们通常不能配置失败模型，比如如何处理所有连接都在等待那些永远都不会返回的响应的情况。&lt;/p&gt;
&lt;p&gt;如果是个开源库，你还可以通过各种方法快速的修复相关问题，如果是供应商提供的库的话，你可能需要自己包装一下这个库，使用自己可控的方式来处理请求。&lt;/p&gt;
&lt;p&gt;Remember This：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;消除阻塞线程相关的反模式可以解决大部分的故障问题&lt;/li&gt;
&lt;li&gt;仔细检查资源池&lt;/li&gt;
&lt;li&gt;使用久经考验的原语。任何并发相关的库都比你现造的生产者/消费者队列的轮子要经过更多的测试。&lt;/li&gt;
&lt;li&gt;使用超时机制进行防御&lt;/li&gt;
&lt;li&gt;小心那些没法看到源码的库&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="self-denial-attacks"&gt;
&lt;h3 id="hidself-denial-attacks"&gt;Self-Denial Attacks&lt;a class="headerlink" href="#hidself-denial-attacks" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;市场部门的营销活动可能会导致自我拒绝的攻击，一些全局共享的资源也会导致类似的问题，比如分布式全局锁服务。&lt;/p&gt;
&lt;div class="section" id="avoiding-self-denial"&gt;
&lt;h4 id="hidavoiding-self-denial"&gt;Avoiding Self-Denial&lt;a class="headerlink" href="#hidavoiding-self-denial" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;可以通过构建一个 shared-nothing 的架构（服务间不共享任何资源，不依赖其他服务的正常运行）来阻止机器相关的自我拒绝问题。
如果没法做到的话，可以考虑实现 fall back 机制，当一个依赖的服务异常时使用另一个服务或机制来实现类似的功能。&lt;/p&gt;
&lt;p&gt;也可以搭配硬件负载均衡器来进行流量管理、基础设施分区、使用新的云服务资源来处理营销活动或流量陡增的场景。&lt;/p&gt;
&lt;p&gt;自动扩容也是一个方法，不过要考虑到扩容的速度问题，如果都是虚拟机的话扩容可能会比较慢，可以考虑使用预扩容的方式来应对即将到来的营销活动。&lt;/p&gt;
&lt;p&gt;对于人为导致的攻击问题，解决方法是：培训、教育、交流。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scaling-effects"&gt;
&lt;h3 id="hidscaling-effects"&gt;Scaling Effects&lt;a class="headerlink" href="#hidscaling-effects" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;任何时候你有一个多对一或多对少关系，当一端增长时候，你都可能会遇到尺度效应（scaling effects）的问题。&lt;/p&gt;
&lt;p&gt;比如，一个数据库服务在只有 10 台机器作为调用方的时候可以正常工作，但是当你又新加了 50 台机器的时候，这个数据服务就崩溃了。&lt;/p&gt;
&lt;p&gt;开发环境和测试环境中因为使用的机器数量太少，基本上很难发现尺度效应相关的问题。&lt;/p&gt;
&lt;div class="section" id="point-to-point-communications"&gt;
&lt;h4 id="hidpoint-to-point-communications"&gt;Point-to-Point Communications&lt;a class="headerlink" href="#hidpoint-to-point-communications" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;尺度效应问题的一个多发地是点对点通信的场景：服务内部实例之间需要点对点的互相通信。
当需要点对点通信的节点数量增加到数以千计的时候基本上都会成为很大问题，
然而除非你们是 google 或微软否则没法在测试环境搭建与生产等量的机器信息，所以测试一般都覆盖不了这种 case。&lt;/p&gt;
&lt;p&gt;如果机器数量比较少点对点通信可能没啥大问题，随着机器数量的增加，可以考虑使用下面的方式替换点对点通信：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;UDP 广播&lt;/li&gt;
&lt;li&gt;TCP 或 UDP 多播&lt;/li&gt;
&lt;li&gt;发布/订阅消息&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="shared-resources"&gt;
&lt;h4 id="hidshared-resources"&gt;Shared Resources&lt;a class="headerlink" href="#hidshared-resources" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;另一个危及稳定性的尺度效应问题是共享资源（Shared Resources）问题。
当这种共享资源过载的时候，它就会成为其他依赖这个共享资源的服务的容量瓶颈。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;检查生产环境和 QA 环境的区别，找到上了生产环境后可能会因为尺度效应导致问题的风险点。&lt;/li&gt;
&lt;li&gt;小心点对点通信，点对点通信的方式会导致非常的难以扩容。&lt;/li&gt;
&lt;li&gt;小心共享资源。如果一定要依赖一些共享资源的话，记得做压力测试，以及要确保它们的客户端在共享资源变慢或者锁住的时候仍旧能够工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unbalanced-capacities"&gt;
&lt;h3 id="hidunbalanced-capacities"&gt;Unbalanced Capacities&lt;a class="headerlink" href="#hidunbalanced-capacities" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;链路中各个系统的容量不一样，尤其是前端部分一般容量都比后端部分大，在突然出现的流量高峰的时候容量不够的部分就会成为瓶颈，
但是让所有系统的容量都预留的特别足只为了应对某一天的突发流量也不是特别现实。&lt;/p&gt;
&lt;p&gt;但是也还是要应对偶然的突发流量的，调用方可以在下游异常时应用熔断器模式来减轻下游服务的压力，
服务提供方可以使用 Handshaking 和 Backpressure 来告诉调用方请求限流了，同时也可以考虑使用 Bulkheads 模式来为高优先级的调用方保留容量。&lt;/p&gt;
&lt;div class="section" id="drive-out-through-testing"&gt;
&lt;h4 id="hiddrive-out-through-testing"&gt;Drive Out Through Testing&lt;a class="headerlink" href="#hiddrive-out-through-testing" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;不均衡的容量是另一个无法在 QA 环境发现的稳定性问题。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;检查服务器和线程数量，防止在生产环境出现容量不均衡导致的问题，这个情况一般在测试环境中发现不了，因为测试环境中一把就一两台服务器。&lt;/li&gt;
&lt;li&gt;留意尺度效应和突增用户。&lt;/li&gt;
&lt;li&gt;虚拟化 QA 环境，扩容 QA 环境。尝试测试调用方和被调方非等比扩容下的 case 。&lt;/li&gt;
&lt;li&gt;压力测试接口的两端。既要测试后端服务（突然涌入10倍的流量会咋样？）也要测试前端流量（如果后端异常了会咋样？）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dogpile"&gt;
&lt;h3 id="hiddogpile"&gt;Dogpile&lt;a class="headerlink" href="#hiddogpile" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当一群服务同时施加这种瞬时负载的时候，这种情况就叫做叠罗汉（Dogpile）。 dogpile 可能发生的场景：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;多个服务启动的时候，比如代码升级或服务重启&lt;/li&gt;
&lt;li&gt;在半夜触发的定时任务（或者每小时触发）&lt;/li&gt;
&lt;li&gt;配置管理系统推送一个变更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些配置管理工具允许配置一个随机因子（这样推送事件就不会集中在某一点）来打散短时间内的 dogpile 问题。&lt;/p&gt;
&lt;p&gt;dogpile 也可能会发生在因为外部因素导致出现了同步触发的流量。
需要小心那些多个线程等待一个线程完成的情况，当那个线程完成的时候，那些等待的线程就会对下游服务产生 dogpile 现象。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dogpile 需要你花费更多的容量来处理它产生的波峰问题。&lt;/li&gt;
&lt;li&gt;使用随机时钟来打散波峰，不要把所有定时任务都放在半夜执行或者每小时执行，混合使用来打散负载。&lt;/li&gt;
&lt;li&gt;通过增加 backoff 次数来规避脉冲现象。固定周期的重试间隔会产生周期性的脉冲，应该使用 backoff 算法这样不同的调用者会因为不同的周期而产生不同的流量点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="force-multiplier"&gt;
&lt;h3 id="hidforce-multiplier"&gt;Force Multiplier&lt;a class="headerlink" href="#hidforce-multiplier" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;自动化赋予了管理员以少量工作完成大规模迁移的能力，这个就是 Force Multiplier&lt;/p&gt;
&lt;div class="section" id="outage-amplification"&gt;
&lt;h4 id="hidoutage-amplification"&gt;Outage Amplification&lt;a class="headerlink" href="#hidoutage-amplification" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;自动化系统或策略所产生的结果可能不一定是符合预期的结果，比如 reddit 有次故障就是跟自动化系统有关：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.reddit.com/r/announcements/comments/4y0m56/why_reddit_was_down_on_aug_11"&gt;http://www.reddit.com/r/announcements/comments/4y0m56/why_reddit_was_down_on_aug_11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="controls-and-safeguards"&gt;
&lt;h4 id="hidcontrols-and-safeguards"&gt;Controls and Safeguards&lt;a class="headerlink" href="#hidcontrols-and-safeguards" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;我们可以在我们的控制面板软件中实现一些保护措施（safeguards）来预防自动化可能产生的非预期结果：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果观察者报告有 80% 以上的系统不可用了，这个情况很有可能是观察者有问题而不是系统出问题了。&lt;/li&gt;
&lt;li&gt;应用迟滞现象（Hysteresis），快速启动机器，但是关闭的时候要慢一点。启动一台新的机器要比下掉一台旧机器更安全。&lt;/li&gt;
&lt;li&gt;当预期的状态跟观察到的状态有很大差异的时候，需要增加确认信号。&lt;/li&gt;
&lt;li&gt;消费资源的系统需要有足够的状态以便在他们尝试启动无限的实例的时候检测到这一异常情况。&lt;/li&gt;
&lt;li&gt;建立减速带来控制动力。假设你的控制面板每秒检测一次过量的负载，但启动一个虚拟机来处理负载需要五分钟。 确保它不会因为持续存在的负载而启动 300 台虚拟机。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在做大破坏的前寻求帮助。基础设施管理工具可以在很短的时间内产生大量的破坏力，为它们构建限制器和保护措施这样它们就不会一次性把整个系统都摧毁。&lt;/li&gt;
&lt;li&gt;小心滞后的时间和动量。自动化启动的操作需要时间。 这个时间通常比监控时间间隔更长，因此要确保系统对动作的响应有一定的延迟（不要重复触发大量多余的自动化动作，比如前面提到的扩容问题）。&lt;/li&gt;
&lt;li&gt;提防错觉和迷信。控制系统可以感知环境，但是它们也可能被愚弄。 它们会计算出一个预期的状态和一个当前状态的『信念』，这两个任何一个都可能出错。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="slow-responses"&gt;
&lt;h3 id="hidslow-responses"&gt;Slow Responses&lt;a class="headerlink" href="#hidslow-responses" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通常一个慢响应要比一个拒绝连接或返回错误要更糟糕。&lt;/p&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;慢响应会触发级联故障。&lt;/li&gt;
&lt;li&gt;对于网站来说，慢响应会导致更多的流量。&lt;/li&gt;
&lt;li&gt;考虑快速失败。&lt;/li&gt;
&lt;li&gt;查找内存泄露和资源竞争。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="unbounded-result-sets"&gt;
&lt;h3 id="hidunbounded-result-sets"&gt;Unbounded Result Sets&lt;a class="headerlink" href="#hidunbounded-result-sets" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;设计的时候要对外部系统持怀疑态度，时常考虑：系统 X 的啥操作会影响我系统的稳定性。&lt;/p&gt;
&lt;p&gt;无限的结果集在某天可能会对你的系统找出特别大的伤害，
比如一个查询操作，因为没有限制返回的结果，平时数据量少看不出影响，突然有一天返回了上百万行的数据，此时可能就好影响你的系统的稳定性。&lt;/p&gt;
&lt;div class="section" id="black-monday"&gt;
&lt;h4 id="hidblack-monday"&gt;Black Monday&lt;a class="headerlink" href="#hidblack-monday" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Remember This&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用合理的数据容量&lt;/li&gt;
&lt;li&gt;分页&lt;/li&gt;
&lt;li&gt;不要依赖数据提供方。不要期望数据提供方会按照预期的提供有限的结果集，万一有一天他们把整个表的数据都返回给你了呢？&lt;/li&gt;
&lt;li&gt;在应用级别的协议中增加限制。服务调用，RMI, DCOM, XML-RPC 以及其他类型的请求/响应调用都非常的脆弱，非常容易然后大量的数据导致占用太多的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wrapping-up"&gt;
&lt;h3 id="hidwrapping-up"&gt;Wrapping Up&lt;a class="headerlink" href="#hidwrapping-up" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-06-16:2019/06/Release-It-Design-and-Deploy-Production-Ready-Software-Second-Edition-2th-read-note-1.html</guid><category>stability</category></item><item><title>一个因为网卡 txqueuelen 参数值太小导致丢包的 case</title><link>https://mozillazg.com/2019/06/linux-client-io-timeout-server-lost-drop-packet-tcp-retransmitted-ifconfig-txqueuelen.html</link><description>&lt;p&gt;前段时间线上的一个服务出现 tcp 重传特别严重，同时客户端与服务端通信的过程中经常出现 io timeout 错误。最后发现是因为网卡 txqueuelen 参数的值设置的太小导致的。&lt;/p&gt;
&lt;p&gt;简单记录一下当时的现象，万一将来遇到类似的现象的时候有个参考，整体不是很完整只给自己备忘一下，有空的时候再完善。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;客户端&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;客户端程序使用 go 写的，与服务端端之间以 http 长连接的方式进行通信，直观的现象是日志中经常出现
&lt;tt class="docutils literal"&gt;read tcp &lt;span class="pre"&gt;&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;:&lt;/span&gt; i/o timeout&lt;/tt&gt; 错误。&lt;/p&gt;
&lt;p&gt;由于没有客户端服务器的权限所以没有在客户端抓包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;服务端&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;服务端最先观察到的现象是客户端在频繁的重连（这里只的是频繁的发送 http 请求，前面讲到了客户端与服务端是以 http 长连接的方式通信的，正常情况是连上之后只发一个 http 请求，要等很久才会发其他的 http 请求，也就是不会出现频繁的发送 http 请求的情况）。&lt;/p&gt;
&lt;p&gt;然后查看服务端主机的系统监控，发现 tcp 重传的指标特别高。&lt;/p&gt;
&lt;p&gt;服务端抓包发现的异常情况是: 服务端丢包重传一段时间后，客户端发起了关闭连接的操作，然后又没有完成最后 ACK 而是直接 RST。&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
server -&amp;gt; client    [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
client -&amp;gt; server    [FIN, ACK] Seq=1 Ack=6233 Win=60 Len=0
server -&amp;gt; client    [PSH, ACK] Seq=6233 Ack=2 Win=59 Len=190
server -&amp;gt; client    [FIN, ACK] Seq=6423 Ack=2 Win=59 Len=0
client -&amp;gt; server    [RST] Seq=2 Win=0 Len=0
client -&amp;gt; server    [RST] Seq=2 Win=0 Len=0
&lt;/pre&gt;
&lt;p&gt;通过 ifconfig 查看网卡状态，可以发现 RX dropped 的值特别高:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ifconfig

eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 10.0.x.x  netmask 255.255.255.0  broadcast 10.0.x.255
        inet6 xxxx  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether xxx  txqueuelen 1000  (Ethernet)
        RX packets xxx  bytes xxx (68.2 TiB)
        RX errors 0  dropped 6485541  overruns 0  frame 0
        TX packets xxx  bytes xxx (68.5 TiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/pre&gt;
&lt;p&gt;最后公司网络&amp;amp;虚拟化团队说是因为虚拟化时网卡的 txqueuelen 参数设置太小导致的丢包，加大了 txqueuelen 的值后丢包问题就大大缓解了（客户端没有再重连了）。&lt;/p&gt;
&lt;p&gt;这篇文章写的不是很详细，有很多证据没法拿出来或者说是缺失了，期望将来能找个时间以及找到一个可以简单在本地重现的方法，那个时候再完善这篇文章，暂时只能算是简单的 case 备忘。&lt;/p&gt;
&lt;p&gt;BTW, 还碰到一个丢包的 case 是：最终通过开启网卡多队列以及中断绑定来解决大流量下的网络丢包问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://m.newsmth.net/article/KernelTech/60177"&gt;[合集] 请教：协议栈什么情况下丢包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-06-01:2019/06/linux-client-io-timeout-server-lost-drop-packet-tcp-retransmitted-ifconfig-txqueuelen.html</guid><category>丢包</category></item><item><title>Go: 谨慎使用 math/rand 包中的默认随机数函数</title><link>https://mozillazg.com/2019/05/go-be-careful-of-math-rand-functions.html</link><description>&lt;p&gt;一句话总结：math/rand 包中默认的随机数相关函数共享了一个全局锁，
即：所有使用默认随机函数的代码都会去竞争一个全局锁，有时这可能不是你想要的结果。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;全局锁&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比如 &lt;tt class="docutils literal"&gt;rand.Int63&lt;/tt&gt; 这个函数的 &lt;a class="reference external" href="https://github.com/golang/go/blob/cdb776529ea7a4beac4c8a4d6a9ce149045bd6b5/src/math/rand/rand.go#L319"&gt;源代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;Int63n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;globalRand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int63n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到它其实是调用了一个全局的 Rand 实例 &lt;tt class="docutils literal"&gt;globalRand&lt;/tt&gt; ，我们来看一下 &lt;tt class="docutils literal"&gt;globalRand&lt;/tt&gt;
的 &lt;a class="reference external" href="https://github.com/golang/go/blob/release-branch.go1.12/src/math/rand/rand.go#L288"&gt;定义&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;globalRand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;lockedSource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NewSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).(&lt;/span&gt;&lt;span class="nx"&gt;Source64&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;a class="reference external" href="https://github.com/golang/go/blob/cdb776529ea7a4beac4c8a4d6a9ce149045bd6b5/src/math/rand/rand.go#L67"&gt;New&lt;/a&gt; 的源码以及 &lt;a class="reference external" href="https://github.com/golang/go/blob/cdb776529ea7a4beac4c8a4d6a9ce149045bd6b5/src/math/rand/rand.go#L109"&gt;globalRand.Int63n&lt;/a&gt; 的源码可以看到关键点是 &lt;tt class="docutils literal"&gt;lockedSource.Int63&lt;/tt&gt; 方法的定义:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;lockedSource&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nx"&gt;lk&lt;/span&gt;  &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mutex&lt;/span&gt;
&lt;/span&gt;     &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="nx"&gt;Source64&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;lockedSource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Int63&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;     &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int63&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过同样的方法查看其他默认的随机函数可以发现，所有的默认随机函数都共享了一个全局锁，调用这些默认随机函数的时候都会先进行一次获取锁的操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;解决方法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;大部分情况下不需要管这个全局锁的问题，因为大部分情况下都不会介意这点性能消耗。
如果确实特别在意这点性能消耗的话，可以通过定义一个你的包共享的或者结构体实例共享的 Rand 实例来优化锁的性能消耗（最小化锁的粒度，不跟其他包/代码竞争这个锁）。&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Xyz&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Rand 实例不是并发安全的，需要自行解决并发安全问题&lt;/span&gt;
    &lt;span class="nx"&gt;rndMu&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mutex&lt;/span&gt;
    &lt;span class="nx"&gt;rnd&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rand&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Xyz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rndMu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rnd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Int31&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rndMu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Xyz&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;rnd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;UnixNano&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者可以考虑使用性能更好的第三方 rand 包： &lt;a class="reference external" href="https://github.com/valyala/fastrand"&gt;valyala/fastrand&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.sgmansfield.com/2016/01/the-hidden-dangers-of-default-rand/"&gt;The Hidden Dangers of Default Rand · Scott Mansfield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/golang/go/blob/release-branch.go1.12/src/math/rand/rand.go"&gt;go/rand.go at release-branch.go1.12 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://godoc.org/math/rand"&gt;rand - GoDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/valyala/fastrand"&gt;valyala/fastrand: Fast and scalable pseudorandom generator for Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-05-12:2019/05/go-be-careful-of-math-rand-functions.html</guid><category>rand</category></item><item><title>net.ipv4.ip_local_port_range 的值究竟影响了啥</title><link>https://mozillazg.com/2019/05/linux-what-net.ipv4.ip_local_port_range-effect-or-mean.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;网上关于 &lt;tt class="docutils literal"&gt;net.ipv4.ip_local_port_range&lt;/tt&gt; 的值的效果众说纷纭（下面所说的连接都假定使用的是相同的协议(都是 TCP 或 UDP)）:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;大部分文章都说这个值决定了客户端的一个 ip 可用的端口数量，即一个 ip 最多只能创建 60K 多一点的连接（1025-65535），如果要突破这个限制需要客户端机器绑定多个 ip。&lt;/li&gt;
&lt;li&gt;还有部分文章说的是这个值决定的是 socket 四元组中的本地端口数量，即一个 ip 对同一个目标 ip+port 最多可以创建 60K 多一点连接，只要目标 ip 或端口不一样就可以使用相同的本地端口，不一定需要多个客户端 ip 就可以突破端口数量限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;文档&lt;/a&gt; 中的介绍也很模糊:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ip_local_port_range - 2 INTEGERS
    Defines the local port range that is used by TCP and UDP to
    choose the local port. The first number is the first, the
    second the last local port number.
    If possible, it is better these numbers have different parity.
    (one even and one odd values)
    The default values are 32768 and 60999 respectively.
&lt;/pre&gt;
&lt;p&gt;下面就来做一些实验来确认这个选项的实际效果。&lt;/p&gt;
&lt;p&gt;实验环境:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ uname -a
Linux vagrant 4.15.0-29-generic #31-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="ip"&gt;
&lt;h2 id="hidip"&gt;相同目标 ip 和相同目标端口下的端口数量限制&lt;a class="headerlink" href="#hidip" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先设置 ip_local_port_range 的值为非常小的范围:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ echo &amp;quot;61000 61001&amp;quot; | sudo tee /proc/sys/net/ipv4/ip_local_port_range
61000 61001

$ cat /proc/sys/net/ipv4/ip_local_port_range
61000       61001
&lt;/pre&gt;
&lt;p&gt;然后对相同 ip 和端口发送 tcp 请求。创建两个连接，达到最大端口数量限制:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 123.125.114.144 80 -v &amp;amp;
[1] 16196
$ nohup: ignoring input and appending output to 'nohup.out'

$ nohup nc 123.125.114.144 80 -v &amp;amp;
[2] 16197
$ nohup: ignoring input and appending output to 'nohup.out'

$ ss -ant |grep 10.0.2.15:61
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:80
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:80
&lt;/pre&gt;
&lt;p&gt;然后再创建第三个连接，此时预期应该会失败，因为超出的端口数量现在:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vagrant&amp;#64;vagrant:~$ nc 123.125.114.144 80 -v
nc: connect to 123.125.114.144 port 80 (tcp) failed: Cannot assign requested address
&lt;/pre&gt;
&lt;p&gt;可以看到确实如预期的失败了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;相同目标 ip 不同目标端口&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面看看相同目标 ip 不同目标端口是否可以突破这个端口限制:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 123.125.114.144 443 -v &amp;amp;
[3] 16215
$ nohup: ignoring input and appending output to 'nohup.out'

$ nohup nc 123.125.114.144 443 -v &amp;amp;
[4] 16216
$ nohup: ignoring input and appending output to 'nohup.out'

$ ss -ant |grep 10.0.2.15:61
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:80
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:80
&lt;/pre&gt;
&lt;p&gt;可以看到相同目标 ip 不同目标端口下，每个目标端口都有一个独立的端口限制，即，相同源 ip 的源端口是可以相同的。&lt;/p&gt;
&lt;p&gt;按照推测这两个目标端口应该只能创建四个连接，下面试试看:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ss -ant |grep 10.0.2.15:61
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:80
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:80

$ nc 123.125.114.144 443 -v
nc: connect to 123.125.114.144 port 443 (tcp) failed: Cannot assign requested address
&lt;/pre&gt;
&lt;p&gt;确实是不能再创建连接了，因为每个目标端口都达到了 ip_local_port_range 的限制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;多个目标 ip 相同目标端口&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面看一下多个目标 ip 相同目标端口下的情况:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 220.181.57.216 80 -v &amp;amp;
[5] 16222
$ nohup: ignoring input and appending output to 'nohup.out'

$ nohup nc 220.181.57.216 80 -v &amp;amp;
[6] 16223
$ nohup: ignoring input and appending output to 'nohup.out'

$ nc 220.181.57.216 80 -v
nc: connect to 220.181.57.216 port 80 (tcp) failed: Cannot assign requested address

$ ss -ant |grep :80
SYN-SENT  0        1               10.0.2.15:61001       220.181.57.216:80
SYN-SENT  0        1               10.0.2.15:61000       220.181.57.216:80
SYN-SENT  0        1               10.0.2.15:61001      123.125.114.144:80
SYN-SENT  0        1               10.0.2.15:61000      123.125.114.144:80
&lt;/pre&gt;
&lt;p&gt;可以看到，每个目标 ip 都有独立的 ip_local_port_range 限制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;多个目标 ip 不同目标端口&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面看一下多个目标 ip 相同不同端口下的情况，按照前面的经验两个 ip 加两个端口应该只能创建 8 个连接&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 123.125.114.144 80 -v &amp;amp;

$ nohup nc 123.125.114.144 80 -v &amp;amp;

$ nc 123.125.114.144 80 -v
nc: connect to 123.125.114.144 port 80 (tcp) failed: Cannot assign requested address

$ nohup nc 123.125.114.144 443 -v &amp;amp;

$ nohup nc 123.125.114.144 443 -v &amp;amp;

$ nc 123.125.114.144 443 -v
nc: connect to 123.125.114.144 port 443 (tcp) failed: Cannot assign requested address

$ nohup nc 220.181.57.216 80 -v &amp;amp;

$ nohup nc 220.181.57.216 80 -v &amp;amp;

$ nc 220.181.57.216 80 -v
nc: connect to 220.181.57.216 port 80 (tcp) failed: Cannot assign requested address

$ nohup nc 220.181.57.216 443 -v &amp;amp;

$ nohup nc 220.181.57.216 443 -v &amp;amp;

$ nc 220.181.57.216 443 -v
nc: connect to 220.181.57.216 port 443 (tcp) failed: Cannot assign requested address

$ ss -ant |grep 10.0.2.15:61
SYN-SENT  0        1               10.0.2.15:61001       220.181.57.216:80
ESTAB     0        0               10.0.2.15:61001      123.125.114.144:443
ESTAB     0        0               10.0.2.15:61000       220.181.57.216:443
SYN-SENT  0        1               10.0.2.15:61000       220.181.57.216:80
SYN-SENT  0        1               10.0.2.15:61001      123.125.114.144:80
ESTAB     0        0               10.0.2.15:61000      123.125.114.144:443
SYN-SENT  0        1               10.0.2.15:61000      123.125.114.144:80
ESTAB     0        0               10.0.2.15:61001       220.181.57.216:443
&lt;/pre&gt;
&lt;p&gt;可以看到确实如预期的只能创建8个连接。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;总结&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;那么是否就可以说前言中的第一种说法就是错的呢，查了一下资料其实也不能说第一种说法是错误的：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;当系统的内核版本小于 3.2 时，第一种说法是正确的&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://marc.info/?l=haproxy&amp;amp;m=139315478227467&amp;amp;w=2"&gt;当系统的内核版本大于等于 3.2 时，第二种说法是正确的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;kernel.org/doc/Documentation/networking/ip-sysctl.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;pawilon/tuning-your-linux-kernel-and-haproxy-instance-for-high-loads-1a2105ea553e"&gt;Tuning your Linux kernel and HAProxy instance for high loads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.freecodecamp.org/load-testing-haproxy-part-2-4c8677780df6"&gt;Load Testing HAProxy (Part 2) – freeCodeCamp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/2332741/what-is-the-theoretical-maximum-number-of-open-tcp-connections-that-a-modern-lin"&gt;What is the theoretical maximum number of open TCP connections that a modern Linux box can have - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux#connection-table-slot"&gt;Coping with the TCP TIME-WAIT state on busy Linux servers | Vincent Bernat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://marc.info/?l=haproxy&amp;amp;m=139315478227467&amp;amp;w=2"&gt;'Re: Fix for rare EADDRNOTAVAIL error' - MARC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-05-04:2019/05/linux-what-net.ipv4.ip_local_port_range-effect-or-mean.html</guid><category>sysctl</category></item><item><title>Go: traceback 中包含的信息</title><link>https://mozillazg.com/2019/05/go-read-and-understand-info-from-stack-trace-traceback.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;约定&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;示例使用的 Go 版本： &lt;tt class="docutils literal"&gt;go version go1.12.3 darwin/amd64&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;因为默认 &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; 命令会在编译时进行一些优化导致举简单的示例程序的输出不符合举例的要求，所以除特殊说明外，所有示例程序都使用 &lt;tt class="docutils literal"&gt;go build &lt;span class="pre"&gt;-gcflags=all=&amp;quot;-N&lt;/span&gt; &lt;span class="pre"&gt;-l&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;name&amp;gt;.go&lt;/span&gt;&lt;/tt&gt; 的方式进行编译。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;基本结构&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./hello
 hello
 panic: error

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/hello.go:7 +0x9f
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从这个最基础的 stack trace 信息中可以看到是 &lt;tt class="docutils literal"&gt;/Users/xxx/hello.go&lt;/tt&gt; 这个文件的第 7 行出错了，并且这个错误发生在 main package 的 main 这个函数中。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;方法&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面是在函数中 panic 了，下面看一下方法中 panic 的 strace 信息。&lt;/p&gt;
&lt;p&gt;非指针实例的方法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;
     &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./method
 panic: error

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.User.Name&lt;span class="o"&gt;(&lt;/span&gt;0x0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/method.go:11 +0x42
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/method.go:7 +0x22
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的 &lt;tt class="docutils literal"&gt;main.User.Name(0x0)&lt;/tt&gt; 中的 &lt;tt class="docutils literal"&gt;0x0&lt;/tt&gt; 表示的是方法的返回值，这里是 &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;指针实例的方法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;
 &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;
     &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;运行结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./method
 panic: error

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.&lt;span class="o"&gt;(&lt;/span&gt;*User&lt;span class="o"&gt;)&lt;/span&gt;.Name&lt;span class="o"&gt;(&lt;/span&gt;0xc000044788, 0x0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/method.go:11 +0x42
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/method.go:7 +0x2b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上方的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;main.(*User).Name(0xc000044788,&lt;/span&gt; 0x0)&lt;/tt&gt; 中&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;0xc000044788&lt;/tt&gt; 表示的是 &lt;tt class="docutils literal"&gt;u&lt;/tt&gt; 的指针地址( &lt;tt class="docutils literal"&gt;&amp;amp;u&lt;/tt&gt; )。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;0x0&lt;/tt&gt; 表示的是方法的返回值，这里是 &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参数&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面举例说明一下函数或方法的参数在 trace 中是如何展示的。&lt;/p&gt;
&lt;div class="section" id="int-float-bool-array"&gt;
&lt;h3 id="hidint-float-bool-array"&gt;int/float/bool/array&lt;a class="headerlink" href="#hidint-float-bool-array" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;int/float/bool/array 这些基本数据类型就是按本来的只显示的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./base
 panic: &lt;span class="nb"&gt;test&lt;/span&gt;

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0xc000044701, 0x2, 0x400ccccd, 0x1, 0x2, 0x3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/base.go:8 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/base.go:4 +0x55
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果解析:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
main.test(
    0xc000044701,   // 一个常量，表示 true, false 是 0xc000044700 （至少在我的机器上是两个值）
    0x2,            // 2
    0x400ccccd,     // 2.2 的 16 进制表示
    0x1, 0x2, 0x3   // [3]int{1, 2, 3}
    )
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="string"&gt;
&lt;h3 id="hidstring"&gt;string&lt;a class="headerlink" href="#hidstring" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./string
 panic: string

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0x1074265, 0x4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/mg/tmp/test_go/strace/string.go:8 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/mg/tmp/test_go/strace/string.go:4 +0x36
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为啥这里 &lt;tt class="docutils literal"&gt;main.test(0x1074265, 0x4)&lt;/tt&gt; 显示的是两个参数呢，因为字符串是用两个参数来表示的: 第一个参数是指向字符串底层数组的指针地址(&lt;tt class="docutils literal"&gt;0x1074265&lt;/tt&gt;)，第二个参数是字符串的长度(&lt;tt class="docutils literal"&gt;0x4&lt;/tt&gt; 表示长度为 4 )。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slice"&gt;
&lt;h3 id="hidslice"&gt;slice&lt;a class="headerlink" href="#hidslice" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;slice 的数据用三个参数来表示：第一个是指向底层数组的指针，第二个是长度，第三个是容量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0xc000044758, 0x3, 0x3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/slice.go:8 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/slice.go:4 +0x8c
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="map"&gt;
&lt;h3 id="hidmap"&gt;map&lt;a class="headerlink" href="#hidmap" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;map 的话就是一个指针地址表示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0xc000044648&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/map.go:10 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/map.go:4 +0x139
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="struct"&gt;
&lt;h3 id="hidstruct"&gt;struct&lt;a class="headerlink" href="#hidstruct" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;会显示 struct 中所有字段的值:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
     &lt;span class="nx"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./struct
 panic: &lt;span class="nb"&gt;test&lt;/span&gt;

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0x1074474, 0x3, 0xe9&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/struct.go:17 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/struct.go:8 +0x67
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解析:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
main.test(
    0x1074474, 0x3,  // name 字段的值 &amp;quot;Tom&amp;quot;，0x1074474: 底层数组，0x3: 字符串长度
    0xe9             // age 字段的值 233 的 16 进制表示
)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="point"&gt;
&lt;h3 id="hidpoint"&gt;point&lt;a class="headerlink" href="#hidpoint" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;指针类型的话就显示一个指针地址:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./point
 panic: &lt;span class="nb"&gt;test&lt;/span&gt;

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0xc000044770&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/point.go:17 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/point.go:8 +0x5a
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="interface"&gt;
&lt;h3 id="hidinterface"&gt;interface&lt;a class="headerlink" href="#hidinterface" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;interface 由两个参数表示，第一个是指向 interface 中存储类型信息的指针，第二个是指向真实数据的指针:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;namer&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="nx"&gt;namer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
     &lt;span class="nx"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="nx"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./interface
 panic: &lt;span class="nb"&gt;test&lt;/span&gt;

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0x107c5c0, 0xc000044770&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/interface.go:25 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/interface.go:12 +0x8c

 // 0x107c5c0 包含类型信息的指针地址
 // 0xc000044770 实际数据的指针地址
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;多个参数用一个值表示&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;当多个连续的参数可以用一个值表示的时候，trace 中就会用一个值来表示多个参数的值，比如&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./pack
 panic: &lt;span class="nb"&gt;test&lt;/span&gt;

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0x3c1e14030201&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/mg/tmp/test_go/strace/pack.go:8 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/mg/tmp/test_go/strace/pack.go:4 +0x30
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;0x3c1e14030201&lt;/tt&gt; 是由下面6个值组成的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Bits     Binary     Hex     Value
00-07    0000 0001  01      1
08-15    0000 0002  02      2
16-23    0000 0003  03      3
24-31    0001 0100  14      20
32-39    0001 1110  1e      30
40-47    0011 1100  3c      60
&lt;/pre&gt;
&lt;p&gt;P.S. 等将来找到对应的源码后再补充更详细的合并规则 :joy&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="traceback"&gt;
&lt;h3 id="hidtraceback"&gt;traceback 中显示的值个数&lt;a class="headerlink" href="#hidtraceback" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最多只能显示 &lt;a class="reference external" href="https://github.com/golang/go/blob/59ea685ce96a696281e56badd80d2e5dd618b0b0/src/runtime/traceback.go#L435-L437"&gt;10 个值&lt;/a&gt; ，超过 10 个时会用 &lt;tt class="docutils literal"&gt;...&lt;/tt&gt; 代替:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;     &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ ./max
 panic: &lt;span class="nb"&gt;test&lt;/span&gt;

 goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;running&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;span class="hll"&gt; main.test&lt;span class="o"&gt;(&lt;/span&gt;0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, ...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     /Users/xxx/max.go:8 +0x39
&lt;/span&gt; main.main&lt;span class="o"&gt;()&lt;/span&gt;
     /Users/xxx/max.go:4 +0x4c
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://research.swtch.com/godata"&gt;research!rsc: Go Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://research.swtch.com/interfaces"&gt;research!rsc: Go Data Structures: Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.joeshaw.org/understanding-go-panic-output/"&gt;Understanding Go panic output – joe shaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ardanlabs.com/blog/2015/01/stack-traces-in-go.html"&gt;Stack Traces In Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-05-02:2019/05/go-read-and-understand-info-from-stack-trace-traceback.html</guid><category>debug</category></item><item><title>负载均衡策略之有限负载一致性哈希</title><link>https://mozillazg.com/2019/04/load-balancing-strategy-algorithm-Consistent-Hashing-with-Bounded-Loads.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍一下有限负载一致性哈希（Consistent Hashing with Bounded Loads）（或者叫有界负载一致性哈希、有负载界限/上限的一致性哈希）这个负载均衡策略。&lt;/p&gt;
&lt;p&gt;之前介绍的 &lt;a class="reference external" href="https://mozillazg.com/2019/03/load-balancing-strategy-algorithm-Consistent-hashing.html"&gt;一致性哈希策略&lt;/a&gt; 有一个缺陷，那就是没有解决热点问题：当有部分资源是热点资源或者部分用户请求量比较大的时候，会出现部分节点需要处理大量请求（这些请求根据一致性哈希策略都选中了固定的部分节点），出现负载非常不均的情况，因为是一致性哈希所以这些请求没法分摊到其他节点上，导致出现持续的负载不均和热点问题。下面要介绍的 Consistent Hashing with Bounded Loads 就是一种解决这个问题的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consistent-hashing-with-bounded-loads"&gt;
&lt;h2 id="hidconsistent-hashing-with-bounded-loads"&gt;有限负载一致性哈希（Consistent Hashing with Bounded Loads）&lt;a class="headerlink" href="#hidconsistent-hashing-with-bounded-loads" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有限负载一致性哈希（Consistent Hashing with Bounded Loads） 出自论文 &lt;a class="reference external" href="https://arxiv.org/abs/1608.01350"&gt;Consistent Hashing with Bounded Loads&lt;/a&gt; ，主要思路是，根据当前负载情况对所有节点限制一个最大负载，在一致性哈希中对 hash 环进行查找时将跳过达到最大负载限制的节点，通过把过载的请求转移到其他节点上来解决热点和不均衡问题：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;R&lt;/tt&gt;: 当前所有节点的总负载（正在处理的总请求数）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;T&lt;/tt&gt;: 节点总个数&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L&lt;/tt&gt;: 当前所有节点的平均负载&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L = R/T&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ε&lt;/tt&gt;: 一个参数用于表示在平均负载的基础上能够承受的额外负载上限，可以按照实际需求进行设置（根据 vimeo 分享的 &lt;a class="reference external" href="https://medium.com/vimeo-engineering-blog/improving-load-balancing-with-a-new-consistent-hashing-algorithm-9f1bd75709ed"&gt;经验&lt;/a&gt; 这个值推荐设置为 0.25~1）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M&lt;/tt&gt;: 节点的最大负载上限&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M = &lt;span class="pre"&gt;L*(1+ε)&lt;/span&gt; = &lt;span class="pre"&gt;R*(1+ε)/T&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;一致性哈希中进行节点查找时，增加检查匹配的节点的负载（正在处理的请求数）是否达到负载上限 &lt;tt class="docutils literal"&gt;M&lt;/tt&gt; 的操作，如果达到了上限则跳过当前节点继续往后查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上面可以发现 Consistent Hashing with Bounded Loads 结合了 &lt;a class="reference external" href="https://mozillazg.com/2019/02/load-balancing-strategy-algorithm-weighted-least-connection.html"&gt;最少连接策略&lt;/a&gt; 和一致性哈希 策略各自的优点，即平衡了负载又兼顾了一致性哈希，并且还可以通过调整转化为最少请求策略或一致性哈希策略：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;当 &lt;tt class="docutils literal"&gt;ε&lt;/tt&gt; 的值是 0 的时候，就实现了最少连接策略的效果&lt;/li&gt;
&lt;li&gt;当 &lt;tt class="docutils literal"&gt;ε&lt;/tt&gt; 的值是无穷大的时候，就是传统的一致性哈希策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;权重问题&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的方法是没有区分节点权重的，如果要支持节点权重的话，需要做一点改动:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;R&lt;/tt&gt;: 当前所有节点的总负载（正在处理的总请求数）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;T&lt;/tt&gt;: 所有节点的权重总和&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L&lt;/tt&gt;: 当前所有节点的平均负载（基于权重的平均负载）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;L = R/T&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;W&lt;/tt&gt;: 当前节点的权重值&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ε&lt;/tt&gt;: 一个参数用于表示在平均负载的基础上能够承受的额外负载上限。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M&lt;/tt&gt;: 节点的最大负载上限&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;M = &lt;span class="pre"&gt;W*L*(1+ε)&lt;/span&gt; = &lt;span class="pre"&gt;W*R*(1+ε)/T&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;一致性哈希中进行节点查找时，增加检查匹配的节点的负载（正在处理的请求数）是否达到负载上限 &lt;tt class="docutils literal"&gt;M&lt;/tt&gt; 的操作，如果达到了上限则跳过当前节点继续往后查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到主要区别是算平均负载的时候是基于节点的权重和来计算的，算负载上限的时候是按权重比来计算的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;总结&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单介绍了一下 Consistent Hashing with Bounded Loads ，更详细的内容请参考参考资料。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;参考资料&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ai.googleblog.com/2017/04/consistent-hashing-with-bounded-loads.html"&gt;Google AI Blog: Consistent Hashing with Bounded Loads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://arxiv.org/abs/1608.01350"&gt;[1608.01350] Consistent Hashing with Bounded Loads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/vimeo-engineering-blog/improving-load-balancing-with-a-new-consistent-hashing-algorithm-9f1bd75709ed"&gt;Improving load balancing with a new consistent-hashing algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/haproxy/haproxy/commit/4f88c636097bf5f7651c790700a8bf3fb82e5f67"&gt;MEDIUM: server: Implement bounded-load hash algorithm · haproxy/haproxy&amp;#64;4f88c63&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/haproxy/haproxy/blob/d0e095c2aa54f020de8fc50db867eff1ef73350e/doc/configuration.txt#L3776"&gt;haproxy/configuration.txt at master · haproxy/haproxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.laisky.com/p/consistent-hashing/#CHBL"&gt;laisky-blog: 一致性哈希&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/02/load-balancing-strategy-algorithm-weighted-least-connection.html"&gt;负载均衡策略之最少连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/03/load-balancing-strategy-algorithm-consistent-hashing#comment-4389770157"&gt;负载均衡策略之一致性哈希&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-04-21:2019/04/load-balancing-strategy-algorithm-Consistent-Hashing-with-Bounded-Loads.html</guid><category>load-balancing</category><category>load-balancer</category></item><item><title>rate limiting 之 leaky bucket</title><link>https://mozillazg.com/2019/04/rate-limiting-intro-leaky-bucket.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单介绍一下 leaky bucket 算法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;版本&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;leaky bucket 有两个版本：一个是 as a meter 、另一个是 as a queue 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="as-a-meter"&gt;
&lt;h2 id="hidas-a-meter"&gt;as a meter&lt;a class="headerlink" href="#hidas-a-meter" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Leaky_bucket_image1" src="/static/images/leaky-bucket/Leaky_bucket_analogy.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;(图片来自 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Leaky_bucket"&gt;https://en.wikipedia.org/wiki/Leaky_bucket&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;在 as a meter 版本中，一般用下面的方法来描述（来自 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Leaky_bucket"&gt;wikipedia&lt;/a&gt; ）：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A fixed capacity bucket, associated with each virtual connection or user, leaks at a fixed rate.
一个固定容量的 bucket ，用来处理每个连接或用户，这个 bucket 以一个固定的速率往下漏东西。&lt;/li&gt;
&lt;li&gt;If the bucket is empty, it stops leaking.
如果 bucket 为空，将不再漏东西。&lt;/li&gt;
&lt;li&gt;For a packet to conform, it has to be possible to add a specific amount of water to the bucket: The specific amount added by a conforming packet can be the same for all packets, or can be proportional to the length of the packet.
当需要确认一个数据包的时候，把它当做一定数量的水加到 bucket 中：这个添加的水量可以跟所有的包一样，也可以按包的实际长度以一定比例来添加。&lt;/li&gt;
&lt;li&gt;If this amount of water would cause the bucket to exceed its capacity then the packet does not conform and the water in the bucket is left unchanged.
如果 bucket 中水的总量达到了 bucket 的容量限制，那么新的包就不被接受并且 bucket 中的水不会有啥变化。&lt;/li&gt;
&lt;li&gt;不被接受的包可以被丢弃( &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Traffic_police"&gt;Traffic policing&lt;/a&gt; )，也可以被排队( &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Traffic_shaping"&gt;Traffic shaping&lt;/a&gt; )，看具体的需求来做。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上面可以发现，as a meter 的 leaky bucket 其实跟前面说过的 &lt;a class="reference external" href="https://mozillazg.com/2019/01/rate-limiting-intro-token-bucket.html"&gt;token bucket&lt;/a&gt; 是类似的，只是实现上不一样而已，实际的效果其实是一样的：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bucket 都有容量限制。&lt;/li&gt;
&lt;li&gt;都允许存在波峰/尖刺，考虑一个极端情况：在 token bucket 中当 bucket 满的时候是可以一次性拿出所有 token 的，此时就是个波峰/尖刺了，在 leaky bucket 中当 bucket 空的时候是可以一次性倒入达到 bucket 容量限制的水的，此时也会有个波峰/尖刺。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="as-a-queue"&gt;
&lt;h2 id="hidas-a-queue"&gt;as a queue&lt;a class="headerlink" href="#hidas-a-queue" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Leaky_bucket_image2" src="/static/images/leaky-bucket/LeakyBucket.png" /&gt;&lt;/p&gt;
&lt;p&gt;(图片来自 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Leaky_bucket"&gt;https://en.wikipedia.org/wiki/Leaky_bucket&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;在 as a queue 版本中，可以把它作为一个先进先出的队列，流量涌入到 bucket 中，但是只能以恒定的速率流出，可以用来平滑流量或消峰：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;流量涌入到 bucket 中，当超出 bucket 容量限制时，排队或者被丢弃&lt;/li&gt;
&lt;li&gt;bucket 中的流量被以一个恒定的速率流出（当然，如果 bucket 中的数据太少的话流出就会断断续续，主要是不会超过指定的速率）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上面的介绍，可以看出来其实 as a queue 的 leaky bucket 可以看做是 as a meter 的 leaky bucket 的一个特例：
只要 as a meter 的 leaky bucket 的 bucket 容量被设置为在一个 ticket 周期内将流出的水量就可以达到类似 as a queue 的平滑流量/消峰的效果了。比如 rate 是 10kb/s ，ticket 是 1s，那么把 as a meter 的 bucket 容量限制为 10kb 即可达到类似效果。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;总结&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单介绍了一下 leaky bucket 算法，基本都是 wikipedia 上的知识，
建议直接查看参考资料中的 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Leaky_bucket"&gt;wikipedia&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Leaky_bucket"&gt;Leaky bucket - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Token_bucket"&gt;Token bucket - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-04-14:2019/04/rate-limiting-intro-leaky-bucket.html</guid><category>rate-limiting</category><category>leaky-bucket</category></item><item><title>Go: 关于锁（mutex）的一些使用注意事项</title><link>https://mozillazg.com/2019/04/notes-about-go-lock-mutex.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最近踩了一个锁的坑，所以在这里简单记录一些 Go 中关于锁（mutex）使用的一些注意事项。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;尽量减少锁的持有时间&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;尽量减少锁的持有时间，毕竟使用锁是有代价的，通过减少锁的持有时间来减轻这个代价：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;细化锁的粒度。通过细化锁的粒度来减少锁的持有时间以及避免在持有锁操作的时候做各种耗时的操作。&lt;/li&gt;
&lt;li&gt;不要在持有锁的时候做 IO 操作。尽量只通过持有锁来保护 IO 操作需要的资源而不是 IO 操作本身：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// 各种耗时的 IO 操作&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 改为&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="defer"&gt;
&lt;h2 id="hiddefer"&gt;善用 defer 来确保在函数内正确释放了锁&lt;a class="headerlink" href="#hiddefer" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;尤其是在那些内部有好几个通过 &lt;tt class="docutils literal"&gt;if err != nil&lt;/tt&gt; 判断来提前返回的函数中，通过 &lt;tt class="docutils literal"&gt;defer&lt;/tt&gt; 可以确保不会遗漏释放锁操作，避免出现死锁问题，以及避免函数内非预期的 panic 导致死锁的问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过使用 defer 的时候也要注意别因为习惯性的 &lt;tt class="docutils literal"&gt;defer m.Unlock()&lt;/tt&gt; 导致无意中在持有锁的时候做了 IO 操作，出现了非预期的持有锁时间太长的问题。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 非预期的在持有锁期间做 IO 操作&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// 各种耗时的 IO 操作&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以及 &lt;tt class="docutils literal"&gt;defer&lt;/tt&gt; 其实是有点 &lt;a class="reference external" href="https://medium.com/i0exception/runtime-overhead-of-using-defer-in-go-7140d5c40e32"&gt;性能&lt;/a&gt; &lt;a class="reference external" href="https://github.com/golang/go/issues/14939"&gt;消耗&lt;/a&gt; 的，需要取舍下酌情使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rwmutex"&gt;
&lt;h2 id="hidrwmutex"&gt;在适当时候使用 RWMutex&lt;a class="headerlink" href="#hidrwmutex" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当确定操作不会修改保护的资源时，可以使用 RWMutex 来减少锁等待时间（不同的 goroutine 可以同时持有 RLock, 但是 Lock 限制了只能有一个 goroutine 持有 Lock）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;nickName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RUnlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;SetName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="copy"&gt;
&lt;h2 id="hidcopy"&gt;copy 结构体操作可能导致非预期的死锁&lt;a class="headerlink" href="#hidcopy" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;copy 结构体时，如果结构体中有锁的话，记得重新初始化一个锁对象，否则会出现非预期的死锁：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

 &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
     &lt;span class="s"&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;
 &lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mutex&lt;/span&gt;

     &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;u1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;u1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;u1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="hll"&gt;     &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;u1&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     &lt;span class="nx"&gt;u2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;     &lt;span class="c1"&gt;// u2.Mutex = sync.Mutex{} // 没有这一行就会死锁&lt;/span&gt;
&lt;/span&gt;
     &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%#p\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%#p\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="nx"&gt;u2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;u2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go run main.go
c00000a080
c00000a0a0
fatal error: all goroutines are asleep - deadlock!

goroutine &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;semacquire&lt;span class="o"&gt;]&lt;/span&gt;:
sync.runtime_SemacquireMutex&lt;span class="o"&gt;(&lt;/span&gt;0xc00000a0a4, 0x0&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/runtime/sema.go:71 +0x3d
sync.&lt;span class="o"&gt;(&lt;/span&gt;*Mutex&lt;span class="o"&gt;)&lt;/span&gt;.Lock&lt;span class="o"&gt;(&lt;/span&gt;0xc00000a0a0&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/sync/mutex.go:134 +0xff
main.main&lt;span class="o"&gt;()&lt;/span&gt;
    /Users/xxx/tmp/golang/main.go:26 +0x17f
&lt;span class="nb"&gt;exit&lt;/span&gt; status 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文档中也有类似的警告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Mutex must not be copied after first use&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://godoc.org/sync#Mutex"&gt;https://godoc.org/sync#Mutex&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="go-vet"&gt;
&lt;h2 id="hidgo-vet"&gt;使用 go vet 工具检查代码中锁的使用问题&lt;a class="headerlink" href="#hidgo-vet" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以通过 &lt;a class="reference external" href="https://golang.org/cmd/vet/"&gt;vet&lt;/a&gt; 这个命令行来检查上面的锁 copy 的问题。比如上面的例子的检查结果如下：:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ go vet main.go
# command-line-arguments
./main.go:19:9: assignment copies lock value to tmp: command-line-arguments.User
&lt;/pre&gt;
&lt;p&gt;可以看到 vet 提示 19 行那里的 copy 操作中 copy 了一个锁。&lt;/p&gt;
&lt;p&gt;BTW，使用 go vet 命令对整个项目进行检查时，可以通过 &lt;tt class="docutils literal"&gt;go vet $(go list &lt;span class="pre"&gt;./...&lt;/span&gt; | grep &lt;span class="pre"&gt;-v&lt;/span&gt; /vendor/)&lt;/tt&gt; 这个命令忽略掉 vendor 下的包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-test-race"&gt;
&lt;h2 id="hidbuild-test-race"&gt;build/test 时使用 -race 参数以便运行时检测数据竞争问题&lt;a class="headerlink" href="#hidbuild-test-race" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以在执行 go build 或 go test 时增加一个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-race&lt;/span&gt;&lt;/tt&gt; 参数来开启数据竞争检测功能，通过这种方式来实现在本地开发环境/CI/测试环境阶段发现程序中可能存在的数据竞争问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mutex&lt;/span&gt;

    &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-race&lt;/span&gt;&lt;/tt&gt; 参数可以开启数据竞争检测（详见： &lt;a class="reference external" href="https://golang.org/doc/articles/race_detector.html"&gt;Data Race Detector - The Go Programming Language&lt;/a&gt; ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build -race -o main .
$
$ ./main
&lt;span class="o"&gt;==================&lt;/span&gt;
WARNING: DATA RACE
Read at 0x00c0000a0048 by main goroutine:
  main.&lt;span class="o"&gt;(&lt;/span&gt;*Todo&lt;span class="o"&gt;)&lt;/span&gt;.do&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:15 +0x42
  main.main&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:34 +0x154

Previous write at 0x00c0000a0048 by goroutine 6:
  main.&lt;span class="o"&gt;(&lt;/span&gt;*Todo&lt;span class="o"&gt;)&lt;/span&gt;.Add&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:24 +0x11d

Goroutine &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;finished&lt;span class="o"&gt;)&lt;/span&gt; created at:
  main.main&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:31 +0x127
&lt;span class="o"&gt;==================&lt;/span&gt;
&lt;span class="nv"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;==================&lt;/span&gt;
WARNING: DATA RACE
Read at 0x00c0000b0010 by main goroutine:
  main.&lt;span class="o"&gt;(&lt;/span&gt;*Todo&lt;span class="o"&gt;)&lt;/span&gt;.do&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:15 +0x85
  main.main&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:34 +0x154

Previous write at 0x00c0000b0010 by goroutine 7:
  main.&lt;span class="o"&gt;(&lt;/span&gt;*Todo&lt;span class="o"&gt;)&lt;/span&gt;.Add&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:24 +0xe3

Goroutine &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;finished&lt;span class="o"&gt;)&lt;/span&gt; created at:
  main.main&lt;span class="o"&gt;()&lt;/span&gt;
      /Users/xxx/tmp/golang/race/main.go:31 +0x127
&lt;span class="o"&gt;==================&lt;/span&gt;
1
0
1
Found &lt;span class="m"&gt;2&lt;/span&gt; data race&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="go-deadlock"&gt;
&lt;h2 id="hidgo-deadlock"&gt;使用 go-deadlock 检测死锁或锁等待问题&lt;a class="headerlink" href="#hidgo-deadlock" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面说的在持有锁的时候做 IO 操作或其他非预期的耗时超时的问题，一方面需要在写程序的时候注意一下，另一方面也有可能是无意中代入进去的（比如上面提到的习惯性 defer 导致的）。对于那些无意中代入进去的锁等待的问题人为的去 review 的话通常很难发现，此时就需要用工具来检测了。恰好有一个叫 &lt;a class="reference external" href="https://github.com/sasha-s/go-deadlock"&gt;go-deadlock&lt;/a&gt; 的工具可以实现这个功能。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;

    &lt;span class="nx"&gt;sync&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;github.com/sasha-s/go-deadlock&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mu&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mutex&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://baidu.com:90&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;mu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 非预期的在持有锁期间做 IO 操作，导致锁等待时间变长&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 检测超过 100 ms 的锁等待&lt;/span&gt;
    &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeadlockTimeout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Millisecond&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wg&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WaitGroup&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go run main.go
POTENTIAL DEADLOCK:
Previous place where the lock was grabbed
goroutine &lt;span class="m"&gt;36&lt;/span&gt; lock 0x1483b90
main.go:14 main.do &lt;span class="o"&gt;{&lt;/span&gt; mu.Lock&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;span class="s"&gt;main.go:30 main&lt;/span&gt;.main.func1 &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

Have been trying to lock it again &lt;span class="k"&gt;for&lt;/span&gt; more than 100ms
goroutine &lt;span class="m"&gt;35&lt;/span&gt; lock 0x1483b90
main.go:14 main.do &lt;span class="o"&gt;{&lt;/span&gt; mu.Lock&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;span class="s"&gt;main.go:30 main&lt;/span&gt;.main.func1 &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

Here is what goroutine &lt;span class="m"&gt;36&lt;/span&gt; doing now
goroutine &lt;span class="m"&gt;36&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;:
net/http.&lt;span class="o"&gt;(&lt;/span&gt;*Transport&lt;span class="o"&gt;)&lt;/span&gt;.getConn&lt;span class="o"&gt;(&lt;/span&gt;0x14616c0, 0xc00015e150, 0x0, 0x128adb3, 0x4, 0xc000014100, 0xc, 0x0, 0x0, 0xc0000559e8&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/transport.go:1004 +0x58e
net/http.&lt;span class="o"&gt;(&lt;/span&gt;*Transport&lt;span class="o"&gt;)&lt;/span&gt;.roundTrip&lt;span class="o"&gt;(&lt;/span&gt;0x14616c0, 0xc000160000, 0x203000, 0xc000055c90, 0x11d823a&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/transport.go:451 +0x690
net/http.&lt;span class="o"&gt;(&lt;/span&gt;*Transport&lt;span class="o"&gt;)&lt;/span&gt;.RoundTrip&lt;span class="o"&gt;(&lt;/span&gt;0x14616c0, 0xc000160000, 0x14616c0, 0x0, 0x0&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/roundtrip.go:17 +0x35
net/http.send&lt;span class="o"&gt;(&lt;/span&gt;0xc000160000, 0x12c78a0, 0x14616c0, 0x0, 0x0, 0x0, 0xc00000e030, 0x1708000, 0xc000055d20, 0x1&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/client.go:250 +0x14b
net/http.&lt;span class="o"&gt;(&lt;/span&gt;*Client&lt;span class="o"&gt;)&lt;/span&gt;.send&lt;span class="o"&gt;(&lt;/span&gt;0x1466200, 0xc000160000, 0x0, 0x0, 0x0, 0xc00000e030, 0x0, 0x1, 0x0&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/client.go:174 +0xfa
net/http.&lt;span class="o"&gt;(&lt;/span&gt;*Client&lt;span class="o"&gt;)&lt;/span&gt;.do&lt;span class="o"&gt;(&lt;/span&gt;0x1466200, 0xc000160000, 0x0, 0x0, 0x0&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/client.go:641 +0x2a8
net/http.&lt;span class="o"&gt;(&lt;/span&gt;*Client&lt;span class="o"&gt;)&lt;/span&gt;.Do&lt;span class="o"&gt;(&lt;/span&gt;0x1466200, 0xc000160000, 0x128adb3, 0x13, 0x0&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/client.go:509 +0x35
net/http.&lt;span class="o"&gt;(&lt;/span&gt;*Client&lt;span class="o"&gt;)&lt;/span&gt;.Get&lt;span class="o"&gt;(&lt;/span&gt;0x1466200, 0x128adb3, 0x13, 0xc0000220c0, 0x12412c0, 0xc000055f80&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/client.go:398 +0x9d
net/http.Get&lt;span class="o"&gt;(&lt;/span&gt;0x128adb3, 0x13, 0x1483b90, 0x0, 0xc000114fb8&lt;span class="o"&gt;)&lt;/span&gt;
    /usr/local/Cellar/go/1.11/libexec/src/net/http/client.go:370 +0x41
main.do&lt;span class="o"&gt;()&lt;/span&gt;
    /Users/xxx/tmp/golang/deadlock/main.go:18 +0x75
main.main.func1&lt;span class="o"&gt;(&lt;/span&gt;0xc00009c3f4&lt;span class="o"&gt;)&lt;/span&gt;
    /Users/xxx/tmp/golang/deadlock/main.go:30 +0x48
created by main.main
    /Users/xxx/tmp/golang/deadlock/main.go:28 +0x83

&lt;span class="nb"&gt;exit&lt;/span&gt; status 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上面的输出可以知道 goroutine 36 持有锁的时间过长导致其他 goroutine 获取锁的等待时间超过了 100 ms ，并且 goroutine 36 在持有锁期间正在做 18 行的 http 操作。可以看到 go-deadlock 在优化锁等待时间方面有很大的帮助，可以帮助我们及时发现异常的锁使用姿势。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trylock"&gt;
&lt;h2 id="hidtrylock"&gt;实现 tryLock 功能&lt;a class="headerlink" href="#hidtrylock" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般 &lt;tt class="docutils literal"&gt;Lock()&lt;/tt&gt; 如果拿不到锁的话，会一直阻塞在那里，在某些场景下这个功能不是我们所期望的结果，我们可能希望程序在一定时间内无法获取到锁的话就做其他操作或者直接返回失败：比如在一个 http server 中，处理请求时因为锁等待时间太长导致客户端大量超时，引发客户端重连以及服务端 goroutine 数量持续增长（虽然客户端超时了，但是处理请求的 goroutine 还在继续处理已超时的请求并且阻塞在了获取锁的地方，然后客户端重连又加重了这个问题，表现就是处理请求的 goroutine 数量直线上升）。这个时候我们就需要有一个类似 tryLock 的功能，在发现短时间内无法获取到锁的时候直接返回失败的响应，防止问题进一步加重（Fail Fast）。&lt;/p&gt;
&lt;p&gt;关于 tryLock 这个功能的介绍可以参考 Java 中 &lt;a class="reference external" href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html#tryLock-long-java.util.concurrent.TimeUnit-"&gt;tryLock&lt;/a&gt; 的介绍，至于 Go 中如何实现 tryLock 可以参考 &lt;a class="reference external" href="https://colobu.com/2017/03/09/implement-TryLock-in-Go/"&gt;为 Go Mutex 实现 TryLock 方法 | 鸟窝&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="channel"&gt;
&lt;h2 id="hidchannel"&gt;改为使用 channel&lt;a class="headerlink" href="#hidchannel" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有些时候可能使用 channel 会更符合需求，对于这些更适合 channel 的场景可以改为使用 channel 而不是 lock （可以参考 &lt;a class="reference external" href="https://blog.golang.org/share-memory-by-communicating"&gt;Share Memory By Communicating - The Go Blog&lt;/a&gt; 这篇文章），合适的场景选择合适的方法即可，既不需要畏惧 channel 也不必畏惧 lock 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;总结&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;目前能想到的就是这些注意事项了，欢迎纠正和补充。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://godoc.org/sync"&gt;sync - GoDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sasha-s/go-deadlock"&gt;sasha-s/go-deadlock: Online deadlock detection in go (golang)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hackernoon.com/dancing-with-go-s-mutexes-92407ae927bf"&gt;Dancing with Go’s Mutexes – Hacker Noon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wavded.com/post/golang-deadlockish/"&gt;Debugging a potential deadlock in Go with go-deadlock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://golang.org/doc/articles/race_detector.html"&gt;Data Race Detector - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.golang.org/share-memory-by-communicating"&gt;Share Memory By Communicating - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html#tryLock-long-java.util.concurrent.TimeUnit-"&gt;Lock (Java Platform SE 8 )&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://colobu.com/2017/03/09/implement-TryLock-in-Go/"&gt;为 Go Mutex 实现 TryLock 方法 | 鸟窝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fail-fast"&gt;Fail-fast - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/i0exception/runtime-overhead-of-using-defer-in-go-7140d5c40e32"&gt;Runtime overhead of using defer in go – i0exception – Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/golang/go/issues/14939"&gt;runtime: defer is slow · Issue #14939 · golang/go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://golang.org/cmd/vet/"&gt;vet - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-04-07:2019/04/notes-about-go-lock-mutex.html</guid><category>lock</category><category>mutex</category></item><item><title>strace 常用操作</title><link>https://mozillazg.com/2019/03/linux-debug-with-strace-cookbook-examples.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/strace.1.html"&gt;strace&lt;/a&gt; 可以用来查看/记录程序运行过程中调用的
&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/syscalls.2.html"&gt;系统调用&lt;/a&gt; 以及接收到的进程信号（signal），
对于我们日常 debug 疑难杂症非常的有帮助，是一个非常好的 debug 工具。本文简单记录一下 strace 的常用功能和操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;输出的含义&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们通过一个简单的命令来查看 strace 程序的典型输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ strace ls /tmp/trace
execve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/ls&amp;quot;&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/tmp/trace&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;/* &lt;span class="m"&gt;41&lt;/span&gt; vars */&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
brk&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;                                  &lt;span class="o"&gt;=&lt;/span&gt; 0x11af000
mmap&lt;span class="o"&gt;(&lt;/span&gt;NULL, 4096, PROT_READ&lt;span class="p"&gt;|&lt;/span&gt;PROT_WRITE, MAP_PRIVATE&lt;span class="p"&gt;|&lt;/span&gt;MAP_ANONYMOUS, -1, 0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x7f0738c16000
access&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ld.so.preload&amp;quot;&lt;/span&gt;, R_OK&lt;span class="o"&gt;)&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; -1 ENOENT &lt;span class="o"&gt;(&lt;/span&gt;No such file or directory&lt;span class="o"&gt;)&lt;/span&gt;
open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ld.so.cache&amp;quot;&lt;/span&gt;, O_RDONLY&lt;span class="o"&gt;)&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; 3
fstat&lt;span class="o"&gt;(&lt;/span&gt;3, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;st_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;S_IFREG&lt;span class="p"&gt;|&lt;/span&gt;0644, &lt;span class="nv"&gt;st_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;35759, ...&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
mmap&lt;span class="o"&gt;(&lt;/span&gt;NULL, 35759, PROT_READ, MAP_PRIVATE, 3, 0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x7f0738c0a000
close&lt;span class="o"&gt;(&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt;                                &lt;span class="o"&gt;=&lt;/span&gt; 0
open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lib64/libselinux.so.1&amp;quot;&lt;/span&gt;, O_RDONLY&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 3
read&lt;span class="o"&gt;(&lt;/span&gt;3, &lt;span class="s2"&gt;&amp;quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&amp;gt;\0\1\0\0\0PX\0\0\0\0\0\0&amp;quot;&lt;/span&gt;..., 832&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 832
fstat&lt;span class="o"&gt;(&lt;/span&gt;3, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;st_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;S_IFREG&lt;span class="p"&gt;|&lt;/span&gt;0755, &lt;span class="nv"&gt;st_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;122040, ...&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
....
fstat&lt;span class="o"&gt;(&lt;/span&gt;1, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;st_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;S_IFCHR&lt;span class="p"&gt;|&lt;/span&gt;0620, &lt;span class="nv"&gt;st_rdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;makedev&lt;span class="o"&gt;(&lt;/span&gt;136, 0&lt;span class="o"&gt;)&lt;/span&gt;, ...&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
mmap&lt;span class="o"&gt;(&lt;/span&gt;NULL, 4096, PROT_READ&lt;span class="p"&gt;|&lt;/span&gt;PROT_WRITE, MAP_PRIVATE&lt;span class="p"&gt;|&lt;/span&gt;MAP_ANONYMOUS, -1, 0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x7fb97a060000
write&lt;span class="o"&gt;(&lt;/span&gt;1, &lt;span class="s2"&gt;&amp;quot;test_dir  test.txt\n&amp;quot;&lt;/span&gt;, 19test_dir  test.txt
&lt;span class="o"&gt;)&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; 19
close&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;                                &lt;span class="o"&gt;=&lt;/span&gt; 0
munmap&lt;span class="o"&gt;(&lt;/span&gt;0x7fb97a060000, 4096&lt;span class="o"&gt;)&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; 0
close&lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;                                &lt;span class="o"&gt;=&lt;/span&gt; 0
exit_group&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;                           &lt;span class="o"&gt;=&lt;/span&gt; ?
+++ exited with &lt;span class="m"&gt;0&lt;/span&gt; +++
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如下面的这个输出:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
execve(&amp;quot;/bin/ls&amp;quot;, [&amp;quot;ls&amp;quot;, &amp;quot;/tmp/trace&amp;quot;], [/* 41 vars */]) = 0
&lt;/pre&gt;
&lt;p&gt;的含义如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;execve&lt;/tt&gt;: 系统调用的名称。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(&amp;quot;/bin/ls&amp;quot;,&lt;/span&gt; [&amp;quot;ls&amp;quot;, &lt;span class="pre"&gt;&amp;quot;/tmp/trace&amp;quot;],&lt;/span&gt; [/* 41 vars &lt;span class="pre"&gt;*/])&lt;/span&gt;&lt;/tt&gt;: 这个括号里是系统调用的参数。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;= 0&lt;/tt&gt; : 这个 0 是系统调用的返回值，不一定是数字看具体的系统调用返回啥结果就是啥值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面有些系统调用的返回值比较特殊，比如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
access(&amp;quot;/etc/ld.so.preload&amp;quot;, R_OK)      = -1 ENOENT (No such file or directory)
&lt;/pre&gt;
&lt;p&gt;后面这个 &lt;tt class="docutils literal"&gt;ENOENT (No such file or directory)&lt;/tt&gt; 中的 &lt;tt class="docutils literal"&gt;ENOENT&lt;/tt&gt; 是错误码，
&lt;tt class="docutils literal"&gt;(No such file or directory)&lt;/tt&gt; 是错误码的解释。&lt;/p&gt;
&lt;p&gt;上面是系统调用相关的输出格式和含义，下面再看一个进程信号(signal)的输出格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ strace -p 15718
Process &lt;span class="m"&gt;15718&lt;/span&gt; attached
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;1, &lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;, NULL, NULL, NULL&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; ? ERESTARTNOHAND &lt;span class="o"&gt;(&lt;/span&gt;To be restarted &lt;span class="k"&gt;if&lt;/span&gt; no handler&lt;span class="o"&gt;)&lt;/span&gt;
--- SIGTERM &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;si_signo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SIGTERM, &lt;span class="nv"&gt;si_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SI_USER, &lt;span class="nv"&gt;si_pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;15757, &lt;span class="nv"&gt;si_uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;500&lt;span class="o"&gt;}&lt;/span&gt; ---
+++ killed by SIGTERM +++
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--- SIGTERM {si_signo=SIGTERM, si_code=SI_USER, si_pid=15757, si_uid=500} ---
&lt;/pre&gt;
&lt;p&gt;这一句就是进程接收到的具体 signal 的信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;常用命令行参数&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;常用的参数组合:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
strace -f -s 1024 -tt -T -yy -p &amp;lt;pid&amp;gt;
strace -f -s 1024 -tt -T -yy -p &amp;lt;pid&amp;gt; -o &amp;lt;filename&amp;gt;
strace -c -p &amp;lt;pid&amp;gt;
strace -f -s 1024 -tt -T -yy -C -p &amp;lt;pid&amp;gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; &amp;lt;pid&amp;gt;&lt;/tt&gt;: 附加到进程中，记录某个进程的系统调用和进程信号信息。多个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; &amp;lt;pid&amp;gt;&lt;/tt&gt; 可以实现同时追踪多个进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt;: 同时追踪子进程的系统调用情况（如果是多线程程序的话，会同时追踪所有线程）。如果不加 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; 参数的话默认只追踪指定的单个进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt; &amp;lt;filename&amp;gt;&lt;/tt&gt;: 把输出结果保存到文件中（默认是输出到标准错误）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-ff&lt;/span&gt;&lt;/tt&gt;: 与 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt; &amp;lt;filename&amp;gt;&lt;/tt&gt; 一起使用，会把每个 pid (进程 pid 或线程 id) 的 strace 数据保存到 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;filename&amp;gt;.&amp;lt;pid&amp;gt;&lt;/span&gt;&lt;/tt&gt; 的文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &amp;lt;expr&amp;gt;&lt;/tt&gt;: 过滤事件，只输出符合规则的事件，可以用来指定只看某些系统调用的情况，比如： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; open,read&lt;/tt&gt; 。
或者不看某些系统调用： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; '!open,read'&lt;/tt&gt; ，更强大的过滤功能可以查看 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/strace.1.html"&gt;strace(1)&lt;/a&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt; &amp;lt;size&amp;gt;&lt;/tt&gt;: 指定字符串数据的大小，默认 32。可以通过 -s 来显示更详细的信息或精简信息（比如很多系统调用的参数的值会被截断，可以通过 -s 配置更大的 size 来查看更详细的参数值）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-tt&lt;/span&gt;&lt;/tt&gt;: 显示系统调用是在哪个时刻调用的，包含微秒（ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/tt&gt; 参数一样的效果就是时间不包含微秒）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e open,read -s 2 -tt ls
14:32:18.877470 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.878249 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.878867 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.879386 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.879871 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.880923 read(3, &amp;quot;no&amp;quot;..., 1024)  = 420
14:32:18.881255 read(3, &amp;quot;&amp;quot;, 1024)       = 0

上面的第一列时间信息即为 -tt 的效果。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-T&lt;/span&gt;&lt;/tt&gt;: 显示执行系统调用所花费的时间，单位是秒&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e read -s 2 -T pwd
read(3, &amp;quot;\177E&amp;quot;..., 832)                = 832 &amp;lt;0.000012&amp;gt;

上面行末的 &amp;lt;0.000012&amp;gt; 即为 -T 的效果。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-y&lt;/span&gt;&lt;/tt&gt;: 输出文件描述符所对应的文件路径&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e read -s 10  cat test.txt
read(3, &amp;quot;\177ELF\2\1\1\3\0\0&amp;quot;..., 832)  = 832
read(3, &amp;quot;hello\n&amp;quot;, 131072)              = 6
hello
read(3, &amp;quot;&amp;quot;, 131072)                     = 0

$ strace -e read -s 10 -y  cat test.txt
read(3&amp;lt;/lib/x86_64-linux-gnu/libc-2.27.so&amp;gt;, &amp;quot;\177ELF\2\1\1\3\0\0&amp;quot;..., 832) = 832
read(3&amp;lt;/path/to/test.txt&amp;gt;, &amp;quot;hello\n&amp;quot;, 131072) = 6
hello
read(3&amp;lt;/path/to/test.txt&amp;gt;, &amp;quot;&amp;quot;, 131072) = 0

可以看到加了 -y 后文件描述符后面会跟它所对应的文件的路径
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-yy&lt;/span&gt;&lt;/tt&gt;: 输出文件描述更详细的信息，比如 socket 文件描述符输出所对应的协议信息。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e connect -s 3  nc baidu.com 80
...
connect(3, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
...

$ strace -e connect -s 3 -y  nc baidu.com 80
...
connect(3&amp;lt;socket:[22180]&amp;gt;, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0

$ strace -e connect -s 3 -yy  nc baidu.com 80
...
connect(3&amp;lt;UDP:[22202]&amp;gt;, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0

可以看到 -yy 会显示上面的 UDP 这个协议信息。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt;: 统计系统调用的次数、种类以及错误信息，会隐藏详细的追踪信息（前面的 -e 过滤参数也可以用于这个）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -c cat test.txt
hello
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 18.45    0.000019           3         7           mmap
 18.45    0.000019           5         4           mprotect
 17.48    0.000018           9         2           munmap
 13.59    0.000014           4         4           openat
  9.71    0.000010          10         1           write
  6.80    0.000007           2         3           read
  5.83    0.000006           2         3         3 access
  3.88    0.000004           1         5           fstat
  2.91    0.000003           1         6           close
  1.94    0.000002           1         3           brk
  0.97    0.000001           1         1           execve
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0         1           fadvise64
------ ----------- ----------- --------- --------- ----------------
100.00    0.000103                    41         3 total
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-C&lt;/span&gt;&lt;/tt&gt;: 跟 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; 类似，只是增加了会输出详细的追踪信息&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e read -C -s 3 cat test.txt
read(3, &amp;quot;\177EL&amp;quot;..., 832)               = 832
read(3, &amp;quot;hel&amp;quot;..., 131072)               = 6
hello
read(3, &amp;quot;&amp;quot;, 131072)                     = 0
+++ exited with 0 +++
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
  0.00    0.000000           0         3           read
------ ----------- ----------- --------- --------- ----------------
100.00    0.000000                     3           total
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;常用过滤表达式&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &amp;lt;expr&amp;gt;&lt;/tt&gt; 这个参数可以用来指定需要 trace 哪些事件，格式如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[qualifier=][!][?]value1[,[?]value2]...

其中 qualifier 的值是 trace, abbrev, verbose, raw,
signal, read, write, fault, inject, or kvm 。默认是 trace

value 就是各种过滤条件了。
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/tt&gt; : &lt;tt class="docutils literal"&gt;&amp;lt;set&amp;gt;&lt;/tt&gt; 是系统调用名称（默认是 &lt;tt class="docutils literal"&gt;trace=all&lt;/tt&gt; ），比如 &lt;tt class="docutils literal"&gt;trace=open,close,read,write&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=/&amp;lt;regex&amp;gt;&lt;/span&gt;&lt;/tt&gt;: 可以通过这种方式来用正则表达式指定系统调用名称，支持的正则语法可以参考 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/regex.7.html"&gt;regex(7)&lt;/a&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%file&lt;/span&gt;&lt;/tt&gt;: 文件相关系统调用。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%desc&lt;/span&gt;&lt;/tt&gt;: 文件描述符相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%process&lt;/span&gt;&lt;/tt&gt;: 进程管理相关系统调用。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%network&lt;/span&gt;&lt;/tt&gt;: 网络相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%signal&lt;/span&gt;&lt;/tt&gt;: 信号相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%ipc&lt;/span&gt;&lt;/tt&gt;: IPC 相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%memory&lt;/span&gt;&lt;/tt&gt;: 内存 mapping 相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;signal=&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&amp;lt;set&amp;gt;&lt;/tt&gt; 是进程信号的名称（默认是 &lt;tt class="docutils literal"&gt;signal=all&lt;/tt&gt; ），比如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; signal=SIGTERM&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;常见系统调用&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/open.2.html"&gt;open()&lt;/a&gt; : 用于打开或创建一个文件。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/read.2.html"&gt;read()&lt;/a&gt; : 用于读取一个文件。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/write.2.html"&gt;write()&lt;/a&gt; : 写文件。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/connect.2.html"&gt;connect()&lt;/a&gt; : 建立网络连接。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/sendto.2.html"&gt;sendto()&lt;/a&gt; : 发送网络数据。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/recvfrom.2.html"&gt;recvfrom()&lt;/a&gt; : 接收网络数据。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/futex.2.html"&gt;futex()&lt;/a&gt; : 锁相关操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多关于某个系统调用的含义/用途可以通过 &lt;tt class="docutils literal"&gt;man 2 &amp;lt;syscall&amp;gt;&lt;/tt&gt; （把 &lt;tt class="docutils literal"&gt;&amp;lt;syscall&amp;gt;&lt;/tt&gt; 替换为实际的系统调用名称，比如 &lt;tt class="docutils literal"&gt;man 2 open&lt;/tt&gt; ）命令行查看或者访问
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://man7.org/linux/man-pages/man2/&amp;lt;syscall&amp;gt;.2.html&lt;/span&gt;&lt;/tt&gt; 这个网址（把 &lt;tt class="docutils literal"&gt;&amp;lt;syscall&amp;gt;&lt;/tt&gt; 替换为实际的系统调用名称, 比如 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/open.2.html"&gt;http://man7.org/linux/man-pages/man2/open.2.html&lt;/a&gt;）亦或是 Google 一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;总结&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;更多关于 strace 的信息可以从参考资料的 strace(1) 中获取，如果对输出中系统调用不了解的话可以参考参考资料中的 syscalls(2) 中的信息，同时也别忘了搜索引擎是你的好朋友，有啥不明白的记得 Google 一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;参考资料&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/strace.1.html"&gt;strace(1) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/syscalls.2.html"&gt;syscalls(2) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/regex.7.html"&gt;regex(7) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-03-30:2019/03/linux-debug-with-strace-cookbook-examples.html</guid><category>strace</category><category>debug</category></item><item><title>安全友好的客户端行为</title><link>https://mozillazg.com/2019/03/safe-client-behaviour-notes-retry-jitter-back-off-more.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文是 &lt;a class="reference external" href="https://www.usenix.org/conference/srecon18asia/presentation/goh"&gt;Safe Client Behaviour | USENIX&lt;/a&gt; 这个视频的简单总结，可以当做是 &lt;a class="reference external" href="https://mozillazg.com/2018/08/call-remote-service-checklist.html"&gt;调用远程服务的一些备忘录&lt;/a&gt; 的延伸/补充内容。强烈建议直接查看 &lt;a class="reference external" href="https://www.usenix.org/conference/srecon18asia/presentation/goh"&gt;Safe Client Behaviour | USENIX&lt;/a&gt; 这个原始视频，本文只是个简单的笔记没啥可看的，原视频才是精华。&lt;/p&gt;
&lt;p&gt;不安全的客户端行为最直观的表现就是会在出现异常情况时 DDoS 服务端，所以安全的客户端行为就是要避免发生 DDoS 服务端的情况。视频里已一个 app 需要每 5 分钟从服务端获取一次信息为例，讲了几个原则，下面简单记录一下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="c1"&gt;// Once every 5 minutes&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jitter-everything"&gt;
&lt;h2 id="hidjitter-everything"&gt;Jitter Everything!&lt;a class="headerlink" href="#hidjitter-everything" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;所谓的 Jitter 指的是给周期性的操作增加随机因子，不要固定操作周期平滑一下客户端的请求，让服务端的负载也平滑一下。
这里举了几个怎么加 jitter 的例子。&lt;/p&gt;
&lt;p&gt;首先容易想到的是在 wait 的时候加 jitter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="c1"&gt;// Once every 5 minutes&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方法虽然确实平滑了后面周期性的请求，但是还有一个瑕疵，那就是第一次请求的时候多个客户端会产生一个尖峰，因为有可能发生大量客户端都在那个时候启动触发第一次请求，所以就有了第二方法：在第一次的时候就加 jitter，当然后面 wait 的时候也还是要继续加 jitter 的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="c1"&gt;// Once every 5 minutes&lt;/span&gt;
&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过在第一次请求前和后面 wait 的时候加 jitter 就可以尽可能的平滑请求，做一个不 DDoS 为服务端着想的好宝宝。&lt;/p&gt;
&lt;p&gt;作者还说了一个不对周期时间做 jitter 而是对执行时间做 jitter 的方法，视频中说这种方法可以完全平滑请求曲线 ，达到一种完美的状态(但是我并没有搞懂这个方法中 truncate 函数是怎么实现的究竟包含了什么魔法，视频中也没说细节，大家如果知道的话可以留言告知我一下，谢谢了):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="c1"&gt;// Once every 5 minutes&lt;/span&gt;
  &lt;span class="nx"&gt;next_execution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;next_execution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next_execution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;period&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;next_execution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;period&lt;/span&gt;
  &lt;span class="nx"&gt;wait_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next_execution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dont-retry-if-you-retry-back-off"&gt;
&lt;h2 id="hiddont-retry-if-you-retry-back-off"&gt;Don’t Retry! &amp;amp;&amp;amp; If you retry, back off!&lt;a class="headerlink" href="#hiddont-retry-if-you-retry-back-off" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个主要说的是如果要重试的话记得给重试增加 back-off(重试间隔指数递增) 和 jitter，例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有一个重试时比上面效率更高更平滑的方法是限制重试次数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;period&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;send_rpc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还提到了关于重试的其他 tips:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;默认不要重试。&lt;/li&gt;
&lt;li&gt;重试时增加 back-off 指数递增的重试间隔。&lt;/li&gt;
&lt;li&gt;同时也别忘了增加 jitter 随机因子。&lt;/li&gt;
&lt;li&gt;不同场景下的重试策略：&lt;ul&gt;
&lt;li&gt;不要重试客户端错误（比如 HTTP 404 错误）。&lt;/li&gt;
&lt;li&gt;在服务端错误时重试（比如 HTTP 500 错误）。&lt;/li&gt;
&lt;li&gt;在发生网络错误时重试。&lt;/li&gt;
&lt;li&gt;在发生超时的时候小心重试。&lt;/li&gt;
&lt;li&gt;在配额超限的时候不要重试！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="safer-clients-move-control-to-the-server"&gt;
&lt;h2 id="hidsafer-clients-move-control-to-the-server"&gt;Safer clients: Move control to the server!&lt;a class="headerlink" href="#hidsafer-clients-move-control-to-the-server" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以实现一些功能让服务端拥有控制客户端的能力：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在客户端和服务端都实现 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Retry-After&lt;/span&gt;&lt;/tt&gt; 这个 HTTP Header，双方通过这个 Header 来约定下次重试的时机。&lt;/li&gt;
&lt;li&gt;服务端在实现这个重试周期的时候别忘了增加 jitter 随机因子。&lt;/li&gt;
&lt;li&gt;远程控制客户端的能力（比如远程把客户端的请求给临时停了，或者临时拉大重试基础间隔）。&lt;/li&gt;
&lt;li&gt;远程配置调用周期。&lt;/li&gt;
&lt;li&gt;维护一个可远程控制的客户端特性黑名单。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="safer-clients-expose-information-to-server"&gt;
&lt;h2 id="hidsafer-clients-expose-information-to-server"&gt;Safer clients: Expose information to server&lt;a class="headerlink" href="#hidsafer-clients-expose-information-to-server" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;客户端暴露越多的信息给服务端，就可以得到更精细的响应:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;给请求打标签&lt;ul&gt;
&lt;li&gt;客户端名称和版本号&lt;/li&gt;
&lt;li&gt;什么特性触发了当前请求&lt;/li&gt;
&lt;li&gt;失败请求的严重程度（比如短期内失败了多少次）&lt;/li&gt;
&lt;li&gt;当前请求是第一次请求还是重试发起的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可能得到的服务端响应&lt;ul&gt;
&lt;li&gt;给请求赋予不同的优先级&lt;/li&gt;
&lt;li&gt;drop 一些后台请求&lt;/li&gt;
&lt;li&gt;防止 drop 了一些可能会触发重连风暴的请求&lt;/li&gt;
&lt;li&gt;为客户端的 bug 做一些 workaround （比如旧版本的客户端 bug）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="safer-microservices"&gt;
&lt;h2 id="hidsafer-microservices"&gt;Safer Microservices&lt;a class="headerlink" href="#hidsafer-microservices" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;微服务环境下可以做的更多。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;重试预算&lt;ul&gt;
&lt;li&gt;限制只有多少百分比的重试可以正常发出，其他的重试直接取消。比如只允许发出 10% 的重试。&lt;/li&gt;
&lt;li&gt;阻止重连请求影响其他正常请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适当的限流
* 基于失败率直接在客户端取消掉新的请求，通过这种方式来减轻服务端的负载。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;总结&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;强烈建议直接查看 &lt;a class="reference external" href="https://www.usenix.org/conference/srecon18asia/presentation/goh"&gt;Safe Client Behaviour | USENIX&lt;/a&gt; 这个原始视频，本文只是个简单的笔记没啥可看的，原视频才是精华。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.usenix.org/conference/srecon18asia/presentation/goh"&gt;Safe Client Behaviour | USENIX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=NHNZab_AzZo"&gt;SREcon18 Asia/Australia - Safe Client Behaviour - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/static/downloads/Safe-Client-Behaviour.pdf"&gt;Sides of Safe Client Behaviour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/"&gt;Exponential Backoff And Jitter | AWS Architecture Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-03-24:2019/03/safe-client-behaviour-notes-retry-jitter-back-off-more.html</guid><category>client</category></item><item><title>负载均衡策略之一致性哈希</title><link>https://mozillazg.com/2019/03/load-balancing-strategy-algorithm-Consistent-hashing.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍一下一致性哈希相关知识。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;一致性哈希&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;所谓的一致性哈希策略指的是根据后端节点的某个固定属性计算 hash 值，然后把所有节点计算出来的 hash 值组成一个 hash 圆环。 请求过来的时候根据请求的特征（比如，来源 ip 、cookie、用户名等特定信息）计算该特征的 hash 值（使用跟计算后端节点 hash 值相同的 hash 函数进行计算）， 然后顺时针查找 hash 环上的 hash 值，第一个比请求特征的 hash 值大的 hash 值所对应的节点即为被选中的节点。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/static/images/other/consisten-hashing.png" /&gt;&lt;/p&gt;
&lt;p&gt;（图片来源出处： &lt;a class="reference external" href="https://charlee.li/memcached-004.html"&gt;memcached全面剖析--4. memcached的分布式算法&lt;/a&gt; ）&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;改进&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面的 hash 圆环有一个问题就是节点的 hash 值不一定是均匀的分布在 hash 环上的，这样就会导致部分节点上承受太多的请求。&lt;/p&gt;
&lt;p&gt;解决的办法也比较简单，然后就是引入虚拟节点：每个节点重复 n 次，把这些虚拟节点的 hash 值（跟实际节点的 hash 值不一样，也就是说需要在节点属性中加点东西保证每个虚拟节点跟实际节点的 hash 值不一样，互相之间也要不一样）也加入到 hash 环中以此来保证分布更均匀。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;注意点&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这里有一个需要注意的点那就是临界值的处理问题：可能会有部分请求处在 hash 环上最后一个点的后面，即 hash 环上找不到一个比请求特征的 hash 值更大的一个 hash。&lt;/p&gt;
&lt;p&gt;对于这种无法在 hash 环上找到对应的下一个节点的情况，一般是把 hash 环上的第一个 hash 值作为被选中的点，即进行第二圈的顺时针查找。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;总结&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍了一下一致性哈希相关知识，更详细的信息请阅读参考资料。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;参考资料&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Consistent_hashing"&gt;Consistent hashing - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://charlee.li/memcached-004.html"&gt;memcached全面剖析--4. memcached的分布式算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.codinglabs.org/articles/consistent-hashing.html"&gt;CodingLabs - 一致性哈希算法及其在分布式系统中的应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.openstack.org/swift/latest/ring_background.html"&gt;OpenStack Docs: Building a Consistent Hashing Ring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://timyang.net/architecture/consistent-hashing-practice/"&gt;某分布式应用实践一致性哈希的一些问题 – 后端技术 by Tim Yang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://yikun.github.io/2016/06/09/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AE%9E%E8%B7%B5/"&gt;一致性哈希算法的理解与实践 | Yikun&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-03-17:2019/03/load-balancing-strategy-algorithm-Consistent-hashing.html</guid><category>load-balancer</category><category>load-balancing</category><category>consisten-hashing</category></item><item><title>网络负载均衡器中的动态权重功能</title><link>https://mozillazg.com/2019/03/load-balancer-load-balancing-dynamic-weight-max-connections-slow-start-mode.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有时候我们可能希望能够动态调整负载均衡器中某个节点权重和最大连接数限制，
比如，某个节点负载有点高，当时又不想完全不接受连接，
此时就可以通过调整权重或最大连接数限制来减少新的连接数，防止节点出现过载的情况。&lt;/p&gt;
&lt;p&gt;下面就简单记录一下相关需求和实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;手动调整&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;手动调整节点权重和最大连接数是最简单也最直观的一种方法，一般可以通过下面的方法实现：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;配置文件支持热更新，通过更新配置文件中节点权重或最大连接数限制来实现。&lt;/li&gt;
&lt;li&gt;如果配置信息不是通过文件读取而是从配置管理系统读取的话，那就只要支持监听配置管理系统的更新推送并热更新内存中的配置就好。&lt;/li&gt;
&lt;li&gt;支持通过 API 更新运行时信息，比如支持通过 HTTP API 来更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;自动调整&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在某些场景下可能有需要负载均衡器支持自动动态调整节点权重和最大连接数限制的功能：
比如，新加了一个节点到负载均衡器中，但是后端节点是需要一段时间的预热才能处理大量连接，
当我们使用的是类似 【最少连接】这种负载均衡策略时，因为是新增的节点连接数最少会出现短时间连接大量涌入新节点的情况，
此时就会出现节点过载的情况（前面说了假设我们的节点需要预热才能处理大量连接），甚至出现打垮新节点的情况。&lt;/p&gt;
&lt;div class="section" id="slow-start"&gt;
&lt;h3 id="hidslow-start"&gt;slow start 模式&lt;a class="headerlink" href="#hidslow-start" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于这种类似需要预热的场景，需要负载均衡器支持类似 slow start 模式：
slow start 模式下，节点的权重和最大连接数会从 1 开始随着时间线性增长，直至增长到配置的权重和最大连接数的值。
slow start 模式给予了节点一段时间的预热期，并且预热期间的连接数是线性缓慢增长的，
既达到了预热的效果又不会出现瞬间涌入大量连接打垮后端节点的情况，非常适合需要预热的情况。&lt;/p&gt;
&lt;p&gt;那么，在什么情况下一个节点会自动进入 slow start 模式呢，一般在下面的情况会考虑自动进入 slow start 模式：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;新增节点。&lt;/li&gt;
&lt;li&gt;节点健康状态从不健康切换到健康。此时一般是后端节点之前在发布或重启，亦或是刚刚从故障中恢复。&lt;/li&gt;
&lt;li&gt;节点状态从 Down 状态切换为可以接受新连接的状态。这个状态切换可能是手动通过页面或API进行的操作，也可能是程序内部的状态自动切换。 原因一般跟上面的健康检查状态切分类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于这个 slow start 模式有一点需要注意的是：在负载均衡器启动的时候一般不会触发 slow start 模式，虽然满足上面的新增节点的情况。因为如果在负载均衡器启动的时候就触发的话，会出现所有节点都进入 slow start 模式，可能会导致只能处理少量连接的情况，无法实际需求。如果确实需要启动时就进入 slow start 模式的话需要考虑一下这种情况会导致的容量问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;根据响应/负载情况自动调整&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;还有一种方式是根据后端负载或响应情况来自动调整，比如后端连续多次返回的响应码是 5xx  或者响应时间或后端服务负载超出阈值等，此时可以根据需要降低一下该节点的权重和最大连接数限制（注意要在适当的时机把权重恢复回来，比如一段时间不再返回 5xx 或后端负载恢复到正常水平 则逐步恢复到原来的权重值）或者把节点切换为不接受新请求的状态，一段时间后进入 slow start 模式慢慢恢复正常。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;总结&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍了一下负载均衡器中动态权重相关的内容，欢迎大家补充其他知识。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;参考资料&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://support.citrix.com/article/CTX108886"&gt;NetScaler Load Balancing - Slow Start Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/haproxy/haproxy/blob/a51885621d5bf8fa63a82e8beb8438841098251f/doc/configuration.txt#L12174"&gt;haproxy/configuration.txt at master · haproxy/haproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-03-10:2019/03/load-balancer-load-balancing-dynamic-weight-max-connections-slow-start-mode.html</guid><category>load-balancer</category><category>load-balancing</category><category>slow-start</category></item><item><title>负载均衡策略之两次随机选择策略</title><link>https://mozillazg.com/2019/03/load-balancing-strategy-algorithm-the-power-of-two-random-choices.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍一下两次随机选择这个负载均衡策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="two-random-choices"&gt;
&lt;h2 id="hidtwo-random-choices"&gt;两次随机选择（Two Random Choices）&lt;a class="headerlink" href="#hidtwo-random-choices" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;两次随机选择策略出自论文
&lt;a class="reference external" href="http://www.eecs.harvard.edu/~michaelm/postscripts/handbook2001.pdf"&gt;《The Power of Two Random Choices: A Survey of Techniques and Results》&lt;/a&gt; ，主要思想是：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;从可用节点列表中做两次随机选择操作，得到节点 A、B&lt;/li&gt;
&lt;li&gt;比较 A、B 两个节点，选出负载最低（一般是正在处理的连接数/请求数最少）的节点作为被选中的节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于简单实现这里就不贴出来了，可以参考下面的伪代码以及前面的 &lt;a class="reference external" href="https://mozillazg.com/2019/01/load-balancing-strategy-algorithm-weighted-random.html"&gt;负载均衡策略之随机选择&lt;/a&gt;
和 &lt;a class="reference external" href="https://mozillazg.com/2019/02/load-balancing-strategy-algorithm-weighted-least-connection.html"&gt;负载均衡策略之最少连接&lt;/a&gt; 结合这两个就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;least_connection_choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;总结&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍了一下两次随机选择这个负载均衡策略。
关于两次随机选择策略的更详细信息可以参考参考资料中列出来的资源。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://brooker.co.za/blog/2012/01/17/two-random.html"&gt;The power of two random choices - Marc's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.eecs.harvard.edu/~michaelm/postscripts/handbook2001.pdf"&gt;The Power of Two Random Choices: A Survey of Techniques and Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.haproxy.com/blog/power-of-two-load-balancing/"&gt;Test Driving &amp;quot;Power of Two Random Choices&amp;quot; Load Balancing - HAProxy Technologies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-03-03:2019/03/load-balancing-strategy-algorithm-the-power-of-two-random-choices.html</guid><category>load-balancing</category><category>load-balancer</category></item><item><title>负载均衡策略之最少连接</title><link>https://mozillazg.com/2019/02/load-balancing-strategy-algorithm-weighted-least-connection.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍一下最少连接这个负载均衡策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="least-connection"&gt;
&lt;h2 id="hidleast-connection"&gt;最少连接 (Least Connection)&lt;a class="headerlink" href="#hidleast-connection" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最少连接策略指的是从已有的后端列表中选择正在处理的连接数/请求数（对于七层负载均衡器来说可能更多的是说的最少请求数）
最少的节点出来提供服务。&lt;/p&gt;
&lt;p&gt;既然要判断连接数/请求数，那么每个节点都需要保存一个正在处理的连接数/请求数的信息，然后选取节点的时候判断一下，
选择连接数最少的那个节点。&lt;/p&gt;
&lt;p&gt;用 python 简单表示就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Node: {}, conn: {}&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

        &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="weighted-least-connection"&gt;
&lt;h2 id="hidweighted-least-connection"&gt;带权重的最少连接 (Weighted Least Connection)&lt;a class="headerlink" href="#hidweighted-least-connection" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;实际使用中各个节点往往都带有不同的权重，比较连接数时需要同时考虑节点的权重信息，
被选中的节点的连接数与权重的比要最小。 即，被选中的节点满足下面的条件：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;假设用 C 表示连接数、W 表示权重、S 表示被选中的节点、Sn 表示未被选中的节点&lt;/li&gt;
&lt;li&gt;那么 S 必须满足 C(S) / W(S) &amp;lt; C(Sn) / W(Sn) ，这个条件也可以表示为 C(S) * W(Sn) &amp;lt; C(Sn) * W(S)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用 python 简单表示就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Node: {}, weight: {}, conn: {}&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

        &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;改进&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面的 Python 简单实现其实有一点小瑕疵：当有多个节点满足条件时，上面的方法可能会连续多次选中同一个节点，
导致结果不够平滑。&lt;/p&gt;
&lt;p&gt;解决这个瑕疵的方法也比较简单，那就是把所有满足条件的节点都选出来，然后对这些节点应用其他负载均衡策略来选出合适的节点（比如使用前面介绍过的轮询策略、随机选择策略等）。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;总结&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单记录了一下最少连接策略以及带权重的最少连接策略这两个负载均衡策略的实现方法，
当然还有其他的实现方法欢迎一起探讨。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;参考资料&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nginx/nginx/blob/d8ccef021588cf79d2dae7c132a0b1225ed52c30/src/http/modules/ngx_http_upstream_least_conn_module.c"&gt;nginx/ngx_http_upstream_least_conn_module.c at master · nginx/nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kb.linuxvirtualserver.org/wiki/Weighted_Least-Connection_Scheduling"&gt;Weighted Least-Connection Scheduling - LVSKB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-02-19:2019/02/load-balancing-strategy-algorithm-weighted-least-connection.html</guid><category>load-balancing</category><category>load-balancer</category></item><item><title>负载均衡策略之轮询策略</title><link>https://mozillazg.com/2019/02/load-balancing-strategy-algorithm-weighted-round-robin.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍一下轮询(Round Robin)这个负载均衡策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="round-robin"&gt;
&lt;h2 id="hidround-robin"&gt;轮询选择 (Round Robin)&lt;a class="headerlink" href="#hidround-robin" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;轮询选择指的是从已有的后端节点列表中按顺序依次选择一个节点出来提供服务。&lt;/p&gt;
&lt;p&gt;一种轮询选择的方法是把所有的节点看做一个一个的点，并把这些点连起来组成一个圆，
轮询选择就是在这个圆上按顺时针选择一个点。&lt;/p&gt;
&lt;p&gt;可以通过用请求次数取模来实现这个顺时针选择的功能，比如用 python 来表示就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="weighted-round-robin"&gt;
&lt;h2 id="hidweighted-round-robin"&gt;带权重的轮询选择 (Weighted Round Robin)&lt;a class="headerlink" href="#hidweighted-round-robin" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;实际使用中各个节点往往都带有不同的权重，所以一般都需要实现带权重的轮询选择。
权重高的被选中的次数多，权重低的被选中的次数少。&lt;/p&gt;
&lt;p&gt;我们还是可以把带权重信息的节点排成一个圆，不过这一次根据不同的权重把对应的节点重复不同的次数。&lt;/p&gt;
&lt;p&gt;然后还是顺时针选择一个点，因为每个节点根据权重重复了相应的次数，所以不同权重的节点被选中的次数也不一样并且选中的次数跟它本身的权重有关，这样就就简单实现了带权重的轮询选择。&lt;/p&gt;
&lt;p&gt;同样的 python 表示（假设 A、B、C 的权重分别是 3、2、1）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;改进&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面的按权重重复节点的方式有一个明显的问题就是不够平滑：&lt;/p&gt;
&lt;p&gt;权重高的节点会先被选中直至达到权重次数才会选择下一个节点或者说会出现请求连续的打在同一个节点上的情况，导致权重低的节点可能会处于空闲状态，没有平滑分配请求。&lt;/p&gt;
&lt;p&gt;一种改进方法是：使用 nginx 中实现的一种平滑的带权重轮询的方法 &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# 普通带权重轮询结果示例：&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# nginx 实现的平滑的带权重轮询的结果示例：&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个方法的原文描述如下 &lt;a class="footnote-reference" href="#id9" id="id5"&gt;[1]&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For edge case weights like { 5, 1, 1 } we now produce { a, a, b, a, c, a, a }
sequence instead of { c, b, a, a, a, a, a } produced previously.&lt;/p&gt;
&lt;p&gt;Algorithm is as follows: on each peer selection we increase current_weight
of each eligible peer by its weight, select peer with greatest current_weight
and reduce its current_weight by total number of weight points distributed
among peers.&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;To preserve weight reduction in case of failures the effective_weight
variable was introduced, which usually matches peer's weight, but is
reduced temporarily on peer failures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个节点有三个属性，这三个属性的含义如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;weight&lt;/tt&gt;: 节点权重值，这个值固定不变。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;effective_weight&lt;/tt&gt;: 节点的有效权重。初始值等于 &lt;tt class="docutils literal"&gt;weight&lt;/tt&gt; 。之所以有个 &lt;tt class="docutils literal"&gt;effective_weight&lt;/tt&gt; 是为了
在发现后端节点异常次数过多时（比如响应完成时发现选择的节点有问题，错误次数有点多）临时降低节点的权重。
在轮询遍历选择节点时这个 &lt;tt class="docutils literal"&gt;effective_weight&lt;/tt&gt; 的值会逐步增加恢复到 &lt;tt class="docutils literal"&gt;weight&lt;/tt&gt; 的值，所以只是为了在异常时临时降低权重不会永久影响节点的权重（节点正常时会逐步恢复到原有的权重）。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;current_weight&lt;/tt&gt;: 节点当前权重。初始值为 0，后面会动态调整：&lt;ul&gt;
&lt;li&gt;每次选取节点时，遍历可用节点，遍历时把当前节点的 &lt;tt class="docutils literal"&gt;current_weight&lt;/tt&gt; 的值加上它的 &lt;tt class="docutils literal"&gt;effective_weight&lt;/tt&gt; ，&lt;/li&gt;
&lt;li&gt;同时累加所有节点的 &lt;tt class="docutils literal"&gt;effective_weight&lt;/tt&gt; 值为 &lt;tt class="docutils literal"&gt;total&lt;/tt&gt; 。&lt;/li&gt;
&lt;li&gt;如果当前节点的 &lt;tt class="docutils literal"&gt;current_weight&lt;/tt&gt; 值最大，那么这个节点就是被选中的节点，同时把它的 &lt;tt class="docutils literal"&gt;current_weight&lt;/tt&gt; 减去 &lt;tt class="docutils literal"&gt;total&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;没有被选中的节点的 &lt;tt class="docutils literal"&gt;current_weight&lt;/tt&gt; 不用减少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个过程用 python 简单的表示就是（也可以直接看 nginx 的实现 &lt;a class="footnote-reference" href="#id10" id="id6"&gt;[2]&lt;/a&gt; ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failed_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;Node: {}&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;max_fails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

        &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failed_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failed_number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_faile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_fails&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;failed_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;effect_weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;      &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到确实是比之前的 &lt;tt class="docutils literal"&gt;['A', 'A', 'A', 'B', 'B', 'C', 'A', 'A', 'A', 'B', &lt;span class="pre"&gt;...]&lt;/span&gt;&lt;/tt&gt; 要平滑一些。&lt;/p&gt;
&lt;p&gt;上面在介绍 &lt;tt class="docutils literal"&gt;effective_weight&lt;/tt&gt; 时说这个属性主要用来临时降低节点权重，如果没有这个需求的话可以省去 &lt;tt class="docutils literal"&gt;effective_weight&lt;/tt&gt; 直接用 &lt;tt class="docutils literal"&gt;weight&lt;/tt&gt; 就好:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;

    &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_weight&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于这个 nginx 实现的平滑的带权重轮询的方法的更多细节可以阅读参考资料中列出的一些资料。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;总结&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单记录了一下轮询选择以及带权重的轮询选择这两个负载均衡策略的实现方法，
当然还有其他的实现方法欢迎一起探讨。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;参考资料&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nginx/nginx/commit/52327e0627f49dbda1e8db695e63a4b0af4448b1"&gt;Upstream: smooth weighted round-robin balancing. · nginx/nginx&amp;#64;52327e0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.csdn.net/zhangskd/article/details/50194069"&gt;Nginx的负载均衡 - 加权轮询 (Weighted Round Robin) 上篇 - zhangskd的专栏 - CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://notes.songjingsong.top/2018/11/15/grasp/3/"&gt;关于平滑加权算法的思考以及证明 | 盒饭编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tenfy.cn/2018/11/12/smooth-weighted-round-robin/"&gt;nginx平滑的基于权重轮询算法分析 | tenfy' blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kb.linuxvirtualserver.org/wiki/Weighted_Round-Robin_Scheduling"&gt;Weighted Round-Robin Scheduling - LVSKB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id4"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id5"&gt;2&lt;/a&gt;)&lt;/em&gt; &lt;a class="reference external" href="https://github.com/nginx/nginx/commit/52327e0627f49dbda1e8db695e63a4b0af4448b1"&gt;Upstream: smooth weighted round-robin balancing. · nginx/nginx&amp;#64;52327e0&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/nginx/nginx/commit/52327e0627f49dbda1e8db695e63a4b0af4448b1#diff-3f2250b728a3f5fe1e2d31cbf63c2268R527"&gt;Upstream: smooth weighted round-robin balancing. · nginx/nginx&amp;#64;52327e0&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-02-17:2019/02/load-balancing-strategy-algorithm-weighted-round-robin.html</guid><category>load-balancing</category><category>load-balancer</category><category>round-robin</category></item><item><title>负载均衡策略之随机选择</title><link>https://mozillazg.com/2019/01/load-balancing-strategy-algorithm-weighted-random.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍一下随机选择这个负载均衡策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="random"&gt;
&lt;h2 id="hidrandom"&gt;随机选择 (Random)&lt;a class="headerlink" href="#hidrandom" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;随机选择指的是从已有的后端列表中随机选择一个节点出来提供服务。
一种随机选择的方法是把所有的节点看做一个一个的点，并把这些点连起来排成一条直线，
随机选择就是在这条直线上随机选择一个点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A - B - C
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至于怎么做随机选择一个点，这个可以用各个编程语言官方实现自带的生成
指定区间（直线的开始到结尾区间）内的随机数的方法来生成一个随机数的方式来选择对应的点。&lt;/p&gt;
&lt;p&gt;用 python 来表示就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="weighted-random"&gt;
&lt;h2 id="hidweighted-random"&gt;带权重的随机选择 (Weighted Random)&lt;a class="headerlink" href="#hidweighted-random" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;实际使用中各个节点往往都带有不同的权重，即虽然是随机选择但是期望不同权重的节点被选择的几率不一样，
权重高的被选中的几率大，权重低的被选中的几率小。&lt;/p&gt;
&lt;p&gt;我们还是可以把带权重信息的节点排成一条直线，不过这一次根据不同的权重把对应的节点重复不同的次数。
假设有三个节点 A、B、C 它们的权重分别是 3、2、4 ，那么就可以这样表示:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;A1 - A2 - A3 - B1 - B2 - C1 - C2 - C3 - C4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后还是随机选择一个点，因为每个节点根据权重重复了相应的次数，所以不同权重的节点被随机选中的概率也不一样，
就简单实现了带权重的随机选择。&lt;/p&gt;
&lt;p&gt;同样的 python 表示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;改进&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;上面的按权重重复节点的方式有以下缺点：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;不支持权重信息包含小数的情况&lt;/li&gt;
&lt;li&gt;当权重的值很大时要重复很多次浪费资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一种改进方法是：还是连成一条直线，不过这次是用各个节点的权重值组成一条直线，直线的不同区域属于不同的节点:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  A  B   C
&lt;span class="p"&gt;|&lt;/span&gt;---&lt;span class="p"&gt;|&lt;/span&gt;--&lt;span class="p"&gt;|&lt;/span&gt;----&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后取直线上的任意一个点，这个点属于直线上哪个节点的区域内就是选择了哪个节点：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;所有权重相加得到 S（其实就是直线的长度）&lt;/li&gt;
&lt;li&gt;从 [0, S) 的区间内取一个随机数 R（直线中随机选择一个点）&lt;/li&gt;
&lt;li&gt;遍历节点列表，把访问过的节点的权重相加得到 V，比较 V 与 R 的值，如果 V &amp;gt; R 当前节点即为选中的节点。（查找 R 在直线中的位置属于哪个节点所在的区域）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python 示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;总结&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单记录了一下随机选择以及带权重的随机选择这两个负载均衡策略的实现方法，
当然还有其他的实现方法欢迎一起探讨。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;参考资料&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-01-23:2019/01/load-balancing-strategy-algorithm-weighted-random.html</guid><category>load-balancing</category><category>load-balancer</category></item><item><title>网络负载均衡器的类别和功能介绍</title><link>https://mozillazg.com/2019/01/notes-about-load-balancer-types-and-feature.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文大部分内容都是整理自 &lt;a class="reference external" href="https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236"&gt;Introduction to modern network load balancing and proxying&lt;/a&gt; 感兴趣的话建议直接看那篇文章。&lt;/p&gt;
&lt;p&gt;简单记录一下常见的网络负载均衡器的类别以及常见的功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;类别&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般分为 L4 四层负载均衡器和 L7 七层负载均衡器。&lt;/p&gt;
&lt;div class="section" id="l4"&gt;
&lt;h3 id="hidl4"&gt;L4 四层负载均衡器&lt;a class="headerlink" href="#hidl4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的四层负载均衡器主要指的是，负载均衡器只是单纯的 TCP/UDP 数据转换不关心数据中的应用相关的协议信息，
比如 TCP/UDP 中传输的可能是 HTTP/Redis/MongoDB 或其它应用层协议数据。&lt;/p&gt;
&lt;p&gt;四层负载均衡器的例子：客户端与负载均衡建立一条 TCP 连接，负载均衡器与一个后端服务也建立一条 TCP 连接，
当负载均衡器收到客户端发送过来的数据后，会把收到的数据转发给后端服务。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client ---&amp;gt; load balancer ----&amp;gt; backend
       TCP1               TCP2
       &amp;lt;---               &amp;lt;----
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="l7"&gt;
&lt;h3 id="hidl7"&gt;L7 七层负载均衡器&lt;a class="headerlink" href="#hidl7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的七层负载均衡器主要指的是，负载均衡器会去解析客户端发送过来的数据，按照指定的应用层协议继续为该协议的请求，以请求为单位做负载均衡等操作。&lt;/p&gt;
&lt;p&gt;七层负载均衡器的例子：客户端与负载均衡器建立一条 TCP 连接，每次客户端发送一个应用层协议的请求到负载均衡器时， 负载均衡器都会从后端选择一个节点（可能已与这个后端节点建立连接或未建立），把这个请求转发给选中的后端节点。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client -----------&amp;gt; load balancer ----------&amp;gt; backend 1
       request &lt;span class="m"&gt;1&lt;/span&gt;                  request 1
       request &lt;span class="m"&gt;2&lt;/span&gt;                  ----------&amp;gt; backend 2
                                  request 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从这个例子可以看到七层负载均衡着重的应用层协议，转发到后端时也是按一个完整的应用层协议数据来转发的，
所以一个客户端与负载均衡器建立的这个连接中可能发送了很多个请求，这些请求可能会转发到不同的后端节点上。&lt;/p&gt;
&lt;p&gt;相比四层负载均衡器的一一对应的转发方式七层负载均衡器的这种基于协议内容的转发可以让后端节点的负载更均衡：
比如客户端 A 在一次连接中一分钟内发送了 1000 个请求，如果是 L4 的话，这 1000 个请求的数据全部会转发到同一个后端节点上，如果是 L7 的话，则 1000 个请求按照负载均衡策略可能会分别转发到 10 个后端节点上。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;功能&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;负载均衡器一般都会有如下功能：&lt;/p&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;服务发现&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;发现可用的后端节点的功能。可以通过多种方式来实现这个服务发现的功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;可以在配置文件中指定可用的后端节点信息&lt;/li&gt;
&lt;li&gt;或通过 DNS 来发现&lt;/li&gt;
&lt;li&gt;也可以是通过集成第三方服务的方式来发现后端节点（比如：zookeeper, etcd, consul 等等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3 id="hidid6"&gt;健康检查&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;健康检查用于辅助决策选择哪个后端节点来接受客户端的数据。一般有主动检查和被动检查。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;主动检查：定期向可用的后端节点做健康检查操作，及时发现不可用/无法接受新请求的后端节点。&lt;/li&gt;
&lt;li&gt;被动检查：基于转发时的状态来被动判断节点健康状况，可以辅助主动检查增强节点时候健康判断的准确度。
比如：L4 的话当发现一个节点多次建立连接失败就标记为不健康，L7 的话如果发现节点返回的 HTTP 响应短时间内出现了好几次状态码是 503 就可以考虑标记为不健康或者根据响应时间之类的来判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3 id="hidid7"&gt;负载均衡&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;根据不同的负载均衡算法/策略来选择合适的节点来接收转发的数据，目的是希望后端节点能够负载均衡，不要出现所有请求都打到少部分节点上去了，希望能够分散请求达到负载均衡。常见的负载均衡算法/策略有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;随机选择(Random Choice)&lt;/li&gt;
&lt;li&gt;带权重的随机选择（Weighted Random Choice）&lt;/li&gt;
&lt;li&gt;轮询（Round Robin）&lt;/li&gt;
&lt;li&gt;带权重的轮询（Weighted Round Robin）&lt;/li&gt;
&lt;li&gt;最少连接数（Least Connection）&lt;/li&gt;
&lt;li&gt;带权重的最少连接数（Weighted Least Connection）&lt;/li&gt;
&lt;li&gt;一致性哈希（Consistent Hash）&lt;/li&gt;
&lt;li&gt;两次随机选择（Two Random Choices）等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="sticky-session"&gt;
&lt;h3 id="hidsticky-session"&gt;会话粘滞（sticky session）&lt;a class="headerlink" href="#hidsticky-session" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;后端服务的一些功能可能需要同一个客户端一段时间内的请求尽量都转发到同一个后端节点上，比如后端节点间没有共享 session 数据的 HTTP 服务，此时如果客户端请求转发到了不同的后端节点上的话，可能会出现反复提示用户登录的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tsl-tls-termination"&gt;
&lt;h3 id="hidtsl-tls-termination"&gt;TSL 卸载（TLS termination）&lt;a class="headerlink" href="#hidtsl-tls-termination" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的 TSL 卸载指的是客户端与负载均衡器之间通过 TSL 协议进行通信，但是负载均衡器与后端服务之间将不再使用 TSL 协议进行通过，所有针对客户端的 TSL 相关的处理都在负载均衡器这一层完成：协议卸载、证书验证、使用 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Server_Name_Indication"&gt;SNI&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="observability"&gt;
&lt;h3 id="hidobservability"&gt;可观测性（Observability)&lt;a class="headerlink" href="#hidobservability" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的可观测性指的是负载均衡器拥有各种各样的可以用来观测运行状态或连接状态的功能，比如提供获取各种状态信息的 api 、主动上报 trace 信息、或记录一些有助于发现问题或解决问题的日志等等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ddos"&gt;
&lt;h3 id="hidddos"&gt;安全以及 DDoS 缓解&lt;a class="headerlink" href="#hidddos" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;负载均衡器通常会实现一些安全相关的特性，比如：限速、限制并发、限制最大连接、IP/网段 block、认证、DDos 缓解等等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;动态配置以及控制面板&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;因为要实现很多的功能所以配置项也会比较多，所以一般都会有配置文件、修改运行时配置的 API、以及可以查看运行时状态和修改运行时配置的 web 面板。&lt;/p&gt;
&lt;p&gt;修改运行时配置的要点是程序要能支持配置文件热更新或通过 api 动态修改程序运行过程中在使用的配置项。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gracefully-upgrade"&gt;
&lt;h3 id="hidgracefully-upgrade"&gt;热升级/平滑升级（Gracefully Upgrade）&lt;a class="headerlink" href="#hidgracefully-upgrade" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的热升级指的是可以当需要升级正在运行的负载均衡器服务的时候，可以安全的对正在处理连接的负载均衡器进行升级操作。升级期间不会中断正在处理的连接也不会拒绝新进来的连接，实现热升级/无缝升级/平滑升级。&lt;/p&gt;
&lt;p&gt;如果无法实现热升级的话，也可以实现平滑重启(Gracefully Restart)。&lt;/p&gt;
&lt;p&gt;所谓的平滑重启指的是重启服务的时候不会中断正在处理的连接，等连接处理完或达到指定的超时时间后再进行重启，从而实现平滑重启。平滑重启的场景是要求不要有新的连接进来，否则新的连接会被拒绝，一般通过把准备重启的服务从 DNS 记录上删除的方式或通过 iptables 直接拒绝连接的方式或者再前面的接入层屏蔽这个节点的 方式来实现避免新连接进来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;七层负载均衡器的更多功能&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4 id="hidid10"&gt;多协议支持&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在很多场景下可能会需要多协议支持。比如支持多种应用层协议，并根据协议相关的请求内容做路由。&lt;/p&gt;
&lt;p&gt;一些负载均衡器会支持 HTTP/1, HTTP2, gRPC, Redis, MongoDB，MySQL, PostgreSQL 或 Kafka 等常见的协议。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4 id="hidid11"&gt;高级负载均衡&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;因为会解析协议相关的请求内容所以七层负载均衡器可以做更多更高级的功能，比如：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;超时：请求或响应的超时机制&lt;/li&gt;
&lt;li&gt;重试：请求失败时的重试&lt;/li&gt;
&lt;li&gt;限速：基于请求的限速&lt;/li&gt;
&lt;li&gt;限制并发：基于请求的并发限制/正在处理的请求限制&lt;/li&gt;
&lt;li&gt;熔断：在持续异常时的特定场景下直接熔断保护后端服务&lt;/li&gt;
&lt;li&gt;route：基于请求内容的 route 功能&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4 id="hidid12"&gt;可扩展性（插件系统）&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;很多负载均衡器都支持通过脚本的方式来扩展负载均衡器已有的功能（比如支持运行 Lua 脚本的插件系统）。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2 id="hidid13"&gt;总结&lt;a class="headerlink" href="#hidid13" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单总结了负载均衡器相关的部分知识，后面有空时候再继续更新补充 :joy&lt;/p&gt;
&lt;p&gt;感兴趣的话强烈建议阅读 &lt;a class="reference external" href="https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236"&gt;Introduction to modern network load balancing and proxying&lt;/a&gt; 这篇文章。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2 id="hidid14"&gt;参考资料&lt;a class="headerlink" href="#hidid14" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236"&gt;Introduction to modern network load balancing and proxying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://brooker.co.za/blog/2012/01/17/two-random.html"&gt;The power of two random choices - Marc's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Load_balancing_(computing)#Server-side_load_balancers"&gt;Load balancing (computing) - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://security.stackexchange.com/questions/30403/should-ssl-be-terminated-at-a-load-balancer"&gt;tls - Should SSL be terminated at a load balancer? - Information Security Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/01/notes-about-design-health-checking.html"&gt;健康检查功能相关的一些备忘 - Huang Huang 的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-01-20:2019/01/notes-about-load-balancer-types-and-feature.html</guid><category>load-balancer</category></item><item><title>健康检查功能相关的一些备忘</title><link>https://mozillazg.com/2019/01/notes-about-design-health-checking.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文记录一些健康检查功能相关的笔记/经验。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;检查方法&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;常见的健康检查一般分为主机层面的检查以及应用/服务层面的检查。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;主机层面的检查&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;主机层面的检查一般用下面的方法进行检查：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;用是否能够 ping 通来检查&lt;/li&gt;
&lt;li&gt;尝试用 tcp 连接一下目标 ip:port ，看看是否可以连通来检查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 tcp 连通性检查这里有时会用一个非常规的方法去做 tcp 健康检查 &lt;a class="footnote-reference" href="#id16" id="id5"&gt;[1]&lt;/a&gt; ：&lt;/p&gt;
&lt;p&gt;一般建立 tcp 连接都会经过 tcp 三次握手的过程:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Client -&amp;gt; Server: SYN&lt;/li&gt;
&lt;li&gt;Server -&amp;gt; Client: SYN-ACK&lt;/li&gt;
&lt;li&gt;Client -&amp;gt; Server: ACK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是其实最后一次的 ACK 可以不用发，因为对于健康检查来说，收到服务端发送回来的 SYN-ACK 的时候，
我们就可以简单的认为客户端跟服务端是可联通的。所以 tcp 健康检查可以考虑省去最后一个 ACK:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Client -&amp;gt; Server: SYN&lt;/li&gt;
&lt;li&gt;Server -&amp;gt; Client: SYN-ACK&lt;/li&gt;
&lt;li&gt;Client -&amp;gt; Server: RST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做的好处是，因为没有完成三次握手而是直接 RST 掉了，所以就不会有后续关闭连接时的四次挥手了，
可以减少好几个包（客户端和服务端都省了一些包）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;应用/服务层面的检查&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;应用/服务层面的检查，一般指的是按照应用/服务认可的普通客户端的方式去做健康检查，
比如发送合法的符合约定格式的 tcp/udp 包、http 请求、rpc 请求等。&lt;/p&gt;
&lt;p&gt;一般这种检查都是服务端定义一个专门用来响应健康检查请求的 api ，针对客户端发送的健康检查请求发回约定的响应格式数据。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3 id="hidid7"&gt;反应服务真正的健康情况&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;服务层面的健康检查一个很重要的一点是要反应服务真正的健康状况，所以服务端在实现健康检查接口时要考虑自身情况，
检查各种强依赖项，然后反馈给客户端当前服务端是否足够健康可以接受新的请求：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;检查强依赖的外部服务的连通性、响应时间等信息(db/redis/queue/...)&lt;/li&gt;
&lt;li&gt;检查机器负载情况，当前机器负载是否在健康范围内&lt;/li&gt;
&lt;li&gt;检查 CPU 利用率、内存使用率&lt;/li&gt;
&lt;li&gt;检查程序后台任务的排队情况&lt;/li&gt;
&lt;li&gt;检查磁盘剩余空间、IO 情况&lt;/li&gt;
&lt;li&gt;检查机器带宽是否快跑满了&lt;/li&gt;
&lt;li&gt;。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要根据服务本身的实际情况选择合适的检查项（不是每个都需要检查,不同的服务的强依赖项不一样），以及有些检查项可能不适合在请求内完成（比如会导致响应时间太长客户端超时了），这种可能需要安装外部程序来协助检查，比如带宽/IO 信息可以从外部获取。&lt;/p&gt;
&lt;p&gt;总之就是要真正反应服务真正的健康状况，一般不会啥都不做就回一个标志正常的响应。
如果这样的话跟普通的端口探活似乎没有太大的区别。&lt;/p&gt;
&lt;p&gt;当然，如果场景就是只需要检查协议以及端口探活的话，直接响应一个表示成功的响应也没啥问题。:joy&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;响应或请求包含服务标识信息&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;还有一个必须要提及的是，健康检查的请求或响应信息中最好标识相关的服务信息：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;客户端在请求中包含要检查的服务的标识信息，比如服务名/appid 之类的，当服务端收到请求的时候发现不是请求本服务的，可以直接返回相应的错误信息。&lt;/li&gt;
&lt;li&gt;客户端检查服务端返回的错误信息或响应中包含的服务标识信息时，就可以知道请求发错对象了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么请求或响应中包含服务标识信息很重要呢，因为现在很多服务都在容器中运行，服务经常性的扩容/缩容/容器漂移 导致相同的 ip:port 可能会在不同时刻对应的是不同的服务，如果因为一些原因导致客户端没有感知到这个变化，然后健康检查请求了旧的 ip:port ，此时健康检查虽然通过了，但是实际上请求过去还是会失败了，因为远端已经不是原来客户端以为的那个服务了。
通过在请求和响应中包含服务标识信息就可以在客户端和服务端防御这种 case。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2 id="hidid9"&gt;健康与不健康之外的第三种状态&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般健康检查的结果都是只有两种状态：健康或不健康。这里介绍的是根据需要可以考虑引入第三种状态：overload 。
这个状态的目的是应对一种 case: 服务可以正常处理健康检查，但是本身的负载已经非常高了，再接入多一点请求可能就要宕机了，然后节点宕机对整体服务的影响比较大（比如一些有状态服务宕机导致的客户端重连会对剩下的健康节点造成比较大的影响）。一般这种情况都会触发系统负载相关告警（比如 CPU 或内存使用率告警），然后人工手动介入把节点从负载均衡器或者哪里给摘除防止持续处理请求导致宕机。&lt;/p&gt;
&lt;p&gt;对于这种 case 可以考虑引入上面所说的第三种状态 overload。对于处于 overload 状态的节点不再接受新的请求，等到节点恢复为健康状态后再接受新的请求。至于为啥不直接把 overload 的解决标记为不健康呢，因为不健康状态一般都是节点宕机了不能自动恢复的情况，以及部分系统对于不健康的节点会自动触发实例重启的操作，这个自动重启的操作可能不是我们预期的也可能会触发更大的问题（比如引发客户端大量重连），所以不健康状态跟 overload 还是有一点区别，可以根据实际情况选择是引入 overload 状态还是直接用不健康状态代替。&lt;/p&gt;
&lt;p&gt;这第三种状态也不一样要是跟负载有关，只要是一种介于健康和不健康两者之间的状态都可以考虑引入第三种状态（比如同时支持读写操作的节点在这第三种状态的时候只支持 读 操作，不接受 写 操作）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2 id="hidid10"&gt;必要的配置项&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般健康检查都会有一些必要的配置项用来控制健康检查功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;最基本的肯定是要有待检查的目标服务信息，ip:port 之类的用于发送健康检查请求&lt;/li&gt;
&lt;li&gt;健康检查所使用的协议（如果支持多协议的话）以及发送的数据（比如 http 协议的话检查所访问的 url path, http method, 认证信息等，tcp 的话可能是发送特定的数据表示请求做健康检查等）&lt;/li&gt;
&lt;li&gt;判断服务健康的依据：&lt;ul&gt;
&lt;li&gt;基本的连通性&lt;/li&gt;
&lt;li&gt;响应的内容，比如表示服务健康的 http 响应状态码是哪些，响应的 body 内容需要包含什么内容等&lt;/li&gt;
&lt;li&gt;检查不通过几次算服务不健康（有一个特例那就是：对于 Connection refused 错误一般建议直接标记为不健康而不是等几次失败再标记为不健康，），从不健康到健康需要通过几次检查才算恢复健康 &lt;a class="footnote-reference" href="#id17" id="id11"&gt;[2]&lt;/a&gt; &lt;a class="footnote-reference" href="#id18" id="id12"&gt;[3]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以及健康检查的间隔，健康检查太频繁可能会影响被检查的服务，间隔太长可能会失去健康检查的意义无法及时探查到不健康的状态&lt;/li&gt;
&lt;li&gt;超时，访问外部服务一定不能忘了超时相关的设置，健康检查也不例外&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2 id="hidid13"&gt;手动禁用/下线服务的能力&lt;a class="headerlink" href="#hidid13" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;所谓的手动禁用/下线服务的能力，指的是可以在检查端或被检查端把一个服务标记为不健康/下线的能力。
这个功能主要用于临时禁用一个服务，比如想对这个服务进行一些调试操作，但是又不希望这期间有请求进来进行干扰。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h2 id="hidid14"&gt;总结&lt;a class="headerlink" href="#hidid14" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单记录了一些健康检查功能相关的笔记/经验，如果以后还有新的知识会随时更新的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2 id="hidid15"&gt;参考资料&lt;a class="headerlink" href="#hidid15" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;copyconstruct/health-checks-in-distributed-systems-aa8a0e8c1672"&gt;Health Checks and Graceful Degradation in Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/health-endpoint-monitoring"&gt;Health Endpoint Monitoring pattern - Cloud Design Patterns | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-health-check/#fine-tuning-tcp-health-checks"&gt;NGINX Docs | TCP Health Checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.haproxy.com/documentation/aloha/10-0/traffic-management/lb-layer7/health-checks/#defining-health-check-parameters"&gt;Performing Health Checks | ALOHA 10.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/tevino/tcp-shaker"&gt;tevino/tcp-shaker: Performing TCP handshake without ACK in Go, useful for health checking, that is SYN, SYN-ACK, RST.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer20.com/learning-on-mistakes/"&gt;Learning on mistakes | Developer 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html"&gt;Cluster Health | Elasticsearch Reference [6.7] | Elastic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/tevino/tcp-shaker"&gt;tevino/tcp-shaker: Performing TCP handshake without ACK in Go, useful for health checking, that is SYN, SYN-ACK, RST.&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id11"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-health-check/#fine-tuning-tcp-health-checks"&gt;NGINX Docs | TCP Health Checks&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id18" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id12"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.haproxy.com/documentation/aloha/10-0/traffic-management/lb-layer7/health-checks/#defining-health-check-parameters"&gt;Performing Health Checks | ALOHA 10.0&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-01-13:2019/01/notes-about-design-health-checking.html</guid><category>health-check</category><category>load-balancer</category></item><item><title>rate limiting 之 token bucket</title><link>https://mozillazg.com/2019/01/rate-limiting-intro-token-bucket.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在实现限速功能的时候，其中一种常用的方法是使用 token bucket 算法来实现。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="token-bucket"&gt;
&lt;h2 id="hidtoken-bucket"&gt;token bucket&lt;a class="headerlink" href="#hidtoken-bucket" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="token bucket" src="/static/images/other/token_bucket.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(图片来自 &lt;a class="reference external" href="https://gateoverflow.in/39720/gate2016-1-54"&gt;https://gateoverflow.in/39720/gate2016-1-54&lt;/a&gt; ）&lt;/p&gt;
&lt;p&gt;token bucket 常见的中文解释是：令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务 &lt;a class="footnote-reference" href="#id8" id="id2"&gt;[1]&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;维基百科 &lt;a class="footnote-reference" href="#id9" id="id3"&gt;[2]&lt;/a&gt; 上 token bucket 算法的简单描述如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A token is added to the bucket every 1/r seconds.
每隔 1/r 秒向 bucket 中增加一个 token。&lt;/li&gt;
&lt;li&gt;The bucket can hold at the most b tokens. If a token arrives when the bucket is full, it is discarded.
这个 bucket 最多只能存放 b 个 token。如果放置 token 时 bucket 已经满了，丢弃这个 token。&lt;/li&gt;
&lt;li&gt;When a packet (network layer PDU) of n bytes arrives,
当一个包含 n 个字节的数据包进来的时候，&lt;ul&gt;
&lt;li&gt;if at least n tokens are in the bucket, n tokens are removed from the bucket, and the packet is sent to the network.
如果 bucket 中有 &amp;gt;= n 个 token，将从 bucket 中移除 n 个 token，然后把这个数据包发送出去。&lt;/li&gt;
&lt;li&gt;if fewer than n tokens are available, no tokens are removed from the bucket, and the packet is considered to be non-conformant.
如果可用的 token &amp;lt; n，此时不会从 bucket 中移除任何的 token，但是这个数据包会被认为是被限制的数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;常见实现方法&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般有两种实现方法。&lt;/p&gt;
&lt;p&gt;一种是按照 token bucket 的说明，真的做放 token 的操作：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;后台有个线程每 1/n 秒将 bucket 中的 token 数量加一，直至达到 bucket 容量。&lt;/li&gt;
&lt;li&gt;主线程检查限速时，比较 bucket 中 token 的数量，如果少于需要的数量，表示当前被限制。
（比如，一个请求进来，检查 bucket 中的 token 数量是否 &amp;gt; 1，如果 &amp;gt; 1请求放行同时把 token 数量减 1，
如果 &amp;lt; 1 说明当前请求已超出速率限制，请求被拒绝。）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种方法有一个很大的缺点，那就是因为每个 token bucket 都会有一个繁忙的后台线程在更新 token 数量，会
导致严重占用系统 CPU 出现严重的性能问题。假设我们的限速是限制为 1000/s，此时后台每隔 1ms 就会更新一次 token 数量，可以想像每个后台线程都会频繁占用 CPU，用这种方法实现的 rate limiting 处理不了几个请求就会出现 CPU 接近 100% 的情况。所以实践中一般用另一种方法来实现 token bucket。&lt;/p&gt;
&lt;p&gt;另一种是在取 token 时计算上次取跟这次取之间按照速率会产生多少个 token 加上上次剩余的 token （不能超过 bucket 容量限制），然后比较剩余 token 数是否满足需要。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;特点&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过 token bucket 的介绍以及对具体实现的了解，可以发现 token bucket 有以下特点：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;当 bucket 满的时候，将不再放入 token，即 token 数不能超过 bucket 容量限制。&lt;/li&gt;
&lt;li&gt;因为可以一次性从 bucket 拿出大量的 token 所以 token bucket 允许突发的峰值，
即，限速不是绝对的，而是允许存在尖峰/波峰。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;总结&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文简单介绍了一下 token bucket 算法以及两种常见的实现方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;参考资料&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Token_bucket"&gt;Token bucket - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/juju/ratelimit"&gt;juju/ratelimit: Efficient token-bucket-based rate limiter package.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/falconry/token-bucket"&gt;falconry/token-bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gateoverflow.in/39720/gate2016-1-54"&gt;GATE2016-1-54 - GATE Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://colobu.com/2014/11/13/rate-limiting/"&gt;流量调整和限流技术 | 鸟窝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stripe.com/blog/rate-limiters"&gt;Scaling your API with rate limiters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d"&gt;0-rate-limiters.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://colobu.com/2014/11/13/rate-limiting/"&gt;流量调整和限流技术 | 鸟窝&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Token_bucket"&gt;Token bucket - Wikipedia&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2019-01-03:2019/01/rate-limiting-intro-token-bucket.html</guid><category>rate-limiting</category><category>token-bucket</category></item><item><title>调用远程服务的一些备忘录</title><link>https://mozillazg.com/2018/08/call-remote-service-checklist.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;大部分程序或多或少都会调用其他远程服务，比如访问 HTTP API、操作数据等各种远程操作。
因为是调用其他服务所以会有很多不可控的因素，在编写相关代码的时候需要有一些注意事项或者说是备忘录。&lt;/p&gt;
&lt;p&gt;本文就列一些常见的备忘录（主要针对调用网络服务）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;超时&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了防止对方服务响应时间太长或者因为网络等各种因素导致响应时间变长，导致拖慢我们自己的程序，
在调用远程服务的时候记得配置或实现合适的超时机制。&lt;/p&gt;
&lt;p&gt;如果设置的超时时间不合理或者没有实现超时功能的话，
就会出现对方服务故障或与对方服务通信故障拖垮我们自己服务的尴尬情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;重试&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当调用远程服务失败的时候，就涉及到是否需要重试的问题。是否需要重试设计到各种情况：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;连接未到达对方服务，可以安全重试&lt;/li&gt;
&lt;li&gt;连接到达对方服务，对方服务故障，无法处理请求，可以安全重试&lt;/li&gt;
&lt;li&gt;连接到达对方服务，对方处理了请求，看情况重试:&lt;ul&gt;
&lt;li&gt;虽然处理了请求，但是响应信息提示请求的参数有问题，无需重试，因为是我们自己代码的问题，重试也是一样的结果&lt;/li&gt;
&lt;li&gt;对方处理请求时间过长导致超时，根据实际情况，酌情重试&lt;/li&gt;
&lt;li&gt;操作是幂等的，可以安全重试&lt;/li&gt;
&lt;li&gt;其他场景，主要是要考虑重试是否会产生非预期的副作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重试的时候所使用的重试策略也需要精心考虑，不能无脑重试、无限重试：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;限制重试次数，增加重试间隔&lt;/li&gt;
&lt;li&gt;重试间隔一般不要是固定间隔，间隔时间可以是指数递增，也可以加上在一定区间内波动的随机数，
防止出现雪崩效应，打垮对方服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于重试及重试策略可以参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/transient-faults"&gt;Retry general guidance | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="circuit-breaker"&gt;
&lt;h2 id="hidcircuit-breaker"&gt;熔断/断路器（Circuit Breaker）&lt;a class="headerlink" href="#hidcircuit-breaker" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了处理调用远程服务短时间内失败率很高或者总是失败的场景，程序可以考虑实现自动熔断/断路器的功能。
即：如果发现失败率比较高的时候，自动在后续一段时间内逐步减少对对方服务的调用
（限制请求，对部分操作直接报错不访问远程服务），
当发现成功率上去后逐步放开限制直至恢复正常访问。&lt;/p&gt;
&lt;p&gt;关于熔断/断路器可以参考：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker"&gt;Circuit Breaker | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/cloud/garage/content/manage/practice_circuit_breaker_pattern/"&gt;Preventing system failure with the Circuit Breaker pattern - IBM Cloud Garage Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;降级&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的熔断是调用方程序实现在失败率很高时减少请求数，降级的话就是可以外部介入程序的功能。
比如当通过监控发现调用远程服务故障率特别高，或者收到通知对方服务在某个时间不可用，
可以直接降级到这个功能，彻底不发送任何请求。&lt;/p&gt;
&lt;p&gt;比如，我们有个服务同时支持微信支付收款和支付宝支付收款，当发现微信支付大面积故障的时候，
可以人工/第三方程序自动降级掉程序里的微信支付功能，此时用户付款的时候就只会看到一个支付宝支付的功能，
微信支付的功能会被临时下掉。&lt;/p&gt;
&lt;p&gt;关于降级的另一种应用是: fallback，即：调用主服务失败时，改为调用备用服务。
比如上传图片，平时都把图片上传到阿里云 oss，这次调用是发现 oss 故障，然后程序就尝试改为
调用腾讯云 cos，把图片上传到 cos。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;日志&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当程序正常运行或出现故障时我们可能都需要借助日志来提供有用的信息。&lt;/p&gt;
&lt;p&gt;比如当调用远程服务故障时，可能需要记录一些有用的信息:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;调用的服务信息，比如请求的 url、ip、端口之类的&lt;/li&gt;
&lt;li&gt;请求参数，可以用于复现或 debug 的相关请求参数&lt;/li&gt;
&lt;li&gt;失败原因，比如异常信息，根据需要区分不同的异常&lt;/li&gt;
&lt;li&gt;如果有响应返回的话，响应中包含的有用信息，比如 http 响应码、http response 中的有用信息等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当时在记日志的时候也需要注意一些问题：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;日志数量问题，有些场景下日志量太大会影响程序性能，不要随意记无用的日志&lt;/li&gt;
&lt;li&gt;不要记录敏感数据，记得对日志内容脱密，比如：不要记密码、token 等敏感信息&lt;/li&gt;
&lt;li&gt;单条日志大小问题，需要考虑控制单条日志大小，比如上面说的 http response 之类的无法预料到大小的信息
需要考虑对大的信息进行截断处理或者干脆不记录（比如调用上传文件接口之类的不记录文件内容）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;异常处理&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;调用失败时往往伴随着各种异常，比如上面的超时的功能，一般超时的时候都会以异常的方式体现。&lt;/p&gt;
&lt;p&gt;对于调用时出现的各种异常要根据实际情况进行区别，对不同的异常采取不同的措施：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;判断异常是系统异常还是用户异常，针对不同的异常可能需要不同的处理方法&lt;/li&gt;
&lt;li&gt;判断异常是否是表示特定功能的某种状态的异常，比如上面的超时/重试/熔断 之类的功能
都会有特定的异常用来对应某种状态&lt;/li&gt;
&lt;li&gt;判断异常是否是可重试解决的异常&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;慎重考虑忽略异常的情况，不要一股脑的忽略所有异常同时还不记日志
（将来进行 debug 的人会喷死你，这个人还有可能会是你自己）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;监控&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过监控我们可以掌握程序的各种运行指标/状况，这样就可以及时/提前发现问题。&lt;/p&gt;
&lt;p&gt;常见的针对远程调用的监控指标如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;响应时间&lt;/li&gt;
&lt;li&gt;调用失败计数&lt;/li&gt;
&lt;li&gt;特定错误计数&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2 id="hidid9"&gt;告警&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;虽然有了监控数据，但是我们不可能 24 小时不眠不休的盯着监控数据，此时就需要有告警程序来帮助我们
自动发现可能的异常和已经出现的问题。&lt;/p&gt;
&lt;p&gt;这样即可以及时发现问题也可以解放生产力， 在没有异常的时候去做更有创造力的事情。&lt;/p&gt;
&lt;p&gt;根据告警数据的不同有一些常见的针对远程调用的告警：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;响应时间阈值告警&lt;/li&gt;
&lt;li&gt;一段时间内特定错误/失败数告警&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2 id="hidid10"&gt;连接池&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;补充一个忘了说的一项，那就是连接池。少量的远程调用可能不需要关心连接池的事情，如果
是大量调用某个服务的话，就需要使用连接池技术了，如果不用连接池的话，
一方面新建连接需要时间另一方面服务端维护大量连接也需要消耗资源。&lt;/p&gt;
&lt;p&gt;使用连接池既可以通过复用已有的连接来加快调用时间，也可以节省服务端的资源防止资源浪费。&lt;/p&gt;
&lt;p&gt;一般常见的应用层协议的通用客户端库都实现了连接池，所以很少需要去操心实现连接池的问题，
但是如果你用的客户端库没有实现连接池功能的话，
就需要考虑实现连接池功能或者使用其他支持连接池的客户端库。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2 id="hidid11"&gt;总结&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文罗列了一些编写调用远程服务相关代码时需要注意的一下注意事项。&lt;/p&gt;
&lt;p&gt;其中有几个功能在进行远程调用时建议最好都实现，就算是写一个临时 debug 或
临时运维用的小脚本也要考虑实现这几个功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;超时：必需要实现/配置合适的超时时间&lt;/li&gt;
&lt;li&gt;重试：酌情重试，不是说一定要重新发送请求，而是说要对某些可以重试的异常进行重试处理&lt;/li&gt;
&lt;li&gt;异常处理：酌情处理，如果程序中会多次进行远程调用的话，就必须要考虑异常处理，
至少要防止因为异常导致的非预期的程序提前退出&lt;/li&gt;
&lt;li&gt;日志：最好是有，就算是用 &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; 代替也好过没有记录任何信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于是否实现 熔断/降级/监控/告警 需要看实际情况：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;临时的/一次性的运维脚本之类的可能就没必要实现了&lt;/li&gt;
&lt;li&gt;基础设施不完善或者没有对应的基础设施的话，实现这些功能可能就不适合了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欢迎大家在评论里一起讨论/补充其他的注意事项。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2 id="hidid12"&gt;参考资料&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/transient-faults"&gt;Retry general guidance | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker"&gt;Circuit Breaker | Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/cloud/garage/content/manage/practice_circuit_breaker_pattern/"&gt;Preventing system failure with the Circuit Breaker pattern - IBM Cloud Garage Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pragprog.com/book/mnee2/release-it-second-edition"&gt;Release It! Second Edition: Design and Deploy Production-Ready Software by Michael Nygard | The Pragmatic Bookshelf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2018-08-16:2018/08/call-remote-service-checklist.html</guid><category>checklist</category><category>client</category></item><item><title>Bash Shell 常用语法和操作</title><link>https://mozillazg.com/2018/08/linux-bash-shell-script-cookbook.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;变量&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;变量名=值&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;数组&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="range"&gt;
&lt;h3 id="hidrange"&gt;range&lt;a class="headerlink" href="#hidrange" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;start..end..step&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 输出 1 2 3&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; value in &lt;span class="o"&gt;{&lt;/span&gt;1..3&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c1"&gt;# 输出 1 3 5&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; value in &lt;span class="o"&gt;{&lt;/span&gt;1..6..2&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if"&gt;
&lt;h2 id="hidif"&gt;if&lt;a class="headerlink" href="#hidif" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;if 语句的语法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &amp;lt;different commands&amp;gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &amp;lt;other commands&amp;gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -gt &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;you are &lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt; 18&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -eq &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;you are &lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt; == 18&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;you are &lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt; 18&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;常用的条件判断&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="38%" /&gt;
&lt;col width="63%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;条件表达式&lt;/th&gt;
&lt;th class="head"&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;! 表达式&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-n 字符串&lt;/td&gt;
&lt;td&gt;字符串长度大于 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-z 字符串&lt;/td&gt;
&lt;td&gt;字符串长度等于 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A = B&lt;/td&gt;
&lt;td&gt;字符串 A B 相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A != B&lt;/td&gt;
&lt;td&gt;字符串 A B 不相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;m -eq n&lt;/td&gt;
&lt;td&gt;数字 m n 相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;m -gt n&lt;/td&gt;
&lt;td&gt;数字 m 大于 n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;m -lt n&lt;/td&gt;
&lt;td&gt;数字 m 小于 n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-d 路径&lt;/td&gt;
&lt;td&gt;文件路径存在，并且是个目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-e 路径&lt;/td&gt;
&lt;td&gt;文件存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-s 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且大小大于 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-r 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且拥有读权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-w 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且拥有写权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-x 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且拥有执行权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;[]&lt;/tt&gt; 实际调用的是 &lt;tt class="docutils literal"&gt;test&lt;/tt&gt; 命令，我们可以用 &lt;tt class="docutils literal"&gt;test&lt;/tt&gt; 命令来测试条件表达式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 18
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
1
$ &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; -eq 1
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以及可以用 &lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;||&lt;/tt&gt; 组合判断多个条件表达式，实现 and 和 or 的功能&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case-switch-case"&gt;
&lt;h2 id="hidcase-switch-case"&gt;case(switch case)&lt;a class="headerlink" href="#hidcase-switch-case" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &amp;lt;variable&amp;gt; in
&amp;lt;pattern 1&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &amp;lt;commands&amp;gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&amp;lt;pattern 2&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &amp;lt;other commands&amp;gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; in
start&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; starting
    &lt;span class="p"&gt;;;&lt;/span&gt;
stop&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; stoping
    &lt;span class="p"&gt;;;&lt;/span&gt;
restart&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; restarting
    &lt;span class="p"&gt;;;&lt;/span&gt;
*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; don&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;t know
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="for"&gt;
&lt;h2 id="hidfor"&gt;for&lt;a class="headerlink" href="#hidfor" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; var in &amp;lt;list&amp;gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 也支持 &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;continue&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tom jim jake&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; name in &lt;span class="nv"&gt;$names&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; age in &lt;span class="o"&gt;{&lt;/span&gt;1..10&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$age&lt;/span&gt; -eq &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$age&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$age&lt;/span&gt; -gt &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="while"&gt;
&lt;h2 id="hidwhile"&gt;while&lt;a class="headerlink" href="#hidwhile" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt; -le &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;total++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="until"&gt;
&lt;h2 id="hiduntil"&gt;until&lt;a class="headerlink" href="#hiduntil" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt; -gt &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;total++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="select"&gt;
&lt;h2 id="hidselect"&gt;select 单项选择&lt;a class="headerlink" href="#hidselect" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;选择功能一般用 case 语法用的多，不过 select 也可以实现，
select 的功能类似 while + case，比较适合反复询问用户选择项直到用户选择了输入了合法的选择项。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; var in &amp;lt;list&amp;gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
    &lt;span class="o"&gt;[&lt;/span&gt;break&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以用 break 跳出 select 以及可以通过修改 PS3 变量的值修改提示内容。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PS3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;please choice: &amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt; value in &lt;span class="o"&gt;{&lt;/span&gt;1..5&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; -gt &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;函数&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function_name &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# or&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; function_name &lt;span class="o"&gt;{&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;参数&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在函数体内可以通过 $1, $2, $3, ... 获取调用时传入的位置参数&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3 id="hidid6"&gt;返回值&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不支持返回值功能，不过可以用 return x 指定一个状态吗:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; 3
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;   &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3 id="hidid7"&gt;变量作用域&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认函数类的变量是全局变量，可以通过 local 定义局部变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;

    &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;233&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;666&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;, &lt;span class="nv"&gt;$b&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;global&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;创建跟外部命令同名的函数&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; ls &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; ls -lh
&lt;span class="o"&gt;}&lt;/span&gt;

ls
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要是不要忘了加 command，不加的话，上面的 ls 会无限递归不会按预期的调用 ls 命令。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2 id="hidid9"&gt;字符串操作&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3 id="hidid10"&gt;字符串替换&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4 id="hidid11"&gt;替换子串&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello_world&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/_/-&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
hello-world
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/world/bar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
hello_bar
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4 id="hidid12"&gt;删除前缀&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foofoo_bar_foofoo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;#foo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foo_bar_foofoo
$ &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;$prefix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foo_bar_foofoo
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4 id="hidid13"&gt;删除后缀&lt;a class="headerlink" href="#hidid13" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foofoo_bar_foofoo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;%foo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foofoo_bar_foo
$ &lt;span class="nv"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;$suffix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foofoo_bar_foo
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3 id="hidid14"&gt;打印字符串&lt;a class="headerlink" href="#hidid14" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;推荐使用 &lt;tt class="docutils literal"&gt;printf&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world\\n&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello %s\\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;echo&lt;/tt&gt; 也可以：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h2 id="hidid15"&gt;文件操作&lt;a class="headerlink" href="#hidid15" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3 id="hidid16"&gt;保存大段文本&lt;a class="headerlink" href="#hidid16" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;tee&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tee test.text &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;hello&lt;/span&gt;
&lt;span class="s"&gt;    world&lt;/span&gt;

&lt;span class="s"&gt;!&lt;/span&gt;

&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存包含 EOF 命令的文本可以用多个 EOF 的变种:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tee a.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;tee b.text &amp;lt;&amp;lt; EOF&lt;/span&gt;2
 &lt;span class="nb"&gt;echo&lt;/span&gt; hello
EOF2
EOF


$ tee a.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; tee b.text &amp;lt;&amp;lt; EOF&lt;/span&gt;2
&amp;gt; &lt;span class="nb"&gt;echo&lt;/span&gt; hello
&amp;gt; EOF2
&amp;gt; EOF
tee b.text &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF2&lt;/span&gt;
&lt;span class="s"&gt;echo hello&lt;/span&gt;
&lt;span class="s"&gt;EOF2&lt;/span&gt;

$ cat a.sh
tee b.text &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF2&lt;/span&gt;
&lt;span class="s"&gt;echo hello&lt;/span&gt;
&lt;span class="s"&gt;EOF2&lt;/span&gt;

$ bash a.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; hello

$ cat b.text
&lt;span class="nb"&gt;echo&lt;/span&gt; hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;append 更新可以使用 &lt;tt class="docutils literal"&gt;tee &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2 id="hidid17"&gt;其他实用功能&lt;a class="headerlink" href="#hidid17" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="cd"&gt;
&lt;h3&gt;隔离 &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; 命令的干扰&lt;/h3&gt;
&lt;p&gt;可以用括号来隔离:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pwd=/tmp&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; test/
    ls   &lt;span class="c1"&gt;# pwd = /tmp/test/&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# pwd=/tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3 id="hidid18"&gt;设置功能标志&lt;a class="headerlink" href="#hidid18" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一般会在脚本中设置如下标志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -euo pipefail
&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$&amp;#39;\n\t&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的功能标志如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;运行的时候显示执行到那一条语句了: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -x

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash a.sh
+ &lt;span class="nb"&gt;echo&lt;/span&gt; hello
hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;bash &lt;span class="pre"&gt;-x&lt;/span&gt; xx.sh&lt;/tt&gt; 也可以实现同样的效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash -x a.sh
+ &lt;span class="nb"&gt;echo&lt;/span&gt; hello
hello
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;有任何命令的退出码不是 0 就退出: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-e&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
abc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 1: abc: &lt;span class="nb"&gt;command&lt;/span&gt; not found
hello

$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -e
abc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 2: abc: &lt;span class="nb"&gt;command&lt;/span&gt; not found
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;bash &lt;span class="pre"&gt;-e&lt;/span&gt; xx.sh&lt;/tt&gt; 也可以实现同样的效果。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;引用未定义的变量时出错并退出: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-u&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$abc&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello

$ bash a.sh

hello

$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -u
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$abc&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello

$ bash a.sh
a.sh: line 2: abc: unbound variable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;bash &lt;span class="pre"&gt;-u&lt;/span&gt; xx.sh&lt;/tt&gt; 也可以实现同样的效果。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;管道命令中有一个命令失败整个管道操作的退出码将是失败的那个命令的退出码,
未设置这个标志时是最后一个操作的退出码: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-o&lt;/span&gt; pipefail&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
la la la &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 1: la: &lt;span class="nb"&gt;command&lt;/span&gt; not found
aa

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0

$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -o pipefail
la la la &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 2: la: &lt;span class="nb"&gt;command&lt;/span&gt; not found
aa

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
127
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;设置单词切分使用的分隔符，默认是 &lt;tt class="docutils literal"&gt;$' \n\t'&lt;/tt&gt; （空格、换行、制表符），
可以通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;IFS=$'\n\t'&lt;/span&gt;&lt;/tt&gt; 设置为换行和制表符:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foo bar&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foobar tom&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

$ bash a.sh
foo
bar
foobar
tom

$ cat a.sh
&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foo bar&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foobar tom&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$&amp;#39;\n\t&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

$ bash a.sh
foo bar
foobar tom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多的 set 支持的标志可以查看 &lt;a class="reference external" href="https://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin"&gt;Bash Reference Manual&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h2 id="hidid19"&gt;参考资料&lt;a class="headerlink" href="#hidid19" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php"&gt;If Statements - Bash Scripting Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ryanstutorials.net/bash-scripting-tutorial/bash-loops.php"&gt;Loops - Bash Scripting Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin"&gt;Bash Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://redsymbol.net/articles/unofficial-bash-strict-mode/"&gt;Use the Unofficial Bash Strict Mode (Unless You Looove Debugging)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2018-08-12:2018/08/linux-bash-shell-script-cookbook.html</guid><category>bash</category><category>shell</category></item><item><title>Python: 调试运行中进程的几种方法（总结）</title><link>https://mozillazg.com/2018/07/python-some-ways-to-debug-running-process.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;之前写了几篇关于调试运行中进程方法的文章，本文总结一下常用的几种调试方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;需要修改代码的方法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="print-logging"&gt;
&lt;h3 id="hidprint-logging"&gt;print/logging&lt;a class="headerlink" href="#hidprint-logging" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最常用的方法是查看程序运行日志。这种方法适合可以通过日志分析出问题的常见，也是诊断问题的首选方法。&lt;/p&gt;
&lt;p&gt;这种方法需要预先在合适位置记录有用的日志信息，如果出问题时没有相关的日志信息的话，这种方法就会比较难以诊断问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;预置调试后门（接口）&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这种方法通过预先在程序里置入用于调试的后门（接口），方便在诊断问题时提供查看问题现场，甚至进入程序运行时环境的的手段。&lt;/p&gt;
&lt;p&gt;常用的预置功能有：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;提供一种方法可以获取当前程序的 stack traceback 信息&lt;/li&gt;
&lt;li&gt;提供一种行可以获取当前程序运行时关键变量/状态&lt;/li&gt;
&lt;li&gt;提供一种方法可以进入当前程序运行时，方便在程序运行时环境中执行调试代码&lt;/li&gt;
&lt;li&gt;提供一种方法可以触发特定功能或者运行特定代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;无需修改代码的方法&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="ps-proc"&gt;
&lt;h3 id="hidps-proc"&gt;ps/proc&lt;a class="headerlink" href="#hidps-proc" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过 ps 可以查看指定进程的各种信息，通过查看 /proc/&amp;lt;pid&amp;gt;/ 目录下的系统文件也可以查看指定进程的各种信息。&lt;/p&gt;
&lt;p&gt;比如：通过 ps 可以查看进程是否是僵尸进程、是否是孤儿进程，查看进程的启动时间、了解进程是否发生过重启等。
通过查看 /proc/&amp;lt;pid&amp;gt;/ 目录下的各种系统文件可以获取进程的环境变量信息、 stack 信息、内存信息等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strace"&gt;
&lt;h3 id="hidstrace"&gt;strace&lt;a class="headerlink" href="#hidstrace" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;通过 strace 程序可以查看程序正在调用的系统调用。可以用 strace 在系统调用层面查看程序正在进行的操作，
比如可以查看程序是否死锁、是否正在处理 socket 请求，正在处理文件等。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gdb-python"&gt;
&lt;h3 id="hidgdb-python"&gt;gdb-python&lt;a class="headerlink" href="#hidgdb-python" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用 gdb-python 可以通过在 gdb 中执行几个命令就可以查看程序正在执行的代码等信息。&lt;/p&gt;
&lt;p&gt;不过，使用 gdb-python 需要预先安装包含调试符号的 debug 版本的 python 解释器，并使用该 debug 版本的 python 执行程序，算是一个比较大的限制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gdb"&gt;
&lt;h3 id="hidgdb"&gt;纯 gdb&lt;a class="headerlink" href="#hidgdb" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的纯 gdb 方法就是只需要安装 gdb 就可以了，不需要安装带调试符号版本的 debug python 就可以调试 python 进程。&lt;/p&gt;
&lt;p&gt;方法是使用 gdb 的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-eval-command&lt;/span&gt;&lt;/tt&gt; &lt;a class="footnote-reference" href="#id10" id="id5"&gt;[1]&lt;/a&gt; 参数对进程执行包含了调试代码的 gdb 命令，实现在进程运行时环境中执行调试代码的目的。&lt;/p&gt;
&lt;p&gt;pystack &lt;a class="footnote-reference" href="#id11" id="id6"&gt;[2]&lt;/a&gt; 和 pyrasite &lt;a class="footnote-reference" href="#id12" id="id7"&gt;[3]&lt;/a&gt; 这两个调试工具就是利用的这种方法实现的无需修改代码即可调试进程的功能。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;总结&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文总结了几种调试运行中进程的方法，每种方法都有一定的局限性，实际诊断问题的时候往往要综合几种方法最终才有可能发现真正的问题所在。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2 id="hidid9"&gt;参考资料&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/logging.html#module-logging"&gt;16.6. logging — Logging facility for Python — Python 3.7.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2017/12/python-debug-running-process-threading-gevent-eventlet-asyncio-via-preset-backdoor.html"&gt;Python: 通过预置后门（调试接口）的方式调试运行中的进程 - Huang Huang 的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/ps.1.html"&gt;ps(1) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man5/proc.5.html"&gt;proc(5) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://strace.io/"&gt;strace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2017/07/debug-running-python-process-with-gdb.html"&gt;使用 gdb 调试运行中的 Python 进程 - Huang Huang 的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/wooparadog/pystack"&gt;wooparadog/pystack: Tool to dump python thread and greenlet stacks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lmacken/pyrasite"&gt;lmacken/pyrasite: Inject code into running Python processes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sourceware.org/gdb/onlinedocs/gdb/File-Options.html"&gt;Debugging with GDB: File Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://sourceware.org/gdb/onlinedocs/gdb/File-Options.html"&gt;https://sourceware.org/gdb/onlinedocs/gdb/File-Options.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/wooparadog/pystack/blob/a2f0a45419df581e0d800aa0a98b9471779de0cb/pystack.py#L42"&gt;https://github.com/wooparadog/pystack/blob/a2f0a45419df581e0d800aa0a98b9471779de0cb/pystack.py#L42&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/lmacken/pyrasite/blob/d0c90ab38a8986527c9c1f24e222323494ab17a2/pyrasite/injector.py#L36"&gt;https://github.com/lmacken/pyrasite/blob/d0c90ab38a8986527c9c1f24e222323494ab17a2/pyrasite/injector.py#L36&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2018-07-15:2018/07/python-some-ways-to-debug-running-process.html</guid><category>debug</category></item><item><title>通过临时文件实现安全的/原子性的更新文件</title><link>https://mozillazg.com/2018/05/a-way-to-atomic-write-or-safe-update-a-file.html</link><description>&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;所谓的原子性更新文件指的是要么更新成功，要么更新失败，不能有中间状态，不能出现更新到一半失败了的情况。&lt;/p&gt;
&lt;p&gt;想像一下，当更新文件的时候程序中途崩溃了或者被终止了出现文件更新不完整的情况或在更新的时候有另一个程序正好在读取该文件，此时就会出现非预期的情况：读取程序读取到了脏数据，同时原来的旧数据也丢失了。所以我们在更新一些比较重要的文件时要考虑实现原子性的更新。下面就来讲一下一种实现原子性更新文件的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;借助临时文件实现原子性更新文件&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比较常见的实现原子性更新文件的方法是借助临时文件来实现：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;把新数据写入到一个临时文件中&lt;/li&gt;
&lt;li&gt;确保内容已经全部写入到磁盘上&lt;/li&gt;
&lt;li&gt;用临时文件替换原来的文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;伪代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orig_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orig_file_dir_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orig_file_dir_fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;使用第三方模块来实现&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;实现这个功能的第三方 Python 模块还是有一些的，我目前使用的是 &lt;a class="reference external" href="https://github.com/untitaker/python-atomicwrites"&gt;https://github.com/untitaker/python-atomicwrites&lt;/a&gt; 这个模块:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install atomicwrites
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;atomicwrites&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;atomic_write&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;atomic_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;overwrite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他的模块可以在 &lt;a class="reference external" href="https://github.com"&gt;https://github.com&lt;/a&gt; 或 &lt;a class="reference external" href="https://pypi.org"&gt;https://pypi.org&lt;/a&gt; 上搜索 &lt;tt class="docutils literal"&gt;atomic file&lt;/tt&gt; 。然后看一下搜索出来的项目的代码，看看有没有实现上面的流程，以及一些细节的功能是否满足你的实际需求，以此来判断是使用该模块。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;局限性&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这种方法也有一定的局限性，常见的问题如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;有些文件系统不支持 &lt;tt class="docutils literal"&gt;fsync(file_fd)&lt;/tt&gt; 操作&lt;/li&gt;
&lt;li&gt;有些文件系统不支持 &lt;tt class="docutils literal"&gt;fsync(dir_fd)&lt;/tt&gt; 操作&lt;/li&gt;
&lt;li&gt;windows/mac 可能不支持这些操作，需要找额外替代的方法去实现类似的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;问题&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;同时这种方法还有一些缺陷：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;fsync&lt;/tt&gt; 操作在某些场景下有性能问题比不加 &lt;tt class="docutils literal"&gt;fsync&lt;/tt&gt; 操作会慢很多，比如需要在短时间内更新大量文件的时候
（最近测试有个程序一个操作周期需要更新 900 多个文件，没加 &lt;tt class="docutils literal"&gt;fsync&lt;/tt&gt;
比加了 &lt;tt class="docutils literal"&gt;fsync&lt;/tt&gt; 的程序快了将近 8 倍）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果速度是不可妥协的需求并且可以接受一定概率下文件内容不完整的情况的话（可以再在文件内容中增加校验信息，或者在其他地方保存这个校验信息，读取文件内容的时候通过校验信息来检查文件的完整信息，读取到不完整的文件时直接抛异常），可以考虑省略 &lt;tt class="docutils literal"&gt;fsync&lt;/tt&gt; ，
但是如果文件不完整是绝对不可接受的情况的话，那就绝对不要省略 &lt;tt class="docutils literal"&gt;fsync&lt;/tt&gt; &lt;a class="footnote-reference" href="#id10" id="id7"&gt;[1]&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;总结&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文讲了一种常用的使用临时文件来实现原子性/安全更新文件的方法，希望能对你有所帮忙。
如果有其他更好的方法欢迎留言交流。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2 id="hidid9"&gt;参考资料&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/fsync.2.html"&gt;fsync(2) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.quora.com/When-should-you-fsync-the-containing-directory-in-addition-to-the-file-itself"&gt;When should you fsync the containing directory in addition to the file itself? - Quora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/borgbackup/borg/issues/1060"&gt;Use atomic file writing and updating for configuration and key files · Issue #1060 · borgbackup/borg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://thunk.org/tytso/blog/2009/03/15/dont-fear-the-fsync/"&gt;Don't fear the fsync! | Theodore Ts'o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.valerieaurora.org/2009/04/16/dont-panic-fsync-ext34-and-your-data/"&gt;Don’t Panic – fsync(), ext3/4, and your data – Valerie Aurora's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://lwn.net/Articles/323169/"&gt;Ts'o: Delayed allocation and the zero-length file problem [LWN.net]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.gocept.com/2013/07/15/reliable-file-updates-with-python/"&gt;Reliable file updates with Python – gocept blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/"&gt;Everything You Always Wanted To Know About fsync() - xavier roche's homework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/untitaker/python-atomicwrites/issues/17"&gt;Option to disable fsync · Issue #17 · untitaker/python-atomicwrites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/google/leveldb/issues/195"&gt;Possible bug: fsync() required after calling rename() · Issue #195 · google/leveldb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/filesystems/ext4.txt"&gt;kernel.org/doc/Documentation/filesystems/ext4.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/7433057/is-rename-without-fsync-safe"&gt;linux - Is rename() without fsync() safe? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://dream.thunk.org/tytso/blog/2009/03/12/delayed-allocation-and-the-zero-length-file-problem/"&gt;Delayed allocation and the zero-length file problem | Theodore Ts'o&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2018-05-06:2018/05/a-way-to-atomic-write-or-safe-update-a-file.html</guid><category>atomic</category><category>fsync</category><category>file</category></item><item><title>Python: Mock 常用功能</title><link>https://mozillazg.com/2018/03/python-introduction-mock-unit-test-examples-cookbook.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
unittest.mock is a library for testing in Python. It allows you to replace parts of your system under test with mock objects and make assertions about how they have been used.&lt;/blockquote&gt;
&lt;p&gt;Python 3.3 新增了一个可以用来在单元测试的时候进行 mock 操作的 &lt;tt class="docutils literal"&gt;unittest.mock&lt;/tt&gt; 模块。
对于 Python 3.3 之前的版本也可以通过 &lt;tt class="docutils literal"&gt;pip install mock&lt;/tt&gt; 安装拥有相同功能的移植版模块 &lt;tt class="docutils literal"&gt;mock&lt;/tt&gt; 。本文记录一些常用的 &lt;tt class="docutils literal"&gt;unittest.mock&lt;/tt&gt; 模块的用法，理论上同样也适用于 &lt;tt class="docutils literal"&gt;mock&lt;/tt&gt; 这个第三方模块（注：本文例子是在 Python 3.6 下测试的）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;常见用法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;定义返回值&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# mock = MagicMock()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# mock.return_value = 3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;定义变化的返回值&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; mock = MagicMock()&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; mock.side_effect = [1, 2, 3]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;939&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_mock_self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_mock_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;998&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_mock_call&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;StopIteration&lt;/span&gt;


&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;side_effect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;定义抛出异常&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;939&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__call__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_mock_self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_mock_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;995&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_mock_call&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;effect&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock"&gt;
&lt;h3 id="hidmock"&gt;mock 变量/属性&lt;a class="headerlink" href="#hidmock" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;example.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooBar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FooBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;fb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FooBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372854824&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock.test&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372854768&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;example&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lalala&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lalala&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;666&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock-dict"&gt;
&lt;h3 id="hidmock-dict"&gt;mock dict&lt;a class="headerlink" href="#hidmock-dict" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;666&lt;/span&gt;
&lt;span class="mi"&gt;222&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;666&lt;/span&gt;
&lt;span class="mi"&gt;222&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3 id="hidid6"&gt;mock 函数&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;example&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autospec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;666&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autospec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;171&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;checksig&lt;/span&gt;
    &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/inspect.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2934&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/inspect.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2855&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bind&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;too many positional arguments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;too&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="n"&gt;positional&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;autospec=True&lt;/tt&gt; 可以保证 mock 后的对象拥有跟原来一样的函数签名。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3 id="hidid7"&gt;mock 方法&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example.FooBar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mocked_cls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mocked_hello_method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;mocked_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;mocked_hello_method&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock-property"&gt;
&lt;h3 id="hidmock-property"&gt;mock &amp;#64;property 装饰的方法&lt;a class="headerlink" href="#hidmock-property" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;PropertyMock&lt;/tt&gt; mock &lt;tt class="docutils literal"&gt;&amp;#64;property&lt;/tt&gt; 装饰的方法以及描述符。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nd"&gt;@property&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bar&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nd"&gt;@bar.setter&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="mi"&gt;666&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__.Foo.bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_callable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PropertyMock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;mock_bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mocked_bar&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;266&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;mocked_bar&lt;/span&gt;
&lt;span class="n"&gt;mocked_bar&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock_bar&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PropertyMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4373101536&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock_bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;266&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;mock 内置函数&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;test.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;233&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;233&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;233&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;233&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to_str&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock-open"&gt;
&lt;h3 id="hidmock-open"&gt;mock open 函数&lt;a class="headerlink" href="#hidmock-open" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;read:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mocked data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__.open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;mocked&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;builtin_function_or_method&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4369854192&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
 &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
 &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock_open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__.open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;write data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
 &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;write data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;write data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mock-isinstance"&gt;
&lt;h3 id="hidmock-isinstance"&gt;mock isinstance&lt;a class="headerlink" href="#hidmock-isinstance" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以用 &lt;tt class="docutils literal"&gt;__class__&lt;/tt&gt; 属性来通过 mock 对象的 isinstance 检查:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;mock 真值判断&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过 mock &lt;tt class="docutils literal"&gt;__bool__&lt;/tt&gt; 方法（Python 3） 或 &lt;tt class="docutils literal"&gt;__nonzero__&lt;/tt&gt; 方法(Python 2) 来 mock 对对象的真值判断:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__bool__&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;false&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;false&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3 id="hidid10"&gt;mock 特殊属性&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所谓的特殊属性就是 &lt;tt class="docutils literal"&gt;Mock&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;MagicMock&lt;/tt&gt; 对象自带的属性（自带一些可选参数 &lt;a class="footnote-reference" href="#id19" id="id11"&gt;[1]&lt;/a&gt; ），
比如 &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; ， 如果我们要 mock 的对象也有一个 &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; 属性的话，
通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;MagicMock(name='foo')&lt;/span&gt;&lt;/tt&gt; 是无法 mock &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; 这个属性的，
可以用下面两种方法实现 mock 特殊属性:&lt;/p&gt;
&lt;p&gt;覆盖 mock 对象的属性:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo.name&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372898816&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;configure_mock&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock.name&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4373042848&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3 id="hidid12"&gt;自动撤销 mock&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;patch&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;patch.object&lt;/tt&gt; 都支持通过 with 语句或者装饰器可以实现
只在指定函数/方法/块中应用 mock ，函数/方法/块结束后自动撤销 mock&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1179&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;patched&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;keywargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h2 id="hidid13"&gt;常用检查方法&lt;a class="headerlink" href="#hidid13" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;mock 的对象拥有一些可以用于单元测试的检查方法，可以用来测试 mock 对象的调用情况。&lt;/p&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3 id="hidid14"&gt;检查调用次数&lt;a class="headerlink" href="#hidid14" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;待检查的 mock 对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372904760&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372904760&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372904760&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.called&lt;/tt&gt;: 是否被调用过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.call_count&lt;/tt&gt;: 获取调用次数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.assert_called()&lt;/tt&gt;: 检查是否被调用过，如果没有被调用过，则会抛出 &lt;tt class="docutils literal"&gt;AssertionError&lt;/tt&gt; 异常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.assert_called_once()&lt;/tt&gt;: 确保调用过一次，如果没调用或多于一次，则抛出 &lt;tt class="docutils literal"&gt;AssertionError&lt;/tt&gt; 异常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;795&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assert_called_once&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expected&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mock&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Called&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.assert_not_called()&lt;/tt&gt;: 确保没被调用过，否则抛出 &lt;tt class="docutils literal"&gt;AssertionError&lt;/tt&gt; 异常&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_not_called&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;777&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assert_not_called&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expected&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mock&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Called&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3 id="hidid15"&gt;检查调用时使用的参数&lt;a class="headerlink" href="#hidid15" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;待检查的 mock 对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372980792&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.call_args&lt;/tt&gt;: 最后一次调用时使用的参数，未调用则返回 &lt;tt class="docutils literal"&gt;None&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args&lt;/span&gt;
&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.assert_called_once_with(*args,&lt;/span&gt; **kwargs)&lt;/tt&gt;: 确保只调用过一次，并且使用特定参数调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372980792&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;824&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expected&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mock&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Called&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.assert_any_call(*args,&lt;/span&gt; **kwargs)&lt;/tt&gt;: 检查某次用特定参数进行过调用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_any_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.assert_called_with(*args,&lt;/span&gt; **kwargs)&lt;/tt&gt;: 检查最后一次调用时使用的参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;814&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assert_called_with&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_error_message&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cause&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Expected&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Actual&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.call_args_list&lt;/tt&gt;: 所有调用时使用的参数列表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372980792&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.assert_has_calls(calls, any_order=False)&lt;/tt&gt;: 检查某几次调用时使用的参数，
如果 &lt;tt class="docutils literal"&gt;any_order&lt;/tt&gt; 为 &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; 时必须是挨着的调用顺序，可以是中间的几次调用，
为 &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; 时 &lt;tt class="docutils literal"&gt;calls&lt;/tt&gt; 中的记录可以是无序的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest.mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_has_calls&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_has_calls&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/unittest/mock.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;846&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assert_has_calls&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cause&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Calls&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;Actual&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_has_calls&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;any_order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.method_calls&lt;/tt&gt;: mock 对象的方法调用记录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mock.test_method()&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4372935456&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method_calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.mock_calls&lt;/tt&gt;: 记录 mock 对象的所有调用，包含方法、magic method 以及返回值 mock&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3 id="hidid16"&gt;手动重置 mock 调用记录&lt;a class="headerlink" href="#hidid16" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;.reset_mock()&lt;/tt&gt; 重置 mock 对象记录的调用记录:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args_list&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mock_calls&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h2 id="hidid17"&gt;总结&lt;a class="headerlink" href="#hidid17" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文记录的是平时常用的一些 mock 相关的功能，更多内容详见 &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;官方文档&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h2 id="hidid18"&gt;参考资料&lt;a class="headerlink" href="#hidid18" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;26.5. unittest.mock — mock object library — Python 3.6.4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id19" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id11"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock"&gt;26.5. unittest.mock — mock object library — Python 3.6.4 documentation&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2018-03-04:2018/03/python-introduction-mock-unit-test-examples-cookbook.html</guid><category>unittest</category><category>mock</category></item><item><title>jq 常用操作</title><link>https://mozillazg.com/2018/01/jq-use-examples-cookbook.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; 是个非常强大的处理 JSON 数据的命令行工具。这里记录一下最近使用 jq 所使用的一些操作，方便以后使用的时候直接参考。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;基本操作&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;jq 的命令行使用方法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jq -h
jq - commandline JSON processor &lt;span class="o"&gt;[&lt;/span&gt;version 1.5&lt;span class="o"&gt;]&lt;/span&gt;
Usage: jq &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &amp;lt;jq filter&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;file...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本文主要讲的是常用的 &amp;lt;jq filter&amp;gt;。&lt;/p&gt;
&lt;div class="section" id="json"&gt;
&lt;h3 id="hidjson"&gt;输出原始的 JSON 数据&lt;a class="headerlink" href="#hidjson" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认不指定 filter 就会原样输出，也可以使用 &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; 过滤器&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play 在线运行链接：&lt;a class="reference external" href="https://jqplay.org/s/KhRuUFCP2h"&gt;https://jqplay.org/s/KhRuUFCP2h&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="object"&gt;
&lt;h3 id="hidobject"&gt;object 操作&lt;a class="headerlink" href="#hidobject" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="key"&gt;
&lt;h4 id="hidkey"&gt;获取某个 key 的值&lt;a class="headerlink" href="#hidkey" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.key&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.foo.bar&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.[&amp;quot;key&amp;quot;]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .url
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[&amp;quot;url&amp;quot;]&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Tn7NUbP4Dr"&gt;https://jqplay.org/s/Tn7NUbP4Dr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以在后面加个问号表示当输入不是 object 时不会报错 &lt;tt class="docutils literal"&gt;.key?&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.a&amp;#39;&lt;/span&gt;
jq: error &lt;span class="o"&gt;(&lt;/span&gt;at &amp;lt;stdin&amp;gt;:1&lt;span class="o"&gt;)&lt;/span&gt;: Cannot index number with string &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.a?&amp;#39;&lt;/span&gt;
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;?&lt;/tt&gt; 规则适合所有正确的 filter，在 filter 最后加上 &lt;tt class="docutils literal"&gt;?&lt;/tt&gt; 可以忽略错误信息&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4 id="hidid2"&gt;所有的 key 组成的数组&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;keys&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq keys
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/_5KiPRS75r"&gt;https://jqplay.org/s/_5KiPRS75r&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="value"&gt;
&lt;h4 id="hidvalue"&gt;所有的 value&lt;a class="headerlink" href="#hidvalue" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/6HRvEND8AB"&gt;https://jqplay.org/s/6HRvEND8AB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4 id="hidid3"&gt;所有的 value 组成的数组&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[.[]]&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;[]]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/JGIX6hTt_8"&gt;https://jqplay.org/s/JGIX6hTt_8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;数组操作&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id5"&gt;
&lt;h4 id="hidid5"&gt;取出所有元素&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Y9UgK_4xxE"&gt;https://jqplay.org/s/Y9UgK_4xxE&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slice"&gt;
&lt;h4 id="hidslice"&gt;切分(slice)&lt;a class="headerlink" href="#hidslice" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.[1]&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;.[0:2]&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;jim&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;tom&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}, {&amp;quot;name&amp;quot;: &amp;quot;jim&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[&lt;/span&gt;0:2&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/seNL7hW38W"&gt;https://jqplay.org/s/seNL7hW38W&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h4 id="hidid6"&gt;操作 object 组成的数组&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;比如取出数组元素中 name 的值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq .&lt;span class="o"&gt;[]&lt;/span&gt;.name
&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/Z5qjhJnRyn"&gt;https://jqplay.org/s/Z5qjhJnRyn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以用下面会提到的管道操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.[]|.name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要将结果重新组成数组，可以这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;[]&lt;/span&gt;.name&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以使用下面会提到的 &lt;tt class="docutils literal"&gt;map&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[{&amp;quot;name&amp;quot;: &amp;quot;foo&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;bar&amp;quot;},{&amp;quot;name&amp;quot;: &amp;quot;foobar&amp;quot;}]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;map(.name)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="filter"&gt;
&lt;h3 id="hidfilter"&gt;使用多个 filter&lt;a class="headerlink" href="#hidfilter" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;,&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.url, .name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/02CPHO1ESj"&gt;https://jqplay.org/s/02CPHO1ESj&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;高级操作&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;管道&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; 实现类似管道的功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.|.url&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/L5bu1ovLr-"&gt;https://jqplay.org/s/L5bu1ovLr-&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;获取内容的长度(字符串，数组的长度)&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;length&lt;/tt&gt; 可以获取字符串或数组的长度:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.url|length&amp;#39;&lt;/span&gt;
13
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;.|length&amp;#39;&lt;/span&gt;
2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/9TqdXbe0lo"&gt;https://jqplay.org/s/9TqdXbe0lo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="map"&gt;
&lt;h3 id="hidmap"&gt;map&lt;a class="headerlink" href="#hidmap" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;map(foo)&lt;/tt&gt; 可以实现对数组的每一项进行操作，然后合并结果的功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(length)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  13,
  9
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/BjgdGsjPem"&gt;https://jqplay.org/s/BjgdGsjPem&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filter-select"&gt;
&lt;h3 id="hidfilter-select"&gt;filter(select)&lt;a class="headerlink" href="#hidfilter-select" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;select(foo)&lt;/tt&gt; 可以实现对输入项进行判断，只返回符合条件的项:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(select(.|length &amp;gt; 9))&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/8Zrwy7dDxW"&gt;https://jqplay.org/s/8Zrwy7dDxW&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3 id="hidid10"&gt;字符串插值，拼接&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;\(foo)&lt;/tt&gt; 实现字符串插值功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;&amp;quot;hi \(.name)&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;hi mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意要用双引号包围起来，表示是一个字符串。&lt;/p&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/k90JFcDqPz"&gt;https://jqplay.org/s/k90JFcDqPz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; 实现字符串拼接:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;&amp;quot;hi &amp;quot; + .name&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;hi mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if-elif-else"&gt;
&lt;h3 id="hidif-elif-else"&gt;if/elif/else&lt;a class="headerlink" href="#hidif-elif-else" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;if .. then .. elif .. then .. else .. end&lt;/tt&gt; 实现条件判断:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[0, 1, 2, 3]&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;map(if . == 0 then &amp;quot;zero&amp;quot; elif . == 1 then &amp;quot;one&amp;quot; elif . == 2 then &amp;quot;two&amp;quot; else &amp;quot;many&amp;quot; end)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;zero&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;many&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/y8WwvHISH4"&gt;https://jqplay.org/s/y8WwvHISH4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3 id="hidid11"&gt;构造 object 或数组&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt; 构造新的 object 或 数组。&lt;/p&gt;
&lt;p&gt;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;{name: .[1]}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/sccwJi75jb"&gt;https://jqplay.org/s/sccwJi75jb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数组:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;url&amp;quot;: &amp;quot;mozillazg.com&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;[.name, .url]&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jq play: &lt;a class="reference external" href="https://jqplay.org/s/LYflwM4kJM"&gt;https://jqplay.org/s/LYflwM4kJM&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;name&amp;quot;: &amp;quot;mozillazg&amp;quot;, &amp;quot;ages&amp;quot;: [1, 2]}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;{name, age: .ages[]}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;: 2
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="join"&gt;
&lt;h3 id="hidjoin"&gt;数组 join&lt;a class="headerlink" href="#hidjoin" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;join&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[&amp;quot;mozillazg.com&amp;quot;, &amp;quot;mozillazg&amp;quot;]&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.|join(&amp;quot; | &amp;quot;)&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;mozillazg.com | mozillazg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="split"&gt;
&lt;h3 id="hidsplit"&gt;字符串 split&lt;a class="headerlink" href="#hidsplit" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;split&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;mozillazg.com | mozillazg&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;jq &lt;span class="s1"&gt;&amp;#39;split(&amp;quot; | &amp;quot;)&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mozillazg.com&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多的函数和用法详见 &lt;a class="reference external" href="https://stedolan.github.io/jq/manual/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2 id="hidid12"&gt;参考资料&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://jqplay.org/"&gt;jq play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2018-01-28:2018/01/jq-use-examples-cookbook.html</guid><category>jq</category></item><item><title>tcpdump 常用操作</title><link>https://mozillazg.com/2018/01/tcpdump-common-useful-examples-cookbook.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;常用参数&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-i&lt;/span&gt; interface&lt;/tt&gt;: 设置抓取的网卡名（可以使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-i&lt;/span&gt; any&lt;/tt&gt; 抓取所有网卡的数据包）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-D&lt;/span&gt;&lt;/tt&gt;: 列出可用的网卡列表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -D
1.eth0
2.nflog &lt;span class="o"&gt;(&lt;/span&gt;Linux netfilter log &lt;span class="o"&gt;(&lt;/span&gt;NFLOG&lt;span class="o"&gt;)&lt;/span&gt; interface&lt;span class="o"&gt;)&lt;/span&gt;
3.nfqueue &lt;span class="o"&gt;(&lt;/span&gt;Linux netfilter queue &lt;span class="o"&gt;(&lt;/span&gt;NFQUEUE&lt;span class="o"&gt;)&lt;/span&gt; interface&lt;span class="o"&gt;)&lt;/span&gt;
4.usbmon1 &lt;span class="o"&gt;(&lt;/span&gt;USB bus number 1&lt;span class="o"&gt;)&lt;/span&gt;
5.any &lt;span class="o"&gt;(&lt;/span&gt;Pseudo-device that captures on all interfaces&lt;span class="o"&gt;)&lt;/span&gt;
6.lo
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt; file&lt;/tt&gt;: 把捕获的包数据写入到文件中（可以使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt; -&lt;/tt&gt; 输出到标准输出）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 -w debug.cap
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-C&lt;/span&gt; size&lt;/tt&gt;: 使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt;&lt;/tt&gt; 写入文件时，限制文件的最大大小，超出时新开一个文件（单位是 1,000,000 bytes）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -i eth0 -w debug.cap -C 1
$ ls debug* -l
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump &lt;span class="m"&gt;1000956&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 10:16 debug.cap
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump &lt;span class="m"&gt;1000323&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 10:32 debug.cap1
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump &lt;span class="m"&gt;1000017&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 10:51 debug.cap2
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump  &lt;span class="m"&gt;970705&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 11:08 debug.cap3
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-r&lt;/span&gt; file&lt;/tt&gt;: 从文件中读取包数据&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -r debug.cap
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;: 启用 verbose output，抓包时输出包的附加信息（可以使用多个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-vv&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-vvv&lt;/span&gt;&lt;/tt&gt; 多个 &lt;tt class="docutils literal"&gt;v&lt;/tt&gt; 会显示更多更详细的信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -v
tcpdump -vv
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/tt&gt;: 以 ASCII 码方式显示每一个数据包(不会显示数据包中链路层头部信息). 在抓取包含网页数据的数据包时, 可方便查看数据&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制打印出每个包的数据(但不包括连接层的头部)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-xx&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制打印出每个包的数据, 其中包括数据链路层的头部&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制和 ASCII 码形式打印出每个包的数据(但不包括连接层的头部)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-XX&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制和 ASCII 码形式打印出每个包的数据, 其中包括数据链路层的头部&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt; count&lt;/tt&gt;: 设置抓取到多少个包后就退出&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 -c 100
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt;&lt;/tt&gt;: 不要把地址转换为主机名（直接显示 ip 不要解析为域名）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -n
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-nn&lt;/span&gt;&lt;/tt&gt;: 不要把转换协议和端口号（直接显示协议和端口号，不要转换为协议名称，比如 http）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -nn
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt; snaplen&lt;/tt&gt;: 设置 tcpdump 的数据包抓取长度为 snaplen , 为 0 时表示让 tcpdump 自动选择合适的长度来抓取数据包.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -s 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-S&lt;/span&gt;&lt;/tt&gt;: 打印TCP 数据包的顺序号时, 使用绝对的顺序号, 而不是相对的顺序号.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -S
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-Z&lt;/span&gt; user&lt;/tt&gt;: 使tcpdump 放弃自己的超级权限(如果以root用户启动tcpdump, tcpdump将会有超级用户权限), 并把当前tcpdump的用户ID设置为user, 组ID设置为user首要所属组的ID&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump -Z user2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的参数组合:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump -i eth0 -nnS -s &lt;span class="m"&gt;0&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; -Avvv &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;expression&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
sudo tcpdump -i eth0 -nnS -s &lt;span class="m"&gt;1024&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; -Avvv &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;expression&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
sudo tcpdump -i eth0 -nnS -s &lt;span class="m"&gt;1024&lt;/span&gt; -C &lt;span class="m"&gt;10&lt;/span&gt; -c &lt;span class="m"&gt;10000&lt;/span&gt; -v -w debug.cap &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;expression&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认 tcpdump 会抓取所有的数据，可以通过指定过滤规则来过滤数据包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;常用过滤规则&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;过滤规则一般包含三种修饰符的组合：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;type: 指定id 所代表的对象类型, id可以是名字也可以是数字. 可选的对象类型有: host, net, port 以及portrange，默认是 host&lt;/li&gt;
&lt;li&gt;dir: 描述id 所对应的传输方向, 即发往id 还是从id 接收（而id 到底指什么需要看其前面的type 修饰符）.可取的方向为: src, dst, src or dst, src and dst&lt;/li&gt;
&lt;li&gt;proto: 描述id 所属的协议. 可选的协议有: ether, fddi, tr, wlan, ip, ip6, arp, rarp, decnet, tcp以及 upd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过括号(&lt;tt class="docutils literal"&gt;\( xxx \)&lt;/tt&gt;) 和 bool 操作符可以组合多种过滤规则，一对括号是一组:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;否定操作: &lt;tt class="docutils literal"&gt;!&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;not&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;与操作: &lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;and&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;或操作: &lt;tt class="docutils literal"&gt;||&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;or&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详情见文档：&lt;a class="reference external" href="http://www.tcpdump.org/manpages/pcap-filter.7.html"&gt;Manpage of PCAP-FILTER&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面列出一下常用的过滤规则:&lt;/p&gt;
&lt;div class="section" id="ip"&gt;
&lt;h3 id="hidip"&gt;过滤 ip/域名&lt;a class="headerlink" href="#hidip" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤目标域名是 baidu.com:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dst host baidu.com
&lt;/pre&gt;
&lt;p&gt;源 ip 或者目标 ip 是 192.168.1.3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
host 192.168.1.3
&lt;/pre&gt;
&lt;p&gt;源 ip 是 192.168.1.3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src host 192.168.1.3
&lt;/pre&gt;
&lt;p&gt;目标 ip 是 192.168.1.3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dst host 192.168.1.3
&lt;/pre&gt;
&lt;p&gt;过滤范围内的 ip /网段 ip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
net 192.168.0.0/24
net 192.168.0.0 mask 255.255.255.0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;过滤端口&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤 80 端口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
port 80
&lt;/pre&gt;
&lt;p&gt;排除端口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
not port 80
host www.example.com and not \(port 80 or port 25\)
host www.example.com and not port 80 and not port 25
&lt;/pre&gt;
&lt;p&gt;端口范围:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(tcp[0:2] &amp;gt; 1500 and tcp[0:2] &amp;lt; 1550) or (tcp[2:2] &amp;gt; 1500 and tcp[2:2] &amp;lt; 1550)

tcp portrange 1501-1549
&lt;/pre&gt;
&lt;p&gt;DNS 53 端口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
port 53
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;过滤协议&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ipv4: &lt;tt class="docutils literal"&gt;ip&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;ipv6: &lt;tt class="docutils literal"&gt;ip6&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;tcp: &lt;tt class="docutils literal"&gt;tcp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;udp: &lt;tt class="docutils literal"&gt;udp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;arp: &lt;tt class="docutils literal"&gt;arp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;icmp: &lt;tt class="docutils literal"&gt;icmp&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;过滤协议头&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤 tcp SYN 消息包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[tcpflags] &amp;amp; (tcp-syn) != 0'
&lt;/pre&gt;
&lt;p&gt;过滤 tcp SYN/ACK 消息包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[tcpflags] &amp;amp; (tcp-syn|tcp-ack) != 0'
&lt;/pre&gt;
&lt;p&gt;常用的 tcp 标记:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-ack, tcp-urg, tcp-ece, tcp-cwr
&lt;/pre&gt;
&lt;p&gt;源端口大于1024的TCP数据包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[0:2] &amp;gt; 1024'
&lt;/pre&gt;
&lt;p&gt;注意要用引号引起来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http"&gt;
&lt;h3 id="hidhttp"&gt;过滤 HTTP&lt;a class="headerlink" href="#hidhttp" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤 GET 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420'
&lt;/pre&gt;
&lt;p&gt;上面的 &lt;tt class="docutils literal"&gt;0x47455420&lt;/tt&gt; 是 &lt;tt class="docutils literal"&gt;'GET '&lt;/tt&gt; 的 16 进制:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'GET ']))
['0x47', '0x45', '0x54', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 POST 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x504f5354 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:1] = 0x20'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'POST ']))
['0x50', '0x4f', '0x53', '0x54', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 PUT 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x50555420'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'PUT ']))
['0x50', '0x55', '0x54', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 PATH 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x50415443 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:2] = 0x4820'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'PATCH ']))
['0x50', '0x41', '0x54', '0x43', '0x48', '0x20']
&lt;/pre&gt;
&lt;p&gt;之所以拆分成了多个条件是因为 &lt;tt class="docutils literal"&gt;tcpdump: data size must be 1, 2, or 4&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;过滤 DELETE 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x44454c45 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:2] = 0x5445 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 6:1] = 0x20'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'DELETE ']))
['0x44', '0x45', '0x4c', '0x45', '0x54', '0x45', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 HEAD 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x48454144 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:1] = 0x20'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'HEAD ']))
['0x48', '0x45', '0x41', '0x44', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 OPTIONS 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x4f505449 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:4] = 0x4f4e5320'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'OPTIONS ']))
['0x4f', '0x50', '0x54', '0x49', '0x4f', '0x4e', '0x53', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 HTTP 响应 (&lt;tt class="docutils literal"&gt;HTTP/1.&lt;/tt&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x48545450 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:2] = 0x2f31 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 6:1] = 0x2e'
&lt;/pre&gt;
&lt;p&gt;HTTP request header &amp;amp;&amp;amp; body &amp;amp;&amp;amp; response header &amp;amp;&amp;amp; body:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'(((ip[2:2] - ((ip[0]&amp;amp;0xf)&amp;lt;&amp;lt;2)) - ((tcp[12]&amp;amp;0xf0)&amp;gt;&amp;gt;2)) != 0)'
&lt;/pre&gt;
&lt;p&gt;自动生成 HTTP 相关过滤规则的脚本: &lt;a class="reference external" href="https://www.wireshark.org/tools/string-cf.html"&gt;https://www.wireshark.org/tools/string-cf.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面的规则可以通过括号和操作符进行各种组合，从而组合出复杂的过滤规则。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 192.168.8.3 -Avv
sudo tcpdump dst host baidu.com and dst port &lt;span class="m"&gt;80&lt;/span&gt; -i eth0 -vv
sudo tcpdump dst host baidu.com and not dst port &lt;span class="m"&gt;80&lt;/span&gt; -i eth0 -vv
sudo tcpdump dst host baidu.com and not &lt;span class="se"&gt;\(&lt;/span&gt;dst port &lt;span class="m"&gt;80&lt;/span&gt; or dst port 443&lt;span class="se"&gt;\)&lt;/span&gt; -i en0 -vv
sudo tcpdump dst host baidu.com and &lt;span class="s1"&gt;&amp;#39;tcp[tcpflags] &amp;amp; (tcp-syn) != 0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.wireshark.org/CaptureFilters"&gt;CaptureFilters - The Wireshark Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tcpdump.org/manpages/pcap-filter.7.html"&gt;Manpage of PCAP-FILTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html"&gt;Linux tcpdump命令详解 - ggjucheng - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.zioer.org/2017/07/14/linux-command-for-tcpdump/"&gt;tcpdump命令常用方法 | 卡卡罗特&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://linuxwiki.github.io/NetTools/tcpdump.html#210http-get"&gt;tcpdump - Linux Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/"&gt;Tcpdump advanced filters - Sebastien Wains - A blog about Linux and Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/4777042/can-i-use-tcpdump-to-get-http-requests-response-header-and-response-body"&gt;android - Can I use tcpdump to get HTTP requests, response header and response body? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2018-01-14:2018/01/tcpdump-common-useful-examples-cookbook.html</guid><category>tcpdump</category></item><item><title>Python: 通过预置后门（调试接口）的方式调试运行中的进程</title><link>https://mozillazg.com/2017/12/python-debug-running-process-threading-gevent-eventlet-asyncio-via-preset-backdoor.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;每当运行中的程序/服务出现问题的时候我们都希望能够尽快定位问题的原因，能够复现问题和解决问题。
一般都会想如果能知道程序正在进行什么操作就好了，如果能马上复现问题就好了，如果能知道当前程序内变量的值就好了。知道这些信息的方法有很多种，本文介绍一种通过预置后门的方法来调试运行中进程的思路和方法。&lt;/p&gt;
&lt;p&gt;常用的预置后门的方法是：通过定义信号处理程序，在接收到相应的信号时，进行特定的，便于调试和查找问题的操作。
比如下面将要举的两个例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;接收到信号时输出便于调试的特定信息&lt;/li&gt;
&lt;li&gt;接收到信号时开启远程调试服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;接收到信号时输出便于调试的特定信息&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比如输出当前程序的 traceback 信息，这样就可以知道当前程序运行到哪里了，甚至知道代码执行位置的局部变量和全局变量的值。&lt;/p&gt;
&lt;p&gt;在下面的示例程序中，程序在接收到 &lt;cite&gt;USR1&lt;/cite&gt; 信号时输出程序的 traceback 信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output_tracebacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;id2thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ident&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_current_frames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;stack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;thread {}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_backdoor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_tracebacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="c1"&gt;# do something with task&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;setup_backdoor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行程序并通过 &lt;cite&gt;USR1&lt;/cite&gt; 信号激活后门，获取程序的 traceback 信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python testa.py &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt; 79163
$ &lt;span class="nb"&gt;kill&lt;/span&gt; -s USR1 79163
thread &amp;lt;Thread&lt;span class="o"&gt;(&lt;/span&gt;Thread-2, started 123145565609984&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;:
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 884, in _bootstrap
    self._bootstrap_inner&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 916, in _bootstrap_inner
    self.run&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 864, in run
    self._target&lt;span class="o"&gt;(&lt;/span&gt;*self._args, **self._kwargs&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;testa.py&amp;quot;&lt;/span&gt;, line 30, in worker
    time.sleep&lt;span class="o"&gt;(&lt;/span&gt;1.2&lt;span class="o"&gt;)&lt;/span&gt;

thread &amp;lt;Thread&lt;span class="o"&gt;(&lt;/span&gt;Thread-1, started 123145560354816&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;:
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 884, in _bootstrap
    self._bootstrap_inner&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 916, in _bootstrap_inner
    self.run&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 864, in run
    self._target&lt;span class="o"&gt;(&lt;/span&gt;*self._args, **self._kwargs&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;testa.py&amp;quot;&lt;/span&gt;, line 36, in producer
    time.sleep&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;

thread &amp;lt;_MainThread&lt;span class="o"&gt;(&lt;/span&gt;MainThread, started 140736812057536&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;:
  File &lt;span class="s2"&gt;&amp;quot;testa.py&amp;quot;&lt;/span&gt;, line 47, in &amp;lt;module&amp;gt;
    t.join&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 1056, in join
    self._wait_for_tstate_lock&lt;span class="o"&gt;()&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;, line 1072, in _wait_for_tstate_lock
    &lt;span class="k"&gt;elif&lt;/span&gt; lock.acquire&lt;span class="o"&gt;(&lt;/span&gt;block, timeout&lt;span class="o"&gt;)&lt;/span&gt;:
  File &lt;span class="s2"&gt;&amp;quot;testa.py&amp;quot;&lt;/span&gt;, line 15, in output_tracebacks
    &lt;span class="nv"&gt;stack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; traceback.format_list&lt;span class="o"&gt;(&lt;/span&gt;traceback.extract_stack&lt;span class="o"&gt;(&lt;/span&gt;stack&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于获取 traceback 信息的更多内容详见 &lt;a class="reference external" href="http://mozillazg.com/2017/12/python-get-concurrency-programm-all-tracebacks-threading-gevent-asyncio-etc.html"&gt;Python: 获取并发程序的 traceback 信息（threading/gevent/asyncio）&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;接收到信号时开启远程调试服务&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比如开启一个使用当前进程中运行环境的远程调试器（Python Shell）, 可以在这个调试器中访问运行时变化的全局变量，使用进程当前的运行时环境执行代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;code&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InteractiveConsole&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socketserver&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileLikeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rfile&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wfile&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_rfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;UnicodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DebuggerTCPHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socketserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamRequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;fileobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileLikeObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fileobj&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InteractiveConsole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;banner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;== debug server ==&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exitmsg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__stdin__&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__stdout__&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__stderr__&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output_tracebacks&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;id2thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ident&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_current_frames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;stack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;thread {}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;debugger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_debugger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start debugger...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socketserver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;DebuggerTCPHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;
    &lt;span class="n"&gt;debugger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;started debugger&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close_debugger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close debugger...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;closed debugger&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server_close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;closed debugger&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_backdoor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_debugger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGUSR2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;close_debugger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="c1"&gt;# do something with task&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;setup_backdoor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行程序，通过 &lt;cite&gt;USR1&lt;/cite&gt; 激活远程调试器，调试完后通过 &lt;cite&gt;USR2&lt;/cite&gt; 关闭远程调试服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;testb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;87173&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;kill&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;USR1&lt;/span&gt; &lt;span class="mi"&gt;87173&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;telnet&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;
&lt;span class="n"&gt;Trying&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Connected&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Escape&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;output_tracebacks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="mi"&gt;123145482240000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;884&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;916&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;864&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/socketserver.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;238&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;serve_forever&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_request_noblock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/socketserver.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;317&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_handle_request_noblock&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/socketserver.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;348&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;process_request&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/socketserver.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;361&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;finish_request&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandlerClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/socketserver.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;696&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;testb.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;banner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;== debug server ==&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exitmsg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/code.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;interact&lt;/span&gt;
    &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/code.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;259&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
    &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/code.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;runsource&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;runcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/code.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;runcode&lt;/span&gt;
    &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;console&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;testb.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;output_tracebacks&lt;/span&gt;
    &lt;span class="n"&gt;stack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="mi"&gt;123145476984832&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;884&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;916&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;864&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;testb.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="mi"&gt;123145471729664&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;884&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;916&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;864&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;testb.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;producer&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_MainThread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MainThread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="mi"&gt;140736812057536&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;testb.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1056&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wait_for_tstate_lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1072&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_wait_for_tstate_lock&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10a2e8fd0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qsize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qsize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;foreign&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;Running&lt;/span&gt;                 &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;testb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;kill&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;USR2&lt;/span&gt; &lt;span class="mi"&gt;87173&lt;/span&gt;
&lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;telnet&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;
&lt;span class="n"&gt;Trying&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;refused&lt;/span&gt;
&lt;span class="n"&gt;telnet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unable&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码只是粗略的演示如何实现一个远程调试器，正式的远程调试器可以参考和使用
&lt;a class="reference external" href="http://www.gevent.org/gevent.backdoor.html"&gt;gevent.backdoor&lt;/a&gt;
或 &lt;a class="reference external" href="http://twistedmatrix.com/documents/current/api/twisted.conch.manhole.html"&gt;twisted.conch.manhole&lt;/a&gt;
或 &lt;a class="reference external" href="https://github.com/ionelmc/python-manhole"&gt;ionelmc/python-manhole&lt;/a&gt; 等功能完善的第三方模块。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;总结&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面两个例子只是常见的预置后门，实际上还可以预置其他的功能（比如，预置一个 HTTP server ，通过访问不同的 URL 来获取不同的运行时信息或者做一些辅助调试的操作），一切都是为了调试，都是为了尽快定位和解决问题。
需要预置哪些后门要通过实际情况来定，一方面要考虑是否会影响服务的正常运行，另一方面也要考虑哪种方式哪些信息能更快的帮忙我们定位和解决问题，最重要的是 &lt;strong&gt;要考虑安全问题&lt;/strong&gt; ，要做好安全防护，不要把端口暴露到外网。&lt;/p&gt;
&lt;p&gt;虽然标题以及文章中的例子是 Python 相关，但是这种思想是不仅限于 Python ，同样也可以应用于其他语言编写的服务。欢迎大家和我一起交流和探讨调试技巧以及解决问题的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;参考资料&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/signal.html#signal.signal"&gt;18.8. signal — Set handlers for asynchronous events — Python 3.6.4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mozillazg.com/2017/12/python-get-concurrency-programm-all-tracebacks-threading-gevent-asyncio-etc.html"&gt;Python: 获取并发程序的 traceback 信息（threading/gevent/asyncio） - Huang Huang 的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gevent.org/gevent.backdoor.html"&gt;gevent.backdoor – Interactive greenlet-based network console that can be used in any process — gevent 1.3.0.dev0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://twistedmatrix.com/documents/current/api/twisted.conch.manhole.html"&gt;twisted.conch.manhole : API documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ionelmc/python-manhole"&gt;ionelmc/python-manhole: Debugging manhole for python applications.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/socketserver.html#socketserver.StreamRequestHandler"&gt;21.21. socketserver — A framework for network servers — Python 3.6.4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/code.html#code.InteractiveConsole"&gt;30.1. code — Interpreter base classes — Python 3.6.4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-12-31:2017/12/python-debug-running-process-threading-gevent-eventlet-asyncio-via-preset-backdoor.html</guid><category>debug</category><category>backdoor</category></item><item><title>Python: 获取并发程序的 traceback 信息（threading/gevent/asyncio）</title><link>https://mozillazg.com/2017/12/python-get-concurrency-programm-all-tracebacks-threading-gevent-asyncio-etc.html</link><description>&lt;p&gt;本文记录如何获取多线程、多协程(gevent)、asyncio 程序中所有线程/协程的 traceback 信息。&lt;/p&gt;
&lt;div class="section" id="traceback"&gt;
&lt;h2 id="hidtraceback"&gt;获取所有线程的 traceback 信息&lt;a class="headerlink" href="#hidtraceback" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以通过 &lt;a class="reference external" href="https://docs.python.org/3/library/threading.html#threading.enumerate"&gt;threading.enumerate()&lt;/a&gt; 获取所有线程信息，
通过 &lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys._current_frames"&gt;sys._current_frames()&lt;/a&gt; 获取线程 traceback 信息。&lt;/p&gt;
&lt;p&gt;测试程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;thread-{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;id2thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ident&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_current_frames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;stack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;thread {}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python test.py
thread &amp;lt;Thread(thread-2, started 123145466843136)&amp;gt;:
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 884, in _bootstrap
    self._bootstrap_inner()
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 916, in _bootstrap_inner
    self.run()
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 864, in run
    self._target(*self._args, **self._kwargs)
  File &amp;quot;test.py&amp;quot;, line 9, in do
    time.sleep(x * 60)

thread &amp;lt;Thread(thread-1, started 123145461587968)&amp;gt;:
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 884, in _bootstrap
    self._bootstrap_inner()
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 916, in _bootstrap_inner
    self.run()
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 864, in run
    self._target(*self._args, **self._kwargs)
  File &amp;quot;test.py&amp;quot;, line 9, in do
    time.sleep(x * 60)

thread &amp;lt;_MainThread(MainThread, started 140736955184064)&amp;gt;:
  File &amp;quot;test.py&amp;quot;, line 27, in &amp;lt;module&amp;gt;
    stack_list = traceback.format_list(traceback.extract_stack(stack))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="gevent-traceback"&gt;
&lt;h2 id="hidgevent-traceback"&gt;获取所有协程（gevent）的 traceback 信息&lt;a class="headerlink" href="#hidgevent-traceback" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;gc.get_objects()&lt;/tt&gt; 获取所有对象，然后从中过滤出所有的协程对象(&lt;tt class="docutils literal"&gt;greenlet.greenlet&lt;/tt&gt;)，
然后通过 greenlet 对象的 &lt;tt class="docutils literal"&gt;gr_frame&lt;/tt&gt; 属性获取 traceback 信息。&lt;/p&gt;
&lt;p&gt;测试程序:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gevent&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;greenlet&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_traceback&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_objects&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greenlet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greenlet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;stack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gr_frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;greenlet {}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_traceback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python test.py
greenlet &amp;lt;Greenlet at 0x103f4ca60: bar&amp;gt;:
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/greenlet.py&amp;quot;, line 536, in run
    result = self._run(*self.args, **self.kwargs)
  File &amp;quot;test.py&amp;quot;, line 17, in bar
    gevent.sleep(x * 20)
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 167, in sleep
    waiter.get()
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 898, in get
    return self.hub.switch()
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 630, in switch
    return RawGreenlet.switch(self)

greenlet &amp;lt;Greenlet at 0x103f4caf8: get_traceback&amp;gt;:
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/greenlet.py&amp;quot;, line 536, in run
    result = self._run(*self.args, **self.kwargs)
  File &amp;quot;test.py&amp;quot;, line 30, in get_traceback
    traceback.extract_stack(obj.gr_frame)

greenlet &amp;lt;greenlet.greenlet object at 0x103f4c0e0&amp;gt;:
  File &amp;quot;test.py&amp;quot;, line 38, in &amp;lt;module&amp;gt;
    gevent.spawn(get_traceback).join()
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/greenlet.py&amp;quot;, line 496, in join
    result = self.parent.switch()
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 630, in switch
    return RawGreenlet.switch(self)

greenlet &amp;lt;Greenlet at 0x103f4c930: foo&amp;gt;:
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/greenlet.py&amp;quot;, line 536, in run
    result = self._run(*self.args, **self.kwargs)
  File &amp;quot;test.py&amp;quot;, line 11, in foo
    gevent.sleep(x * 10)
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 167, in sleep
    waiter.get()
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 898, in get
    return self.hub.switch()
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 630, in switch
    return RawGreenlet.switch(self)

greenlet &amp;lt;Hub at 0x103f4c9c8 select default pending=0 ref=2&amp;gt;:
  File &amp;quot;/xxx/lib/python3.6/site-packages/gevent/hub.py&amp;quot;, line 688, in run
    loop.run()
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="asyncio-task-traceback"&gt;
&lt;h2 id="hidasyncio-task-traceback"&gt;获取所有 asyncio task 的 traceback 信息&lt;a class="headerlink" href="#hidasyncio-task-traceback" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;asyncio.Task.all_tasks()&lt;/tt&gt; 获取所有 asyncio task 对象，
然后通过 task 对象的 &lt;tt class="docutils literal"&gt;get_stack()&lt;/tt&gt; 方法获取 traceback 信息。&lt;/p&gt;
&lt;p&gt;测试程序:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_traceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;stack_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_stack&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;stack_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;asyncio task {}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;get_traceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行结果如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bar
foo
bar
foo
asyncio task &amp;lt;Task pending coro=&amp;lt;wait() running at /xxx/lib/python3.6/asyncio/tasks.py:307&amp;gt; wait_for=&amp;lt;Future pending cb=[&amp;lt;TaskWakeupMethWrapper object at 0x10c57c258&amp;gt;()]&amp;gt; cb=[_run_until_complete_cb() at /xxx/lib/python3.6/asyncio/base_events.py:176]&amp;gt;:
  File &amp;quot;/xxx/lib/python3.6/asyncio/tasks.py&amp;quot;, line 307, in wait
    return (yield from _wait(fs, timeout, return_when, loop))

asyncio task &amp;lt;Task pending coro=&amp;lt;bar() running at test.py:16&amp;gt; wait_for=&amp;lt;Future pending cb=[&amp;lt;TaskWakeupMethWrapper object at 0x10c57c378&amp;gt;()]&amp;gt; cb=[_wait.&amp;lt;locals&amp;gt;._on_completion() at /xxx/lib/python3.6/asyncio/tasks.py:374]&amp;gt;:
  File &amp;quot;test.py&amp;quot;, line 16, in bar
    await asyncio.sleep(x * 20)

asyncio task &amp;lt;Task pending coro=&amp;lt;get_traceback() running at test.py:27&amp;gt; cb=[_wait.&amp;lt;locals&amp;gt;._on_completion() at /xxx/lib/python3.6/asyncio/tasks.py:374]&amp;gt;:
  File &amp;quot;test.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    event_loop.run_until_complete(asyncio.wait(tasks))
  File &amp;quot;test.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    event_loop.run_until_complete(asyncio.wait(tasks))
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 454, in run_until_complete
    self.run_forever()
  File &amp;quot;test.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    event_loop.run_until_complete(asyncio.wait(tasks))
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 454, in run_until_complete
    self.run_forever()
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 421, in run_forever
    self._run_once()
  File &amp;quot;test.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    event_loop.run_until_complete(asyncio.wait(tasks))
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 454, in run_until_complete
    self.run_forever()
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 421, in run_forever
    self._run_once()
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 1425, in _run_once
    handle._run()
  File &amp;quot;test.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    event_loop.run_until_complete(asyncio.wait(tasks))
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 454, in run_until_complete
    self.run_forever()
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 421, in run_forever
    self._run_once()
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 1425, in _run_once
    handle._run()
  File &amp;quot;/xxx/lib/python3.6/asyncio/events.py&amp;quot;, line 126, in _run
    self._callback(*self._args)
  File &amp;quot;test.py&amp;quot;, line 35, in &amp;lt;module&amp;gt;
    event_loop.run_until_complete(asyncio.wait(tasks))
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 454, in run_until_complete
    self.run_forever()
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 421, in run_forever
    self._run_once()
  File &amp;quot;/xxx/lib/python3.6/asyncio/base_events.py&amp;quot;, line 1425, in _run_once
    handle._run()
  File &amp;quot;/xxx/lib/python3.6/asyncio/events.py&amp;quot;, line 126, in _run
    self._callback(*self._args)
  File &amp;quot;test.py&amp;quot;, line 25, in get_traceback
    traceback.format_list(traceback.extract_stack(stack))

asyncio task &amp;lt;Task pending coro=&amp;lt;foo() running at test.py:9&amp;gt; wait_for=&amp;lt;Future pending cb=[&amp;lt;TaskWakeupMethWrapper object at 0x10c57c3d8&amp;gt;()]&amp;gt; cb=[_wait.&amp;lt;locals&amp;gt;._on_completion() at /xxx/lib/python3.6/asyncio/tasks.py:374]&amp;gt;:
  File &amp;quot;test.py&amp;quot;, line 9, in foo
    await asyncio.sleep(x * 10)
&lt;/pre&gt;
&lt;p&gt;知道了获取 traceback 信息的方法后有啥用呢？traceback 信息对我们调试程序有非常大的帮助，尤其是调试运行中的进程。&lt;/p&gt;
&lt;p&gt;如果觉得 traceback 信息里包含的东西有点少的话，可以对 traceback 进行加工：
使用 &lt;a class="reference external" href="https://github.com/getsentry/raven-python"&gt;raven&lt;/a&gt; 展开 traceback 信息，并把这些信息发送到 &lt;a class="reference external" href="https://sentry.io/"&gt;sentry&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raven-traceback"&gt;
&lt;h2 id="hidraven-traceback"&gt;使用 raven 展开和收集 traceback 信息&lt;a class="headerlink" href="#hidraven-traceback" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过 &lt;a class="reference external" href="https://github.com/getsentry/raven-python"&gt;raven&lt;/a&gt; 可以获取 traceback 信息中的源代码及局部变量，
这些信息对应快速诊断问题非常的有帮助。同时我们还可以通过 &lt;a class="reference external" href="https://github.com/getsentry/raven-python"&gt;raven&lt;/a&gt; 把信息发送到
&lt;a class="reference external" href="https://sentry.io/"&gt;sentry&lt;/a&gt; 中方便归档及可视化查看 traceback 信息。&lt;/p&gt;
&lt;p&gt;测试程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;raven&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;raven.utils.stacks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_stack_info&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_traceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raven_client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;id2thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ident&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_current_frames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;frames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;stacktrace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stack_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id2thread&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;thread_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;thread: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raven_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;captureMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;traceback from {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;stacktrace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;thread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;raven_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;get_traceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raven_client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python test2.py
foo
foo
foo
thread: &amp;lt;Thread(bar, started 123145482194944)&amp;gt;
e800cefdc2ce4a00bb716b8342c75a96
thread: &amp;lt;_MainThread(MainThread, started 140736955184064)&amp;gt;
86b0cb00d5884cb49ba033d83e21040f
foo
foo
&lt;/pre&gt;
&lt;p&gt;sentry 上的信息:&lt;/p&gt;
&lt;p&gt;&lt;img alt="sentry" src="/static/images/python/sentry-traceback-233.jpg" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/threading.html#threading.enumerate"&gt;17.1. threading — Thread-based parallelism — Python 3.6.4rc1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys._current_frames"&gt;29.1. sys — System-specific parameters and functions — Python 3.6.4rc1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/traceback.html#module-traceback"&gt;29.9. traceback — Print or retrieve a stack traceback — Python 3.6.4rc1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://greenlet.readthedocs.io/en/latest/#methods-and-attributes-of-greenlets"&gt;greenlet: Lightweight concurrent programming — greenlet 0.4.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/gc.html#gc.get_objects"&gt;29.11. gc — Garbage Collector interface — Python 3.6.4rc1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio-task.html#task"&gt;18.5.3. Tasks and coroutines — Python 3.6.4rc1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getsentry/raven-python"&gt;getsentry/raven-python: Raven is a Python client for Sentry (getsentry.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-12-10:2017/12/python-get-concurrency-programm-all-tracebacks-threading-gevent-asyncio-etc.html</guid><category>debug</category></item><item><title>Python: 使用 faulthandler 模块获取运行中进程的 traceback 信息</title><link>https://mozillazg.com/2017/12/python-use-faulthandler-to-debug-running-process-with-dumping-traceback.html</link><description>&lt;p&gt;Python 3.3 新增了一个 &lt;a class="reference external" href="https://docs.python.org/3/library/faulthandler.html"&gt;faulthandler&lt;/a&gt; 模块，可以输出运行中进程的 traceback 信息，可以用来作为调试运行中的 Python 进程的一种手段。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;特点及限制&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;模块本身是使用 C 实现的，所以有如下特点和限制：&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3 id="hidid2"&gt;特点&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 Segmentation fault 或者 Python 死锁时仍然可以输出 traceback 信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;限制&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;只能用于信号安全的函数&lt;/li&gt;
&lt;li&gt;只支持 ASCII 字符。程序使用 &lt;tt class="docutils literal"&gt;backslashreplace&lt;/tt&gt; 作为编码时的 error handler&lt;/li&gt;
&lt;li&gt;每个字符串最长只能包含 500 个字符&lt;/li&gt;
&lt;li&gt;只显示文件名，函数名和行号（不显示源码）&lt;/li&gt;
&lt;li&gt;最大支持 100 个 frame 和 100 个线程&lt;/li&gt;
&lt;li&gt;显示顺序是翻转的：最近的调用显示在前面&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;安装&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python 3.3 自带了这个模块，Python 2.x 可以通过一下方式安装:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install faulthandler
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;使用示例&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="traceback"&gt;
&lt;h3 id="hidtraceback"&gt;手动输出 traceback 信息&lt;a class="headerlink" href="#hidtraceback" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;测试函数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 faulthandler 输出所有线程的 traceback 信息:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;test&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;faulthandler&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;faulthandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump_traceback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0x0000700009d66000&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/xxx/tmp/test_faulthandler/test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;864&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;916&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;884&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0x0000700009863000&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/xxx/tmp/test_faulthandler/test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;864&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;916&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;884&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap&lt;/span&gt;

&lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="mh"&gt;0x0000700009360000&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;295&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;551&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/core/history.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;834&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/core/history.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;needs_sqlite&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;decorator-gen-23&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;916&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap_inner&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;884&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_bootstrap&lt;/span&gt;

&lt;span class="n"&gt;Current&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="mh"&gt;0x00007fffe03873c0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;ipython-input-4-6b8299023d33&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2881&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_code&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2827&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_ast_nodes&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/core/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2717&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;run_cell&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/terminal/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;446&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;interact&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/terminal/interactiveshell.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;455&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mainloop&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/terminal/ipapp.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;348&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/traitlets/config/application.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;658&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;launch_instance&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lib/python3.6/site-packages/IPython/__init__.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;119&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start_ipython&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/bin/ipython&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;all_threads=False&lt;/tt&gt; 参数指定只输出当前线程，
&lt;tt class="docutils literal"&gt;file=sys.stderr&lt;/tt&gt; 参数指定输出到哪里（默认是标准错误），
详见 &lt;a class="reference external" href="https://docs.python.org/3/library/faulthandler.html"&gt;faulthandler&lt;/a&gt; 官方文档。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3 id="hidid6"&gt;通过信号自动输出 traceback 信息&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给前面的测试函数增加信号处理，增加通过 &lt;tt class="docutils literal"&gt;USR1&lt;/tt&gt; 信号输出 traceback 信息的功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;faulthandler&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;faulthandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行程序，然后就可以通过向进程发送 &lt;tt class="docutils literal"&gt;USR1&lt;/tt&gt; 信号来获取运行中进程的 traceback 信息了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python test.py &amp;amp;
[1] 21924
$ kill -s USR1 21924
Thread 0x0000700001c03000 (most recent call first):
  File &amp;quot;test.py&amp;quot;, line 9 in do
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 864 in run
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 916 in _bootstrap_inner
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 884 in _bootstrap

Thread 0x0000700001700000 (most recent call first):
  File &amp;quot;test.py&amp;quot;, line 9 in do
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 864 in run
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 916 in _bootstrap_inner
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 884 in _bootstrap

Current thread 0x00007fffe03873c0 (most recent call first):
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 1072 in _wait_for_tstate_lock
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 1056 in join
  File &amp;quot;/xxx/lib/python3.6/threading.py&amp;quot;, line 1290 in _shutdown
&lt;/pre&gt;
&lt;p&gt;更多用法以及其他的信息请阅读 &lt;a class="reference external" href="https://docs.python.org/3/library/faulthandler.html"&gt;官方文档&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;参考资料&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/faulthandler.html"&gt;27.2. faulthandler — Dump the Python traceback — Python 3.6.4rc1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vstinner/faulthandler"&gt;vstinner/faulthandler: Fault handler for Python: display the Python backtrace on SIGSEGV, SIGFPE, SIGABRT, SIGBUS and SIGILL signals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-12-09:2017/12/python-use-faulthandler-to-debug-running-process-with-dumping-traceback.html</guid><category>debug</category><category>faulthandler</category></item><item><title>Python: linux 环境下如何修改 PIPE buffer size</title><link>https://mozillazg.com/2017/11/python-how-to-set-pipe-buffer-size-on-linux.html</link><description>&lt;p&gt;当 PIPE 的写入方写的太快，但是读取方来不及读取的时候，就会把 buffer 给写满从而出现 &lt;tt class="docutils literal"&gt;resource temporarily unavailable&lt;/tt&gt; 错误。在 linux 下可以通过
&lt;tt class="docutils literal"&gt;fcntl.fcntl(fd, fcntl.F_SETPIPE_SZ, size)&lt;/tt&gt; 来设置 PIPE 的 buffer 大小。&lt;/p&gt;
&lt;p&gt;相关 Python 代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fcntl&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F_SETPIPE_SZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1031&lt;/span&gt;
        &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F_SETPIPE_SZ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;can not change PIPE buffer size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般可以通过 &lt;tt class="docutils literal"&gt;read_fd, write_fd = os.pipe()&lt;/tt&gt; 来生成 pipe，
此时上面的 &lt;tt class="docutils literal"&gt;fd&lt;/tt&gt; 对应 &lt;tt class="docutils literal"&gt;read_fd&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;write_fd&lt;/tt&gt; 。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;捕获 &lt;tt class="docutils literal"&gt;IOError&lt;/tt&gt; 异常是因为有的 linux 内核版本不支持修改 PIPE buffer 大小。&lt;/li&gt;
&lt;li&gt;python 的 fcntl 没有 &lt;tt class="docutils literal"&gt;F_SETPIPE_SZ&lt;/tt&gt; 属性，所以我们定义了这个属性，它的值来自 &lt;a class="reference external" href="https://github.com/torvalds/linux/blob/ead751507de86d90fa250431e9990a8b881f713c/include/uapi/linux/fcntl.h#L28"&gt;fcntl.h&lt;/a&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://developerweb.net/viewtopic.php?id=5792"&gt;FIFO: Resource temporarily unavailable (Page 1) / Processes / UNIX Socket FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/fcntl.2.html"&gt;fcntl(2) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/pipe.7.html"&gt;pipe(7) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/torvalds/linux/blob/ead751507de86d90fa250431e9990a8b881f713c/include/uapi/linux/fcntl.h#L28"&gt;linux/fcntl.h at ead751507de86d90fa250431e9990a8b881f713c · torvalds/linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/torvalds/linux/blob/ead751507de86d90fa250431e9990a8b881f713c/include/uapi/asm-generic/fcntl.h#L189"&gt;asm-generic/fcntl.h at ead751507de86d90fa250431e9990a8b881f713c · torvalds/linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-11-01:2017/11/python-how-to-set-pipe-buffer-size-on-linux.html</guid><category>pipe</category><category>linux</category></item><item><title>一种解决 HAProxy 节点网络异常（sendmsg: Invalid argument, Connection timed out ）的办法</title><link>https://mozillazg.com/2017/10/linux-a-way-to-fix-haproxy-network-connection-timeout-ping-sendmsg-Invalid-argument-socket-errno-110-connection-timed-out.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;问题&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;之前连接一个 HAProxy 前端服务时总是时不时出现 &lt;tt class="docutils literal"&gt;[Errno 110] Connection timed out&lt;/tt&gt; ，并且本地 ping 服务器丢包率特别高。
到服务器上看了以后，发现 &lt;tt class="docutils literal"&gt;ping 127.0.0.1&lt;/tt&gt; 的丢包率也特别高，而且 ping
命令还出现 &lt;tt class="docutils literal"&gt;ping: sendmsg: Invalid argument&lt;/tt&gt; 错误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
64 bytes from 127.0.0.1: icmp_seq=150 ttl=64 time=0.050 ms
64 bytes from 127.0.0.1: icmp_seq=151 ttl=64 time=0.062 ms
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
64 bytes from 127.0.0.1: icmp_seq=158 ttl=64 time=0.962 ms
64 bytes from 127.0.0.1: icmp_seq=159 ttl=64 time=0.033 ms
&lt;/pre&gt;
&lt;p&gt;查看 &lt;tt class="docutils literal"&gt;dmesg &lt;span class="pre"&gt;-H&lt;/span&gt;&lt;/tt&gt; 有很多类似 &lt;tt class="docutils literal"&gt;net_ratelimit: 478 callbacks suppressed&lt;/tt&gt; 的记录:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
```
[  +6.555833] net_ratelimit: 478 callbacks suppressed
[Oct19 11:08] net_ratelimit: 57 callbacks suppressed
```
&lt;/pre&gt;
&lt;p&gt;需要提一下的就是，这个 HAProxy 服务在一个非常大的内网(large subnets)里，
内网里很多机器都会去连接这个服务。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;解决方法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;修改了一下 sysctl, 加大了 ARP cache:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo sysctl -w net.ipv4.neigh.default.gc_thresh1=1024
$ sudo sysctl -w net.ipv4.neigh.default.gc_thresh2=2048
$ sudo sysctl -w net.ipv4.neigh.default.gc_thresh3=4096
$ sudo sysctl -p
$ sudo sysctl -a |grep net.ipv4.neigh.default.gc_thresh
&lt;/pre&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;为什么要修改为上面的值？&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先来看看这几个配置项的含义(摘自 &lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
neigh/default/gc_thresh1 - INTEGER
    Minimum number of entries to keep.  Garbage collector will not
    purge entries if there are fewer than this number.
    Default: 128

neigh/default/gc_thresh2 - INTEGER
    Threshold when garbage collector becomes more aggressive about
    purging entries. Entries older than 5 seconds will be cleared
    when over this number.
    Default: 512

neigh/default/gc_thresh3 - INTEGER
    Maximum number of neighbor entries allowed.  Increase this
    when using large numbers of interfaces and when communicating
    with large numbers of directly-connected peers.
    Default: 1024
&lt;/pre&gt;
&lt;p&gt;ARP 相关的 &lt;a class="reference external" href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Welcome%20to%20High%20Performance%20Computing%20(HPC)%20Central/page/Linux%20System%20Tuning%20Recommendations"&gt;简单解释就是&lt;/a&gt; (详见 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/arp.7.html"&gt;arp(7)&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh1&lt;/tt&gt;: min IPV4 entries to keep in ARP cache -  garbage collection never runs if this many or less entries are in cache&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh2&lt;/tt&gt;: IPV4 entries allowed in ARP cache before garbage collection will be scheduled in 5 seconds&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh3&lt;/tt&gt;: maximum IPV4 entries allowed in ARP cache; garbage collection runs when this many entries reached&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后我们通过 &lt;tt class="docutils literal"&gt;arp &lt;span class="pre"&gt;-an|wc&lt;/span&gt; &lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/tt&gt; 查看当前记录的 ARP 记录的数量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ arp -an|wc -l
1108
&lt;/pre&gt;
&lt;p&gt;或者通过 &lt;tt class="docutils literal"&gt;ip &lt;span class="pre"&gt;-4&lt;/span&gt; neigh show nud all | wc &lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/tt&gt; 查看当前 IPv4 的 ARP 记录的数量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ip -4 neigh show nud all | wc -l
1112
&lt;/pre&gt;
&lt;p&gt;可以看到上面的值比 &lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh3&lt;/tt&gt; 的默认值 &lt;tt class="docutils literal"&gt;1024&lt;/tt&gt; 要大，
&amp;lt;del&amp;gt;*此时就会进行 gc 操作，如果 gc 操作持续时间太久就会导致新的 ARP 记录无法被创建，进而导致 ARP 通信无法正常完成，TCP 之类的操作更加就无法完成了(有空的时候再仔细求证这个理解...)* ，&amp;lt;/del&amp;gt; 所以我们要修改为更大的值。&lt;/p&gt;
&lt;p&gt;如果上面的值特别大，可以考虑配置再大一点的值，比如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
net.ipv4.neigh.default.gc_thresh1 = 8192
net.ipv4.neigh.default.gc_thresh2 = 32768
net.ipv4.neigh.default.gc_thresh3 = 65536
&lt;/pre&gt;
&lt;p&gt;注：上面修改的都是 IPv4 相关的配置，如果有用到 IPv6 网络的话可以把对应的配置项也修改一下。
注：如果机器性能特别好或者比较介意 gc，可以考虑把值调到非常非常大，然后禁用 gc:
&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_interval&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_stale_time&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;参考资料&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1316981"&gt;Bug 1316981 – Arp table kernel tuning necessary for large neutron environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1498213"&gt;Bug 1498213 – Increase ARP cache size on loadbalancers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.4/html/installation_and_configuration/setting-up-a-router#deploy-router-arp-cach-tuning-for-large-scale-clusters"&gt;Chapter&amp;nbsp;4.&amp;nbsp;Setting up a Router - Red Hat Customer Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.petri.com/csc_arp_cache"&gt;ARP cache: What is it and how can it help you? - Petri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;kernel.org/doc/Documentation/networking/ip-sysctl.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Welcome%20to%20High%20Performance%20Computing%20(HPC)%20Central/page/Linux%20System%20Tuning%20Recommendations"&gt;Welcome to High Performance Computing (HPC) Central : Linux System Tuning Recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://networkengineering.stackexchange.com/questions/2327/what-happens-when-the-arp-cache-overflows"&gt;router - What happens when the ARP cache overflows? - Network Engineering Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://packetfence.org/support/faq/article/solving-neighbour-table-overflow-errors-large-subnets.html?no_cache=1"&gt;PacketFence: Solving neighbour table overflow errors (large subnets)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.e-rave.nl/kernel-neighbour-table-overflow"&gt;Kernel: Neighbour table overflow | Mark's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/arp.7.html"&gt;arp(7) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learningnetwork.cisco.com/thread/35629"&gt;ARP and ARP Cache - 35629 - The Cisco Learning Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tcpipguide.com/free/t_ARPCaching.htm"&gt;The TCP/IP Guide - ARP Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol"&gt;Address Resolution Protocol - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-10-21:2017/10/linux-a-way-to-fix-haproxy-network-connection-timeout-ping-sendmsg-Invalid-argument-socket-errno-110-connection-timed-out.html</guid><category>ping</category><category>sysctl</category><category>HAProxy</category><category>ARP</category></item><item><title>Rust: Cargo 使用本地的 crate（本地包代码）</title><link>https://mozillazg.com/2017/10/rust-cargo-use-local-crate-package.html</link><description>&lt;p&gt;默认在 Cargo.toml 中指定了包以后，Cargo build 的时候会从 crates.io 上下载远程
的对应包代码。本文将介绍如何在 Cargo.toml 中指定使用本地机器上某个目录下的包，
方便调试本地开发的包或者在没网的环境下开发和调试。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;待调用的本地包&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;假设我们要使用的包是 hello, 通过 &lt;tt class="docutils literal"&gt;cargo new hello&lt;/tt&gt; 创建：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cargo new hello
&lt;span class="go"&gt; Created library `hello` project&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; tree hello
&lt;span class="go"&gt;hello&lt;/span&gt;
&lt;span class="go"&gt;├── Cargo.toml&lt;/span&gt;
&lt;span class="go"&gt;└── src&lt;/span&gt;
&lt;span class="go"&gt;    └── lib.rs&lt;/span&gt;

&lt;span class="go"&gt;1 directory, 2 files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们给这个包加一个 &lt;tt class="docutils literal"&gt;hi&lt;/tt&gt; 函数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// cat hello/src/lib.rs&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hi {}!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们要在别的地方使用 &lt;tt class="docutils literal"&gt;hello&lt;/tt&gt; 这个包，比如调用 &lt;tt class="docutils literal"&gt;hello.hi&lt;/tt&gt; 函数，该如何设置呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;配置使用本地包&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;假设我们在 hello 的同级目录有一个 &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; 项目，这个项目将使用 &lt;tt class="docutils literal"&gt;hello&lt;/tt&gt; 包里的函数。&lt;/p&gt;
&lt;p&gt;先创建这个 &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; 项目:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cargo new demo --bin
 Created binary (application) `demo` project
&lt;/pre&gt;
&lt;p&gt;然后在项目中增加调用代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// cat demo/src/main.rs&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mozillazg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后关键的一步就是配置 Cargo.toml 使用本地的 &lt;tt class="docutils literal"&gt;hello&lt;/tt&gt; 包。&lt;/p&gt;
&lt;p&gt;先来看一下当前的目录结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ tree .
.
├── demo
│&amp;nbsp;&amp;nbsp; ├── Cargo.toml
│&amp;nbsp;&amp;nbsp; └── src
│&amp;nbsp;&amp;nbsp;     └── main.rs
└── hello
    ├── Cargo.toml
    └── src
        └── lib.rs

4 directories, 4 files
&lt;/pre&gt;
&lt;p&gt;可以看出来， &lt;tt class="docutils literal"&gt;hello&lt;/tt&gt; &lt;strong&gt;相对于&lt;/strong&gt; &lt;tt class="docutils literal"&gt;demo/Cargo.toml&lt;/tt&gt; 的目录位置是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;../hello&lt;/span&gt;&lt;/tt&gt; 。
然后我们配置一下 &lt;tt class="docutils literal"&gt;demo/Cargo.toml&lt;/tt&gt; 指定使用这个目录下的 &lt;tt class="docutils literal"&gt;hello&lt;/tt&gt; 包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[dependencies]
hello = { path = &amp;quot;../hello&amp;quot; }
&lt;/pre&gt;
&lt;p&gt;在 &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; 项目目录下执行 &lt;tt class="docutils literal"&gt;cargo run&lt;/tt&gt; 看看效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# ~/demo
$ cargo run
   Compiling hello v0.1.0 (file:///Users/mozillazg/hello)
   Compiling demo v0.1.0 (file:///Users/mozillazg/demo)
    Finished dev [unoptimized + debuginfo] target(s) in 0.47 secs
     Running `target/debug/demo`
hi mozillazg!
&lt;/pre&gt;
&lt;p&gt;可以看到 &lt;tt class="docutils literal"&gt;demo&lt;/tt&gt; 确实使用了本地的 &lt;tt class="docutils literal"&gt;hello&lt;/tt&gt; 包的代码。👍&lt;/p&gt;
&lt;p&gt;P.S. 上面的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[dependencies]
hello = { path = &amp;quot;../hello&amp;quot; }
&lt;/pre&gt;
&lt;p&gt;也可以改为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[dependencies.hello]
path = &amp;quot;../hello&amp;quot;
&lt;/pre&gt;
&lt;p&gt;😁&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/rust-lang/cargo/issues/640"&gt;Documentation should include exemples of depending on local modules · Issue #640 · rust-lang/cargo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://doc.crates.io/specifying-dependencies.html#specifying-path-dependencies"&gt;Specifying Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-10-06:2017/10/rust-cargo-use-local-crate-package.html</guid><category>crate</category><category>cargo</category></item><item><title>asyncio 学习笔记：使用抽象类 Protocol 实现异步 I/O</title><link>https://mozillazg.com/2017/08/python-asyncio-note-io-protocol.html</link><description>&lt;p&gt;本文是 &lt;a class="reference external" href="https://pymotw.com/3/asyncio/io_protocol.html"&gt;https://pymotw.com/3/asyncio/io_protocol.html&lt;/a&gt;
的学习笔记，强烈推荐直接阅读原文。&lt;/p&gt;
&lt;p&gt;这次将用两个程序介绍使用 asyncio 实现一个简单的 echo 服务端和客户端程序&lt;/p&gt;
&lt;div class="section" id="echo"&gt;
&lt;h2 id="hidecho"&gt;echo 服务端程序&lt;a class="headerlink" href="#hidecho" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先导入必需的一些模块，设置一下 asyncio 和
logging，然后再创建一个事件循环对象.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_echo_server_protocol.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;然后定义一个继承 &lt;tt class="docutils literal"&gt;asyncio.Protocol&lt;/tt&gt; 的子类，用来处理与客户端的通信。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;protocol&lt;/tt&gt; 的方法是基于服务端 socket 事件来触发的。&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EchoServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;每当有一个新的客户端连接的时候，就会触发调用 &lt;tt class="docutils literal"&gt;connection_made()&lt;/tt&gt;
方法。 &lt;tt class="docutils literal"&gt;transport&lt;/tt&gt; 参数&lt;/div&gt;
&lt;div class="line"&gt;是一个 &lt;tt class="docutils literal"&gt;asyncio.Transport&lt;/tt&gt; 实例对象，这个对象抽象了一系列使用 socket
进行异步 I/O 操作的方法。不同的通信协议提供了不同的 transport
实现，但是它们都有同样的 API.&lt;/div&gt;
&lt;div class="line"&gt;比如，有一些 transport 类用来与 socket
通信，有些用来跟子进程通过管道通信。&lt;/div&gt;
&lt;div class="line"&gt;可以通过 &lt;tt class="docutils literal"&gt;get_extra_info()&lt;/tt&gt; 获取进来的客户端的地址信息。&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_made&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_extra_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'peername'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'EchoServer_{}_{}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connection accepted'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;连接建立以后，当有数据从客户端发到服务端的时候会使用传输过来的数据调用
&lt;tt class="docutils literal"&gt;data_received()&lt;/tt&gt;
方法。这里我们记录一下收到的数据，然后立即发收到的数据通过
&lt;tt class="docutils literal"&gt;transport.write()&lt;/tt&gt; 发回客户端。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'received {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sent {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;一些 transport 支持一个特殊的 end-of-file 标识符(&lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt;)。当遇到一个
&lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt; 的时候，&lt;tt class="docutils literal"&gt;eof_received()&lt;/tt&gt;
方法会被调用。在本次实现中，&lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt;
会被发送会客户端，表示这个信号已经被收到。因为不是所有的 transport
都支持这个 &lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt; ，这个协议会首先询问 transport 是否可以安全的发送
&lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt; .&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eof_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'received EOF'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_write_eof&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_eof&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;当一个连接被关闭的时候，无论是正常关闭还是因为一个错误导致的关闭，协议的
&lt;tt class="docutils literal"&gt;connection_lost()&lt;/tt&gt;
方法都会被调用，如果是因为出错，参数中会包含一个相关的异常对象，否则这个对象就是
&lt;tt class="docutils literal"&gt;None&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_lost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ERROR: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection_lost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;需要两步来启动这个服务器。首先，应用告诉事件循环创建使用 protocol 类和
hostname 以及 socket 监听的端口信息来创建一个新的 server 对象。
&lt;tt class="docutils literal"&gt;create_server()&lt;/tt&gt; 方法是一个 coroutine,
所以它的结果必须通过事件循环来处理这样才能真正的启动服务器。这个
coroutine 完成的时候会返回一个 与事件循环相关联的 &lt;tt class="docutils literal"&gt;asyncio.Server&lt;/tt&gt;
实例.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EchoServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting up on {} port {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;然后这个事件循环需要被运行，以便接收客户端请求以及处理相关事件。&lt;/div&gt;
&lt;div class="line"&gt;对于一个长时间运行的服务器程序来说， &lt;tt class="docutils literal"&gt;run_forever()&lt;/tt&gt;
方法是最简便的实现这个功能的方法。&lt;/div&gt;
&lt;div class="line"&gt;当事件循环被停止的时候，无论是通过应用程序代码还是通过进程信号停止的，server
都可以被关闭以便能够正确的清理 socket 资源&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing server'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_closed&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;echo 客户端&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 protocol 类实现一个客户端的代码跟实现一个服务器端非常的相似.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_echo_client_protocol.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;MESSAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'This is the message. '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'It will be sent '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;'in parts.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;客户端 protocol 类定义了跟服务器端相同的方法，但是是不同的实现。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;future&lt;/tt&gt; 参数是一个 &lt;tt class="docutils literal"&gt;Future&lt;/tt&gt;
实例，用来作为客户端已经完成了一次接收来只服务端数据操作的信号。&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EchoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'EchoClient'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;当客户端成功连接到服务器时，会立即开始通信。客户端一次发送了一堆数据，因为网络等原因可能会把多个消息合并到一个消息中。当所有消息都送达的时候，将发送一个
&lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;虽然看起你所有的数据都立即被发送了，事实上 transport
对象会缓冲发出去的数据并且会设置一个回调来传输最终的数据，当 socket
的缓冲区准备好可以发送的时候会调用这个回调。这些都是由 transport
来实现的，所以应用代码可以按照 I/O 操作就像看起来那么发生的样子来实现.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_made&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_extra_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'peername'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'connectiong to {} port {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 也可以使用 transport.writelines()&lt;/span&gt;
    &lt;span class="c1"&gt;# 这里使用 transport.write() 是为了方便&lt;/span&gt;
    &lt;span class="c1"&gt;# 记录发送的每一行内容&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sending {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_write_eof&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_eof&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;当接收到来着服务器端的响应时，将会把这个响应记录下来&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'received {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;无论是收到 end-of-file 标记还是服务器端断开了连接，本地 transport
对象都将关闭并且 future 对象都会被通过设置一个结果值的方式标记为已完成。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eof_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'received EOF'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connnection_lost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'server closed connection'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connectiong_lost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;然后创建所需的 future, 以及客户端 coroutine&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;client_completed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;client_factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;EchoClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MESSAGES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client_completed&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;factory_coroutine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;client_factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;然后使用两次 wait 来处理客户端发送完成并退出的操作&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for client to complete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory_coroutine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_completed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;输出&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在一个窗口运行服务端程序，然后在另一个窗口中运行三次客户端程序，客户端程序的输出如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_echo_client_protocol.py
asyncio: Using selector: KqueueSelector
main: waiting for client to complete
EchoClient: connectiong to ::1 port 10000
EchoClient: sending b'This is the message. '
EchoClient: sending b'It will be sent '
EchoClient: sending b'in parts.'
EchoClient: received b'This is the message. It will be sent in parts.'
EchoClient: received EOF
main: closing event loop

$ python3.6 asyncio_echo_client_protocol.py
asyncio: Using selector: KqueueSelector
main: waiting for client to complete
EchoClient: connectiong to ::1 port 10000
EchoClient: sending b'This is the message. '
EchoClient: sending b'It will be sent '
EchoClient: sending b'in parts.'
EchoClient: received b'This is the message. It will be sent in parts.'
EchoClient: received EOF
main: closing event loop

$ python3.6 asyncio_echo_client_protocol.py
asyncio: Using selector: KqueueSelector
main: waiting for client to complete
EchoClient: connectiong to ::1 port 10000
EchoClient: sending b'This is the message. '
EchoClient: sending b'It will be sent '
EchoClient: sending b'in parts.'
EchoClient: received b'This is the message. It will be sent '
EchoClient: received b'in parts.'
EchoClient: received EOF
main: closing event loop
&lt;/pre&gt;
&lt;p&gt;尽管客户端是分批发送的数据，但是服务器端其实有时收到的其实是合并后的整个数据。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ asyncio_echo_server_protocol.py
asyncio: Using selector: KqueueSelector
main: starting up on localhost port 10000
EchoServer_::1_56353: connection accepted
EchoServer_::1_56353: received b'This is the message. It will be sent in parts.'
EchoServer_::1_56353: sent b'This is the message. It will be sent in parts.'
EchoServer_::1_56353: received EOF
EchoServer_::1_56353: closing

EchoServer_::1_56354: connection accepted
EchoServer_::1_56354: received b'This is the message. It will be sent in parts.'
EchoServer_::1_56354: sent b'This is the message. It will be sent in parts.'
EchoServer_::1_56354: received EOF
EchoServer_::1_56354: closing

EchoServer_::1_56355: connection accepted
EchoServer_::1_56355: received b'This is the message. It will be sent '
EchoServer_::1_56355: sent b'This is the message. It will be sent '
EchoServer_::1_56355: received b'in parts.'
EchoServer_::1_56355: sent b'in parts.'
EchoServer_::1_56355: received EOF
EchoServer_::1_56355: closing
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;完整代码&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;服务端代码&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_echo_server_protocol.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EchoServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_made&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_extra_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'peername'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'EchoServer_{}_{}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connection accepted'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'received {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sent {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eof_received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'received EOF'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;can_write_eof&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_eof&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_lost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ERROR: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection_lost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EchoServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting up on {} port {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing server'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_closed&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;客户端代码&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
# asyncio_echo_client_protocol.py
import asyncio
import functools
import logging
import sys

MESSAGES = [
    b'This is the message. ',
    b'It will be sent ',
    b'in parts.',
]
SERVER_ADDRESS = ('localhost', 10000)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(name)s: %(message)s',
    stream=sys.stderr,
)
log = logging.getLogger('main')

event_loop = asyncio.get_event_loop()


class EchoClient(asyncio.Protocol):
    def __init__(self, messages, future):
        super().__init__()
        self.messages = messages
        self.log = logging.getLogger('EchoClient')
        self.f = future

    def connection_made(self, transport):
        self.transport = transport
        self.address = transport.get_extra_info('peername')
        self.log.debug(
            'connectiong to {} port {}'.format(*self.address)
        )
        # 也可以使用 transport.writelines()
        # 这里使用 transport.write() 是为了方便
        # 记录发送的每一行内容
        for msg in self.messages:
            transport.write(msg)
            self.log.debug('sending {!r}'.format(msg))

        if transport.can_write_eof():
            transport.write_eof()

    def data_received(self, data):
        self.log.debug('received {!r}'.format(data))

    def eof_received(self):
        self.log.debug('received EOF')
        self.transport.close()
        if not self.f.done():
            self.f.set_result(True)

    def connnection_lost(self, exc):
        self.log.debug('server closed connection')
        self.transport.close()
        if not self.f.done():
            self.f.set_result(True)
        super().connectiong_lost(exc)


client_completed = asyncio.Future()
client_factory = functools.partial(
    EchoClient,
    messages=MESSAGES,
    future=client_completed
)
factory_coroutine = event_loop.create_connection(
    client_factory,
    *SERVER_ADDRESS,
)

log.debug('waiting for client to complete')
try:
    event_loop.run_until_complete(factory_coroutine)
    event_loop.run_until_complete(client_completed)
finally:
    log.debug('closing event loop')
    event_loop.close()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymotw.com/3/asyncio/io_protocol.html"&gt;Asynchronous I/O with Protocol Class Abstractions — PyMOTW
3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/asyncio-protocol.html"&gt;18.5.4. Transports and protocols (callback based API) — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-26:2017/08/python-asyncio-note-io-protocol.html</guid><category>asyncio</category></item><item><title>asyncio 学习笔记：同步原语</title><link>https://mozillazg.com/2017/08/python-asyncio-note-synchronization-primitives.html</link><description>&lt;p&gt;本文是 &lt;a class="reference external" href="https://pymotw.com/3/asyncio/synchronization.html"&gt;https://pymotw.com/3/asyncio/synchronization.html&lt;/a&gt;
的学习笔记，强烈推荐直接阅读原文。&lt;/p&gt;
&lt;p&gt;虽然 &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; 应用一般都是单线程程序，但是它们仍然是并发程序。
为了支持安全的并发，&lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; 实现了一些 &lt;tt class="docutils literal"&gt;threading&lt;/tt&gt; 和
&lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; 模块中比较常用的类似的同步原语。&lt;/p&gt;
&lt;div class="section" id="lock"&gt;
&lt;h2 id="hidlock"&gt;Lock&lt;a class="headerlink" href="#hidlock" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Lock&lt;/tt&gt; 可以用来安全的访问共享资源。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_lock.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'callback releasing lock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coro1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro1 wating for the lock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro1 acquired lock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro1 released lock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coro2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro2 wating for the lock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro2 acquired lock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro2 released lock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'acquiring the lock before starting coroutines'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'lock acquired: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locked&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for coroutines'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;coro1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;coro2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; 来获取锁，使用 &lt;tt class="docutils literal"&gt;release()&lt;/tt&gt; 方法来释放锁。也可以用
&lt;tt class="docutils literal"&gt;with await&lt;/tt&gt; 上下文语句来获取和释放锁。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_lock.py
acquiring the lock before starting coroutines
lock acquired: True
waiting for coroutines
coro1 wating for the lock
coro2 wating for the lock
callback releasing lock
coro1 acquired lock
coro1 released lock
coro2 acquired lock
coro2 released lock
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="event"&gt;
&lt;h2 id="hidevent"&gt;Event&lt;a class="headerlink" href="#hidevent" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;asyncio.Event&lt;/tt&gt; 类似 &lt;tt class="docutils literal"&gt;threading.Event&lt;/tt&gt;
用来允许多个消费者等待某个事情发生，不用通过监听一个特殊的值的来说实现类似通知的功能。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_event.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'setting event in callback'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coro1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro1 waiting for event'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro1 triggered'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coro2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro2 waiting for event'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'coro2 triggered'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'event start state: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_set&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;coro1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;coro2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'event end state: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_set&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;和 &lt;tt class="docutils literal"&gt;Lock&lt;/tt&gt; 一样，&lt;tt class="docutils literal"&gt;coro1()&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;coro2()&lt;/tt&gt; 都在等待 event 被设置。&lt;/div&gt;
&lt;div class="line"&gt;不同的是它们都在 event 状态一发生变化的时候就启动了，它们不需要对
event 对象获取一个唯一的所有权。&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_event.py
event start state: False
coro1 waiting for event
coro2 waiting for event
setting event in callback
coro1 triggered
coro2 triggered
event end state: True
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="condition"&gt;
&lt;h2 id="hidcondition"&gt;Condition&lt;a class="headerlink" href="#hidcondition" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Condition&lt;/tt&gt; 的效果类似 &lt;tt class="docutils literal"&gt;Event&lt;/tt&gt;，不同的是它不是唤醒所有等待中的
coroutine, 而是通过 &lt;tt class="docutils literal"&gt;notify()&lt;/tt&gt; 唤醒指定数量的待唤醒 coroutine。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_condition.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer {} is waiting'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer {} triggered'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ending consumer {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;manipulate_condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting manipulate_condition'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'notifying {} consumers'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'notifying remaining consumers'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ending manipulate_condition'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;consumers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manipulate_condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;在这个例子中，我们启动了五个 Condition 的消费者，每个都使用 &lt;tt class="docutils literal"&gt;wait()&lt;/tt&gt;
方法来等待它们可以继续处理的通知。&lt;tt class="docutils literal"&gt;manipulate_condition()&lt;/tt&gt;
首先通知了一个消费者，然后有通知了两个消费者，最后通知剩下的所有消费者。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_condition.py
starting manipulate_condition
consumer 0 is waiting
consumer 4 is waiting
consumer 1 is waiting
consumer 2 is waiting
consumer 3 is waiting
notifying 1 consumers
consumer 0 triggered
ending consumer 0
notifying 2 consumers
consumer 4 triggered
ending consumer 4
consumer 1 triggered
ending consumer 1
notifying remaining consumers
ending manipulate_condition
consumer 2 triggered
ending consumer 2
consumer 3 triggered
ending consumer 3
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="queue"&gt;
&lt;h2 id="hidqueue"&gt;Queue&lt;a class="headerlink" href="#hidqueue" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;asyncio.Queue&lt;/tt&gt; 为 coroutines
实现了一个先进先出的数据结构，类似多线程中的 &lt;tt class="docutils literal"&gt;queue.Queue&lt;/tt&gt;
，多进程中的 &lt;tt class="docutils literal"&gt;multiprocessing.Queue&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_queue.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer {}: waiting for item'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer {}: waiting for item'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer {}: has item {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# 在这个程序中 None 是个特殊的值，表示终止信号&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'consumer {}: ending'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_workers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'producer: starting'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 向队列中添加一些数据&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_workers&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'producer: added task {} to the queue'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# 通过 None 这个特殊值来通知消费者退出&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'producer: adding stop signals to the queue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_workers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'producer: waiting for queue to empty'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'producer: ending'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_consumers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 创建指定大小的队列，这样的话生产者将会阻塞&lt;/span&gt;
    &lt;span class="c1"&gt;# 直到有消费者获取数据&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num_consumers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 调度消费者&lt;/span&gt;
    &lt;span class="n"&gt;consumers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_consumers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# 调度生产者&lt;/span&gt;
    &lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_consumers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# 等待所有 coroutines 都完成&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;prod&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;put()&lt;/tt&gt; 添加项或者通过 &lt;tt class="docutils literal"&gt;get()&lt;/tt&gt;
移除项都是异步操作，同时有可能队列大小达到指定大小（阻塞添加操作）或者队列变空（阻塞所有获取项的调用）。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_queue.py
consumer 0: waiting for item
consumer 0: waiting for item
consumer 1: waiting for item
consumer 1: waiting for item
producer: starting
producer: added task 0 to the queue
producer: added task 1 to the queue
consumer 0: has item 0
consumer 1: has item 1
producer: added task 2 to the queue
producer: added task 3 to the queue
consumer 0: waiting for item
consumer 0: has item 2
producer: added task 4 to the queue
consumer 1: waiting for item
consumer 1: has item 3
producer: added task 5 to the queue
producer: adding stop signals to the queue
consumer 0: waiting for item
consumer 0: has item 4
consumer 1: waiting for item
consumer 1: has item 5
producer: waiting for queue to empty
consumer 0: waiting for item
consumer 0: has item None
consumer 0: ending
consumer 1: waiting for item
consumer 1: has item None
consumer 1: ending
producer: ending
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymotw.com/3/asyncio/synchronization.html"&gt;Synchronization Primitives — PyMOTW
3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/asyncio-sync.html"&gt;18.5.7. Synchronization primitives — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-26:2017/08/python-asyncio-note-synchronization-primitives.html</guid><category>asyncio</category></item><item><title>asyncio 学习笔记：控制组合式 Coroutines</title><link>https://mozillazg.com/2017/08/python-asyncio-note-control-Coroutines.html</link><description>&lt;p&gt;本文是 &lt;a class="reference external" href="https://pymotw.com/3/asyncio/control.html"&gt;https://pymotw.com/3/asyncio/control.html&lt;/a&gt;
的学习笔记，强烈推荐直接阅读原文。&lt;/p&gt;
&lt;p&gt;对于线性执行的 Coroutines 可以很方便的通过 &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; 来控制。
对于组合式的 Coroutines，比如在一个 coroutine 中等待其他并发执行的
Coroutines 完成的操作也可以通过 asyncio 模块来实现。&lt;/p&gt;
&lt;div class="section" id="coroutines"&gt;
&lt;h2 id="hidcoroutines"&gt;等待多个 Coroutines&lt;a class="headerlink" href="#hidcoroutines" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;在一个 Coroutine 中等待其他多个 Coroutines
操作完成是一个很常见的需求，比如下载一批数据，执行对顺序没有要求，只想要最后的结果。&lt;/div&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;wait()&lt;/tt&gt; 方法可以实现暂停当前 Coroutine， 直到后台其他 Coroutines
操作完成：&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_wait.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done with phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'phase {} result'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for phases to complete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'results: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 内部，它使用一个集合来保存它创建的 &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt;
实例，所以它保存的 &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; 的结果是无序的。&lt;tt class="docutils literal"&gt;wait&lt;/tt&gt;
返回一个由两个集合组成的元祖，一个保存状态为 done 的 &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt;
，一个保存状态为 pending 的 &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_wait.py
starting main
waiting for phases to complete
in phase 0
in phase 2
in phase 1
done with phase 0
done with phase 1
done with phase 2
results: ['phase 0 result', 'phase 2 result', 'phase 1 result']
&lt;/pre&gt;
&lt;p&gt;当调用 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 时指定 &lt;tt class="docutils literal"&gt;timeout&lt;/tt&gt; 参数才会有可能出现结果中包含状态为
pending 的 &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_wait_timeout.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'phase {} canceled'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done with phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'phase {} result'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting 0.1 for phases to complete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{} completed and {} pending'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'canceling tasks'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'exiting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;对于 pending 的 task 最好是把它们 cancel
掉，否则事件循环在之后会继续执行它们或者退出程序的时候会有警告信息.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_wait_timeout.py
starting main
waiting 0.1 for phases to complete
in phase 0
in phase 2
in phase 1
done with phase 0
1 completed and 2 pending
canceling tasks
exiting main
phase 1 canceled
phase 2 canceled
&lt;/pre&gt;
&lt;p&gt;不 cancel 会警告的情况:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_wait_timeout_without_cancel.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'phase {} canceled'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done with phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'phase {} result'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting 0.1 for phases to complete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{} completed and {} pending'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'exiting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_wait_timeout_without_cancel_warn.py
starting main
waiting 0.1 for phases to complete
in phase 1
in phase 0
in phase 2
done with phase 0
1 completed and 2 pending
exiting main
done with phase 1
Task was destroyed but it is pending!
task: &amp;lt;Task pending coro=&amp;lt;phase() done, defined at asyncio_wait_timeout_without_cancel_warn.py:5&amp;gt; wait_for=&amp;lt;Future pending cb=[&amp;lt;TaskWakeupMethWrapper object at 0x10e227918&amp;gt;()]&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;pending 还会继续执行的情况:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_wait_timeout_without_cancel_continue.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'phase {} canceled'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done with phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'phase {} result'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting 0.1 for phases to complete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{} completed and {} pending'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pending&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'exiting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_wait_timeout_without_cancel_continue.py
starting main
waiting 0.1 for phases to complete
in phase 1
in phase 0
in phase 2
done with phase 0
1 completed and 2 pending
exiting main
done with phase 1
done with phase 2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;收集 Coroutines 结果&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果 Coroutines
是在程序中显示生成的，并且只关心返回值结果的话，&lt;tt class="docutils literal"&gt;gather()&lt;/tt&gt;
是一种比较好的收集多个操作结果的方法：&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_gather.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phase1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in phase1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done with phase1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'phase1 result'&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phase2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in phase2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done with phase2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'phase2 result'&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for phases to complete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;phase1&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;phase2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'results: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;通过 gather 创建的 task
对外部是不可见的，所以它们不能被取消。返回值是按输入参数顺序保存的对应
coroutine
的执行结果，无论真正执行的时候是否按顺序执行的，最终的结果都是有序的。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_gather.py
starting main
waiting for phases to complete
in phase2
in phase1
done with phase2
done with phase1
results: ['phase1 result', 'phase2 result']
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;当后台操作完成的时候做一些事情&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;tt class="docutils literal"&gt;as_completed()&lt;/tt&gt; 是一个生成器，它将管理传入的 coroutines 执行，&lt;/div&gt;
&lt;div class="line"&gt;每次迭代都将返回一个 coroutine 执行完成的 task。&lt;/div&gt;
&lt;div class="line"&gt;跟 &lt;tt class="docutils literal"&gt;wait()&lt;/tt&gt; 一样，&lt;tt class="docutils literal"&gt;as_completed()&lt;/tt&gt; 也不会保证顺序，跟 &lt;tt class="docutils literal"&gt;wait()&lt;/tt&gt;
的区别就是它不会等待所有的&lt;/div&gt;
&lt;div class="line"&gt;coroutine 操作都完成以后才能做其他操作。&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_as_completed.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'done with phase {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'phase {} result'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting main'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_phases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for phases to complete'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;next_to_complete&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_completed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phases&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;next_to_complete&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'recevived answer {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'results: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_as_completed.py
starting main
waiting for phases to complete
in phase 1
in phase 2
in phase 0
done with phase 2
recevived answer 'phase 2 result'
done with phase 1
recevived answer 'phase 1 result'
done with phase 0
recevived answer 'phase 0 result'
results: ['phase 2 result', 'phase 1 result', 'phase 0 result']
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymotw.com/3/asyncio/control.html"&gt;Composing Coroutines with Control Structures — PyMOTW
3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/asyncio-task.html"&gt;18.5.3. Tasks and coroutines — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-25:2017/08/python-asyncio-note-control-Coroutines.html</guid><category>asyncio</category></item><item><title>asyncio 学习笔记：产生异步结果</title><link>https://mozillazg.com/2017/08/python-asyncio-note-future-usage.html</link><description>&lt;p&gt;本文是 &lt;a class="reference external" href="https://pymotw.com/3/asyncio/futures.html"&gt;https://pymotw.com/3/asyncio/futures.html&lt;/a&gt;
的学习笔记，强烈推荐直接阅读原文。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Future&lt;/tt&gt; 对象表示一个还未完成的工作，事件循环可以监视 &lt;tt class="docutils literal"&gt;Future&lt;/tt&gt;
对象的状态直至它变成
done，这将运行程序的一部分等待另一部分完成一些工作。&lt;/p&gt;
&lt;div class="section" id="future"&gt;
&lt;h2 id="hidfuture"&gt;等待一个 Future 对象&lt;a class="headerlink" href="#hidfuture" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_future_event_loop.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mark_done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'setting future result to {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;all_done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'scheduling make_done'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mark_done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'the result'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entering event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'returned result: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'future result: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;当调用 &lt;tt class="docutils literal"&gt;set_result&lt;/tt&gt; 方法后，&lt;tt class="docutils literal"&gt;Future&lt;/tt&gt; 对象的状态会被修改为 done,
同时 `Future`` 实例也会保存设置的结果值，供随后使用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_future_event_loop.py
scheduling make_done
entering event loop
setting future result to 'the result'
returned result: 'the result'
closing event loop
future result: 'the result'
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Future&lt;/tt&gt; 对象也可以同 &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; 关键字一起使用:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_future_await.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mark_done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'setting future result to {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;all_done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'scheduling mark_done'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mark_done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'the result'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;all_done&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'returned result: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; 会返回 &lt;tt class="docutils literal"&gt;Future&lt;/tt&gt; 的结果：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_future_await.py
scheduling mark_done
setting future result to 'the result'
returned result: 'the result'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;Future 回调函数&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Future&lt;/tt&gt;
在完成的时候可以执行一些回调函数，回调函数按注册时的顺序进行调用:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_future_callback.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{}: future done: {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'registering callbacks on future'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_done_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;register_callbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'setting result of future'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'the result'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;all_done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_done&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;回调函数的第一个参数是 &lt;tt class="docutils literal"&gt;Future&lt;/tt&gt; 实例，要传递其他参数可以使用
&lt;tt class="docutils literal"&gt;functools.partial()&lt;/tt&gt; 来实现。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_future_callback.py
registering callbacks on future
setting result of future
1: future done: the result
2: future done: the result
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;参考资料&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymotw.com/3/asyncio/futures.html"&gt;Producing Results Asynchronously — PyMOTW
3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio-task.html"&gt;18.5.3. Tasks and coroutines — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-20:2017/08/python-asyncio-note-future-usage.html</guid><category>asyncio</category></item><item><title>asyncio 学习笔记：并发执行 Task</title><link>https://mozillazg.com/2017/08/python-asyncio-note-task-usage.html</link><description>&lt;p&gt;本文是 &lt;a class="reference external" href="https://pymotw.com/3/asyncio/tasks.html"&gt;https://pymotw.com/3/asyncio/tasks.html&lt;/a&gt;
的学习笔记，强烈推荐直接阅读原文。&lt;/p&gt;
&lt;p&gt;Task 是跟事件循环交互的一种主要方式。Task 包装并追踪 Coroutine
的完成状态。Task 是 &lt;tt class="docutils literal"&gt;Future&lt;/tt&gt; 的子类，因此其他 Coroutine 可以 wait Task
并且在 Task 完成时还可以获取 Coroutine 的结果。&lt;/p&gt;
&lt;div class="section" id="task"&gt;
&lt;h2 id="hidtask"&gt;启动 Task&lt;a class="headerlink" href="#hidtask" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;create_task&lt;/tt&gt; 来创建一个 &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; 实例:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_create_task.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in task_func'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'the result'&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'creating task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task completed {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'return value: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到 &lt;tt class="docutils literal"&gt;await task&lt;/tt&gt; 返回的是 &lt;tt class="docutils literal"&gt;task_func&lt;/tt&gt; 函数的返回值:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_create_task.py
creating task
waiting for &amp;lt;Task pending coro=&amp;lt;task_func() running at asyncio_create_task.py:5&amp;gt;&amp;gt;
in task_func
task completed &amp;lt;Task finished coro=&amp;lt;task_func() done, defined at asyncio_create_task.py:5&amp;gt; result='the result'&amp;gt;
return value: 'the result'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;取消 Task&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以在 &lt;tt class="docutils literal"&gt;Task&lt;/tt&gt; 完成之前取消 task 的操作:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_cancel_task.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in task_func'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'the result'&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'creating task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'canceling task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'canceled task {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'caught error from canceled task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task result: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;当在事件循环启动前取消一下 task 时， &lt;tt class="docutils literal"&gt;await task&lt;/tt&gt; 会抛出
&lt;tt class="docutils literal"&gt;CancelledError&lt;/tt&gt; 异常:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_cancel_task.py
creating task
canceling task
canceled task &amp;lt;Task cancelling coro=&amp;lt;task_func() running at asyncio_cancel_task.py:5&amp;gt;&amp;gt;
caught error from canceled task
&lt;/pre&gt;
&lt;p&gt;当取消一个正在等待其他 concurrent 操作的 task 时，等待操作的位置会抛出
&lt;tt class="docutils literal"&gt;CancelledError&lt;/tt&gt; 异常:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_cancel_task2.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in task_func, sleeping'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task_func was canceled'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'the result'&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_canceller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in task_canceller'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'canceled the task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'creating task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_canceller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'main() also sees task as canceled'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_cancel_task2.py
creating task
in task_func, sleeping
in task_canceller
canceled the task
task_func was canceled
main() also sees task as canceled
&lt;/pre&gt;
&lt;p&gt;上面 asyncio_cancel_task2.py 的 &lt;tt class="docutils literal"&gt;task_func&lt;/tt&gt; 中如果没有把
&lt;tt class="docutils literal"&gt;CancelledError&lt;/tt&gt; 异常再 raise 出来的话，其实还是会继续执行下去的:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_cancel_task3.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in task_func, sleeping'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CancelledError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task_func was canceled'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task_func still active'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'the result'&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;task_canceller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in task_canceller'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'canceled the task: {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'creating task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_func&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task_canceller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task completed {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'return value: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_cancel_task3.py
creating task
in task_func, sleeping
in task_canceller
canceled the task: True
task_func was canceled
task_func still active
task completed &amp;lt;Task finished coro=&amp;lt;task_func() done, defined at asyncio_cancel_task3.py:5&amp;gt; result='the result'&amp;gt;
return value: 'the result'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="coroutine-task"&gt;
&lt;h2 id="hidcoroutine-task"&gt;在 Coroutine 中创建 Task&lt;a class="headerlink" href="#hidcoroutine-task" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ensure_future()&lt;/tt&gt; 函数返回一个与一个 coroutine 的执行相关连的
Task。这个 Task
实例可以作为变量传入其他代码中，这样的话其他代码就可以直接 await 这个
Task 而不需要知道原始的 coroutine 是如何被创建的。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_ensure_future.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'wrapped'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inner: starting'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inner: waiting for {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inner: task returned {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starter&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starter: creating task'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starter: waiting for inner'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starter: inner returned'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entering event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;starter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;需要注意的是，传入 &lt;tt class="docutils literal"&gt;ensure_future()&lt;/tt&gt; 的 coroutine
不会立马启动，需要有某个地方使用了 &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; 语句操作创建的 task
的时候它才会被执行。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_ensure_future.py
entering event loop
starter: creating task
starter: waiting for inner
inner: starting
inner: waiting for &amp;lt;Task pending coro=&amp;lt;wrapped() running at asyncio_ensure_future.py:5&amp;gt;&amp;gt;
wrapped
inner: task returned 'result'
starter: inner returned
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;参考资料&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymotw.com/3/asyncio/tasks.html"&gt;Executing Tasks Concurrently — PyMOTW
3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio-task.html"&gt;18.5.3. Tasks and coroutines — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-20:2017/08/python-asyncio-note-task-usage.html</guid><category>asyncio</category></item><item><title>asyncio 学习笔记：调用定时函数</title><link>https://mozillazg.com/2017/08/python-asyncio-note-coroutine-schedule.html</link><description>&lt;p&gt;本文是 &lt;a class="reference external" href="https://pymotw.com/3/asyncio/scheduling.html"&gt;https://pymotw.com/3/asyncio/scheduling.html&lt;/a&gt;
的学习笔记，强烈推荐直接阅读原文。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;立马执行一个函数&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;call_soon&lt;/tt&gt;
支持在下一次事件循环的迭代中执行提供的回调函数。回调函数只能传递位置参数，如果想指定关键字参数的话，可以使用
functools.partial 函数来辅助使用。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_call_soon.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwarg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'callback with {0} and {1}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwarg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'register callbacks'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwarg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'not default'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entering event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;回调函数会按调度顺序执行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_call_soon.py
entering event loop
register callbacks
callback with 1 and default
callback with 2 and not default
closing event loop
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;延迟执行&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;call_later&lt;/tt&gt;
方法实现延迟多少秒后执行回调函数。&lt;tt class="docutils literal"&gt;call_later&lt;/tt&gt;
的第一个参数是延迟多少秒，第二个参数是回调函数，后面的参数是回调函数的位置参数:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_call_later.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'callback with {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'register callbacks'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entering event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_call_later.py
entering event loop
register callbacks
callback with 3
callback with 2
callback with 1
closing event loop
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;指定时间执行&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;call_at&lt;/tt&gt;
方法实现在将来指定的某个时间执行回调函数。&lt;tt class="docutils literal"&gt;call_at&lt;/tt&gt;
的第一个参数是执行的时间点，第二个参数是回调函数，后面的参数是回调函数的位置参数。有一点需要注意的是不用使用
&lt;tt class="docutils literal"&gt;time&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;datetime&lt;/tt&gt; 模块的时间点，要使用 &lt;tt class="docutils literal"&gt;loop.time()&lt;/tt&gt;
获取当前时间。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_call_at.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'callback with {0} at {1}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'clock time: {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'loop time: {0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'register callbacks'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_soon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entering event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;再次提醒，不要用 &lt;tt class="docutils literal"&gt;time.time()&lt;/tt&gt; 来计算时间，而是应该使用
&lt;tt class="docutils literal"&gt;loop.time()&lt;/tt&gt;，它们其实是不同的：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_call_at.py
entering event loop
clock time: 1502272983.100926
loop time: 513773.744280748
register callbacks
callback with 3 at 513773.744416457
callback with 2 at 513773.848605754
callback with 1 at 513773.94877137
closing event loop
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymotw.com/3/asyncio/scheduling.html"&gt;Scheduling Calls to Regular Functions — PyMOTW
3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio-eventloop.html"&gt;18.5.1. Base Event Loop — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-17:2017/08/python-asyncio-note-coroutine-schedule.html</guid><category>asyncio</category></item><item><title>asyncio 学习笔记：基本用法</title><link>https://mozillazg.com/2017/08/python-asyncio-note-coroutines-base-usage.html</link><description>&lt;p&gt;本文是 &lt;a class="reference external" href="https://pymotw.com/3/asyncio/coroutines.html"&gt;https://pymotw.com/3/asyncio/coroutines.html&lt;/a&gt;
的学习笔记，强烈推荐直接阅读原文。&lt;/p&gt;
&lt;div class="section" id="coroutine"&gt;
&lt;h2 id="hidcoroutine"&gt;启动一个 Coroutine&lt;a class="headerlink" href="#hidcoroutine" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;启动一个 Coroutine 的最简单的一个方法就是使用
&lt;tt class="docutils literal"&gt;asyncio.run_until_complete&lt;/tt&gt; 函数：&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_coroutine.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in coroutine'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'starting coroutine'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;coro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entering event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'closing event loop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;首先是获取一个事件循环，然后用 &lt;tt class="docutils literal"&gt;run_until_complete&lt;/tt&gt; 执行 Coroutine
对象，当 Coroutine 执行完成并退出时， &lt;tt class="docutils literal"&gt;run_until_complete&lt;/tt&gt;
也会随后退出。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_coroutine.py
starting coroutine
entering event loop
in coroutine
closing event loop
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;获取 Coroutine 的返回值&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;run_until_complete&lt;/tt&gt; 会把 Coroutine
的返回值当做自身的返回值返回给调用方：&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_coroutine_return.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in coroutine'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'result'&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'it returned: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_coroutine_return.py
in coroutine
it returned: 'result'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;链式调用 Coroutine&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;即在一个 Coroutine 函数中调用另外的 Coroutine 函数，同时还需要等待这个
Coroutine 函数返回结果。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_coroutine_chain.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;one&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in one'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'one'&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in two'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'two with arg {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in outer'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for one'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for two'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'result value: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以直接使用 &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; 等待 Coroutine 返回结果。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 asyncio_coroutine_chain.py
in outer
waiting for one
in one
waiting for two
in two
result value: ('one', 'two with arg one')
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;使用生成器代替 Coroutine&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 Python 3.5 之前的 Python 3 版本中还没有 &lt;tt class="docutils literal"&gt;async/await&lt;/tt&gt;
语法，我们可以使用 &lt;tt class="docutils literal"&gt;asyncio.coroutine&lt;/tt&gt; 装饰器加 &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt;
来实现同样的功能:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="c1"&gt;# asyncio_generator.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;


&lt;span class="nd"&gt;&amp;#64;asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;one&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in one'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'one'&lt;/span&gt;


&lt;span class="nd"&gt;&amp;#64;asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in two'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'two with arg {}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;&amp;#64;asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'in outer'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for one'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'waiting for two'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt;


&lt;span class="n"&gt;event_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'result value: {!r}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;event_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.4 asyncio_generator.py
in outer
waiting for one
in one
waiting for two
in two
result value: ('one', 'two with arg one')
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymotw.com/3/asyncio/coroutines.html"&gt;Cooperative Multitasking with Coroutines — PyMOTW
3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio-eventloop.html"&gt;18.5.1. Base Event Loop — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-17:2017/08/python-asyncio-note-coroutines-base-usage.html</guid><category>asyncio</category></item><item><title>Python: 如何在一个模块中执行另一个模块的 if __name__ == '__main__' 部分的代码</title><link>https://mozillazg.com/2017/08/python-how-to-calling-if-__name__-==-__main__-in-one-module-from-a-function-in-another-module.html</link><description>&lt;p&gt;如题所述，我们将一起来看一下如果想在一个模块中执行另一个模块中的
&lt;tt class="docutils literal"&gt;if __name__ == '__main__'&lt;/tt&gt; 部分的代码有哪些常用的方法。&lt;/p&gt;
&lt;p&gt;要执行的模块的代码:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;run code below __name__ == '__main__'&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;python another.py&lt;/tt&gt; 运行：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 another.py test
run code below __name__ == '__main__'
['test']
&lt;/pre&gt;
&lt;div class="section" id="subprocess"&gt;
&lt;h2 id="hidsubprocess"&gt;使用 subprocess 模块&lt;a class="headerlink" href="#hidsubprocess" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;test_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;another.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 test_a.py
b&amp;quot;run code below __name__ == '__main__'\n['test']\n&amp;quot;
&lt;/pre&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;subprocess&lt;/tt&gt; 的优点就是因为其实是通过创建一个子进程来执行的程序，所以不受子程序的影响，不会出现程序抛异常或主动退出进程导致主程序也退出的尴尬问题。 缺点就是需要创建子进程，相对来说资源消耗比较大。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;subprocess&lt;/tt&gt; 详细的用法详见
&lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="runpy"&gt;
&lt;h2 id="hidrunpy"&gt;使用 runpy 模块&lt;a class="headerlink" href="#hidrunpy" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;test_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;runpy&lt;/span&gt;

&lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;another.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 test_b.py
run code below __name__ == '__main__'
[]
&lt;/pre&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;runpy&lt;/tt&gt; 的优点就是不需要创建子进程，相对来说资源消耗比较小。 缺点就是主程序会受待执行程序的影响，会出现待执行程序中抛异常或主动退出会导致主程序也退出的尴尬问题。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;runpy&lt;/tt&gt; 的详细用法详见 &lt;a class="reference external" href="https://docs.python.org/3/library/runpy.html"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;结束语&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这两种方法就是比较常用的在一个模块中执行另一个模块的
&lt;tt class="docutils literal"&gt;if __name__ == '__main__'&lt;/tt&gt;
部分的代码的方法。总结来说就是，一个是在子进程中执行代码，一个是在当前进程中执行代码。&lt;/p&gt;
&lt;p&gt;希望本文能对你有所帮助。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;参考资料&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html"&gt;17.5. subprocess — Subprocess management — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/runpy.html"&gt;31.4. runpy — Locating and executing Python modules — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0299/"&gt;PEP 299 -- Special __main__() function in modules |
Python.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-08-01:2017/08/python-how-to-calling-if-__name__-==-__main__-in-one-module-from-a-function-in-another-module.html</guid><category>subprocess</category><category>runpy</category></item><item><title>Python: 僵尸进程的产生和清除方法</title><link>https://mozillazg.com/2017/07/python-how-to-generate-kill-clean-zombie-process.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;僵尸进程产生的原因&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 unix 或 unix-like
的系统中，当一个子进程退出后，它就会变成一个僵尸进程，如果父进程没有通过
&lt;tt class="docutils literal"&gt;wait&lt;/tt&gt;
系统调用来读取这个子进程的退出状态的话，这个子进程就会一直维持僵尸进程状态。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zombie_process"&gt;Zombie process -
Wikipedia&lt;/a&gt;
中是这样描述的：&lt;/p&gt;
&lt;blockquote&gt;
On Unix and Unix-like computer operating systems, a zombie process
or defunct process is a process that has completed execution (via
the exit system call) but still has an entry in the process table:
it is a process in the &amp;quot;Terminated state&amp;quot;. This occurs for child
processes, where the entry is still needed to allow the parent
process to read its child's exit status: once the exit status is
read via the wait system call, the zombie's entry is removed from
the process table and it is said to be &amp;quot;reaped&amp;quot;. A child process
always first becomes a zombie before being removed from the resource
table. In most cases, under normal system operation zombies are
immediately waited on by their parent and then reaped by the system
– processes that stay zombies for a long time are generally an error
and cause a resource leak.&lt;/blockquote&gt;
&lt;p&gt;并且僵尸进程无法通过 &lt;tt class="docutils literal"&gt;kill&lt;/tt&gt; 命令来清除。&lt;/p&gt;
&lt;p&gt;本文将探讨如何手动制造一个僵尸进程以及清除僵尸进程的办法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;手动制造一个僵尸进程&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了便于后面讲解清除僵尸进程的方法，我们使用日常开发中经常使用的
&lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt;
模块来制造僵尸进程（准确的来说是制造一个长时间维持僵尸进程状态的子进程）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;test_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_process&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exit child process &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python test_a.py &amp;amp;
[1] 10091
$ 2017-07-20 21:28:14,792 - INFO - exit child process 10106

$ ps aux |grep 10106
mozillazg              10126   0.0  0.0  2434836    740 s006  R+    0:00.00 grep 10106
mozillazg              10106   0.0  0.0        0      0 s006  Z     0:00.00 (Python)
&lt;/pre&gt;
&lt;p&gt;可以看到，子进程 &lt;tt class="docutils literal"&gt;10106&lt;/tt&gt; 变成了僵尸进程（状态是 &lt;tt class="docutils literal"&gt;Z&lt;/tt&gt; ）。&lt;/p&gt;
&lt;p&gt;既然已经可以控制僵尸进程的产生了，那我们就可以进入下一步如何清除僵尸进程了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;清除僵尸进程&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;清除僵尸进程至少有三种方法：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;第一种方法就是结束父进程（一般是主进程）。当父进程退出的时候僵尸进程随后也会被清除。
当然这个是个暴力的手段，因为我们一般肯定是希望父进程继续运行的。&lt;/li&gt;
&lt;li&gt;第二种方法就是通过 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt;
调用来读取子进程退出状态。比如通过 &lt;tt class="docutils literal"&gt;multiprocessing.Process&lt;/tt&gt; 产出的进程可以通过子进程的 &lt;tt class="docutils literal"&gt;join()&lt;/tt&gt; 方法来 wait，也可以在父进程中处理 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt;
信号，在处理程序中调用 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 系统调用或者直接设置为 &lt;tt class="docutils literal"&gt;SIG_IGN&lt;/tt&gt; 来清除僵尸进程。&lt;/li&gt;
&lt;li&gt;第三种办法就说把进程变成孤儿进程，这样进程就会自动交由 init 进程（pid 为 1 的进程）来处理，一般 init 进程都包含对僵尸进程进行处理的逻辑。（这里有个坑，那就是 docker 容器中一般 pid 为 1 进程就是主程序的进程，而不是我们预期的 init 进程。如果要使用这种方法的话，需要注意一下类似的场景）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="sigchld"&gt;
&lt;h3 id="hidsigchld"&gt;处理 SIGCHLD 信号&lt;a class="headerlink" href="#hidsigchld" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;子进程退出时系统会向父进程发送 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 信号，父进程可以通过注册
&lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 信号处理程序，在信号处理程序中调用 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt;
系统调用来清理僵尸进程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;test_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;errno&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_process&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;exitcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exit child process &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; with exitcode &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wait_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;receive SIGCHLD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# -1 表示任意子进程&lt;/span&gt;
            &lt;span class="c1"&gt;# os.WNOHANG 表示如果没有可用的需要 wait 退出状态的子进程，立即返回不阻塞&lt;/span&gt;
            &lt;span class="n"&gt;cpid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WNOHANG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cpid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;no child process was immediately available&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;exitcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child process &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; exit with exitcode &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ECHILD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;current process has no existing unwaited-for child processes.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;handle SIGCHLD end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python test_b.py  &amp;amp;
[1] 10159
$ 2017-07-20 21:28:56,085 - INFO - exit child process 10174 with exitcode 3
2017-07-20 21:28:56,088 - INFO - receive SIGCHLD
2017-07-20 21:28:56,089 - INFO - child process 10174 exit with exitcode 3
2017-07-20 21:28:56,090 - WARNING - current process has no existing unwaited-for child processes.
2017-07-20 21:28:56,090 - INFO - handle SIGCHLD end

$ ps aux |grep 10174
mozillazg              10194   0.0  0.0  2432788    556 s006  R+    0:00.00 grep 10174
&lt;/pre&gt;
&lt;p&gt;可以看到，子进程退出变成僵尸进程后，系统给父进程发送了 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt;
信号，我们在 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 信号的处理程序中通过 &lt;tt class="docutils literal"&gt;os.waitpid&lt;/tt&gt; 调用
&lt;tt class="docutils literal"&gt;wait&lt;/tt&gt;
系统调用后阻止了子进程一直处于僵尸进程状态，从而实现了清除僵尸进程的效果。&lt;/p&gt;
&lt;p&gt;也可以把 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 设置为 &lt;tt class="docutils literal"&gt;SIG_IGN&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;把进程变成孤儿进程&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;什么是孤儿进程：当父进程已经退出但是子进程仍旧在运行时，这个子进程就变成了孤儿进程。
系统会把孤儿进程的父进程设置为 init 进程，将由 init 进程来管理这个孤儿进程。&lt;/p&gt;
&lt;p&gt;我们修改一下前面的程序，改成由子进程的子进程来执行具体逻辑：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;test_c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_process&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exit grandchild process &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exit worker process &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, grandchild is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;current_process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python test_c.py &amp;amp;
[1] 79565
2017-07-30 18:18:27,680 - INFO - exit worker process 79585, grandchild is 79586

$ ps -f |grep test_c.py
  mozillazg 79565 62003   0  6:18PM ttys009    0:00.06 python test_c.py
  mozillazg 79586     1   0  6:18PM ttys009    0:00.00 python test_c.py
  mozillazg 79611 62003   0  6:18PM ttys009    0:00.00 grep test_c.py

$ 2017-07-30 18:18:57,681 - INFO - exit grandchild process 79586

$ ps -f |grep 79586
  mozillazg 79697 62003   0  6:19PM ttys009    0:00.00 grep 79586

$ ps -f |grep test_c.py
  mozillazg 79565 62003   0  6:18PM ttys009    0:00.06 python test_c.py
  mozillazg 79741 62003   0  6:19PM ttys009    0:00.00 grep test_c.py
&lt;/pre&gt;
&lt;p&gt;可以看到当结束了进程 &lt;tt class="docutils literal"&gt;79585&lt;/tt&gt; 之后，它的子进程 &lt;tt class="docutils literal"&gt;79586&lt;/tt&gt; 的父进程的 pid 就变成了 &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; ，
随后退出 &lt;tt class="docutils literal"&gt;79586&lt;/tt&gt; 进程后，进程 &lt;tt class="docutils literal"&gt;79586&lt;/tt&gt; 并没有出现一直维持僵尸进程状态的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;结语&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;希望本文能对你有所帮助。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os._exit"&gt;16.1. os — Miscellaneous operating system interfaces — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/os.html#os.waitpid"&gt;16.1. os — Miscellaneous operating system interfaces — Python 3.6.2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://linux.die.net/man/3/waitpid"&gt;waitpid(3) - Linux man page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/support/knowledgecenter/ssw_i5_54/apis/waitpid.htm"&gt;IBM Knowledgecenter - waitpid()--Wait for Specific Child
Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/benoitc/gunicorn/blob/19.7.1/gunicorn/arbiter.py#L506"&gt;gunicorn/arbiter.py at 19.7.1 ·
benoitc/gunicorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python/cpython/blob/13e96cc596d158b98996db3fa291086ea4afecd9/Lib/multiprocessing/forkserver.py#L198-L223"&gt;cpython/forkserver.py at 13e96cc596d158b98996db3fa291086ea4afecd9 ·
python/cpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/wallwind/article/details/6998602"&gt;深入浅出---unix多进程编程之wait()和waitpid()函数 - wintree的专栏 -
CSDN博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zombie_process"&gt;Zombie process - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Orphan_process"&gt;Orphan process - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 20 Jul 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-07-20:2017/07/python-how-to-generate-kill-clean-zombie-process.html</guid><category>process</category><category>zombie</category></item><item><title>Python: time.sleep 与 signal 一起使用可能会出现 sleep 被提前终止的情况</title><link>https://mozillazg.com/2017/07/python-time-sleep-terminate-by-signal.html</link><description>&lt;p&gt;如题所述，当 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 与 &lt;tt class="docutils literal"&gt;signal&lt;/tt&gt; 一起使用时可能会出现 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt;
失效，提前结束 sleep 的问题。&lt;/p&gt;
&lt;p&gt;我们先来看一下 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 的文档:&lt;/p&gt;
&lt;p&gt;Python 2.7.13:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;time.sleep(secs)&lt;/p&gt;
&lt;blockquote&gt;
Suspend execution of the current thread for the given number of seconds. The argument may be a floating point number to indicate a more precise sleep time. &lt;strong&gt;The actual suspension time may be less than that requested because any caught signal will terminate the sleep() following execution of that signal’s catching routine.&lt;/strong&gt; Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system.&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3.6.2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;time.sleep(secs)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Suspend execution of the calling thread for the given number of seconds. The argument may be a floating point number to indicate a more precise sleep time. &lt;strong&gt;The actual suspension time may be less than that requested because any caught signal will terminate the sleep() following execution of that signal’s catching routine.&lt;/strong&gt; Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system.&lt;/p&gt;
&lt;p&gt;Changed in version 3.5: &lt;strong&gt;The function now sleeps at least secs even if the sleep is interrupted by a signal, except if the signal handler raises an exception&lt;/strong&gt; (see &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0475"&gt;PEP 475&lt;/a&gt; for the rationale).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过文档可以看到，在 Python 2 下，当定义了 signal handler 并接收到
signal 时， &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 会提前返回， 在 Python 3.5+
下，没有这个问题，只是在 signal handler 抛异常时 sleep 会被终止 。&lt;/p&gt;
&lt;p&gt;下面我们就来验证一下这个问题。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;测试环境&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;os: mac os&lt;/li&gt;
&lt;li&gt;python: python2.7, python3.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python-2"&gt;
&lt;h2 id="hidpython-2"&gt;Python 2&lt;a class="headerlink" href="#hidpython-2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="sleep"&gt;
&lt;h3 id="hidsleep"&gt;普通 sleep 程序&lt;a class="headerlink" href="#hidsleep" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先来看一个正常 sleep 的程序:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;time_a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;end sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds, spend &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python time_a.py
2017-07-16 15:29:05,323 - INFO - start sleep 60 seconds
2017-07-16 15:30:05,327 - INFO - end sleep 60 seconds, spend 60.0042099953
&lt;/pre&gt;
&lt;p&gt;可以看到确实 sleep 了 60 秒。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signal"&gt;
&lt;h3 id="hidsignal"&gt;signal&lt;a class="headerlink" href="#hidsignal" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给普通的 sleep 程序发个 signal 试试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python time_a.py &amp;amp;
[1] 6208
$ 2017-07-16 15:44:01,290 - INFO - start sleep 60 seconds

$ kill -s SIGHUP 6208
[1]+  Hangup: 1               python time_a.py
&lt;/pre&gt;
&lt;p&gt;因为 &lt;tt class="docutils literal"&gt;SIGHUP&lt;/tt&gt; 的默认行为就是终止程序，所以程序终止了。&lt;/p&gt;
&lt;p&gt;我们下面来测试自定义 signal handler 的影响。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signal-handler"&gt;
&lt;h3 id="hidsignal-handler"&gt;signal handler&lt;a class="headerlink" href="#hidsignal-handler" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;测试程序如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;time_b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recived &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGHUP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;end sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds, spend &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python time_b.py &amp;amp;
[1] 5910
2017-07-16 15:31:46,448 - INFO - start sleep 60 seconds
$ kill -s SIGHUP 5910
2017-07-16 15:31:52,180 - INFO - recived 1
2017-07-16 15:31:52,181 - INFO - end sleep 60 seconds, spend 5.73180794716
[1]+  Done                    python time_b.py
&lt;/pre&gt;
&lt;p&gt;从测试结果可以看到，当收到 signal 后，sleep 就提前结束了， 60 秒的 sleep
实际只花了 6 秒钟。&lt;/p&gt;
&lt;p&gt;下面再看看 Python 3 文档中提到的 handler 抛异常的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signal-handler-raise-exception"&gt;
&lt;h3 id="hidsignal-handler-raise-exception"&gt;signal handler raise exception&lt;a class="headerlink" href="#hidsignal-handler-raise-exception" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;测试程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;time_c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recived &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGHUP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;end sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds, spend &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python time_c.py &amp;amp;
[1] 6390
2017-07-16 16:09:31,340 - INFO - start sleep 60 seconds

$ kill -s SIGHUP 6390
2017-07-16 16:09:35,328 - INFO - recived 1
2017-07-16 16:09:35,329 - ERROR - test
Traceback (most recent call last):
  File &amp;quot;time_c.py&amp;quot;, line 21, in &amp;lt;module&amp;gt;
    time.sleep(n)
  File &amp;quot;time_c.py&amp;quot;, line 14, in handler
    raise Exception('test')
Exception: test
2017-07-16 16:09:35,329 - INFO - end sleep 60 seconds, spend 3.988664150238037
[1]+  Done                    python time_c.py
&lt;/pre&gt;
&lt;p&gt;可以看到，当 signal handler 抛异常时， &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 会抛出异常提前终止 sleep 操作。&lt;/p&gt;
&lt;p&gt;下面来测试 Python 3.5+ 下这四种情况的行为。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python-3-5"&gt;
&lt;h2 id="hidpython-3-5"&gt;Python 3.5+&lt;a class="headerlink" href="#hidpython-3-5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3 id="hidid2"&gt;普通 sleep 程序&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;用的还是之前的 time_a.py 文件，测试结果：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 time_a.py
2017-07-16 16:12:28,566 - INFO - start sleep 60 seconds
2017-07-16 16:13:28,571 - INFO - end sleep 60 seconds, spend 60.00386714935303
&lt;/pre&gt;
&lt;p&gt;可以看到，跟 Python 2 一样，正常 sleep.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;signal&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;同样试试给 time_a.py 进程发送 signal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 time_a.py  &amp;amp;
[1] 6790
$ 2017-07-16 16:15:53,529 - INFO - start sleep 60 seconds

$ kill -s SIGHUP 6790
[1]+  Hangup: 1               python3.6 time_a.py
&lt;/pre&gt;
&lt;p&gt;跟 Python 2 下也是一样，进程终止。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;signal handler&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;按照文档，当 signal handler 不错误的时候，应该可以正常 sleep,
下面我们试试看：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 time_b.py &amp;amp;
[1] 6848
$ 2017-07-16 16:17:25,144 - INFO - start sleep 60 seconds

$ kill -s SIGHUP 6848
2017-07-16 16:17:31,252 - INFO - recived 1
$ jobs
[1]+  Running                 python3.6 time_b.py &amp;amp;
$ 2017-07-16 16:18:25,147 - INFO - end sleep 60 seconds, spend 60.00310564041138

[1]+  Done                    python3.6 time_b.py
&lt;/pre&gt;
&lt;p&gt;确实跟文档中说的一样，就算收到并处理了 signal 还是可以正常 sleep 。👍&lt;/p&gt;
&lt;p&gt;下面再看看 signal handler raise exception 的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;signal handler raise exception&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6 time_c.py &amp;amp;
[1] 42908
2017-07-16 16:20:00,679 - INFO - start sleep 60 seconds

$ kill -s SIGHUP 42908
2017-07-16 16:20:06,126 - INFO - recived 1
2017-07-16 16:20:06,126 - ERROR - test
Traceback (most recent call last):
  File &amp;quot;time_c.py&amp;quot;, line 21, in &amp;lt;module&amp;gt;
    time.sleep(n)
  File &amp;quot;time_c.py&amp;quot;, line 14, in handler
    raise Exception('test')
Exception: test
2017-07-16 16:20:06,127 - INFO - end sleep 60 seconds, spend 5.4475321769714355
[1]+  Done                    python3.6 time_c.py
&lt;/pre&gt;
&lt;p&gt;可以看到，跟在 Python 2 下一样，当 signal handler
抛异常时，&lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 会抛出异常提前终止 sleep 操作。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;原因&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;那么，为什么 Python 2 下 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 遇到 signal
时会出现提前返回的情况呢？&lt;/p&gt;
&lt;p&gt;在 gevent 的一个 &lt;a class="reference external" href="https://github.com/gevent/gevent/issues/280"&gt;issue&lt;/a&gt;
中 &lt;a class="reference external" href="https://github.com/jamadden"&gt;&amp;#64;jamadden&lt;/a&gt; 是 &lt;a class="reference external" href="https://github.com/gevent/gevent/issues/280#issuecomment-120123286"&gt;这样解释的&lt;/a&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The stdlib &lt;strong&gt;time.sleep&lt;/strong&gt; method is implemented by calling &lt;strong&gt;select&lt;/strong&gt;,
passing in a timeout value, and no file descriptors to actually
select on. The intended effect is to block in the operating system,
sleeping until the timeout has elapsed.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;select&lt;/strong&gt; is one of those system calls that is vulnerable to
signals. When a signal is delivered to the process, &lt;strong&gt;select&lt;/strong&gt;
prematurely wakes up and sets &lt;strong&gt;errno&lt;/strong&gt; to &lt;strong&gt;EINTR&lt;/strong&gt; (interrupted). In that
case, &lt;strong&gt;time.sleep&lt;/strong&gt; makes no attempt to account for any unelapsed time;
it simple returns. Therefore, &lt;strong&gt;time.sleep&lt;/strong&gt; can sometimes return early.
&lt;a class="reference external" href="https://docs.python.org/3/library/time.html#time.sleep"&gt;This is
documented&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看 python 2.7 的源代码以及 &lt;tt class="docutils literal"&gt;select&lt;/tt&gt; 的文档可以确认这个解释：&lt;/p&gt;
&lt;p&gt;python 2.7 源码中 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 的
&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Modules/timemodule.c#L937"&gt;实现片段&lt;/a&gt;
如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="nf"&gt;floatsleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* XXX Should test for MS_WINDOWS first! */&lt;/span&gt;
&lt;span class="cp"&gt;#if defined(HAVE_SELECT) &amp;amp;&amp;amp; !defined(__BEOS__) &amp;amp;&amp;amp; !defined(__EMX__)&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;frac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;secs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1000000.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Py_BEGIN_ALLOW_THREADS&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd_set&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef EINTR&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EINTR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
            &lt;span class="n"&gt;Py_BLOCK_THREADS&lt;/span&gt;
            &lt;span class="n"&gt;PyErr_SetFromErrno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_IOError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到确实是用 &lt;tt class="docutils literal"&gt;select&lt;/tt&gt; 来实现的 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;select&lt;/tt&gt; 的
&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/select.2.html"&gt;文档&lt;/a&gt; 中关于
signal 的说明如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;timeout&lt;/strong&gt; argument specifies the interval that &lt;strong&gt;select()&lt;/strong&gt; should
block waiting for a file descriptor to become ready.  &lt;strong&gt;The call will
block until either&lt;/strong&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a file descriptor becomes ready;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;the call is interrupted by a signal handler&lt;/strong&gt;; or&lt;/li&gt;
&lt;li&gt;the timeout expires.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过文档我们知道， &lt;tt class="docutils literal"&gt;select&lt;/tt&gt; 的 &lt;strong&gt;timeout&lt;/strong&gt; 的阻塞效果确实会被 signal handler 所中断。&lt;/p&gt;
&lt;p&gt;至于 Python 3.5+ 为什么不会提前返回，是因为它的 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt;
实现中对于这种情况增加了判断，&lt;a class="reference external" href="https://github.com/python/cpython/blob/3.6/Modules/timemodule.c#L1482-L1487"&gt;如果时间没到会用剩下的时间再次
sleep&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="nf"&gt;pysleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_PyTime_t&lt;/span&gt; &lt;span class="n"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// ...&lt;/span&gt;
     &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="n"&gt;monotonic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_PyTime_GetMonotonicClock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;secs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deadline&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/* retry with the recomputed delay */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;启示&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果想在 Python 2 下实现类似 Python 3.5+ 下的效果，可以仿照 Python 3.5+
下的实现增加“如果时间没到会用剩下的时间再次 sleep”的逻辑：&lt;/p&gt;
&lt;p&gt;参考代码（修改自 time_b.py）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;time_d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recived &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGHUP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;remain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;remain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;remain&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;retry sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;end sleep &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; seconds, spend &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python time_d.py &amp;amp;
[1] 14751
$ 2017-07-16 17:10:53,235 - INFO - start sleep 60 seconds

$ kill -s SIGHUP 14751
2017-07-16 17:10:59,803 - INFO - recived 1
2017-07-16 17:10:59,803 - WARNING - retry sleep 53.4323399067

$ kill -s SIGHUP 14751
2017-07-16 17:11:44,792 - INFO - recived 1
2017-07-16 17:11:44,792 - WARNING - retry sleep 8.44309687614
$ 2017-07-16 17:11:53,239 - INFO - end sleep 60 seconds, spend 60.0035960674

[1]+  Done                    python time_d.py
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;最重要的一点是&lt;/strong&gt; ：不要觉得 &lt;tt class="docutils literal"&gt;time.sleep&lt;/tt&gt;
会非常的精确，它有可能变快也有可能变慢，不要对它有过高的期望，不要依赖这个功能来实现需要精确
sleep 的需求。&lt;/p&gt;
&lt;p&gt;目测可能也可以利用 python 2 下的这一行为实现一些特殊的需求。&lt;/p&gt;
&lt;p&gt;好了，本文的内容就是这些了，希望这篇文章能对你有所帮助。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;参考资料&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/time.html#time.sleep"&gt;15.3. time — Time access and conversions — Python 2.7.13
documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/time.html#time.sleep"&gt;16.3. time — Time access and conversions — Python 3.6.2rc2
documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gevent/gevent/issues/280"&gt;gevent.subprocess.Popen alters the behavior of time.sleep · Issue
#280 · gevent/gevent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Modules/timemodule.c#L937"&gt;cpython/timemodule.c at 2.7 ·
python/cpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python/cpython/blob/3.6/Modules/timemodule.c#L1482-L1487"&gt;cpython/timemodule.c at 3.6 ·
python/cpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-07-18:2017/07/python-time-sleep-terminate-by-signal.html</guid><category>signal</category></item><item><title>使用 gdb 调试运行中的 Python 进程</title><link>https://mozillazg.com/2017/07/debug-running-python-process-with-gdb.html</link><description>&lt;p&gt;假设一个服务器上运行了下面这样的 test.py 程序，我们怎样才能知道程序是否在正常运行，运行到哪一步了呢？&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这个程序既没有日志也没有 print 输出，通过查看日志文件/标准输出/标准错误是没有办法确认程序状况的。
一种可行的办法就是使用 gdb 来查看程序当前的运行状况。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;测试环境&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;系统: Ubuntu 16.04.1 LTS&lt;/li&gt;
&lt;li&gt;Python: 2.7.12&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;准备工作&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;安装 gdb 和 python2.7-dbg:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ sudo apt-get install gdb python2.7-dbg
&lt;/pre&gt;
&lt;p&gt;设置 /proc/sys/kernel/yama/ptrace_scope:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;sudo tee /proc/sys/kernel/yama/ptrace_scope
&lt;/pre&gt;
&lt;p&gt;运行 test.py:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ python test.py &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt; 6489
&lt;/pre&gt;
&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;gdb python PID&lt;/tt&gt; 来调试运行中的进程:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ gdb python 6489
GNU gdb &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu 7.11.1-0ubuntu1~16.04&lt;span class="o"&gt;)&lt;/span&gt; 7.11.1
...
For help, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;.
Type &lt;span class="s2"&gt;&amp;quot;apropos word&amp;quot;&lt;/span&gt; to search &lt;span class="k"&gt;for&lt;/span&gt; commands related to &lt;span class="s2"&gt;&amp;quot;word&amp;quot;&lt;/span&gt;...
Reading symbols from python...Reading symbols from /usr/lib/debug/.build-id/90/d1300febaeb0a626baa2540d19df2416cd3361.debug...done.
&lt;span class="k"&gt;done&lt;/span&gt;.
...
Reading symbols from /lib/ld-linux.so.2...Reading symbols from /usr/lib/debug//lib/i386-linux-gnu/ld-2.23.so...done.
&lt;span class="k"&gt;done&lt;/span&gt;.
0xb778fc31 in __kernel_vsyscall &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="core-file"&gt;
&lt;h2 id="hidcore-file"&gt;生成 core file&lt;a class="headerlink" href="#hidcore-file" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了不影响运行中的进程，可以通过生成 core file 的方式来保存进程的当前信息:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; generate-core-file
warning: target file /proc/6489/cmdline contained unexpected null characters
Saved corefile core.6489
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; quit
A debugging session is active.

    Inferior &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;process 6489&lt;span class="o"&gt;]&lt;/span&gt; will be detached.

Quit anyway? &lt;span class="o"&gt;(&lt;/span&gt;y or n&lt;span class="o"&gt;)&lt;/span&gt; y
&lt;/pre&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;gdb python core.PID&lt;/tt&gt; 的方式来读取 core file:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ gdb python core.6489
GNU gdb &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu 7.11.1-0ubuntu1~16.04&lt;span class="o"&gt;)&lt;/span&gt; 7.11.1
...
Type &lt;span class="s2"&gt;&amp;quot;apropos word&amp;quot;&lt;/span&gt; to search &lt;span class="k"&gt;for&lt;/span&gt; commands related to &lt;span class="s2"&gt;&amp;quot;word&amp;quot;&lt;/span&gt;...
Reading symbols from python...Reading symbols from /usr/lib/debug/.build-id/90/d1300febaeb0a626baa2540d19df2416cd3361.debug...done.
&lt;span class="k"&gt;done&lt;/span&gt;.

warning: core file may not match specified executable file.
&lt;span class="o"&gt;[&lt;/span&gt;New LWP 6489&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Thread debugging using libthread_db enabled&lt;span class="o"&gt;]&lt;/span&gt;
Using host libthread_db library &lt;span class="s2"&gt;&amp;quot;/lib/i386-linux-gnu/libthread_db.so.1&amp;quot;&lt;/span&gt;.
Core was generated by &lt;span class="sb"&gt;`&lt;/span&gt;python&lt;span class="err"&gt;'&lt;/span&gt;.
&lt;span class="c1"&gt;#0  0xb778fc31 in __kernel_vsyscall ()
&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2 id="hidpython"&gt;可用的 python 相关的命令&lt;a class="headerlink" href="#hidpython" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以通过输入 &lt;tt class="docutils literal"&gt;py&lt;/tt&gt; 然后加 tab 键的方式来查看可用的命令:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py
py-bt               py-down             py-locals           py-up               python-interactive
py-bt-full          py-list             py-print            python
&lt;/pre&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;help cmd&lt;/tt&gt; 查看各个命令的说明:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt; py-bt
Display the current python frame and all the frames within its call stack &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; any&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;当前执行位置的源码&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-list
   &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;# -*- coding: utf-8 -*-
&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;    import &lt;span class="nb"&gt;time&lt;/span&gt;
   3
   4
   &lt;span class="m"&gt;5&lt;/span&gt;    def &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
  &amp;gt;6        time.sleep&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
   7
   8
   &lt;span class="m"&gt;9&lt;/span&gt;    def main&lt;span class="o"&gt;()&lt;/span&gt;:
  &lt;span class="m"&gt;10&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10000&lt;span class="o"&gt;)&lt;/span&gt;:
  &lt;span class="m"&gt;11&lt;/span&gt;            &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到当前正在执行 &lt;tt class="docutils literal"&gt;time.sleep(10)&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;当前位置的调用栈&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-bt
Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call first&lt;span class="o"&gt;)&lt;/span&gt;:
  &amp;lt;built-in &lt;span class="k"&gt;function&lt;/span&gt; sleep&amp;gt;
  File &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;, line 6, in &lt;span class="k"&gt;do&lt;/span&gt;
    time.sleep&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;, line 11, in main
    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
  File &lt;span class="s2"&gt;&amp;quot;test.py&amp;quot;&lt;/span&gt;, line 15, in &amp;lt;module&amp;gt;
    main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以看出来是 &lt;tt class="docutils literal"&gt;main() &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; do(x) &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; time.sleep(10)&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;查看变量的值&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-list
   &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;# -*- coding: utf-8 -*-
&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;    import &lt;span class="nb"&gt;time&lt;/span&gt;
   3
   4
   &lt;span class="m"&gt;5&lt;/span&gt;    def &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
  &amp;gt;6        time.sleep&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
   7
   8
   &lt;span class="m"&gt;9&lt;/span&gt;    def main&lt;span class="o"&gt;()&lt;/span&gt;:
  &lt;span class="m"&gt;10&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10000&lt;span class="o"&gt;)&lt;/span&gt;:
  &lt;span class="m"&gt;11&lt;/span&gt;            &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-print x
&lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="s1"&gt;'x'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 12
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-locals
&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 12
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;查看上层调用方的信息&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-up
&lt;span class="c1"&gt;#9 Frame 0xb74c0994, for file test.py, line 11, in main (x=12)
&lt;/span&gt;    &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-list
   &lt;span class="m"&gt;6&lt;/span&gt;        time.sleep&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
   7
   8
   &lt;span class="m"&gt;9&lt;/span&gt;    def main&lt;span class="o"&gt;()&lt;/span&gt;:
  &lt;span class="m"&gt;10&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10000&lt;span class="o"&gt;)&lt;/span&gt;:
 &amp;gt;11            &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
  12
  13
  &lt;span class="m"&gt;14&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;:
  &lt;span class="m"&gt;15&lt;/span&gt;        main&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-print x
&lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="s1"&gt;'x'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 12
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;py-down&lt;/span&gt;&lt;/tt&gt; 回去:&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-down
&lt;span class="c1"&gt;#6 Frame 0xb74926e4, for file test.py, line 6, in do (x=12)
&lt;/span&gt;    time.sleep&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-list
   &lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;# -*- coding: utf-8 -*-
&lt;/span&gt;   &lt;span class="m"&gt;2&lt;/span&gt;    import &lt;span class="nb"&gt;time&lt;/span&gt;
   3
   4
   &lt;span class="m"&gt;5&lt;/span&gt;    def &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
  &amp;gt;6        time.sleep&lt;span class="o"&gt;(&lt;/span&gt;10&lt;span class="o"&gt;)&lt;/span&gt;
   7
   8
   &lt;span class="m"&gt;9&lt;/span&gt;    def main&lt;span class="o"&gt;()&lt;/span&gt;:
  &lt;span class="m"&gt;10&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;10000&lt;span class="o"&gt;)&lt;/span&gt;:
  &lt;span class="m"&gt;11&lt;/span&gt;            &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;调试多线程程序&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;测试程序 test2.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="code shell literal-block"&gt;
$ python test2.py &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;2&lt;span class="o"&gt;]&lt;/span&gt; 12281
&lt;/pre&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;查看所有线程&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;info threads&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="code shell literal-block"&gt;
$ gdb python core.12281

&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; info threads
  Id   Target Id         Frame
* &lt;span class="m"&gt;1&lt;/span&gt;    Thread 0xb74b9700 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11039&lt;span class="o"&gt;)&lt;/span&gt; 0xb7711c31 in __kernel_vsyscall &lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="m"&gt;2&lt;/span&gt;    Thread 0xb73b8b40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11040&lt;span class="o"&gt;)&lt;/span&gt; 0xb7711c31 in __kernel_vsyscall &lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="m"&gt;3&lt;/span&gt;    Thread 0xb69ffb40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11041&lt;span class="o"&gt;)&lt;/span&gt; 0xb7711c31 in __kernel_vsyscall &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到这个程序当前有 3 个线程, 当前进入的是 1 号线程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;切换线程&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;thread ID&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; thread 3
&lt;span class="o"&gt;[&lt;/span&gt;Switching to thread &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Thread 0xb69ffb40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11041&lt;span class="o"&gt;))]&lt;/span&gt;
&lt;span class="c1"&gt;#0  0xb7711c31 in __kernel_vsyscall ()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; info threads
  Id   Target Id         Frame
  &lt;span class="m"&gt;1&lt;/span&gt;    Thread 0xb74b9700 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11039&lt;span class="o"&gt;)&lt;/span&gt; 0xb7711c31 in __kernel_vsyscall &lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="m"&gt;2&lt;/span&gt;    Thread 0xb73b8b40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11040&lt;span class="o"&gt;)&lt;/span&gt; 0xb7711c31 in __kernel_vsyscall &lt;span class="o"&gt;()&lt;/span&gt;
* &lt;span class="m"&gt;3&lt;/span&gt;    Thread 0xb69ffb40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11041&lt;span class="o"&gt;)&lt;/span&gt; 0xb7711c31 in __kernel_vsyscall &lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在切换到了 3 号线程。&lt;/p&gt;
&lt;p&gt;可以通过前面所说的 &lt;tt class="docutils literal"&gt;py-&lt;/tt&gt; 命令来查看当前线程的其他信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;Current thread is &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Thread 0xb74b9700 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11039&lt;span class="o"&gt;))]&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-list
 &lt;span class="m"&gt;335&lt;/span&gt;            waiter.acquire&lt;span class="o"&gt;()&lt;/span&gt;
 &lt;span class="m"&gt;336&lt;/span&gt;            self.__waiters.append&lt;span class="o"&gt;(&lt;/span&gt;waiter&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="m"&gt;337&lt;/span&gt;            &lt;span class="nv"&gt;saved_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; self._release_save&lt;span class="o"&gt;()&lt;/span&gt;
 &lt;span class="m"&gt;338&lt;/span&gt;            try:    &lt;span class="c1"&gt;# restore state no matter what (e.g., KeyboardInterrupt)&lt;/span&gt;
 &lt;span class="m"&gt;339&lt;/span&gt;                &lt;span class="k"&gt;if&lt;/span&gt; timeout is None:
&amp;gt;340                    waiter.acquire&lt;span class="o"&gt;()&lt;/span&gt;
 &lt;span class="m"&gt;341&lt;/span&gt;                    &lt;span class="k"&gt;if&lt;/span&gt; __debug__:
 &lt;span class="m"&gt;342&lt;/span&gt;                        self._note&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s.wait(): got it&amp;quot;&lt;/span&gt;, self&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="m"&gt;343&lt;/span&gt;                &lt;span class="k"&gt;else&lt;/span&gt;:
 &lt;span class="m"&gt;344&lt;/span&gt;                    &lt;span class="c1"&gt;# Balancing act:  We can&amp;#39;t afford a pure busy loop, so we&lt;/span&gt;
 &lt;span class="m"&gt;345&lt;/span&gt;                    &lt;span class="c1"&gt;# have to sleep; but if we sleep the whole timeout time,&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; thread 2
&lt;span class="o"&gt;[&lt;/span&gt;Switching to thread &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Thread 0xb73b8b40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11040&lt;span class="o"&gt;))]&lt;/span&gt;
&lt;span class="c1"&gt;#0  0xb7711c31 in __kernel_vsyscall ()&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; py-list
   &lt;span class="m"&gt;3&lt;/span&gt;    import &lt;span class="nb"&gt;time&lt;/span&gt;
   4
   5
   &lt;span class="m"&gt;6&lt;/span&gt;    def &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
   &lt;span class="m"&gt;7&lt;/span&gt;        &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x * 3
  &amp;gt;8        time.sleep&lt;span class="o"&gt;(&lt;/span&gt;x * 60&lt;span class="o"&gt;)&lt;/span&gt;
   9
  10
  &lt;span class="m"&gt;11&lt;/span&gt;    def main&lt;span class="o"&gt;()&lt;/span&gt;:
  &lt;span class="m"&gt;12&lt;/span&gt;        &lt;span class="nv"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="m"&gt;13&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3 id="hidid10"&gt;同时操作所有线程&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;thread apply all CMD&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;t a a CMD&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; thread apply all py-list

Thread &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Thread 0xb69ffb40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11041&lt;span class="o"&gt;))&lt;/span&gt;:
   &lt;span class="m"&gt;3&lt;/span&gt;    import &lt;span class="nb"&gt;time&lt;/span&gt;
   4
   5
   &lt;span class="m"&gt;6&lt;/span&gt;    def &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
   &lt;span class="m"&gt;7&lt;/span&gt;        &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x * 3
  &amp;gt;8        time.sleep&lt;span class="o"&gt;(&lt;/span&gt;x * 60&lt;span class="o"&gt;)&lt;/span&gt;
   9
  10
  &lt;span class="m"&gt;11&lt;/span&gt;    def main&lt;span class="o"&gt;()&lt;/span&gt;:
  &lt;span class="m"&gt;12&lt;/span&gt;        &lt;span class="nv"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="m"&gt;13&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;:

Thread &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Thread 0xb73b8b40 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11040&lt;span class="o"&gt;))&lt;/span&gt;:
   &lt;span class="m"&gt;3&lt;/span&gt;    import &lt;span class="nb"&gt;time&lt;/span&gt;
   4
   5
   &lt;span class="m"&gt;6&lt;/span&gt;    def &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
   &lt;span class="m"&gt;7&lt;/span&gt;        &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x * 3
  &amp;gt;8        time.sleep&lt;span class="o"&gt;(&lt;/span&gt;x * 60&lt;span class="o"&gt;)&lt;/span&gt;
   9
  10
  &lt;span class="m"&gt;11&lt;/span&gt;    def main&lt;span class="o"&gt;()&lt;/span&gt;:
  &lt;span class="m"&gt;12&lt;/span&gt;        &lt;span class="nv"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="m"&gt;13&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; x in range&lt;span class="o"&gt;(&lt;/span&gt;1, 3&lt;span class="o"&gt;)&lt;/span&gt;:

---Type &amp;lt;&lt;span class="k"&gt;return&lt;/span&gt;&amp;gt; to &lt;span class="k"&gt;continue&lt;/span&gt;, or q &amp;lt;&lt;span class="k"&gt;return&lt;/span&gt;&amp;gt; to quit---
Thread &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Thread 0xb74b9700 &lt;span class="o"&gt;(&lt;/span&gt;LWP 11039&lt;span class="o"&gt;))&lt;/span&gt;:
 &lt;span class="m"&gt;335&lt;/span&gt;            waiter.acquire&lt;span class="o"&gt;()&lt;/span&gt;
 &lt;span class="m"&gt;336&lt;/span&gt;            self.__waiters.append&lt;span class="o"&gt;(&lt;/span&gt;waiter&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="m"&gt;337&lt;/span&gt;            &lt;span class="nv"&gt;saved_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; self._release_save&lt;span class="o"&gt;()&lt;/span&gt;
 &lt;span class="m"&gt;338&lt;/span&gt;            try:    &lt;span class="c1"&gt;# restore state no matter what (e.g., KeyboardInterrupt)&lt;/span&gt;
 &lt;span class="m"&gt;339&lt;/span&gt;                &lt;span class="k"&gt;if&lt;/span&gt; timeout is None:
&amp;gt;340                    waiter.acquire&lt;span class="o"&gt;()&lt;/span&gt;
 &lt;span class="m"&gt;341&lt;/span&gt;                    &lt;span class="k"&gt;if&lt;/span&gt; __debug__:
 &lt;span class="m"&gt;342&lt;/span&gt;                        self._note&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s.wait(): got it&amp;quot;&lt;/span&gt;, self&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="m"&gt;343&lt;/span&gt;                &lt;span class="k"&gt;else&lt;/span&gt;:
 &lt;span class="m"&gt;344&lt;/span&gt;                    &lt;span class="c1"&gt;# Balancing act:  We can&amp;#39;t afford a pure busy loop, so we&lt;/span&gt;
 &lt;span class="m"&gt;345&lt;/span&gt;                    &lt;span class="c1"&gt;# have to sleep; but if we sleep the whole timeout time,&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的 &lt;tt class="docutils literal"&gt;gdb&lt;/tt&gt; python 相关的操作就是这些， 同时也不要忘记原来的 gdb 命令都是可以使用的哦。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h2 id="hidid11"&gt;参考资料&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.python.org/moin/DebuggingWithGdb"&gt;DebuggingWithGdb - Python Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;Features/EasierPythonDebugging - FedoraProject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sourceware.org/gdb/onlinedocs/gdb/index.html"&gt;Debugging with GDB: Top&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-07-02:2017/07/debug-running-python-process-with-gdb.html</guid><category>gdb</category><category>debug</category></item><item><title>go-httpheader：将 struct 转换为 http.Header</title><link>https://mozillazg.com/2017/07/go-intro-go-httpheader.html</link><description>&lt;p&gt;最近在开发 &lt;a class="reference external" href="https://github.com/mozillazg/go-cos"&gt;go-cos&lt;/a&gt; 时，
因为 cos API 的很多可选参数都是放在 header 中，
所以开发了一个将 struct 转换为 http.Header 的包。&lt;/p&gt;
&lt;p&gt;项目地址： &lt;a class="reference external" href="https://github.com/mozillazg/go-httpheader"&gt;https://github.com/mozillazg/go-httpheader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;github.com/mozillazg/go-httpheader&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hide&lt;/span&gt;         &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;ContentType&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`header:&amp;quot;Content-Type&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;Length&lt;/span&gt;       &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="nx"&gt;XArray&lt;/span&gt;       &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`header:&amp;quot;X-Array&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;TestHide&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;   &lt;span class="s"&gt;`header:&amp;quot;-&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;IgnoreEmpty&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;   &lt;span class="s"&gt;`header:&amp;quot;X-Empty,omitempty&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;IgnoreEmptyN&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;   &lt;span class="s"&gt;`header:&amp;quot;X-Empty-N,omitempty&amp;quot;`&lt;/span&gt;
    &lt;span class="nx"&gt;CustomHeader&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="s"&gt;&amp;quot;hide&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;XArray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;TestHide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="s"&gt;&amp;quot;hide&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;IgnoreEmptyN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;CustomHeader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;X-Test-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;233&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;X-Test-2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;666&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;httpheader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// h:&lt;/span&gt;
    &lt;span class="c1"&gt;// http.Header{&lt;/span&gt;
    &lt;span class="c1"&gt;//      &amp;quot;X-Test-1&amp;quot;:     []string{&amp;quot;233&amp;quot;},&lt;/span&gt;
    &lt;span class="c1"&gt;//      &amp;quot;X-Test-2&amp;quot;:     []string{&amp;quot;666&amp;quot;},&lt;/span&gt;
    &lt;span class="c1"&gt;//      &amp;quot;Content-Type&amp;quot;: []string{&amp;quot;application/json&amp;quot;},&lt;/span&gt;
    &lt;span class="c1"&gt;//      &amp;quot;Length&amp;quot;:       []string{&amp;quot;2&amp;quot;},&lt;/span&gt;
    &lt;span class="c1"&gt;//      &amp;quot;X-Array&amp;quot;:      []string{&amp;quot;test1&amp;quot;, &amp;quot;test2&amp;quot;},&lt;/span&gt;
    &lt;span class="c1"&gt;//      &amp;quot;X-Empty-N&amp;quot;:    []string{&amp;quot;n&amp;quot;},&lt;/span&gt;
    &lt;span class="c1"&gt;//}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多信息详见项目文档：&lt;a class="reference external" href="https://godoc.org/github.com/mozillazg/go-httpheader"&gt;https://godoc.org/github.com/mozillazg/go-httpheader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;希望能对有同样需求的人有所帮助。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-07-02:2017/07/go-intro-go-httpheader.html</guid></item><item><title>tinyq: 一个任务队列框架</title><link>https://mozillazg.com/2017/04/tinyq-a-queue-framework.html</link><description>&lt;p&gt;最近尝试着写了一个简单的任务队列框架，整体的功能类似 celery, rq 之类的任务队列框架。
下面简单的介绍一下。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;安装&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;项目地址： &lt;a class="reference external" href="https://github.com/mozillazg/tinyq"&gt;https://github.com/mozillazg/tinyq&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;安装：&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
pip install tinyq
&lt;/pre&gt;
&lt;p&gt;这个框架使用 redis 作为队列服务，所以同时也需要安装 redis 服务程序。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2 id="hidhello-world"&gt;Hello World&lt;a class="headerlink" href="#hidhello-world" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;启动 redis 服务:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ redis-server
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;增加一个 app.py 文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from tinyq import Application

app = Application()


&amp;#64;app.task()
def add(m, n):
    return m + n
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;通过 python shell 增加几个 delay job:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from app import app

for m in range(10):
 for n in range(3):
     add.delay(m, n)
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;启动 worker 消费队列中的 job:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ tinyq -l info
2017-03-12 21:27:12,322 - WARNING - tinyq.runner[line:73 thread:MainThread(140736379601856) process:MainProcess(15388)] - Starting TinyQ worker, version 0.1.0...
2017-03-12 21:27:12,446 - INFO - tinyq.worker[line:65 thread:Worker-2(123145554059264) process:MainProcess(15388)] - Got a job: &amp;lt;Job: id: 9687d9dd-30f4-4920-bd0c-924e672d9794, task_name: add&amp;gt;
2017-03-12 21:27:12,447 - INFO - tinyq.worker[line:67 thread:Worker-2(123145554059264) process:MainProcess(15388)] - Finish run job &amp;lt;Job: id: 9687d9dd-30f4-4920-bd0c-924e672d9794, task_name: add&amp;gt;
2017-03-12 21:27:12,500 - INFO - tinyq.worker[line:65 thread:Worker-5(123145569824768) process:MainProcess(15388)] - Got a job: &amp;lt;Job: id: 315f4ead-cedb-4b7a-b3c6-d328b0152e35, task_name: add&amp;gt;
2017-03-12 21:27:12,501 - INFO - tinyq.worker[line:67 thread:Worker-5(123145569824768) process:MainProcess(15388)] - Finish run job &amp;lt;Job: id: 315f4ead-cedb-4b7a-b3c6-d328b0152e35, task_name: add&amp;gt;
2017-03-12 21:27:12,610 - INFO - tinyq.worker[line:65 thread:Worker-1(123145548804096) process:MainProcess(15388)] - Got a job: &amp;lt;Job: id: a014ee87-0200-4b78-af25-6fe8dcca3f14, task_name: add&amp;gt;
2017-03-12 21:27:12,610 - INFO - tinyq.worker[line:67 thread:Worker-1(123145548804096) process:MainProcess(15388)] - Finish run job &amp;lt;Job: id: a014ee87-0200-4b78-af25-6fe8dcca3f14, task_name: add&amp;gt;
^C2017-03-12 21:27:13,863 - WARNING - tinyq.runner[line:144 thread:MainThread(140736379601856) process:MainProcess(15388)] - Received stop signal, warm shutdown...
2017-03-12 21:27:13,886 - WARNING - tinyq.runner[line:135 thread:Worker-2(123145554059264) process:MainProcess(15388)] - Exit worker Worker-2.
2017-03-12 21:27:13,896 - WARNING - tinyq.runner[line:135 thread:Worker-7(123145580335104) process:MainProcess(15388)] - Exit worker Worker-7.
2017-03-12 21:27:13,906 - WARNING - tinyq.runner[line:135 thread:Scheduler(123145538293760) process:MainProcess(15388)] - Exit worker Scheduler.
2017-03-12 21:27:13,924 - WARNING - tinyq.runner[line:135 thread:Worker-5(123145569824768) process:MainProcess(15388)] - Exit worker Worker-5.
2017-03-12 21:27:13,936 - WARNING - tinyq.runner[line:135 thread:Worker-0(123145543548928) process:MainProcess(15388)] - Exit worker Worker-0.
2017-03-12 21:27:13,956 - WARNING - tinyq.runner[line:135 thread:Worker-4(123145564569600) process:MainProcess(15388)] - Exit worker Worker-4.
2017-03-12 21:27:13,978 - WARNING - tinyq.runner[line:135 thread:Worker-6(123145575079936) process:MainProcess(15388)] - Exit worker Worker-6.
2017-03-12 21:27:14,017 - WARNING - tinyq.runner[line:135 thread:Worker-1(123145548804096) process:MainProcess(15388)] - Exit worker Worker-1.
2017-03-12 21:27:14,068 - WARNING - tinyq.runner[line:135 thread:Worker-3(123145559314432) process:MainProcess(15388)] - Exit worker Worker-3.
2017-03-12 21:27:14,068 - WARNING - tinyq.runner[line:101 thread:MainThread(140736379601856) process:MainProcess(15388)] - Exit workers.
$
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;功能&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过上面的 Hello World 示例可以看出 tinyq 的功能类似 rq/celery。
还有一些 Hello World 中没有展示出来的功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;app = Application()&lt;/tt&gt;, 可以给 &lt;tt class="docutils literal"&gt;Application&lt;/tt&gt; 传递一个参数来指定 redis 配置:
&lt;tt class="docutils literal"&gt;app = &lt;span class="pre"&gt;Application('redis://192.168.99.100:2375/1')&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;app.py 也可以叫其他的名字，只要在启动 worker 的时候指定 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--app&lt;/span&gt;&lt;/tt&gt; 参数就可以了。
比如有如下文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat test/hello.py

  tinyq_app = Application()
&lt;/pre&gt;
&lt;p&gt;那么 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--app&lt;/span&gt;&lt;/tt&gt; 参数的值就是 &lt;tt class="docutils literal"&gt;test.hello.tinyq_app&lt;/tt&gt; ，
关键点是告诉 worker &lt;tt class="docutils literal"&gt;Application&lt;/tt&gt; 实例所在位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;装饰器 &lt;tt class="docutils literal"&gt;&amp;#64;app.task()&lt;/tt&gt; 还有个 &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; 参数，用于指定 task 的名称（默认是被装饰的函数的名称）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;既可以通过 &lt;tt class="docutils literal"&gt;add.delay&lt;/tt&gt; 把操作放到队列中，也可以通过 &lt;tt class="docutils literal"&gt;add(m, n)&lt;/tt&gt; 立即执行操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;通过 control + c 退出 worker 时会等待正在处理的 job 全部完成后再退出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;worker 还支持其他参数:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ tinyq -h
usage: tinyq [-h] [-V] [-u URI] [-v] [-w WORKER_NUMBER] [-a APP]
             [-l {debug,info,warn,error,critical}]

Starts a TinyQ worker.

optional arguments:
  -h, --help            show this help message and exit
  -V, --version         show program's version number and exit
  -u URI, --uri URI     The Redis URI (default: redis://)
  -v, --verbose         Show more output
  -w WORKER_NUMBER, --worker-number WORKER_NUMBER
                        Worker number (default: 8)
  -a APP, --app APP     Application path (default: app.app)
  -l {debug,info,warn,error,critical}, --log-level {debug,info,warn,error,critical}
                        Logging level (default: warn)
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-04-10:2017/04/tinyq-a-queue-framework.html</guid><category>framework</category><category>queue</category></item><item><title>ZooKeeper FastLeader 选举</title><link>https://mozillazg.com/2017/03/zookeeper-fastleader-elect-leader.html</link><description>&lt;p&gt;ZooKeeper 在集群模式下默认会使用 FastLeader 算法来选举 leader。下面将说说 ZooKeeper 集群使用 FastLeader 算法选举的具体过程。写的过程中参考了多篇文章，详见文末的参考资料。&lt;/p&gt;
&lt;p&gt;首先需要明确几个概念:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;节点状态：每个集群中的节点都有一个状态 LOOKING/FOLLOWING/LEADING/OBSERVING。每个节点启动的时候都是 LOOKING 状态，如果这个节点参与选举但最后不是leader，则状态是 FOLLOWING，如果不参与选举则是 OBSERVING，leader 的状态是 LEADING。&lt;/li&gt;
&lt;li&gt;epoch: 表示选举轮数。&lt;/li&gt;
&lt;li&gt;zxid: 事务 zxid 包含了本地数据的最后更新时间相关的信息。&lt;/li&gt;
&lt;li&gt;serverid: 当前 server 的 ID, 通过配置文件指定(比如: &lt;tt class="docutils literal"&gt;echo '1' &amp;gt; myid&lt;/tt&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先用文字描述一下大概的选举思想：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在没有遇到比我牛的人之前，第一票推荐我自己&lt;/li&gt;
&lt;li&gt;当接收到其他人的选举信息时，如果他们推荐的人没我牛，那我还是推荐我自己&lt;/li&gt;
&lt;li&gt;我有一个票箱，保存了当前这一轮选举中自己的推荐人以及接收到的推荐人信息，一人一票，重复或过期的票概不接受&lt;/li&gt;
&lt;li&gt;当我发现了比我牛的人的时候，改为推荐这个牛人&lt;/li&gt;
&lt;li&gt;如果我发现我的选举轮数落后了，清空票箱，改为推荐接收到的最新选举中大家推荐的最牛的那个人（如果没有人比我牛，那还是推荐我自己）&lt;/li&gt;
&lt;li&gt;不断的重复上面的过程，不断的告诉别人“我的投票是第几轮”、“我推举的人是谁”。直到我的票箱中“我推举的最牛的人”收到了不少于 &lt;strong&gt;N / 2 + 1&lt;/strong&gt; 的推举投票，此时这个人就是我认定的最终 leader。&lt;/li&gt;
&lt;li&gt;当我确定了谁是最终 leader 并且这个 leader 一切正常，我就更新我的状态为 FOLLOWING/LEADING（我自己是最终  leader 则是 LEADING 否则就是 FOLLOWING），之后的选举中都直接反馈我确定的这个最终 leader。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么，以什么标准来确定一个节点可以成为一个 leader 呢？
依次比较 epoch, zxid, serverid ：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;接收到的消息中，有 epoch 比我大的，则选 epoch 大的消息中确定的 server&lt;/li&gt;
&lt;li&gt;如果 epoch 相等，则选 zxid 最大的 server&lt;/li&gt;
&lt;li&gt;如果 zxid 也相等，则选 serverid 最大的 server (有的节点生来就是当 leader 的 😂）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//LOOKING消息，则&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;LOOKING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;
    &lt;span class="c1"&gt;//检查下收到的这张选票是否可以胜出，依次比较选举轮数epoch，事务zxid，服务器编号server id&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalOrderPredicate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;zxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peerEpoch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;proposedLeader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proposedZxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proposedEpoch&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//胜出了，就把自己的投票修改为对方的，然后广播消息&lt;/span&gt;
        &lt;span class="n"&gt;updateProposal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;leader&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;zxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peerEpoch&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;sendNotifications&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;totalOrderPredicate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;newId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;newZxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;newEpoch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;curId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;curZxid&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;curEpoch&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newEpoch&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curEpoch&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;newEpoch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;curEpoch&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;newZxid&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curZxid&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;newZxid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;curZxid&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newId&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;curId&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从网上找了一个流程图，可以看看：&lt;/p&gt;
&lt;p&gt;&lt;img alt="flow.png" src="/static/images/zookeeper/elect-leader.png" /&gt;&lt;/p&gt;
&lt;p&gt;举个例子，理想情况下，先后启动三个节点的选举过程如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;第一轮：每个节点广播选自己（此时只有 node1)&lt;/li&gt;
&lt;li&gt;第二轮：node2 启动了，发起一轮投票。node1 收到了 node2 选它自己的投票，发现 node2 比自己牛，广播选 node2。此时 node1 发现 node2 获得了2票 &amp;gt;= N / 2 + 1，认定 node2 为 leader 进入 following 状态。
node2 收到了 node1 选自己的广播，此时 node2 发现自己 获得了2票 &amp;gt;= N / 2 + 1，进入 leading 状态。&lt;/li&gt;
&lt;li&gt;第三轮：node3 启动了，发起一轮投票。node1 和 node2 都选 node2 , node3 通过比对发现 node2 的票数 &amp;gt;= N /2 + 1，认定 node2 是 leader 进入 following 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面就是 FastLeader 算法选举的简单介绍了，更详细的信息可以查阅官方文档和代码。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://codemacro.com/2014/10/19/zk-fastleaderelection/"&gt;图解zookeeper FastLeader选举算法 - loop in codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/xhh198781/article/details/6619203"&gt;zookeeper3.3.3源码分析(二)FastLeader选举算法 - xhh198781的专栏 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://iwinit.iteye.com/blog/1773531"&gt;深入浅出Zookeeper之五 Leader选举 - 吊丝码农 - ITeye技术网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cnblogs.com/yuyijq/p/4116365.html"&gt;Zookeeper-Zookeeper leader选举 - 横刀天笑 - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/yinwenjie/article/details/47613309"&gt;hadoop系列：zookeeper（2）——zookeeper核心原理（选举） - JAVA入门中 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/apache/zookeeper/blob/branch-3.4/src/java/main/org/apache/zookeeper/server/quorum/FastLeaderElection.java"&gt;zookeeper/FastLeaderElection.java at branch-3.4 · apache/zookeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html#sc_configuration"&gt;ZooKeeper Administrator's Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 11 Mar 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-03-11:2017/03/zookeeper-fastleader-elect-leader.html</guid><category>zookeeper</category><category>leader选举</category></item><item><title>Python: 实现 Ruby 风格的字符串插值功能</title><link>https://mozillazg.com/2017/02/f-Implement-Ruby-Style-String-Interpolation.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;什么是字符串插值功能&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;字符串插值功能是一种定义字符串的方式，可以在字符串中包含变量、表达式，
这些字符串中的变量/表达式会被自动替换为相应的值。&lt;/p&gt;
&lt;p&gt;很多语言都支持字符串插值功能。下面我们来看一下 Ruby 和 Python 3.6 中字符串插值功能是什么样的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ruby"&gt;
&lt;h2 id="hidruby"&gt;Ruby 风格&lt;a class="headerlink" href="#hidruby" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ruby 风格的字符串插值是这样的：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ irb
&amp;gt;&amp;gt; a = 2
=&amp;gt; 2
&amp;gt;&amp;gt; b = 3
=&amp;gt; 3
&amp;gt;&amp;gt; &amp;quot;#{a}&amp;quot;
=&amp;gt; &amp;quot;2&amp;quot;
&amp;gt;&amp;gt; &amp;quot;#{a + b}&amp;quot;
=&amp;gt; &amp;quot;5&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Ruby 中是通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;#{var}&amp;quot;&lt;/span&gt;&lt;/tt&gt; 来定义的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-3-6"&gt;
&lt;h2 id="hidpython-3-6"&gt;Python 3.6+ 风格&lt;a class="headerlink" href="#hidpython-3-6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python 3.6 也增加了对字符串插值功能的支持:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3.6
&amp;gt;&amp;gt;&amp;gt; a = 2
&amp;gt;&amp;gt;&amp;gt; b = 3
&amp;gt;&amp;gt;&amp;gt; f&amp;quot;{a}&amp;quot;
'2'
&amp;gt;&amp;gt;&amp;gt; f&amp;quot;{a + b}&amp;quot;
'5'
&lt;/pre&gt;
&lt;p&gt;Python 3.6 中新引入了一个 &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; ,  是通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f&amp;quot;{var}&amp;quot;&lt;/span&gt;&lt;/tt&gt; 来定义的。&lt;/p&gt;
&lt;p&gt;通过上面的定义以及两个语言的例子，我们可以知道：
字符串插值就是自动使用当前上下文的变量来求取字符串中特殊标志位中变量或表达式的值,
同时用求得的值替换掉这个标志位 。&lt;/p&gt;
&lt;p&gt;所以实现这个功能有三个要点：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;定义语法&lt;/li&gt;
&lt;li&gt;获取上下文的变量&lt;/li&gt;
&lt;li&gt;把字符串当作 python 代码执行并求值&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;语法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们的字符串插值的语法如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
f('#{var}')
&lt;/pre&gt;
&lt;p&gt;通过一个 &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; 函数来实现字符串插值功能，通过正则来解析变量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
re_code = re.compile(r'#\{([^\}]+)\}')
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;获取上下文的变量的值&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;locals()&lt;/tt&gt; 或者当前上下文变量的值，如果要获取调用方的上下文变量的值
可以使用 frame.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;frame = sys._getframe()&lt;/tt&gt; 可以获取当前 frame, &lt;tt class="docutils literal"&gt;frame.f_locals&lt;/tt&gt; 可以获取该 frame
所在上下文的局部变量的值， &lt;tt class="docutils literal"&gt;frame.f_globals&lt;/tt&gt; 可以获取该 frame 所在上下文的全局变量的值。
而 &lt;tt class="docutils literal"&gt;frame = sys._getframe(1)&lt;/tt&gt; 则可以获取调用方所在  frame:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat f.py
import sys


def test():
    frame = sys._getframe(1)
    print('locals: ', frame.f_locals)
    print('globals: ', frame.f_globals)


a = 1
test()

$ python f.py
locals:  {'__name__': '__main__', ..., 'test': &amp;lt;function test at 0x100f1ee18&amp;gt;, 'a': 1}
globals:  {'__name__': '__main__', ..., 'test': &amp;lt;function test at 0x100f1ee18&amp;gt;, 'a': 1}
&lt;/pre&gt;
&lt;p&gt;在上面的例子中我们可以看到，可以在 &lt;tt class="docutils literal"&gt;test&lt;/tt&gt; 函数中获取调用方所在上下文的变量 &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; 的值。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2 id="hidpython"&gt;把字符串当作 python 代码执行并求值&lt;a class="headerlink" href="#hidpython" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个可以通过 &lt;tt class="docutils literal"&gt;eval&lt;/tt&gt; 函数来实现这个功能:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
eval(source, globals=None, locals=None, /)
    Evaluate the given source in the context of globals and locals.

    The source may be a string representing a Python expression
    or a code object as returned by compile().
    The globals must be a dictionary and locals can be any mapping,
    defaulting to the current globals and locals.
    If only globals is given, locals defaults to it.

&amp;gt;&amp;gt;&amp;gt; eval('1 + 1')
2
&amp;gt;&amp;gt;&amp;gt; a = 2
&amp;gt;&amp;gt;&amp;gt; eval('a')
2
&amp;gt;&amp;gt;&amp;gt; eval('a + 1')
3
&amp;gt;&amp;gt;&amp;gt; eval('b', {'b': 2})
2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="f"&gt;
&lt;h2 id="hidf"&gt;实现 f 函数&lt;a class="headerlink" href="#hidf" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面的代码是一种 &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; 函数的实现方法 :&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;re_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r'#\{([^\}]+)\}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;实现字符串插值功能&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_getframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chucks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_chucks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eval_chucks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chucks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eval_chucks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chucks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f_globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;字符串插值求值&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;chucks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;eval_ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f_globals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eval_ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_chucks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;按插值语法处理字符串

    get_chucks('aa #{a} bb') -&amp;gt; [('aa ', '#{a}'), (' bb', '')]
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;matchs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finditer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matchs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from f import f
&amp;gt;&amp;gt;&amp;gt; a = 1
&amp;gt;&amp;gt;&amp;gt; b = 2
&amp;gt;&amp;gt;&amp;gt; c = '3'
&amp;gt;&amp;gt;&amp;gt; f('#{ a }')
'1'
&amp;gt;&amp;gt;&amp;gt; f('#{ a + b}')
'3'
&amp;gt;&amp;gt;&amp;gt; f('#{ c * 2}')
'33'
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/sys.html#sys._getframe"&gt;29.1. sys — System-specific parameters and functions — Python 3.6.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/inspect.html#types-and-members"&gt;29.12. inspect — Inspect live objects — Python 3.6.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.6/library/functions.html#eval"&gt;2. Built-in Functions — Python 3.6.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/f"&gt;github.com/mozillazg/f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2017-02-16:2017/02/f-Implement-Ruby-Style-String-Interpolation.html</guid></item><item><title>Python: super 没那么简单</title><link>https://mozillazg.com/2016/12/python-super-is-not-as-simple-as-you-thought.html</link><description>&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;说到 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt;， 大家可能觉得很简单呀，不就是用来调用父类方法的嘛。如果真的这么简单的话也就不会有这篇文章了，且听我细细道来。😄&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;约定&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在开始之前我们来约定一下本文所使用的 Python 版本。默认用的是 Python 3，也就是说：本文所定义的类都是新式类。如果你用到是 Python 2 的话，记得继承 &lt;tt class="docutils literal"&gt;object&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 默认， Python 3&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# Python 2&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python 3 和 Python 2 的另一个区别是: Python 3 可以使用直接使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().xxx&lt;/span&gt;&lt;/tt&gt; 代替 &lt;tt class="docutils literal"&gt;super(Class, &lt;span class="pre"&gt;self).xxx&lt;/span&gt;&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 默认，Python 3&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Python 2&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以，你如果用的是 Python 2 的话，记得将本文的 &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; 替换为 &lt;tt class="docutils literal"&gt;suepr(Class, self)&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;如果还有其他不兼容 Python 2 的情况，我会在文中注明的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;单继承&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在单继承中 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 就像大家所想的那样，主要是用来调用父类的方法的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @A.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @B.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你觉得执行下面代码后， &lt;tt class="docutils literal"&gt;b.n&lt;/tt&gt; 的值是多少呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;self is &amp;lt;__main__.B object at 0x106c49b38&amp;gt; @B.add&lt;/span&gt;
&lt;span class="go"&gt;self is &amp;lt;__main__.B object at 0x106c49b38&amp;gt; @A.add&lt;/span&gt;
&lt;span class="go"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个结果说明了两个问题:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().add(m)&lt;/span&gt;&lt;/tt&gt; 确实调用了父类 A 的 &lt;tt class="docutils literal"&gt;add&lt;/tt&gt; 方法。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().add(m)&lt;/span&gt;&lt;/tt&gt; 调用父类方法 &lt;tt class="docutils literal"&gt;def add(self, m)&lt;/tt&gt; 时,
此时父类中 &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; 并不是父类的实例而是子类的实例, 所以
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().add(m)&lt;/span&gt;&lt;/tt&gt; 之后 &lt;tt class="docutils literal"&gt;self.n&lt;/tt&gt; 的结果是 &lt;tt class="docutils literal"&gt;5&lt;/tt&gt; 而不是 &lt;tt class="docutils literal"&gt;4&lt;/tt&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不知道这个结果是否和你想到一样呢？下面我们来看一个多继承的例子。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;多继承&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这次我们再定义一个 &lt;tt class="docutils literal"&gt;class C&lt;/tt&gt;，一个 &lt;tt class="docutils literal"&gt;class D&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @C.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @D.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的代码又输出啥呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这次的输出如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10ce10e48&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@D.add&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10ce10e48&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@B.add&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10ce10e48&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@C.add&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10ce10e48&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;@A.add&lt;/span&gt;
&lt;span class="mi"&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你说对了吗？你可能会认为上面代码的输出类似:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
self is &amp;lt;__main__.D object at 0x10ce10e48&amp;gt; &amp;#64;D.add
self is &amp;lt;__main__.D object at 0x10ce10e48&amp;gt; &amp;#64;B.add
self is &amp;lt;__main__.D object at 0x10ce10e48&amp;gt; &amp;#64;A.add
15
&lt;/pre&gt;
&lt;p&gt;为什么会跟预期的不一样呢？下面我们将一起来看看 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 的奥秘。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="super"&gt;
&lt;h2 id="hidsuper"&gt;super 是个类&lt;a class="headerlink" href="#hidsuper" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当我们调用 &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; 的时候，实际上是实例化了一个 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 类。你没看错， &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 是个类，既不是关键字也不是函数等其他数据结构:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;super&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在大多数情况下， &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 包含了两个非常重要的信息: 一个 MRO(Method Resolution Order) 列表以及 MRO 中的一个类。当以如下方式调用 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 时:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
super(a_type, obj)
&lt;/pre&gt;
&lt;p&gt;MRO 列表指的是 &lt;tt class="docutils literal"&gt;type(obj)&lt;/tt&gt; 的 MRO 列表, MRO 中的那个类就是 &lt;tt class="docutils literal"&gt;a_type&lt;/tt&gt; , 同时 &lt;tt class="docutils literal"&gt;isinstance(obj, a_type) == True&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;当这样调用时:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
super(type1, type2)
&lt;/pre&gt;
&lt;p&gt;MRO 指的是 &lt;tt class="docutils literal"&gt;type2&lt;/tt&gt; 的 MRO 列表, MRO 中的那个类就是 &lt;tt class="docutils literal"&gt;type1&lt;/tt&gt; ，同时 &lt;tt class="docutils literal"&gt;issubclass(type2, type1) == True&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;那么， &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; 实际上做了啥呢？简单来说就是：提供一个 MRO 列表以及一个 MRO 中的类 &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; ， &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; 将返回一个从 MRO 列表中 &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; 之后的类中查找方法的对象。&lt;/p&gt;
&lt;p&gt;也就是说，查找方式时不是像常规方法一样从所有的 MRO 类中查找，而是从 MRO 列表的 tail 中查找。&lt;/p&gt;
&lt;p&gt;举个栗子, 有个 MRO 列表:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[A, B, C, D, E, object]
&lt;/pre&gt;
&lt;p&gt;下面的调用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
super(C, A).foo()
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 只会从 &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; 之后查找，即: 只会在 &lt;tt class="docutils literal"&gt;D&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;E&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; 中查找 &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt; 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;多继承中 super 的工作方式&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;再回到前面的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在你可能已经有点眉目，为什么输出会是&lt;/p&gt;
&lt;pre class="literal-block"&gt;
self is &amp;lt;__main__.D object at 0x10ce10e48&amp;gt; &amp;#64;D.add
self is &amp;lt;__main__.D object at 0x10ce10e48&amp;gt; &amp;#64;B.add
self is &amp;lt;__main__.D object at 0x10ce10e48&amp;gt; &amp;#64;C.add
self is &amp;lt;__main__.D object at 0x10ce10e48&amp;gt; &amp;#64;A.add
19
&lt;/pre&gt;
&lt;p&gt;了吧 ;)&lt;/p&gt;
&lt;p&gt;下面我们来具体分析一下:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;D&lt;/tt&gt; 的 MRO 是: &lt;tt class="docutils literal"&gt;[D, B, C, A, object]&lt;/tt&gt; 。
&lt;strong&gt;备注&lt;/strong&gt;: 可以通过 &lt;tt class="docutils literal"&gt;D.mro()&lt;/tt&gt; (Python 2 使用 &lt;tt class="docutils literal"&gt;D.__mro__&lt;/tt&gt; ) 来查看 &lt;tt class="docutils literal"&gt;D&lt;/tt&gt; 的 MRO 信息）&lt;/li&gt;
&lt;li&gt;详细的代码分析如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 第四步&lt;/span&gt;
        &lt;span class="c1"&gt;# 来自 D.add 中的 super&lt;/span&gt;
        &lt;span class="c1"&gt;# self == d, self.n == d.n == 5&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @A.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
        &lt;span class="c1"&gt;# d.n == 7&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 第二步&lt;/span&gt;
        &lt;span class="c1"&gt;# 来自 D.add 中的 super&lt;/span&gt;
        &lt;span class="c1"&gt;# self == d, self.n == d.n == 5&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @B.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# 等价于 suepr(B, self).add(m)&lt;/span&gt;
        &lt;span class="c1"&gt;# self 的 MRO 是 [D, B, C, A, object]&lt;/span&gt;
        &lt;span class="c1"&gt;# 从 B 之后的 [C, A, object] 中查找 add 方法&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 第六步&lt;/span&gt;
        &lt;span class="c1"&gt;# d.n = 11&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="c1"&gt;# d.n = 14&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 第三步&lt;/span&gt;
        &lt;span class="c1"&gt;# 来自 B.add 中的 super&lt;/span&gt;
        &lt;span class="c1"&gt;# self == d, self.n == d.n == 5&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @C.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# 等价于 suepr(C, self).add(m)&lt;/span&gt;
        &lt;span class="c1"&gt;# self 的 MRO 是 [D, B, C, A, object]&lt;/span&gt;
        &lt;span class="c1"&gt;# 从 C 之后的 [A, object] 中查找 add 方法&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 第五步&lt;/span&gt;
        &lt;span class="c1"&gt;# d.n = 7&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
        &lt;span class="c1"&gt;# d.n = 11&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 第一步&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @D.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# 等价于 super(D, self).add(m)&lt;/span&gt;
        &lt;span class="c1"&gt;# self 的 MRO 是 [D, B, C, A, object]&lt;/span&gt;
        &lt;span class="c1"&gt;# 从 D 之后的 [B, C, A, object] 中查找 add 方法&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 第七步&lt;/span&gt;
        &lt;span class="c1"&gt;# d.n = 14&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="c1"&gt;# self.n = 19&lt;/span&gt;

&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;调用过程图如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;          &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;            &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;             &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt;  &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt;  &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt;  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;------&lt;/span&gt;&lt;span class="mf"&gt;6.&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;----&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;----&lt;/span&gt;&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;--|&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="super" src="/static/images/python/super.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在你知道为什么 &lt;tt class="docutils literal"&gt;d.add(2)&lt;/tt&gt; 后 &lt;tt class="docutils literal"&gt;d.n&lt;/tt&gt; 的值是 19 了吧 ;)&lt;/p&gt;
&lt;p&gt;如果感觉上面的解释还不是很清楚的话，下面我们一起来根据 super 的功能实现一个我们自己的 Super 类，相信这样会更直观一点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;实现一个 Super 类&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在实现这个 Super 类之前，我们先来复习一下前面说的 super 的信息：&lt;/p&gt;
&lt;blockquote&gt;
super() 实际上做了啥呢？简单来说就是：提供一个 MRO 列表以及一个 MRO 中的类 C ， super() 将返回一个从 MRO 列表中 C 之后的类中查找方法的对象。&lt;/blockquote&gt;
&lt;p&gt;根据这个信息我们可以写一个简陋版本的 &lt;tt class="docutils literal"&gt;Super&lt;/tt&gt; 类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sub_cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 假设 sub_cls = B, instance = D()&lt;/span&gt;
        &lt;span class="c1"&gt;# Super(B, self).add(233)&lt;/span&gt;
        &lt;span class="n"&gt;mro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# mro == [D, B, C, A, object]&lt;/span&gt;
        &lt;span class="c1"&gt;# sub_cls is B&lt;/span&gt;
        &lt;span class="c1"&gt;# 从 mro 中 sub_cls 后面的类中进行查找&lt;/span&gt;
        &lt;span class="c1"&gt;# __mro_tail == [C, A, object]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro_tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__sub_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub_cls&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 从 mro tail 列表的各个类中查找方法&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro_tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;call {}.{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="c1"&gt;# 获取类中定义的方法&lt;/span&gt;
            &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# 因为 d = D(); d.add(233)  等价于 D.add(d, 233)&lt;/span&gt;
            &lt;span class="c1"&gt;# 所以返回的函数需要自动填充第一个 self 参数&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们把上面的那个例子中的 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 替换为这个简陋版本的 &lt;tt class="docutils literal"&gt;Super&lt;/tt&gt; 类，看看效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @A.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @B.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @C.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self is {0} @D.add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;Super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后的例子运行结果如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
self is &amp;lt;__main__.D object at 0x10d02cf98&amp;gt; &amp;#64;D.add
call &amp;lt;class '__main__.B'&amp;gt;.add
self is &amp;lt;__main__.D object at 0x10d02cf98&amp;gt; &amp;#64;B.add
call &amp;lt;class '__main__.C'&amp;gt;.add
self is &amp;lt;__main__.D object at 0x10d02cf98&amp;gt; &amp;#64;C.add
call &amp;lt;class '__main__.A'&amp;gt;.add
self is &amp;lt;__main__.D object at 0x10d02cf98&amp;gt; &amp;#64;A.add
19
&lt;/pre&gt;
&lt;p&gt;可以看到使用简陋版 &lt;tt class="docutils literal"&gt;Super&lt;/tt&gt; 和内置的 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 的效果是一样的。希望这个简陋的 &lt;tt class="docutils literal"&gt;Super&lt;/tt&gt; 类可以帮助大家初步理解 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 的工作方式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;总结&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;希望这篇文章能让你对 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 多一点了解，如果文中有啥没讲清楚或讲的不对的地方欢迎指正。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2 id="hidid8"&gt;参考资料&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sixty-north.com/blog/series/pythons-super-explained"&gt;Python's super() Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#super"&gt;2. Built-in Functions — Python 3.5.2 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__"&gt;3. Data model — Python 3.7.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functools.html#functools.partial"&gt;functools — Higher-order functions and operations on callable objects — Python 3.7.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://fuhm.net/super-harmful/"&gt;Python's Super Considered Harmful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.github.io/2016/11/python-mro-compute.html"&gt;Python: 多继承模式下 MRO(Method Resolution Order) 的计算方式 - Huang Huang 的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-12-12:2016/12/python-super-is-not-as-simple-as-you-thought.html</guid><category>super</category><category>mro</category></item><item><title>Python: 多继承模式下 MRO(Method Resolution Order) 的计算方式</title><link>https://mozillazg.com/2016/11/python-mro-compute.html</link><description>&lt;p&gt;大家可能已经知道了，在 Python 3(Python 2 的新式类)中多继承模式是使用 C3 算法来确定 MRO(Method Resolution Order) 的。&lt;/p&gt;
&lt;p&gt;那么具体是怎么计算的呢？本文将基于 &lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;https://www.python.org/download/releases/2.3/mro/&lt;/a&gt; 中的几个例子来讲解 MRO 是怎么计算的。（备注：我的理解不一定完全匹配原文的内容，建议直接阅读 &lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;https://www.python.org/download/releases/2.3/mro/&lt;/a&gt; 这份原始材料）&lt;/p&gt;
&lt;p&gt;我们首先来定义一些符号：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
用 CN 表示一个类：C1, C2, C3, ..., CN
C1 C2 C3 ... CN 表示的是一个包含多个类的列表 [C1, C2, C3, ..., CN]
&lt;/pre&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
head = C1
tail = C2 ... CN
&lt;/pre&gt;
&lt;p&gt;加法运算:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C + (C1 C2 ... CN) = C C1 C2 ... CN
[C] + [C1, C2, ... ,CN] = [C, C1, C2, ..., CN]
&lt;/pre&gt;
&lt;p&gt;L[C] 表示类 C 的线性值，其实就是 C 的 MRO, 其中&lt;/p&gt;
&lt;pre class="literal-block"&gt;
L[object] = object
&lt;/pre&gt;
&lt;p&gt;比如有个类 :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class C(B1, B2, ..., BN): pass
&lt;/pre&gt;
&lt;p&gt;那么:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
L[C(B1 ... BN)] = C + merge(L[B1] ... L[BN], B1 ... BN)
&lt;/pre&gt;
&lt;p&gt;merge 的计算规则如下 &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt; ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;take the head of the first list, i.e L[B1][0];&lt;/li&gt;
&lt;li&gt;if this head is not in the tail of any of the other lists, then add it to the linearization of C and remove it from the lists in the merge, otherwise look at the head of the next list and take it, if it is a good head.&lt;/li&gt;
&lt;li&gt;Then repeat the operation until all the class are removed or it is impossible to find good heads. In this case, it is impossible to construct the merge, Python 2.3 will refuse to create the class C and will raise an exception.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="mro"&gt;
&lt;h2 id="hidmro"&gt;计算 MRO&lt;a class="headerlink" href="#hidmro" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先从简单的类说起：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;简单的子类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;     &lt;span class="c1"&gt;# 从上面已经知道了 L[B] = B object&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面来看一个复杂的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很容易就可以想到:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;  &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;  &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;  &lt;span class="n"&gt;O&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面来计算 C, B, A:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;L[C]&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;DF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="c1"&gt;# 从前面可知 L[D] 和 L[F] 的结果&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="c1"&gt;# 因为 D 是顺序第一个并且在几个包含 D 的 list 中是 head，&lt;/span&gt;
     &lt;span class="c1"&gt;# 所以这一次取 D 同时从列表中删除 D&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="c1"&gt;# 因为 O 虽然是顺序第一个但在其他 list (FO)中不是 head, 跳过,&lt;/span&gt;
     &lt;span class="c1"&gt;# 改为检查第二个list FO&lt;/span&gt;
     &lt;span class="c1"&gt;# F 是第二个 list 和其他 list 的 head,&lt;/span&gt;
     &lt;span class="c1"&gt;# 取 F同时从列表中删除 F&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;L[B]&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;DE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;L[A]&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;BC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BDEO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CDFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CDFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="c1"&gt;# 注意这里是 C , 因为第一个list 的 head D 不是其他list 的 head&lt;/span&gt;
     &lt;span class="c1"&gt;# 所以改为从下一个 list CDFO 开始&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里应该已经有一点眉目了。下面再来个上面那些类的变种，可以先自己算算看，后面有详细的计算过程。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;跟之前唯一的区别是 &lt;tt class="docutils literal"&gt;B(D, E)&lt;/tt&gt; 变成了 &lt;tt class="docutils literal"&gt;B(E, D)&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;  &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;  &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;  &lt;span class="n"&gt;O&lt;/span&gt;

&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;DF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;

&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;

&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;BC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BEDO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CDFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EDO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CDFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CDFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mro&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;type &amp;#39;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这几个例子应该对如何计算 MRO 已经有所了解了，更详细的信息可以阅读 &lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;python MRO 文档&lt;/a&gt;
以及 wikipedia 中的 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/C3_linearization"&gt;C3 算法&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;参考资料&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;The Python 2.3 Method Resolution Order | Python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/C3_linearization"&gt;C3 linearization - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;: &lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;The Python 2.3 Method Resolution Order | Python.org&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-11-06:2016/11/python-mro-compute.html</guid><category>super</category><category>mro</category></item><item><title>Python: threading + multiprocessing + logging = 死锁 ?</title><link>https://mozillazg.com/2016/09/python-threading-multiprocessing-logging-equal-deadlock.html</link><description>&lt;p&gt;前段时间有个程序突然出现了子进程不工作的情况。&lt;/p&gt;
&lt;p&gt;后来通过调查发现是因为程序中同时使用了多线程，多进程以及 logging
模块，导致子进程中出现了死锁的情况。&lt;/p&gt;
&lt;p&gt;当创建子进程的时候，后台线程中的 logging 模块正好获取了一个锁(&lt;tt class="docutils literal"&gt;threading.RLock&lt;/tt&gt;)在记录日志信息。由于在 unix/linux 平台下 Python 是通过 fork 来创建子进程的，因此创建子进程的时候会把 logging 中的锁也复制了一份，当子进程中需要记录日志的时候发现 logging 的锁一直处于被占用的状态，从而出现了死锁（复制的这个锁永远也不会被释放，因为它的所有者是父进程的某个线程，但是这个线程释放锁的时候又不会影响子进程里的这个锁）。&lt;/p&gt;
&lt;p&gt;复现问题的代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThreadWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: init&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: running (rlock = {0})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: i got lock {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: release lock {0} and &amp;#39;&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;sleeping forever&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;600000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;global_rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThreadWorker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;forking&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# pid != 0 当前处于父进程&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent: running (rlock = {0})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="c1"&gt;# pid = 0 当前处于子进程&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child: running (rlock = {0}), &amp;#39;&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;getting the lock...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child: got the lock {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码的执行结果如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python fork.py
ThreadWorker: init
ThreadWorker: running &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;unlocked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; at 0x10116cb40&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
ThreadWorker: i got lock &amp;lt;locked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123145307557888&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; at 0x10116cb40&amp;gt;
forking
parent: running &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;locked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123145307557888&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; at 0x10116cb40&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
child: running &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;locked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123145307557888&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; at 0x10116cb40&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, getting the lock...
ThreadWorker: release lock &amp;lt;unlocked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; at 0x10116cb40&amp;gt; and sleeping forever
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的结果中可以看出来：虽然线程随后释放了获得的锁，但是子进程却永远的卡在了获取锁的地方。&lt;/p&gt;
&lt;p&gt;那么, 应该如何解决这个问题呢？至少有三种解决办法:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;先创建子进程，然后再创建线程:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThreadWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: init&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: running (rlock = {0})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: i got lock {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ThreadWorker: release lock {0} and &amp;#39;&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;sleeping forever&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;600000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;global_rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThreadWorker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;forking&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="c1"&gt;# pid != 0 当前处于父进程&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent: running (rlock = {0})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="c1"&gt;# pid = 0 当前处于子进程&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child: running (rlock = {0}), &amp;#39;&lt;/span&gt;
          &lt;span class="s1"&gt;&amp;#39;getting the lock...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child: got the lock {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child: release the lock {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;global_rlock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python fork2.py
ThreadWorker: init
forking
parent: running &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;unlocked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; at 0x10f24cb70&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
ThreadWorker: running &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;unlocked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; at 0x10f24cb70&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
ThreadWorker: i got lock &amp;lt;locked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;123145307557888&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; at 0x10f24cb70&amp;gt;
child: running &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &amp;lt;unlocked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; at 0x10f24cb70&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;, getting the lock...
child: got the lock &amp;lt;locked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;140735162044416&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; at 0x10f24cb70&amp;gt;
child: release the lock &amp;lt;unlocked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; at 0x10f24cb70&amp;gt;
ThreadWorker: release lock &amp;lt;unlocked _thread.RLock object &lt;span class="nv"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; at 0x10f24cb70&amp;gt; and sleeping forever
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到子进程和线程都能够正常获取锁。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;不要混合使用 threading, multiprocessing, logging/其他使用了线程锁的模块。
要么都是多线程，要么都是多进程。&lt;/li&gt;
&lt;li&gt;另一个办法就是配置 logging 使用无锁的 handler 来记录日志信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- * 还有一个解决办法是使用一个第三方模块 `python-atfork &lt;https://github.com/google/python-atfork&gt;`_ (这个模块已经停止维护)，这个模块可以给 logging 模块打 monkey patch。 --&gt;
&lt;!--  --&gt;
&lt;!-- pip install https://github.com/google/python-atfork/archive/master.zip --&gt;
&lt;!-- .. code-block:: python --&gt;
&lt;!--  --&gt;
&lt;!-- import os --&gt;
&lt;!-- import sys --&gt;
&lt;!-- import threading --&gt;
&lt;!-- import time --&gt;
&lt;!--  --&gt;
&lt;!-- import atfork --&gt;
&lt;!-- atfork.monkeypatch_os_fork_functions() --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- class ThreadWorker(threading.Thread): --&gt;
&lt;!-- def __init__(self): --&gt;
&lt;!-- print('ThreadWorker: init') --&gt;
&lt;!-- super(ThreadWorker, self).__init__() --&gt;
&lt;!--  --&gt;
&lt;!-- def run(self): --&gt;
&lt;!-- print('ThreadWorker: running (rlock = {0})'.format(global_rlock)) --&gt;
&lt;!--  --&gt;
&lt;!-- global_rlock.acquire() --&gt;
&lt;!-- print('ThreadWorker: i got lock {0}'.format(global_rlock)) --&gt;
&lt;!-- time.sleep(5) --&gt;
&lt;!-- global_rlock.release() --&gt;
&lt;!-- print('ThreadWorker: release lock {0} and ' --&gt;
&lt;!-- 'sleeping forever'.format(global_rlock)) --&gt;
&lt;!--  --&gt;
&lt;!-- time.sleep(600000) --&gt;
&lt;!--  --&gt;
&lt;!-- global_rlock = threading.RLock(verbose=True) --&gt;
&lt;!-- atfork.atfork(prepare=global_rlock.acquire, --&gt;
&lt;!-- parent=global_rlock.release, --&gt;
&lt;!-- child=global_rlock.release) --&gt;
&lt;!--  --&gt;
&lt;!-- worker = ThreadWorker() --&gt;
&lt;!-- worker.start() --&gt;
&lt;!--  --&gt;
&lt;!-- time.sleep(1) --&gt;
&lt;!-- print('forking') --&gt;
&lt;!-- pid = os.fork() --&gt;
&lt;!-- if pid != 0:    # pid != 0 当前处于父进程 --&gt;
&lt;!-- print('parent: running (rlock = {0})'.format(global_rlock)) --&gt;
&lt;!-- else:      # pid = 0 当前处于子进程 --&gt;
&lt;!-- print('child: running (rlock = {0}), ' --&gt;
&lt;!-- 'getting the lock...'.format(global_rlock)) --&gt;
&lt;!-- global_rlock.acquire() --&gt;
&lt;!-- print('child: got the lock {0}'.format(global_rlock)) --&gt;
&lt;!-- sys.exit(0) --&gt;
&lt;!--  --&gt;
&lt;!-- time.sleep(10) --&gt;
&lt;!--  --&gt;
&lt;!-- $ python2 fork3.py --&gt;
&lt;!-- ThreadWorker: init --&gt;
&lt;!-- ThreadWorker: running (rlock = &lt;_RLock owner=None count=0&gt;) --&gt;
&lt;!-- Thread-1: &lt;_RLock owner='Thread-1' count=1&gt;.acquire(1): initial success --&gt;
&lt;!-- ThreadWorker: i got lock &lt;_RLock owner='Thread-1' count=1&gt; --&gt;
&lt;!-- forking --&gt;
&lt;!-- Thread-1: &lt;_RLock owner=None count=0&gt;.release(): final release --&gt;
&lt;!-- MainThread: &lt;_RLock owner='MainThread' count=1&gt;.acquire(1): initial success --&gt;
&lt;!-- MainThread: &lt;_RLock owner=None count=0&gt;.release(): final release --&gt;
&lt;!-- parent: running (rlock = &lt;_RLock owner=None count=0&gt;) --&gt;
&lt;!-- ThreadWorker: release lock &lt;_RLock owner=None count=0&gt; and sleeping forever --&gt;
&lt;!-- MainThread: &lt;_RLock owner=None count=0&gt;.release(): final release --&gt;
&lt;!-- child: running (rlock = &lt;_RLock owner=None count=0&gt;), getting the lock... --&gt;
&lt;!-- MainThread: &lt;_RLock owner='MainThread' count=1&gt;.acquire(1): initial success --&gt;
&lt;!-- child: got the lock &lt;_RLock owner='MainThread' count=1&gt; --&gt;
&lt;!--  --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://twiki.cern.ch/twiki/bin/view/Main/PythonLoggingThreadingMultiprocessingIntermixedStudy"&gt;PythonLoggingThreadingMultiprocessingIntermixedStudy(Using modules Python logging, threading and multiprocessing in a single application.) &amp;lt; Main &amp;lt; TWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bugs.python.org/issue6721"&gt;Issue 6721: Locks in the standard library should be sanitized on fork - Python tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/24509650/deadlock-with-logging-multiprocess-multithread-python-script"&gt;multithreading - Deadlock with logging multiprocess/multithread python script - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://segmentfault.com/q/1010000005919174"&gt;python - 使用multiprocessing.Process调用start方法后，有较小的几率子进程中run方法未执行 - SegmentFault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/14087527/python-multiprocessing-hanging-potential-queue-memory-error"&gt;python multiprocessing hanging, potential queue memory error? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxprogrammingblog.com/threads-and-fork-think-twice-before-using-them"&gt;Threads and fork(): think twice before mixing them. | Linux Programming Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-09-18:2016/09/python-threading-multiprocessing-logging-equal-deadlock.html</guid></item><item><title>Python 设计模式: 桥接模式(bridge pattern)</title><link>https://mozillazg.com/2016/09/python-bridge-pattern.html</link><description>&lt;p&gt;桥接模式用于将&amp;quot;抽象&amp;quot;(abstraction, 比如接口或算法)与实现方式相分离。&lt;/p&gt;
&lt;p&gt;如果不用桥接模式，那么通常的做法是，创建若干个基类用于表示各个抽象方式，
然后从每个基类中继承出两个或多个子类，用于表示对这种抽象方式的不同实现方法。
用了桥接模式之后，我们需要创建两套独立的&amp;quot;类体系&amp;quot;（class hierarchy）: &amp;quot;抽象体系&amp;quot;
定义了我们所要执行的操作（比如接口或高层算法），而“实现体系”则包含具体实现方式，
抽象体系要调用实现体系以完成其操作。抽象体系中的类会把实现体系中的某个类实例
聚合进来，而这个实例将充当抽象接口与具体实现之间的桥梁(bridge)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OSSClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OSS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url_to_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Downloader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;remote_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_to_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的 &lt;tt class="docutils literal"&gt;OSSClient&lt;/tt&gt; 即为实现体系类， &lt;tt class="docutils literal"&gt;Downloader&lt;/tt&gt; 是抽象体系类：&lt;/p&gt;
&lt;p&gt;抽象体系中的类(&lt;tt class="docutils literal"&gt;Downloader&lt;/tt&gt;)会把实现体系中的某个类(&lt;tt class="docutils literal"&gt;OSSClient&lt;/tt&gt;)实例
聚合进来，而这个实例将充当抽象接口与具体实现之间的桥梁(bridge)。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/24390228/"&gt;《Python in Practice》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-09-17:2016/09/python-bridge-pattern.html</guid><category>design pattern</category><category>设计模式</category></item><item><title>Python 设计模式: 单例模式(singleton pattern)</title><link>https://mozillazg.com/2016/09/python-singleton-pattern.html</link><description>&lt;p&gt;如果想在整个程序的运行过程中，某个类只有一个实例的话，可以通过单例模式来实现。&lt;/p&gt;
&lt;p&gt;在 Python 中实现单例模式有很多种方式，可以通过传统的在定义类的时候判断,
也可以通过模块级别的变量来实现，也可以通过装饰器实现等等, 有很多种方法可以实现。
但是基本上这些方法都可以破解 ;)&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 存储在类属性中，通过类方法去获取&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt;



&lt;span class="c1"&gt;# 在类的 __new__ 方法中判断&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt;

&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 依附在一个可变对象上&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_Singleton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt;
&lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 闭包&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;_Singleton&lt;/span&gt;

&lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多单例模式的实现详见: &lt;a class="reference external" href="http://code.activestate.com/recipes/52558-the-singleton-pattern-implemented-with-python/"&gt;The Singleton Pattern implemented with Python « Python recipes « ActiveState Code&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/24390228/"&gt;《Python in Practice》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://code.activestate.com/recipes/52558-the-singleton-pattern-implemented-with-python/"&gt;The Singleton Pattern implemented with Python « Python recipes « ActiveState Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.python.org/moin/SingletonProgramming"&gt;SingletonProgramming - Python Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 07 Sep 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-09-07:2016/09/python-singleton-pattern.html</guid><category>design pattern</category><category>设计模式</category></item><item><title>Python 设计模式: 原型模式(prototype pattern)</title><link>https://mozillazg.com/2016/09/python-prototype-pattern.html</link><description>&lt;p&gt;当需要在原有对象的基础上创建一个该对象的副本时，我们就可以使用原型模式。
在 Python 里可以很简单的通过 &lt;tt class="docutils literal"&gt;copy.copy&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;copy.deepcopy&lt;/tt&gt; 函数来实现原型模式。&lt;/p&gt;
&lt;p&gt;对于 copy 后需要再做一些处理的，可以给这个对象定义一个 &lt;tt class="docutils literal"&gt;clone&lt;/tt&gt; 方法封装一下具体的操作
或者把操作封装到一个函数里。&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;book_copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[:],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;book_copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;book_copy&lt;/span&gt;

&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;book2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;book3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;book3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;book3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/26336439/"&gt;《Mastering Python Design Patterns》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/24390228/"&gt;《Python in Practice》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-09-06:2016/09/python-prototype-pattern.html</guid><category>design pattern</category><category>设计模式</category></item><item><title>Python 设计模式: 适配器模式(adapter pattern)</title><link>https://mozillazg.com/2016/08/python-adapter-pattern.html</link><description>&lt;p&gt;在不修改原对象代码的基础上，把对象的不兼容接口封装成调用者需要的兼容接口即为适配器模式。比如新代码要对接老代码，但是又不想修改老代码，可以使用适配器模式将老代码封装为新代码需要的接口。&lt;/p&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QiniuClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Qiniu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OSSClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OSS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remote_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OSSClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/hello/world.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/26336439/"&gt;《Mastering Python Design Patterns》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-08-22:2016/08/python-adapter-pattern.html</guid><category>design pattern</category><category>设计模式</category></item><item><title>Python 设计模式: 装饰器模式(decorator pattern)</title><link>https://mozillazg.com/2016/08/python-decorator-pattern.html</link><description>&lt;p&gt;装饰器模式说的是在不修改原有对象的基础上，给这个对象增加新的职责/功能。&lt;/p&gt;
&lt;p&gt;举个栗子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;
&lt;span class="n"&gt;cached_max_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cached_max_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cached_max_age&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/26336439/"&gt;《Mastering Python Design Patterns》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.python.org/moin/DecoratorPattern"&gt;DecoratorPattern - Python Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Decorator_pattern#Python"&gt;Decorator pattern - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 22 Aug 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-08-22:2016/08/python-decorator-pattern.html</guid><category>design pattern</category><category>设计模式</category></item><item><title>Python 设计模式: 建造者模式(builder pattern)</title><link>https://mozillazg.com/2016/08/python-builder-pattern.html</link><description>&lt;p&gt;当一个对象必须经过多个步骤来创建，并且要求不同的参数可以产生不同的表现的时候，
我们可以使用建造者模式。&lt;/p&gt;
&lt;p&gt;比如下面这个摘自《Mastering Python Design Patterns》 的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Computer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serial_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serial_number&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;memory: {0} GB, cpu: {1}, disk: {2} GB&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComputerBuilder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Computer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SN-12345555&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_memory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_cpu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_disk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disk&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HardwareEngineer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;construct_computer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ComputerBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_memory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_cpu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_disk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt;

&lt;span class="n"&gt;engineer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HardwareEngineer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;engineer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;construct_computer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;engineer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/26336439/"&gt;《Mastering Python Design Patterns》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-08-21:2016/08/python-builder-pattern.html</guid><category>design pattern</category><category>设计模式</category></item><item><title>Python 设计模式: 工厂模式(factory pattern)</title><link>https://mozillazg.com/2016/08/python-factory-pattern.html</link><description>&lt;p&gt;工厂模式是说调用方可以通过调用一个简单函数就可以创建
不同的对象。工厂模式一般包含工厂方法和抽象工厂两种模式。&lt;/p&gt;
&lt;div class="section" id="factory-method"&gt;
&lt;h2 id="hidfactory-method"&gt;工厂方法(factory method)&lt;a class="headerlink" href="#hidfactory-method" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;工厂方法模式是指定义一个可以根据输入参数的不同返回不同对象的函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XMLParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xml2dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;XMLParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract-factory"&gt;
&lt;h2 id="hidabstract-factory"&gt;抽象工厂(abstract factory)&lt;a class="headerlink" href="#hidabstract-factory" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一系列的工厂方法组合在一起实现了一个抽象工厂。&lt;/p&gt;
&lt;p&gt;还是上面那个例子，我们再加一个工厂方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DBSaver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileSaver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;save_dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;save_dir&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_saver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;DBSaver&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;save_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;save_dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FileSaver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;save_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_saver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;save_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;saver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;save_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;save&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;工厂方法和抽象工厂的选择:
先使用工厂方法，当发现需要使用一系列工厂方法来创建多个对象的时候，
可以考虑把这些创建对象的过程合并到一个抽象工厂。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://book.douban.com/subject/26336439/"&gt;《Mastering Python Design Patterns》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-08-20:2016/08/python-factory-pattern.html</guid><category>design pattern</category><category>设计模式</category></item><item><title>Python: 捕获异常然后再抛出另一个异常的正确姿势</title><link>https://mozillazg.com/2016/08/python-the-right-way-to-catch-exception-then-reraise-another-exception.html</link><description>&lt;p&gt;一般大家实现捕获异常然后再抛出另一个异常的方法是下面这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;div&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不知道大家有没有注意到这样抛出异常的方式有一个很严重的问题，那就是
在重新抛出另一个异常的时候，捕获的上一个异常的 traceback 信息丢失了(python2):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py
def div():
    2 / 0
try:
    div()
except ZeroDivisionError as e:
    raise ValueError(e)

$ python2 a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
    raise ValueError(e)
ValueError: integer division or modulo by zero
&lt;/pre&gt;
&lt;p&gt;这样的话非常不利于查找问题: 比如上面的例子中实际出错的代码是第二行，但是
当我们捕获了第一个异常然后再抛出一个自定义异常的时候，
实际出错位置的信息就丢失了。&lt;/p&gt;
&lt;div class="section" id="python-2"&gt;
&lt;h2 id="hidpython-2"&gt;Python 2&lt;a class="headerlink" href="#hidpython-2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;那么在 Python 2 下如果我们不想丢失捕获的异常的 traceback 信息的话，应该
怎样重新抛出异常呢？&lt;/p&gt;
&lt;p&gt;有两种办法, 还是用上面的例子举例:&lt;/p&gt;
&lt;p&gt;一种办法是直接 &lt;tt class="docutils literal"&gt;raise&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py
def div():
    2 / 0
try:
    div()
except ZeroDivisionError as e:
    raise

$ python2 a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 4, in &amp;lt;module&amp;gt;
    div()
  File &amp;quot;a.py&amp;quot;, line 2, in div
    2 / 0
ZeroDivisionError: integer division or modulo by zero
&lt;/pre&gt;
&lt;p&gt;另一种办法就是 &lt;tt class="docutils literal"&gt;raise&lt;/tt&gt; 另一个异常时指定上一个异常的 traceback 信息
(通过 &lt;tt class="docutils literal"&gt;sys.exc_info()&lt;/tt&gt; 获取当前捕获的异常信息):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py
import sys

def div():
    2 / 0
try:
    div()
except ZeroDivisionError as e:
    raise ValueError(e), None, sys.exc_info()[2]

$ python2 a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
    div()
  File &amp;quot;a.py&amp;quot;, line 4, in div
    2 / 0
ValueError: integer division or modulo by zero
&lt;/pre&gt;
&lt;p&gt;这个是 &lt;tt class="docutils literal"&gt;raise&lt;/tt&gt; 的高级用法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;exception&lt;/tt&gt;: 异常类实例/异常类&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;value&lt;/tt&gt;: 初始化异常类的参数值/异常类实例（使用这个实例作为 raise 的异常实例）/元组/None&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;traceback&lt;/tt&gt;: traceback 对象/None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们来看看上面的方法是否可以应对多层异常捕获然后再抛出的情况:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py
import sys

def div():
    2 / 0

def foo():
    try:
        div()
    except ZeroDivisionError as e:
        raise ValueError(e), None, sys.exc_info()[2]

def bar():
    try:
        foo()
    except ValueError as e:
        raise TypeError(e), None, sys.exc_info()[2]

def foobar():
    try:
        bar()
    except TypeError as e:
        raise
foobar()

$ python2 a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 23, in &amp;lt;module&amp;gt;
    foobar()
  File &amp;quot;a.py&amp;quot;, line 20, in foobar
    bar()
  File &amp;quot;a.py&amp;quot;, line 14, in bar
    foo()
  File &amp;quot;a.py&amp;quot;, line 8, in foo
    div()
  File &amp;quot;a.py&amp;quot;, line 4, in div
    2 / 0
TypeError: integer division or modulo by zero
&lt;/pre&gt;
&lt;p&gt;从上面的结果可以看到这两种方法是支持多层异常 traceback 信息传递的。&lt;/p&gt;
&lt;p&gt;那么在 Python 3 下又怎么解决这个问题呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-3"&gt;
&lt;h2 id="hidpython-3"&gt;Python 3&lt;a class="headerlink" href="#hidpython-3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 Python 3 下默认会附加上捕获的上个异常的 trackback 信息（保存在异常实例的 &lt;tt class="docutils literal"&gt;__traceback__&lt;/tt&gt; 属性中）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py
def div():
    2 / 0
try:
    div()
except ZeroDivisionError as e:
    raise ValueError(e)

$ python3 a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 4, in &amp;lt;module&amp;gt;
    div()
  File &amp;quot;a.py&amp;quot;, line 2, in div
    2 / 0
ZeroDivisionError: division by zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
    raise ValueError(e)
ValueError: division by zero
&lt;/pre&gt;
&lt;p&gt;也支持指定使用哪个异常实例的 traceback 信息: &lt;tt class="docutils literal"&gt;raise ... from ...&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py
def div():
    2 / 0

try:
    div()
except ZeroDivisionError as e:
    raise ValueError(e) from e

$ python a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 5, in &amp;lt;module&amp;gt;
    div()
  File &amp;quot;a.py&amp;quot;, line 2, in div
    2 / 0
ZeroDivisionError: division by zero

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    raise ValueError(e) from e
ValueError: division by zero
&lt;/pre&gt;
&lt;p&gt;也可以指定使用的 traceback 对象: &lt;tt class="docutils literal"&gt;raise exception.with_traceback(traceback)&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py
import sys

def div():
    2 / 0

try:
    div()
except ZeroDivisionError as e:
    raise ValueError(e).with_traceback(sys.exc_info()[2])

$ python a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    div()
  File &amp;quot;a.py&amp;quot;, line 4, in div
    2 / 0
ZeroDivisionError: division by zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 9, in &amp;lt;module&amp;gt;
    raise ValueError(e).with_traceback(sys.exc_info()[2])
  File &amp;quot;a.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    div()
  File &amp;quot;a.py&amp;quot;, line 4, in div
    2 / 0
ValueError: division by zero
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="python-2-python-3"&gt;
&lt;h2 id="hidpython-2-python-3"&gt;兼容 Python 2 和 Python 3 的写法&lt;a class="headerlink" href="#hidpython-2-python-3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面介绍了在 Python 2 和 Python 3 下的不同解决办法，那么如何写一个兼容 Python 2
和 Python 3 的 &lt;tt class="docutils literal"&gt;reraise&lt;/tt&gt; 函数呢？&lt;/p&gt;
&lt;p&gt;下面将介绍一种方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PY3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;PY3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reraise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__traceback__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_traceback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;def reraise(tp, value, tb=None):&lt;/span&gt;
&lt;span class="s1"&gt;           raise tp, value, tb&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的 &lt;tt class="docutils literal"&gt;reraise&lt;/tt&gt; 函数我们约定了 &lt;tt class="docutils literal"&gt;vlaue&lt;/tt&gt; 参数的值是一个异常类的实例。
上面 &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; 中之所以用 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 去定义 &lt;tt class="docutils literal"&gt;reraise&lt;/tt&gt; 函数是因为
&lt;tt class="docutils literal"&gt;raise tp, value, tb&lt;/tt&gt; 在 Python 3 下会报语法错误，所以用 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 来
绕过 Python 3 下的语法错误检查。&lt;/p&gt;
&lt;p&gt;下面我们来看一下效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat a.py

ef div():
    2 / 0

def foo():
    try:
        div()
    except ZeroDivisionError as e:
        reraise(ValueError, ValueError(e), sys.exc_info()[2])

def bar():
    try:
        foo()
    except ValueError as e:
        reraise(TypeError, TypeError(e), sys.exc_info()[2])

def foobar():
    try:
        bar()
    except TypeError:
        raise
foobar()
&lt;/pre&gt;
&lt;p&gt;Python 2:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python2 a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 34, in &amp;lt;module&amp;gt;
    foobar()
  File &amp;quot;a.py&amp;quot;, line 31, in foobar
    bar()
  File &amp;quot;a.py&amp;quot;, line 27, in bar
    reraise(TypeError, TypeError(e), sys.exc_info()[2])
  File &amp;quot;a.py&amp;quot;, line 25, in bar
    foo()
  File &amp;quot;a.py&amp;quot;, line 21, in foo
    reraise(ValueError, ValueError(e), sys.exc_info()[2])
  File &amp;quot;a.py&amp;quot;, line 19, in foo
    div()
  File &amp;quot;a.py&amp;quot;, line 15, in div
    2 / 0
TypeError: integer division or modulo by zero
&lt;/pre&gt;
&lt;p&gt;Python 3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python3 a.py
Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 19, in foo
    div()
  File &amp;quot;a.py&amp;quot;, line 15, in div
    2 / 0
ZeroDivisionError: division by zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 25, in bar
    foo()
  File &amp;quot;a.py&amp;quot;, line 21, in foo
    reraise(ValueError, ValueError(e), sys.exc_info()[2])
  File &amp;quot;a.py&amp;quot;, line 6, in reraise
    raise value.with_traceback(tb)
  File &amp;quot;a.py&amp;quot;, line 19, in foo
    div()
  File &amp;quot;a.py&amp;quot;, line 15, in div
    2 / 0
ValueError: division by zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &amp;quot;a.py&amp;quot;, line 34, in &amp;lt;module&amp;gt;
    foobar()
  File &amp;quot;a.py&amp;quot;, line 31, in foobar
    bar()
  File &amp;quot;a.py&amp;quot;, line 27, in bar
    reraise(TypeError, TypeError(e), sys.exc_info()[2])
  File &amp;quot;a.py&amp;quot;, line 6, in reraise
    raise value.with_traceback(tb)
  File &amp;quot;a.py&amp;quot;, line 25, in bar
    foo()
  File &amp;quot;a.py&amp;quot;, line 21, in foo
    reraise(ValueError, ValueError(e), sys.exc_info()[2])
  File &amp;quot;a.py&amp;quot;, line 6, in reraise
    raise value.with_traceback(tb)
  File &amp;quot;a.py&amp;quot;, line 19, in foo
    div()
  File &amp;quot;a.py&amp;quot;, line 15, in div
    2 / 0
TypeError: division by zero
&lt;/pre&gt;
&lt;p&gt;下次需要捕获一个异常然后再抛出另一个异常的时候大家可以试试本文的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/reference/simple_stmts.html#the-raise-statement"&gt;6. Simple statements — Python 2.7.12 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/exceptions.html#exceptions.BaseException"&gt;6. Built-in Exceptions — Python 2.7.12 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/reference/simple_stmts.html#raise"&gt;7. Simple statements — Python 3.5.2 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/exceptions.html#BaseException"&gt;5. Built-in Exceptions — Python 3.5.2 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-3109/#compatibility-issues"&gt;PEP 3109 -- Raising Exceptions in Python 3000 | Python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/bottlepy/bottle/blob/cafc15419cbb4a6cb748e6ecdccf92893bb25ce5/bottle.py#L160"&gt;bottle/bottle.py at cafc15419cbb4a6cb748e6ecdccf92893bb25ce5 · bottlepy/bottle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pallets/flask/blob/6e46d0cd3969f6c13ff61c95c81a975192232fed/flask/_compat.py#L30"&gt;flask/_compat.py at 6e46d0cd3969f6c13ff61c95c81a975192232fed · pallets/flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-08-16:2016/08/python-the-right-way-to-catch-exception-then-reraise-another-exception.html</guid></item><item><title>Cyanide &amp; Happiness #1757：剑鱼</title><link>https://mozillazg.com/2016/07/1757.swordfish2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1757/"&gt;Cyanide &amp;amp; Happiness #1757 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1757.swordfish2.zh-cn.png" src="/static/images/comics/1757.swordfish2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;could I get the swordfish,
but without the fish?     &lt;br /&gt;
可以给我来个剑鱼，但是不要鱼吗？&lt;/p&gt;
&lt;p&gt;sure.     &lt;br /&gt;
当然可以。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-07-17:2016/07/1757.swordfish2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4344：朋友</title><link>https://mozillazg.com/2016/07/4344.friend.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4344/"&gt;Cyanide &amp;amp; Happiness #4344 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4344.friend.zh-cn.png" src="/static/images/comics/4344.friend.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you're my best friend！    &lt;br /&gt;
你是我最好的朋友！&lt;/p&gt;
&lt;p&gt;but if shit ever hits the fan,
you're dinner.    &lt;br /&gt;
但是如果你惹麻烦的话，你就是顿晚餐。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-07-03:2016/07/4344.friend.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness：我不想死</title><link>https://mozillazg.com/2016/07/i-don't-want-to-die.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/daveexplosm/status/747340170932871168"&gt;https://twitter.com/daveexplosm/status/747340170932871168&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="i-don't-want-to-die.zh-cn.png" src="/static/images/comics/i-don't-want-to-die.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I don't want fluffy to die!
waaah!!       &lt;br /&gt;
我不想小茸死！哇~~~！!&lt;/p&gt;
&lt;p&gt;don't worry, son, its the best
thing for him. he feels no pain   &lt;br /&gt;
儿子，别担心，对它来说这是最好的选择。
它不会感觉到痛苦&lt;/p&gt;
&lt;p&gt;I don't want to die   &lt;br /&gt;
我不想死&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-07-03:2016/07/i-don't-want-to-die.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4270：风景</title><link>https://mozillazg.com/2016/07/4270.view-fixed.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4270/"&gt;Cyanide &amp;amp; Happiness #4270 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4270.view-fixed.zh-cn.png" src="/static/images/comics/4270.view-fixed.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I love the view
from up here.     &lt;br /&gt;
我喜欢这里的景色。&lt;/p&gt;
&lt;p&gt;know what I love?     &lt;br /&gt;
知道我喜欢啥吗？&lt;/p&gt;
&lt;p&gt;what?     &lt;br /&gt;
啥？&lt;/p&gt;
&lt;p&gt;nothing.      &lt;br /&gt;
啥也不喜欢。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-07-02:2016/07/4270.view-fixed.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>MongoDB: 解决 Overflow sort stage buffered data 错误</title><link>https://mozillazg.com/2016/07/mongodb-overflow-sort-stage-buffered-data-usage-of-x-bytes-exceeds-internal-limit-of-33554432-bytes.html</link><description>&lt;p&gt;使用 pymongo 时有时会遇到提示如下的错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  File &amp;quot;/usr/local/lib/python2.7/dist-packages/pymongo/cursor.py&amp;quot;, line 1090, in next
    if len(self.__data) or self._refresh():
  File &amp;quot;/usr/local/lib/python2.7/dist-packages/pymongo/cursor.py&amp;quot;, line 1022, in _refresh
    self.__uuid_subtype))
  File &amp;quot;/usr/local/lib/python2.7/dist-packages/pymongo/cursor.py&amp;quot;, line 958, in __send_message
    self.__compile_re)
  File &amp;quot;/usr/local/lib/python2.7/dist-packages/pymongo/helpers.py&amp;quot;, line 113, in _unpack_response
    error_object)
OperationFailure: database error: Executor error: Overflow sort stage buffered data usage of 33597009 bytes exceeds internal limit of 33554432 bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为什么会出现这样的错误呢？ 原来 mongodb 限制了在内存中进行 sort 操作（无法使用索引的情况下）时所使用的最大内存大小，默认是 32 M(33554432 bytes)。&lt;/p&gt;
&lt;p&gt;如果要修改这个限制的话，可以通过如下的 mongo 命令进行修改，比如修改为 50 M(52428800 bytes):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; use admin
&amp;gt; db.adminCommand({setParameter: 1, internalQueryExecMaxBlockingSortBytes: 52428800})
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/501937/how-to-increase-buffered-data-limit"&gt;mongodb - How to increase buffered data limit? - Ask Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/manual/reference/limits/#Sort-Operations"&gt;MongoDB Limits and Thresholds &amp;mdash; MongoDB Manual 3.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-07-02:2016/07/mongodb-overflow-sort-stage-buffered-data-usage-of-x-bytes-exceeds-internal-limit-of-33554432-bytes.html</guid></item><item><title>buttersafe：第一次约会</title><link>https://mozillazg.com/2016/06/2016-03-01-firstdate.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2016/03/01/first-date/"&gt;http://buttersafe.com/2016/03/01/first-date/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2016-03-01-firstdate.zh-cn.png" src="/static/images/comics/2016-03-01-firstdate.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-06-09:2016/06/2016-03-01-firstdate.zh-cn.html</guid><category>buttersafe</category></item><item><title>让我们一起来构建一个模板引擎（四）</title><link>https://mozillazg.com/2016/06/let-us-build-a-template-engine-part4.html</link><description>&lt;p&gt;在 &lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part3.html"&gt;上篇文章&lt;/a&gt; 中我们的模板引擎实现了对 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 的支持，
到此为止我们已经实现了模板引擎所需的大部分功能。
在本文中我们将解决一些用于生成 html 的模板引擎需要面对的一些安全问题。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;转义&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先要解决的就是转义问题。到目前为止我们的模板引擎并没有对变量和表达式结果进行转义处理，
如果用于生成 html 源码的话就会出现下面这样的问题 ( &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part3/template3c.py"&gt;template3c.py&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template3c&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;lt;br /&amp;gt;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;hello&amp;lt;br /&amp;gt;world&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很明显 title 中包含的标签需要被转义，不然就会出现非预期的结果。
这里我们只对 &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; &lt;tt class="docutils literal"&gt;'&lt;/tt&gt; &lt;tt class="docutils literal"&gt;&amp;gt;&lt;/tt&gt; &lt;tt class="docutils literal"&gt;&amp;lt;&lt;/tt&gt; 这几个字符做转义处理，其他的字符可根据需要进行处理。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;html_escape_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;apos;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;html_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_escape_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转义效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;lt;br /&amp;gt;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;hello&amp;amp;lt;br /&amp;amp;gt;world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既然有转义自然也要有禁止转义的功能，毕竟不能一刀切否则就丧失灵活性了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NoEscape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NoEscape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;noescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NoEscape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终我们的模板引擎针对转义所做的修改如下(可以下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part4/template4a.py"&gt;template4a.py&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auto_escape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto_escape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auto_escape&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;escape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noescape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;noescape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto_escape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;escape({})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;str({})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_another_template_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;auto_escape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto_escape&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NoEscape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;

&lt;span class="n"&gt;html_escape_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;apos;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;html_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html_escape_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NoEscape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html_escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;noescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;NoEscape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template4a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;lt;br /&amp;gt;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;hello&amp;amp;lt;br /&amp;amp;gt;world&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ noescape(title) }}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;lt;br /&amp;gt;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;hello&amp;lt;br /&amp;gt;world&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exec"&gt;
&lt;h2 id="hidexec"&gt;exec 的安全问题&lt;a class="headerlink" href="#hidexec" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;由于我们的模板引擎是使用 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数来执行生成的代码的，所以就需要注意一下
&lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数的安全问题，预防可能的服务端模板注入攻击（详见 &lt;a class="reference external" href="http://mozillazg.com/2016/05/python-some-security-problems-about-use-exec-function.rst.html"&gt;使用 exec 函数时需要注意的一些安全问题&lt;/a&gt; ）。&lt;/p&gt;
&lt;p&gt;首先要限制的是在模板中使用内置函数和执行时上下文变量( &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part4/template4b.py"&gt;template4b.py&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;渲染模版&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;---&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template4b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ open(&amp;quot;/etc/passwd&amp;quot;).read() }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/mg/develop/lsbate/part4/template4b.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;245&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__func_name&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就是要限制通过其他方式调用内置函数的行为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template4b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ escape.__globals__[&amp;quot;__builtins__&amp;quot;][&amp;quot;open&amp;quot;](&amp;quot;/etc/passwd&amp;quot;).read()[0] }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ [x for x in [].__class__.__base__.__subclasses__() if x.__name__ == &amp;#39;_wrap_close&amp;#39;][0].__init__.__globals__[&amp;#39;path&amp;#39;].os.system(&amp;#39;date&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Mon&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="n"&gt;CST&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一种解决办法就是不允许在模板中访问以下划线 &lt;cite&gt;_&lt;/cite&gt; 开头的属性。
为什么要包括单下划线呢，因为按照约定单下划线开头的属性是私有属性，
不应该在外部访问这些属性。&lt;/p&gt;
&lt;p&gt;这里我们使用 &lt;tt class="docutils literal"&gt;tokenize&lt;/tt&gt; 模块来帮助我们解析生成的代码，然后再找出其中的特殊属性。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tokenize&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;safe_attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safe_attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;safe_attribute&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safe_attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;check_unsafe_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_unsafe_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pre_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;toktype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;toktype&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pre_op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
                &lt;span class="n"&gt;tokval&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokval&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;access to attribute &amp;#39;{0}&amp;#39; is unsafe.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;toktype&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pre_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokval&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template4c&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ [x for x in [].__class__.__base__.__subclasses__() if x.__name__ == &amp;#39;_wrap_close&amp;#39;][0].__init__.__globals__[&amp;#39;path&amp;#39;].os.system(&amp;#39;date&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lsbate/part4/template4c.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
    &lt;span class="n"&gt;check_unsafe_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/xxx/lsbate/part4/template4c.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;296&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;check_unsafe_attributes&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;lt;br /&amp;gt;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;hello&amp;amp;lt;br /&amp;amp;gt;world&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个系列的文章到目前为止就已经全部完成了。&lt;/p&gt;
&lt;p&gt;如果大家感兴趣的话可以尝试使用另外的方式来解析模板内容,
即: 使用词法分析/语法分析的方式来解析模板内容（欢迎分享实现过程）。&lt;/p&gt;
&lt;p&gt;P.S. 整个系列的所有文章地址：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part1.html"&gt;让我们一起来构建一个模板引擎（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part2.html"&gt;让我们一起来构建一个模板引擎（二）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part3.html"&gt;让我们一起来构建一个模板引擎（三）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mozillazg.com/2016/06/let-us-build-a-template-engine-part4.html"&gt;让我们一起来构建一个模板引擎（四）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. 文章中涉及的代码已经放到 GitHub 上了: &lt;a class="reference external" href="https://github.com/mozillazg/lsbate"&gt;https://github.com/mozillazg/lsbate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2016.06.18 更新：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用 &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; 没法分析嵌套函数的代码，所以 &lt;tt class="docutils literal"&gt;check_unsafe_attributes&lt;/tt&gt; 部分还需要再完善，
详见 &lt;a class="reference external" href="http://mozillazg.com/2016/05/python-some-security-problems-about-use-exec-function.rst.html"&gt;使用 exec 函数时需要注意的一些安全问题&lt;/a&gt; 下面的评论。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016.07.10 更新:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;已经改为使用 &lt;tt class="docutils literal"&gt;tokenize&lt;/tt&gt; 分析生成的代码（可以分析嵌套函数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-06-01:2016/06/let-us-build-a-template-engine-part4.html</guid><category>let-us-build</category><category>lsbate</category><category>让我们一起来构建一个模板引擎</category></item><item><title>在 python 中使用 exec 函数时需要注意的一些安全问题</title><link>https://mozillazg.com/2016/05/python-some-security-problems-about-use-exec-function.rst.html</link><description>&lt;p&gt;众所周知，在 python 中可以使用 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数来执行包含 python 源代码的字符串:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   ...: a = &amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;   ...: print(a)&lt;/span&gt;
&lt;span class="s1"&gt;   ...: &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数的这个功能很是强大，慎用。如果一定要用的话，那么就需要注意一下下面这些安全相关的问题。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;全局变量和内置函数&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 执行的代码中，默认可以访问执行 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 时的局部变量和全局变量，
同样也会修改全局变量。如果 exec 执行的代码是根据用户提交的数据生产的话，这种默认行为就是一个安全隐患。&lt;/p&gt;
&lt;p&gt;如何更改这种默认行为呢？可以通过执行 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数的时候再传两个参数的方式来
修改这种行为（详见 &lt;a class="reference external" href="http://mozillazg.com/2016/03/python-exec-function-globals-and-locals-arguments.html"&gt;之前&lt;/a&gt;  关于 exec 的文章）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello = &amp;quot;hello&amp;quot; + b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;helloworld&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;                                 &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果要限制使用内置函数的话，可以在 globals 参数中定义一下 &lt;tt class="docutils literal"&gt;__builtins__&lt;/tt&gt; 这个 key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a = int(&amp;quot;1&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a = int(&amp;quot;1&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们限制了访问和修改全局变量以及使用内置函数，难道这样就万事大吉了吗？
然而并非如此，还是可以通过其他的方式来获取内置函数甚至 &lt;tt class="docutils literal"&gt;os.system&lt;/tt&gt; 函数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="os-system"&gt;
&lt;h2 id="hidos-system"&gt;另辟蹊径获取内置函数和 os.system&lt;a class="headerlink" href="#hidos-system" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过函数对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__globals__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__globals__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过内置类型对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;WarningMessage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__globals__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取 &lt;tt class="docutils literal"&gt;os.system&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_wrap_close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__globals__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/var/pyenv/versions/3.5.1/lib/python3.5/os.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于这两种办法又如何应对呢？ 一种办法就是禁止访问以 &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; 开头的属性：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果可以控制 code 的生成，那么就在生成 code 的时候判断&lt;/li&gt;
&lt;li&gt;如果不能的话，可以通过 &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; 模块分析生成的 code (无法分析嵌套函数）:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[x for x in [].__class__.__base__.__subclasses__() if x.__name__ == &amp;#39;_wrap_close&amp;#39;][0].__init__.__globals__[&amp;#39;path&amp;#39;].os.system(&amp;#39;date&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Wed&lt;/span&gt; &lt;span class="n"&gt;May&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="n"&gt;CST&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;listcomp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10722c270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;dis&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;listcomp&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;MAKE_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;0&lt;/span&gt;
              &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;BUILD_LIST&lt;/span&gt;               &lt;span class="mi"&gt;0&lt;/span&gt;
             &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;GET_ITER&lt;/span&gt;
             &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="n"&gt;BINARY_SUBSCR&lt;/span&gt;
             &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__globals__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="n"&gt;BINARY_SUBSCR&lt;/span&gt;
             &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;54&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面可以看出来，获取属性的操作是 &lt;tt class="docutils literal"&gt;LOAD_ATTR&lt;/tt&gt; 操作。我们只需要检查 &lt;tt class="docutils literal"&gt;LOAD_ATTR&lt;/tt&gt;
的名字有没有以下划线开头就可以了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Writer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Writer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;listcomp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1072ce300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;dis&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;listcomp&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;MAKE_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;0&lt;/span&gt;
              &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="n"&gt;BUILD_LIST&lt;/span&gt;               &lt;span class="mi"&gt;0&lt;/span&gt;
             &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;GET_ITER&lt;/span&gt;
             &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="n"&gt;BINARY_SUBSCR&lt;/span&gt;
             &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__globals__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;38&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;41&lt;/span&gt; &lt;span class="n"&gt;BINARY_SUBSCR&lt;/span&gt;
             &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="n"&gt;LOAD_ATTR&lt;/span&gt;                &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="n"&gt;LOAD_CONST&lt;/span&gt;               &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="n"&gt;CALL_FUNCTION&lt;/span&gt;            &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="mi"&gt;54&lt;/span&gt; &lt;span class="n"&gt;RETURN_VALUE&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\d+\s+LOAD_ATTR\s+\d+\s+\(_[^\)]+\)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_sre&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SRE_Match&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;264&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;305&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;12 LOAD_ATTR                0 (__class__)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用 &lt;tt class="docutils literal"&gt;tokenize&lt;/tt&gt; 模块:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   ....: a = &amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   ....: a.__str__&lt;/span&gt;
&lt;span class="s1"&gt;   ....: def b():&lt;/span&gt;
&lt;span class="s1"&gt;   ....:     b.__get__&lt;/span&gt;
&lt;span class="s1"&gt;   ....: &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENCODING&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a = &amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a = &amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;b&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a = &amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NEWLINE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a = &amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.__str__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.__str__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.__str__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NEWLINE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.__str__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def b():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def b():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def b():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def b():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def b():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NEWLINE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def b():&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INDENT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    b.__get__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    b.__get__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    b.__get__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__get__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    b.__get__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NEWLINE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    b.__get__&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEDENT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TokenInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENDMARKER&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的输出我们可以知道当 type 是 OP 并且 string 等于 '.' 时，下一条记录就是
点之后的属性名称。所以我们的检查代码可以这样写:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tokenize&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_unsafe_attributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pre_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;toktype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;toktype&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pre_op&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tokval&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokval&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;access to attribute &amp;#39;{0}&amp;#39; is unsafe.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;toktype&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pre_op&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokval&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我所知道的使用 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数时需要注意的安全问题就是这些了。
如果你还知道其他需要注意的安全问题的话，欢迎留言告知。&lt;/p&gt;
&lt;p&gt;2016.06.18 更新：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用 &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; 没法分析类似嵌套函数的代码，所以 &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; 的办法并不怎么好使，详见下方的评论。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016.07.10 更新：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;增加使用 &lt;tt class="docutils literal"&gt;tokenize&lt;/tt&gt; 模块的方法，可以分析嵌套函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-05-18:2016/05/python-some-security-problems-about-use-exec-function.rst.html</guid><category>安全</category><category>exec</category></item><item><title>如何在 centos 7 上编译 boost</title><link>https://mozillazg.com/2016/04/linux-how-to-build-boost.python-on-centos7.md.html</link><description>&lt;p&gt;本文主要记录一下如何在 centos 7 上编译 boost 库，同时也适用于 ubuntu（安装系统包的命令需要改为 &lt;code&gt;apt-get&lt;/code&gt;）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装编译工具 &lt;code&gt;clang&lt;/code&gt; ，也可以使用 &lt;code&gt;gcc&lt;/code&gt; 代替，只需要将下面命令中的 &lt;code&gt;clang&lt;/code&gt; 替换为 &lt;code&gt;gcc&lt;/code&gt; 即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install clang
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 boost: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载 boost_1_60_0.tar.gz( &lt;a href="http://sourceforge.net/projects/boost/files/boost/1.60.0/"&gt;http://sourceforge.net/projects/boost/files/boost/1.60.0/&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;解压: &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv boost_1_60_0.tar.gz /opt/
cd /opt/
tar zxvf boost_1_60_0.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译 boost（同时编译所有的 boost lib， &lt;strong&gt;内存和 CPU 如果不够的话可能会编译失败甚至导致系统死机&lt;/strong&gt; ）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd boost_1_60_0/
# 可以通过 ./bootstrap.sh --help 查看更多选项
./bootstrap.sh  --with-toolset=clang --with-libraries=all
./b2
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装 boost.build&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd toos/build/
./bootstrap.sh  --with-toolset=clang
./b2
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 ld&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;/opt/boost_1_60_0/stage/lib&amp;quot; &amp;gt;&amp;gt; /etc/ld.so.conf
ldconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要记下的几个路径，代码编译的时候可能会用到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* boost 目录: `/opt/boost_1_60_0/`
* lib 目录:  `/opt/boost_1_60_0/stage/lib`
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考资料:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.boost.org/doc/libs/1_60_0/more/getting_started/unix-variants.html"&gt;Boost Getting Started on Unix Variants - 1.60.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-04-17:2016/04/linux-how-to-build-boost.python-on-centos7.md.html</guid><category>boost</category><category>python</category><category>c++</category></item><item><title>一种解决 ImportError: ./xyz.so: undefined symbol: gzopen64 的办法</title><link>https://mozillazg.com/2016/04/python-fix-importerror-undefined-symbol-gzopen64.html</link><description>&lt;p&gt;出现 ImportError: ./xxx.so: undefined symbol: gzopen64 错误的一种原因是因为系统内安装
的 zlib so 文件的版本不是最新的 1.2.8 版本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xyz&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gzopen64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一种解决办法就是告诉 python 使用最新的 zlib 1.2.8 的 so 文件&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;从 &lt;a class="reference external" href="http://www.zlib.net/"&gt;http://www.zlib.net/&lt;/a&gt; 下载最新版的 zlib 源码包(1.2.8, tar.gz)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://zlib.net/zlib-1.2.8.tar.gz
tar zxvf zlib-1.2.8.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; zlib-1.2.8
./configure
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;告诉程序使用最新的 zlib so 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LD_PRELOAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/lib/libz.so.1
python
....
&amp;gt;&amp;gt;&amp;gt; import xyz
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://forum.dato.com/discussion/1125/importerror-libunity-shared-so-undefined-symbol-gzopen64"&gt;ImportError: ../libunity_shared.so: undefined symbol: gzopen64 - Dato Forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-04-17:2016/04/python-fix-importerror-undefined-symbol-gzopen64.html</guid></item><item><title>Python 探针实现原理</title><link>https://mozillazg.com/2016/04/apm-python-agent-principle.html</link><description>&lt;p&gt;本文将简单讲述一下 Python 探针的实现原理。
同时为了验证这个原理，我们也会一起来实现一个简单的统计指定函数执行时间的探针程序。&lt;/p&gt;
&lt;p&gt;探针的实现主要涉及以下几个知识点:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sys.meta_path&lt;/li&gt;
&lt;li&gt;sitecustomize.py&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="sys-meta-path"&gt;
&lt;h2 id="hidsys-meta-path"&gt;sys.meta_path&lt;a class="headerlink" href="#hidsys-meta-path" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sys.meta_path&lt;/tt&gt; 这个简单的来说就是可以实现 import hook 的功能，
当执行 import 相关的操作时，会触发 &lt;tt class="docutils literal"&gt;sys.meta_path&lt;/tt&gt; 列表中定义的对象。
关于 &lt;tt class="docutils literal"&gt;sys.meta_path&lt;/tt&gt; 更详细的资料请查阅 python 文档中 &lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys.meta_path"&gt;sys.meta_path&lt;/a&gt; 相关内容以及
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0302/"&gt;PEP 0302&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sys.meta_path&lt;/tt&gt; 中的对象需要实现一个 &lt;tt class="docutils literal"&gt;find_module&lt;/tt&gt; 方法，
这个 &lt;tt class="docutils literal"&gt;find_module&lt;/tt&gt; 方法返回 &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; 或一个实现了 &lt;tt class="docutils literal"&gt;load_module&lt;/tt&gt; 方法的对象
(代码可以从 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/apm-python-agent-principle/tree/master/part1"&gt;part1&lt;/a&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaPathFinder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;find_module {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MetaPathLoader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaPathLoader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load_module {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaPathFinder&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;load_module&lt;/tt&gt; 方法返回一个 module 对象，这个对象就是 import 的 module 对象了。
比如我上面那样就把 &lt;tt class="docutils literal"&gt;http&lt;/tt&gt; 替换为 &lt;tt class="docutils literal"&gt;sys&lt;/tt&gt; 这个 module 了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python meta_path1.py
find_module http
load_module http
&amp;lt;module &lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;built-in&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt;
sys.version_info&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;major&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3, &lt;span class="nv"&gt;minor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5, &lt;span class="nv"&gt;micro&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;releaselevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;final&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;sys.meta_path&lt;/tt&gt; 我们就可以实现 import hook 的功能：
当 import 预定的 module 时，对这个 module 里的对象来个狸猫换太子，
从而实现获取函数或方法的执行时间等探测信息。&lt;/p&gt;
&lt;p&gt;上面说到了狸猫换太子，那么怎么对一个对象进行狸猫换太子的操作呢？
对于函数对象，我们可以使用装饰器的方式来替换函数对象(代码可以从 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/apm-python-agent-principle/tree/master/part2"&gt;part2&lt;/a&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start func&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spent {}s&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python func_wrapper.py
start func
spent 3.004966974258423s
3
&lt;/pre&gt;
&lt;p&gt;下面我们来实现一个计算指定模块的指定函数的执行时间的功能(代码可以从 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/apm-python-agent-principle/tree/master/part3"&gt;part3&lt;/a&gt;) 。&lt;/p&gt;
&lt;p&gt;假设我们的模块文件是 hello.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们的 import hook 是 hook.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;_hook_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaPathFinder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;find_module {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_hook_modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MetaPathLoader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaPathLoader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load_module {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# ``sys.modules`` 中保存的是已经导入过的 module&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# 先从 sys.meta_path 中删除自定义的 finder&lt;/span&gt;
        &lt;span class="c1"&gt;# 防止下面执行 import_module 的时候再次触发此 finder&lt;/span&gt;
        &lt;span class="c1"&gt;# 从而出现递归调用的问题&lt;/span&gt;
        &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 导入 module&lt;/span&gt;
        &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;module_hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaPathFinder&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;module_hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start func&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spent {}s&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hook&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;find_module&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;load_module&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
&lt;span class="n"&gt;spent&lt;/span&gt; &lt;span class="mf"&gt;3.0029919147491455&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实上面的代码已经实现了探针的基本功能。不过有一个问题就是上面的代码需要显示的
执行 &lt;tt class="docutils literal"&gt;import hook&lt;/tt&gt; 操作才会注册上我们定义的 hook。&lt;/p&gt;
&lt;p&gt;那么有没有办法在启动 python 解释器的时候自动执行 &lt;tt class="docutils literal"&gt;import hook&lt;/tt&gt; 的操作呢？
答案就是可以通过定义 sitecustomize.py 的方式来实现这个功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sitecustomize-py"&gt;
&lt;h2 id="hidsitecustomize-py"&gt;sitecustomize.py&lt;a class="headerlink" href="#hidsitecustomize-py" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单的说就是，python 解释器初始化的时候会自动 import &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; 下存在的
&lt;tt class="docutils literal"&gt;sitecustomize&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;usercustomize&lt;/tt&gt; 模块:&lt;/p&gt;
&lt;p&gt;实验项目的目录结构如下(代码可以从 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/apm-python-agent-principle/tree/master/part4"&gt;part4&lt;/a&gt;)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ tree
.
├── sitecustomize.py
└── usercustomize.py
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sitecustomize.py&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat sitecustomize.py
print('this is sitecustomize')
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;usercustomize.py&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat usercustomize.py
print('this is usercustomize')
&lt;/pre&gt;
&lt;p&gt;把当前目录加到 &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; 中，然后看看效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ export PYTHONPATH=.
$ python
this is sitecustomize       &amp;lt;----
this is usercustomize       &amp;lt;----
Python 3.5.1 (default, Dec 24 2015, 17:20:27)
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;可以看到确实自动导入了。所以我们可以把之前的探测程序改为支持自动执行 &lt;tt class="docutils literal"&gt;import hook&lt;/tt&gt;
(代码可以从 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/apm-python-agent-principle/tree/master/part5"&gt;part5&lt;/a&gt;) 。&lt;/p&gt;
&lt;p&gt;目录结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ tree
.
├── hello.py
├── hook.py
├── sitecustomize.py
&lt;/pre&gt;
&lt;p&gt;sitecustomize.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat sitecustomize.py
import hook
&lt;/pre&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ export PYTHONPATH=.
$ python
find_module usercustomize
Python 3.5.1 (default, Dec 24 2015, 17:20:27)
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
find_module readline
find_module atexit
find_module rlcompleter
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; import hello
find_module hello
load_module hello
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; hello.sleep(3)
start func
spent 3.005002021789551s
3
&lt;/pre&gt;
&lt;p&gt;不过上面的探测程序其实还有一个问题，那就是需要手动修改 &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; 。
用过探针程序的朋友应该会记得， 使用 newrelic 之类的探针只需要执行一条命令就
可以了： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;newrelic-admin&lt;/span&gt; &lt;span class="pre"&gt;run-program&lt;/span&gt; python hello.py&lt;/tt&gt;
实际上修改 &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; 的操作是在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;newrelic-admin&lt;/span&gt;&lt;/tt&gt; 这个程序里完成的。&lt;/p&gt;
&lt;p&gt;下面我们也要来实现一个类似的命令行程序，就叫 &lt;tt class="docutils literal"&gt;agent.py&lt;/tt&gt; 吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="agent"&gt;
&lt;h2 id="hidagent"&gt;agent&lt;a class="headerlink" href="#hidagent" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;还是在上一个程序的基础上修改。先调整一个目录结构，把 hook 操作放到一个单独的目录下，
方便设置 &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; 后不会有其他的干扰（代码可以从 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/apm-python-agent-principle/tree/master/part6"&gt;part6&lt;/a&gt; ）。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir bootstrap
$ mv hook.py bootstrap/_hook.py
$ touch bootstrap/__init__.py
$ touch agent.py
$ tree
.
├── bootstrap
│&amp;nbsp;&amp;nbsp; ├── __init__.py
│&amp;nbsp;&amp;nbsp; ├── _hook.py
│&amp;nbsp;&amp;nbsp; └── sitecustomize.py
├── hello.py
├── test.py
├── agent.py
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;bootstrap/sitecustomize.py&lt;/tt&gt; 的内容修改为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat bootstrap/sitecustomize.py
import _hook
&lt;/pre&gt;
&lt;p&gt;agent.py 的内容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;current_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;boot_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bootstrap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PYTHONPATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boot_dir&lt;/span&gt;
    &lt;span class="c1"&gt;# 执行后面的 python 程序命令&lt;/span&gt;
    &lt;span class="c1"&gt;# sys.executable 是 python 解释器程序的绝对路径 ``which python``&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;gt;&amp;gt;&amp;gt; sys.executable&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;/usr/local/var/pyenv/versions/3.5.1/bin/python3.5&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;test.py&lt;/tt&gt; 的内容为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat test.py
import sys
import hello

print(sys.argv)
print(hello.sleep(3))
&lt;/pre&gt;
&lt;p&gt;使用方法:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python agent.py test.py arg1 arg2
find_module usercustomize
find_module hello
load_module hello
['test.py', 'arg1', 'arg2']
start func
spent 3.005035161972046s
3
&lt;/pre&gt;
&lt;p&gt;至此，我们就实现了一个简单的 python 探针程序。当然，跟实际使用的探针程序相比肯定是有
很大的差距的，这篇文章主要是讲解一下探针背后的实现原理。&lt;/p&gt;
&lt;p&gt;如果大家对商用探针程序的具体实现感兴趣的话，可以看一下国外的 &lt;a class="reference external" href="https://pypi.python.org/pypi/newrelic"&gt;New Relic&lt;/a&gt; 或国内的 &lt;a class="reference external" href="http://pypi.oneapm.com/simple/blueware/"&gt;OneAPM&lt;/a&gt;, &lt;a class="reference external" href="http://doc.tingyun.com/help/html/doc/sdkServerDownload.html?tabType=python"&gt;TingYun&lt;/a&gt;
等这些 APM 厂商的商用 python 探针的源代码，相信你会发现一些很有趣的事情。&lt;/p&gt;
&lt;!-- 浏览了一下这两家的代码（通过上面的链接可以下载到各自的源代码）， --&gt;
&lt;!-- 其中 OneAPM 的代码跟 New Relic 的 太像了，目录结构，类，方法，函数之类的完全一个模子出来的， copy 成分居多（纯复制😓） 。 --&gt;
&lt;!--  --&gt;
&lt;!-- TingYun 的代码跟 New Relic 的目录结构差别比较大，里面的类，方法，函数之类的差别 --&gt;
&lt;!-- 也比较大，应该是借鉴的成分居多（不排除有个别功能是 copy 的，没细看）。 --&gt;
&lt;!--  --&gt;
&lt;!-- 网络上 2014 年的讨论: --&gt;
&lt;!-- OneAPM: https://www.v2ex.com/t/125736 --&gt;
&lt;!-- TingYun: https://www.v2ex.com/t/214359 --&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-04-04:2016/04/apm-python-agent-principle.html</guid><category>import</category><category>sys.meta_path</category><category>sitecustomize</category><category>usercustomize</category><category>探针</category><category>APM</category></item><item><title>让我们一起来构建一个模板引擎（三）</title><link>https://mozillazg.com/2016/03/let-us-build-a-template-engine-part3.html</link><description>&lt;p&gt;在 &lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part2.html"&gt;上篇文章&lt;/a&gt; 中我们的模板引擎实现了对 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 对支持，同时在文章的最后我给大家留了一个
问题：如何实现支持 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 的标签功能。&lt;/p&gt;
&lt;p&gt;在本篇文章中我们将一起来动手实现这两个功能。&lt;/p&gt;
&lt;div class="section" id="include"&gt;
&lt;h2 id="hidinclude"&gt;include&lt;a class="headerlink" href="#hidinclude" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 标签对语法是这样的：假设有一个 item.html 模板文件，它的内容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有一个我们要渲染的模板 list.html 内容如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;item.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;渲染 list.html 后的结果类似:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;item1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;item2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;item3&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面可以看出来 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 标签的作用类似使用 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 所在位置的名字空间
渲染另一个模板然后再使用渲染后的结果。所以我们可以将 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 的模板文件
当作普通的模板文件来处理，用解析那个模板生成后的代码替换 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 所在的位置，
再将结果追加到 &lt;tt class="docutils literal"&gt;result_var&lt;/tt&gt; 。 生成的代码类似:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="c1"&gt;# 解析 include 的模板&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func_name_include&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;result_include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_include&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 调用生成的 func_name_include 函数获取渲染结果&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func_name_include&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成类似上面的代码就是 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 的关键点，下面看一下实现 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 功能
都做了哪些改动 (可以从 Github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part3/template3a.py"&gt;template3a.py&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template_dir&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;处理标签&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;include&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;included_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_parse_another_template_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 把解析 include 模板后得到的代码加入当前代码中&lt;/span&gt;
        &lt;span class="c1"&gt;# def __func_name():&lt;/span&gt;
        &lt;span class="c1"&gt;#    __result = []&lt;/span&gt;
        &lt;span class="c1"&gt;#    ...&lt;/span&gt;
        &lt;span class="c1"&gt;#    def __func_name_hash():&lt;/span&gt;
        &lt;span class="c1"&gt;#        __result_hash = []&lt;/span&gt;
        &lt;span class="c1"&gt;#        return &amp;#39;&amp;#39;.join(__result_hash)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;included_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 把上面生成的代码中函数的执行结果添加到原有的结果中&lt;/span&gt;
        &lt;span class="c1"&gt;# __result.append(__func_name_hash())&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;{0}.append({1}())&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;included_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_another_template_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;template_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;name_suffix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{}_{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name_suffix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{}_{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name_suffix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;template_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_dir&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先是 &lt;tt class="docutils literal"&gt;__init__&lt;/tt&gt; 增加了两个参数 &lt;tt class="docutils literal"&gt;template_dir&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;encoding&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;template_dir&lt;/tt&gt;: 指定模板文件夹路径，因为 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 的模板是相对路径所以需要这个
选项来获取模板的绝对路径&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;encoding&lt;/tt&gt;: 指定模板文件的编码，默认是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;utf-8&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后就是 &lt;tt class="docutils literal"&gt;_parse_another_template_file&lt;/tt&gt; 了，这个方法是用来解析 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 中
指定的模板文件的，其中的 &lt;tt class="docutils literal"&gt;func_name&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;result_var&lt;/tt&gt; 之所以加了个 hash 值
作为后缀是不想跟其他函数变量重名。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;_handle_include&lt;/tt&gt; 实现的是解析 include 的模板，
然后将生成的代码和代码中函数的执行结果添加到当前代码中。&lt;/p&gt;
&lt;p&gt;下面来看一下实现的效果。还是用上面的模板文件:&lt;/p&gt;
&lt;p&gt;item.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;list.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;item.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先来看一下生成的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template3a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;list.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;    &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name_7654650009897399020&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;__result_7654650009897399020&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="n"&gt;__result_7654650009897399020&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result_7654650009897399020&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__func_name_7654650009897399020&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;  &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后是渲染效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;item2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;item3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}))&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;


    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;


    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;item3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 已经实现了，下面让我们一起来实现 &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extends"&gt;
&lt;h2 id="hidextends"&gt;extends&lt;a class="headerlink" href="#hidextends" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 标签实现的是模板继承的功能，并且只能在第一行出现，语法如下:&lt;/p&gt;
&lt;p&gt;假设有一个 parent.html 文件它的内容是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; parent_header &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;footer&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; parent_footer &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;footer&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还有一个 child.html 文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;parent.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; child_header &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="nv"&gt;.super&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;child.html 渲染后的结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; child_header parent_header &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; parent_footer &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到 &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 的效果类似用子模板里的 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; 替换父模板中定义的同名 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt;,
同时又可以使用 &lt;tt class="docutils literal"&gt;{{ block.super }}&lt;/tt&gt; 引用父模板中定义的内容，有点类似 &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; 的继承效果。&lt;/p&gt;
&lt;p&gt;注意我刚才说的是: 类似用子模板里的 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; 替换父模板中定义的同名 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;这个就是 &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 的关键点，我们可以先找出子模板里定义的 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; ，
然后用子模板里的 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; 替换父模板里的同名 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; ,
最后只处理替换后的父模板就可以了。&lt;/p&gt;
&lt;p&gt;暂时先不管 &lt;tt class="docutils literal"&gt;block.super&lt;/tt&gt; ，支持 &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 的代码改动如下(可以从 Github 下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part3/template3b.py"&gt;template3b.py&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# extends&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_extends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;xtends (?P&amp;lt;name&amp;gt;.*?) %\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# blocks&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;r&amp;#39;\{% block (?P&amp;lt;name&amp;gt;\w+) %\}&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;r&amp;#39;(?P&amp;lt;code&amp;gt;.*?)&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;r&amp;#39;\{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndblock \1 %\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# extends&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_extends&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;match_extends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_extends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match_extends&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;parent_template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match_extends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;parent_template_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_template_name&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 获取当前模板里的所有 blocks&lt;/span&gt;
        &lt;span class="n"&gt;child_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_all_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 用这些 blocks 替换掉父模板里的同名 blocks&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_template_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;parent_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;new_parent_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_replace_parent_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;parent_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_blocks&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 改为解析替换后的父模板内容&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_parent_text&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_replace_parent_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_blocks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;用子模板的 blocks 替换掉父模板里的同名 blocks&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;parent_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;child_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;child_code&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;parent_code&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_all_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;获取模板内定义的 blocks&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的代码可以看出来我们遵循的是使用子模板 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; 替换父模板同名 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt;
然后改为解析替换后的父模板的思路. 即，虽然我们要渲染的是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;parent.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; child_header &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际上我们最终渲染的是替换后的父模板:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; child_header &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; parent_footer &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依旧是来看一下实际效果:&lt;/p&gt;
&lt;p&gt;parent1.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; parent_header &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;footer&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; parent_footer &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;footer&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;child1.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;parent1.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看看最后要渲染的模板字符串:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template3b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child1.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent_footer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到确实是替换后的内容，再来看一下生成的代码和渲染后的效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt; parent_footer &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;child_header&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;child_header&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parent_footer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 的基本功能就这样实现了。下面再实现一下 &lt;tt class="docutils literal"&gt;{{ block.super }}&lt;/tt&gt; 功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="block-super"&gt;
&lt;h2 id="hidblock-super"&gt;block.super&lt;a class="headerlink" href="#hidblock-super" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;{{ block.super }}&lt;/tt&gt; 类似 Python &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; 里的 &lt;tt class="docutils literal"&gt;super&lt;/tt&gt; 用来实现对父 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt;
的引用，让子模板可以重用父 &lt;tt class="docutils literal"&gt;block&lt;/tt&gt; 中定义的内容。
只要改一下 &lt;tt class="docutils literal"&gt;_replace_parent_blocks&lt;/tt&gt; 中的 &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; 函数让它支持 &lt;tt class="docutils literal"&gt;{{ block.super }}&lt;/tt&gt;
就可以了(可以从 Github 下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part3/template3c.py"&gt;template3c.py&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# blocks&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="c1"&gt;# block.super&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_block_super&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{\{ block\.super \}\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_replace_parent_blocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_blocks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="n"&gt;parent_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;child_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child_blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;child_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_block_super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child_code&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;parent_code&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;p&gt;parent2.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; parent_header &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;child2.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;parent2.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; child_header &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="nv"&gt;.super&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;header&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template3c&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;child2.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt; child_header  parent_header  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt; child_header  parent_header  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到目前为主我们已经实现了现代 python 模板引擎应有的大部分功能了， 之后就是完善了。&lt;/p&gt;
&lt;p&gt;不知道大家有没有注意到，我之前都是用生成 html 来试验模板引擎的功能的，
这是因为模板引擎确实是在 web 开发中用的比较多，既然是生成 html 源码那就需要考虑
针对 html 做一点优化，比如去掉多余的空格，转义之类的，还有就是一些 Web 安全方面的考虑。&lt;/p&gt;
&lt;p&gt;至于怎么实现这些优化项，我将在 &lt;a class="reference external" href="http://mozillazg.com/2016/06/let-us-build-a-template-engine-part4.html"&gt;第四篇文章&lt;/a&gt; 中向你详细的讲解。敬请期待。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-24:2016/03/let-us-build-a-template-engine-part3.html</guid><category>let-us-build</category><category>lsbate</category><category>让我们一起来构建一个模板引擎</category></item><item><title>Cyanide &amp; Happiness #4244：减肥药</title><link>https://mozillazg.com/2016/03/4244.thinnerpills.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4244/"&gt;Cyanide &amp;amp; Happiness #4244 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4244.thinnerpills.zh-cn.png" src="/static/images/comics/4244.thinnerpills.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I got these pills
that make you thinner!    &lt;br /&gt;
我买了这些药丸，它们能让你更瘦！&lt;/p&gt;
&lt;p&gt;I don't think they're working.    &lt;br /&gt;
我不觉得它们有用。&lt;/p&gt;
&lt;p&gt;hm nope, you definitely look thinner      &lt;br /&gt;
唔，不对，你确实看起来更廋了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-20:2016/03/4244.thinnerpills.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Victims of Circumsolar：这是结局</title><link>https://mozillazg.com/2016/03/84.thisistheend.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.victimsofcircumsolar.com/comic/this-is-the-end/"&gt;http://www.victimsofcircumsolar.com/comic/this-is-the-end/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="84.thisistheend.zh-cn.png" src="/static/images/comics/84.thisistheend.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;this is the end
这是结局&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-19:2016/03/84.thisistheend.zh-cn.html</guid><category>Victims of Circumsolar</category></item><item><title>让我们一起来构建一个模板引擎（二）</title><link>https://mozillazg.com/2016/03/let-us-build-a-template-engine-part2.html</link><description>&lt;p&gt;在 &lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part1.html"&gt;上篇文章&lt;/a&gt; 中我们的模板引擎实现了变量和注释功能，同时在文章的最后我给大家留了一个
问题：如何实现支持 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 的标签功能:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;user.is_admin&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    admin, &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;user.is_staff&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    staff
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    others
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;names&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在本篇文章中我们将一起来实现这个功能。&lt;/p&gt;
&lt;div class="section" id="if-elif-else-endif"&gt;
&lt;h2 id="hidif-elif-else-endif"&gt;if ... elif ... else ... endif&lt;a class="headerlink" href="#hidif-elif-else-endif" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先我们来实现对 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句的支持。 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句的语法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kp"&gt;True&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
...
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="kp"&gt;True&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
...
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
...
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们首先要做的跟之前一样，那就是确定匹配标签语法的正则表达式。这里我们用的是下面
的正则来匹配标签语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;re_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{% .*? %\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;&lt;span class="si"&gt;% i&lt;/span&gt;&lt;span class="s1"&gt;f True %}...{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lif True %}...{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lse %}...{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndif %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;&lt;span class="si"&gt;% i&lt;/span&gt;&lt;span class="s1"&gt;f True %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lif True %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lse %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndif %}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后就是生成代码了， &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句跟之前的变量不一样那就是：需要进行缩进切换，这一点需要注意一下。&lt;/p&gt;
&lt;p&gt;下面我们来看一下为了支持 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 标签增加了哪些代码吧(完整代码可以从 Github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part2/template2a.py"&gt;template2a.py&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="c1"&gt;# 注释&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{# .*? #\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 标签&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{% .*? %\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 用于按变量，注释，标签分割模板字符串&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;&amp;#39;&amp;#39;(&lt;/span&gt;
&lt;span class="s1"&gt;            (?:\{\{ .*? \}\})&lt;/span&gt;
&lt;span class="s1"&gt;            |(?:\{\# .*? \#\})&lt;/span&gt;
&lt;span class="s1"&gt;            |(?:\{% .*? %\})&lt;/span&gt;
&lt;span class="s1"&gt;        )&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 生成 def __func_name():&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_comment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

            &lt;span class="c1"&gt;# {% tag %}&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# 将前面解析的字符串，变量写入到 code_builder 中&lt;/span&gt;
                &lt;span class="c1"&gt;# 因为标签生成的代码需要新起一行&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush_buffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{%} &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="c1"&gt;# elif 和 else 之前需要向后缩进一步&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="c1"&gt;# if 语句条件部分结束，向前缩进一步，为下一行做准备&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;endif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
                    &lt;span class="c1"&gt;# if 语句结束，向后缩进一步&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面代码的关键点是生成代码时的缩进控制:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在遇到 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 的时候, 需要在 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 这一行之后将缩进往前移一步&lt;/li&gt;
&lt;li&gt;在遇到 &lt;tt class="docutils literal"&gt;elif&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; 的时候, 需要将缩进先往后移一步，待 &lt;tt class="docutils literal"&gt;elif&lt;/tt&gt;/ &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; 那一行完成后还需要把缩进再移回来&lt;/li&gt;
&lt;li&gt;在遇到 &lt;tt class="docutils literal"&gt;endif&lt;/tt&gt; 的时候, 我们知道此时 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句已经结束了，需要把缩进往后移一步，
离开 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句的主体部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来看一下生成的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template2a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   ... {&lt;/span&gt;&lt;span class="si"&gt;% i&lt;/span&gt;&lt;span class="s1"&gt;f score &amp;gt;= 80 %}&lt;/span&gt;
&lt;span class="s1"&gt;   ... A&lt;/span&gt;
&lt;span class="s1"&gt;   ... {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lif score &amp;gt;= 60 %}&lt;/span&gt;
&lt;span class="s1"&gt;   ... B&lt;/span&gt;
&lt;span class="s1"&gt;   ... {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lse %}&lt;/span&gt;
&lt;span class="s1"&gt;   ... C&lt;/span&gt;
&lt;span class="s1"&gt;   ... {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndif %}&lt;/span&gt;
&lt;span class="s1"&gt;   ... &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码中的 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句和缩进没有问题。下面再看一下 &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; 的结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句的支持就这样实现了。有了这次经验下面让我们一起来实现对 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 循环的支持吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-endfor"&gt;
&lt;h2 id="hidfor-endfor"&gt;for ... endfor&lt;a class="headerlink" href="#hidfor-endfor" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;模板中的 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 循环的语法如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;names&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    ...
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从语法上可以看出来跟 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句是很相似了，甚至比 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句还要简单。只需在原有 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句代码
的基础上稍作修改就可以(完整版可以从 Github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part2/template2b.py"&gt;template2b.py&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# ...&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="c1"&gt;# ...&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;endif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;endfor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到其实就是修改了两行代码。按照惯例我们先来看一下生成的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template2b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;   ... {&lt;/span&gt;&lt;span class="si"&gt;% f&lt;/span&gt;&lt;span class="s1"&gt;or number in numbers %}&lt;/span&gt;
&lt;span class="s1"&gt;   ... {{ number }}&lt;/span&gt;
&lt;span class="s1"&gt;   ... {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndfor %}&lt;/span&gt;
&lt;span class="s1"&gt;   ... &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;render&lt;/tt&gt; 效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;for ... endfor&lt;/tt&gt; 语法就这样实现了。是不是很简单😄？但是还没完😁&lt;/p&gt;
&lt;p&gt;相信大家都知道在 python 中 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 循环其实还支持 &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; 。
下面我们就一起来让我们的模板引擎的 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 语法支持 &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; （可以从 Github 上下载: &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part2/template2c.py"&gt;template2c.py&lt;/a&gt; ）&lt;/p&gt;
&lt;!-- 至于如何让我们都模板都 ``for`` 标签也支持 ``break`` 和 ``else`` 这个任务就 --&gt;
&lt;!-- 交给大家自己去实现了（也可以从 Github 上下载我的实现: `template2c.py`_ ）。 --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# ...&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="c1"&gt;# ...&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;break&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;endif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;endfor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，其实也是只增加了两行代码。效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template2c&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;... {&lt;/span&gt;&lt;span class="si"&gt;% f&lt;/span&gt;&lt;span class="s1"&gt;or number in numbers %}&lt;/span&gt;
&lt;span class="s1"&gt;...    {&lt;/span&gt;&lt;span class="si"&gt;% i&lt;/span&gt;&lt;span class="s1"&gt;f number &amp;gt; 2 %}&lt;/span&gt;
&lt;span class="s1"&gt;...       {% break %}&lt;/span&gt;
&lt;span class="s1"&gt;...    {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lse %}&lt;/span&gt;
&lt;span class="s1"&gt;...       {{ number }}&lt;/span&gt;
&lt;span class="s1"&gt;...    {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndif %}&lt;/span&gt;
&lt;span class="s1"&gt;... {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;lse %}&lt;/span&gt;
&lt;span class="s1"&gt;...    no break&lt;/span&gt;
&lt;span class="s1"&gt;... {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndfor %}&lt;/span&gt;
&lt;span class="s1"&gt;... &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;   &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;      &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;   &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;      &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;   &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;   no break&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;         0            1            2      no break&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;numbers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;         0            1            2            &amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就这样我们的模板引擎对 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 的支持算是比较完善了。
至于生成的代码里的换行和空格暂时先不管，留待之后优化代码的时候再处理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;重构&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们的 &lt;tt class="docutils literal"&gt;Template._parse_text&lt;/tt&gt; 方法代码随着功能的增加已经变成下面这样了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;解析模板&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;str({})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_comment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush_buffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{%} &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;break&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;endif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;endfor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有什么问题呢？问题就是 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 循环里的代码太长了，我们需要分割 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 循环里的
代码。比如把对变量，&lt;tt class="docutils literal"&gt;if/for&lt;/tt&gt; 的处理封装到单独的方法里。&lt;/p&gt;
&lt;p&gt;下面展示了一种方法（可以从 Github 下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part2/template2d.py"&gt;template2d.py&lt;/a&gt; ):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;解析模板&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_variable&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;   &lt;span class="c1"&gt;# {{ variable }}&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_tag&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;             &lt;span class="c1"&gt;# {% tag %}&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_comment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_comment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     &lt;span class="c1"&gt;# {# comment #}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;default_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_string&lt;/span&gt;                  &lt;span class="c1"&gt;# 普通字符串&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;default_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_variable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;处理变量&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;str({})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_comment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;处理注释&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;处理字符串&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;处理标签&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# 将前面解析的字符串，变量写入到 code_builder 中&lt;/span&gt;
    &lt;span class="c1"&gt;# 因为标签生成的代码需要新起一行&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush_buffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{%} &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handle_statement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;处理 if/for&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;if&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# elif 和 else 之前需要向后缩进一步&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;elif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;else&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# if True:, elif True:, else:, for xx in yy:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# if/for 表达式部分结束，向前缩进一步，为下一行做准备&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;break&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;endif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;endfor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# if/for 结束，向后缩进一步&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样处理后是不是比之前那个都放在 &lt;tt class="docutils literal"&gt;_parse_text&lt;/tt&gt; 方法里要好很多？&lt;/p&gt;
&lt;p&gt;至此，我们的模板引擎已经支持了如下语法:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;变量: &lt;tt class="docutils literal"&gt;{{ variable }}&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;注释: &lt;tt class="docutils literal"&gt;{# comment #}&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句: &lt;tt class="docutils literal"&gt;{% if ... %} ... {% elif ... %} ... {% else %} ... {% endif %}&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 循环: &lt;tt class="docutils literal"&gt;{% for ... in ... %} ... {% break %} ... {% else %} ... {% endfor %}&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后的文章还将实现其他实用的模板语法，比如 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 模板继承等。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 的语法(item.html 是个独立的模板文件, list.html 中 include item.html):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# item.html #}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;{# list.html #}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;names&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;item.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;list.html 渲染后将生成类似下面这样的字符串:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tom&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Jim&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 的语法(base.html 是基础模板, child.html 继承 base.html 然后重新定义 base.html
中定义过的 block):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# base.html #}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    parent_content
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;footer&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    (c) 2016 example.com
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;footer&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;child.html:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% extends &amp;quot;base.html&amp;quot; %}

{% block content %}
    child_content
    {{ block.super }}
{% endblock content %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;child.html 渲染后将生成类似下面这样的字符串:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    child_content
    parent_content
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    (c) 2016 example.com
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么，该如何实现 &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;extends&lt;/tt&gt; 功能呢？
我将在 &lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part3.html"&gt;第三篇文章&lt;/a&gt; 中向你详细的讲解。敬请期待。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 19 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-19:2016/03/let-us-build-a-template-engine-part2.html</guid><category>let-us-build</category><category>lsbate</category><category>让我们一起来构建一个模板引擎</category></item><item><title>Cyanide &amp; Happiness #2191：你喜欢我吗</title><link>https://mozillazg.com/2016/03/2191.doyoulikeme.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2191/"&gt;Cyanide &amp;amp; Happiness #2191 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2191.doyoulikeme.zh-cn.png" src="/static/images/comics/2191.doyoulikeme.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 18 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-18:2016/03/2191.doyoulikeme.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1445：裤裆</title><link>https://mozillazg.com/2016/03/1445.pants2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1445/"&gt;Cyanide &amp;amp; Happiness #1445 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1445.pants2.zh-cn.png" src="/static/images/comics/1445.pants2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;is that a gun in your pants?
or are you just happy to see me?      &lt;br /&gt;
你裤裆里的那个是杠枪吗？
或者只是因为你看到我很高兴？&lt;/p&gt;
&lt;p&gt;it's a gun.   &lt;br /&gt;
那是杆枪。&lt;/p&gt;
&lt;p&gt;and I hate seeing you     &lt;br /&gt;
还有就是我讨厌看到你&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-17:2016/03/1445.pants2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Victims of Circumsolar：下个问题</title><link>https://mozillazg.com/2016/03/newnextquestion.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.victimsofcircumsolar.com/comic/next-question/"&gt;http://www.victimsofcircumsolar.com/comic/next-question/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="newnextquestion.zh-cn.png" src="/static/images/comics/newnextquestion.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;next question!        &lt;br /&gt;
下个问题！&lt;/p&gt;
&lt;p&gt;Mr. President.
what do you think is most important...    &lt;br /&gt;
总统先生。
你觉得什么是最重要的。。。&lt;/p&gt;
&lt;p&gt;gender equality or
racial equality?      &lt;br /&gt;
男女平等还是种族平等？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-16:2016/03/newnextquestion.zh-cn.html</guid><category>Victims of Circumsolar</category></item><item><title>Victims of Circumsolar：漂白剂</title><link>https://mozillazg.com/2016/03/115.bleach3.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.victimsofcircumsolar.com/comic/bleach/"&gt;http://www.victimsofcircumsolar.com/comic/bleach/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="115.bleach3.zh-cn.png" src="/static/images/comics/115.bleach3.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what does this do?    &lt;br /&gt;
这是用来干嘛的？&lt;/p&gt;
&lt;p&gt;careful with that,
sweetie! it kills 
nasty germs.      &lt;br /&gt;
亲爱的，小心点那个！它是用来杀病菌的。&lt;/p&gt;
&lt;p&gt;why is my tummy sore, dad?    &lt;br /&gt;
爹地，为什么我的肚子痛？&lt;/p&gt;
&lt;p&gt;you probably have some
nasty germs, son.     &lt;br /&gt;
儿子，可能你的肚子里有病菌。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-15:2016/03/115.bleach3.zh-cn.html</guid><category>Victims of Circumsolar</category></item><item><title>让我们一起来构建一个模板引擎（一）</title><link>https://mozillazg.com/2016/03/let-us-build-a-template-engine-part1.html</link><description>&lt;p&gt;假设我们要生成下面这样的 html 字符串:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome, Tom&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;age: 20&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;weight: 100&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;height: 170&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要求姓名以及 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/tt&gt; 中的内容是根据变量动态生成的，也就是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome, {name}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        {info}
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没接触过模板的同学可能会想到使用字符串格式化的方式来实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;p&amp;gt;welcome, {name}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;        {info}&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;info_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;lt;li&amp;gt;{0}: {1}&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方案有一个很明显的问题那就是，需要拼接两个 html 片段。
使用过模板技术的同学应该很容易就想到，在 Web 开发中生成 HTML 的更常用的办法是使用模板:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;p&amp;gt;welcome, {{ person[&amp;#39;name&amp;#39;] }}&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;        {&lt;/span&gt;&lt;span class="si"&gt;% f&lt;/span&gt;&lt;span class="s1"&gt;or item, value in person[&amp;#39;info&amp;#39;].items() %}&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;li&amp;gt;{{ item }}: {{ value }}&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;        {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndfor %}&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本系列文章要讲的就是如何从零开始实现一个这样的模板引擎( &lt;tt class="docutils literal"&gt;Template&lt;/tt&gt; )。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;使用技术&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们将使用将模板编译为 python 代码的方式来解析和渲染模板。
比如上面的模板将被编译为如下 python 代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;welcome, &amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后通过 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 执行生成的代码，之后再执行 &lt;tt class="docutils literal"&gt;render_function()&lt;/tt&gt; 就可以得到我们需要的 html 字符串了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;person&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;render_function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;render_function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模板引擎的核心技术之一就是这个，下面让我们一步一步的实现它吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="codebuilder"&gt;
&lt;h2 id="hidcodebuilder"&gt;CodeBuilder&lt;a class="headerlink" href="#hidcodebuilder" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们都知道 python 代码是高度依赖缩进的，所以我们需要一个对象用来保存我们生成代码时的当前缩进情况，
同时也保存已经生成的代码行（可以直接在 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part1/template1a.py"&gt;template1a.py&lt;/a&gt; ）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# tested on Python 3.5.1&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CodeBuilder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;INDENT_STEP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="c1"&gt;# 每次缩进的空格数&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;    &lt;span class="c1"&gt;# 当前缩进&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;         &lt;span class="c1"&gt;# 保存一行一行生成的代码&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;缩进前进一步&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INDENT_STEP&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;缩进后退一步&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INDENT_STEP&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;拼接所有代码行后的源码&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;方便调试&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;forward&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;backward&lt;/tt&gt; 方法可以用来控制缩进前进或后退一步，比如在生成 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句的时候:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if age &amp;gt; 13:      # 生成完这一行以后，需要切换缩进了 ``forward()``
    ...
    ...           # 退出 if 语句主体的时候，同样需要切换一次缩进 ``backward()``
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="template"&gt;
&lt;h2 id="hidtemplate"&gt;Template&lt;a class="headerlink" href="#hidtemplate" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个模板引擎的核心部分就是一个 &lt;tt class="docutils literal"&gt;Template&lt;/tt&gt; 类，用法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 实例化一个 Template 对象&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;hello, {{ name }}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;{&lt;/span&gt;&lt;span class="si"&gt;% f&lt;/span&gt;&lt;span class="s1"&gt;or skill in skills %}&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;p&amp;gt;you are good at {{ skill }}.&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;{&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s1"&gt;ndfor %}&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 然后，使用一些数据来渲染这个模板&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Eric&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;skills&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;music&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;comic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一切魔法都在 &lt;tt class="docutils literal"&gt;Template&lt;/tt&gt; 类里。下面我们写一个基本的 &lt;tt class="docutils literal"&gt;Template&lt;/tt&gt; 类（可以直接在 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part1/template1b.py"&gt;template1b.py&lt;/a&gt; ）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__func_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;default_context&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func_name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_var&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code_builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CodeBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="c1"&gt;# 生成 def __func_name():&lt;/span&gt;
        &lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def {}():&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# 生成 __result = []&lt;/span&gt;
        &lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} = []&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush_buffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# 生成 return &amp;quot;&amp;quot;.join(__result)&lt;/span&gt;
        &lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;return &amp;quot;&amp;quot;.join({})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flush_buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 生成类似代码: __result.extend([&amp;#39;&amp;lt;h1&amp;gt;&amp;#39;, name, &amp;#39;&amp;lt;/h1&amp;gt;&amp;#39;])&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0}.extend([{1}])&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上就是 &lt;tt class="docutils literal"&gt;Template&lt;/tt&gt; 类的核心方法了。我们之后要做的就是实现和完善 &lt;tt class="docutils literal"&gt;_parse_text&lt;/tt&gt; 方法。
当模板字符串为空时生成的代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;template1b&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template1b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到跟上面[使用技术]那节所说生成的代码是类似的。下面我们就一起来实现这个 &lt;tt class="docutils literal"&gt;_parse_text&lt;/tt&gt; 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;变量&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先要实现是对变量的支持，模板语法是 &lt;tt class="docutils literal"&gt;{{ variable }}&lt;/tt&gt; 。
既然要支持变量，首先要做的就是把变量从模板中找出来，这里我们可以使用正则表达式来实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{\{ .*? \}\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{\{ .*? \}\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re_variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ title }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;知道了如何匹配变量语法，下面我们要把变量跟其他的模板字符串分割开来，这里还是用的 &lt;tt class="docutils literal"&gt;re&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;(\{\{ .*? \}\})&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re_variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{{ title }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的正则之所以加了个分组是因为我们同时还需要用到模板里的变量。
分割开来以后我们就可以对每一项进行解析了。支持 &lt;tt class="docutils literal"&gt;{{ variable }}&lt;/tt&gt; 语法的 &lt;tt class="docutils literal"&gt;Template&lt;/tt&gt; 类增加了如下代码
（可以直接在 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part1/template1c.py"&gt;template1c.py&lt;/a&gt; ）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__func_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{\{ .*? \}\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;(\{\{ .*? \}\})&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 生成 def __func_name():&lt;/span&gt;
        &lt;span class="n"&gt;code_builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;def {}():&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;str({})&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;_parse_text&lt;/tt&gt; 中之所以要用 &lt;tt class="docutils literal"&gt;repr&lt;/tt&gt; ，是因为此时需要把 &lt;tt class="docutils literal"&gt;token&lt;/tt&gt; 当成一个普通的字符串来处理，
同时需要考虑 &lt;tt class="docutils literal"&gt;token&lt;/tt&gt; 中包含 &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;'&lt;/tt&gt; 的情况。
下面是几种有问题的写法:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'str({})'.format(token)&lt;/span&gt;&lt;/tt&gt;: 这种是把 &lt;tt class="docutils literal"&gt;token&lt;/tt&gt; 当成变量来用了，生成的代码为 &lt;tt class="docutils literal"&gt;str(token)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'&amp;quot;{}&amp;quot;'.format(token)&lt;/span&gt;&lt;/tt&gt;: 这种虽然是把 &lt;tt class="docutils literal"&gt;token&lt;/tt&gt; 当成了字符串，但是会有转义的问题，当 &lt;tt class="docutils literal"&gt;token&lt;/tt&gt; 中包含 &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; 时生成的代码为 &lt;tt class="docutils literal"&gt;&amp;quot;&amp;quot;hello&amp;quot;&amp;quot;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面先来看一下新的 &lt;tt class="docutils literal"&gt;template1c.py&lt;/tt&gt; 生成了什么样的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template1c&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没问题，跟预期的是一样的。再来看一下 &lt;tt class="docutils literal"&gt;render&lt;/tt&gt; 的效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Python&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不知道你有没有发现，其实 &lt;tt class="docutils literal"&gt;{{ variable }}&lt;/tt&gt; 不只支持变量，还支持表达式和运算符:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ 1 + 2 }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ items[0] }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ func() }}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;func&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;[]&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个既可以说是个 BUG 也可以说是个特性😂， 看模板引擎是否打算支持这些功能了，
我们在这里是打算支持这些功能 ;)。&lt;/p&gt;
&lt;p&gt;既然支持了 &lt;tt class="docutils literal"&gt;{{ }}&lt;/tt&gt; 那么支持注释也就非常好实现了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;注释&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;打算支持的注释模板语法是 &lt;tt class="docutils literal"&gt;{# comments #}&lt;/tt&gt; ，有了上面实现 &lt;tt class="docutils literal"&gt;{{ variable }}&lt;/tt&gt;
的经验，实现注释是类似的代码
（可以直接在 github 上下载 &lt;a class="reference external" href="https://github.com/mozillazg/lsbate/raw/master/part1/template1d.py"&gt;template1d.py&lt;/a&gt; ）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;func_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__func_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_var&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{\{ .*? \}\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;\{# .*? #\}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;&amp;#39;&amp;#39;(&lt;/span&gt;
&lt;span class="s1"&gt;            (?:\{\{ .*? \}\})&lt;/span&gt;
&lt;span class="s1"&gt;            |(?:\{\# .*? \#\})&lt;/span&gt;
&lt;span class="s1"&gt;        )&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 生成 def __func_name():&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_parse_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_tokens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_variable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="c1"&gt;# 注释 {# ... #}&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;re_comment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;template1d&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;{{ title }} {# comment #}&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code_builder&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__func_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;h1&amp;gt;Python &amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，我们的模板引擎已经支持了变量和注释功能。
那么如何实现支持 &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; 语句和 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 循环的标签语法呢:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;user.is_admin&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    admin, &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;user.is_staff&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    staff
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    others
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;names&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我将在 &lt;a class="reference external" href="http://mozillazg.com/2016/03/let-us-build-a-template-engine-part2.html"&gt;第二篇文章&lt;/a&gt; 中向你详细的讲解。敬请期待。&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-15:2016/03/let-us-build-a-template-engine-part1.html</guid><category>let-us-build</category><category>lsbate</category><category>让我们一起来构建一个模板引擎</category></item><item><title>Victims of Circumsolar：医生知道</title><link>https://mozillazg.com/2016/03/19.dr_know.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.victimsofcircumsolar.com/comic/dr-know/"&gt;http://www.victimsofcircumsolar.com/comic/dr-know/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="19.dr_know.zh-cn.png" src="/static/images/comics/19.dr_know.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;bond, james bond          &lt;br /&gt;
邦德，詹姆斯邦德&lt;/p&gt;
&lt;p&gt;ah, yes. I've been expecting you.     &lt;br /&gt;
啊，是的。我一直在等你。&lt;/p&gt;
&lt;p&gt;you have syphilis, mr. bond.
邦德先生，你得了梅毒。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-14:2016/03/19.dr_know.zh-cn.html</guid><category>Victims of Circumsolar</category></item><item><title>[go]如何让命令行程序支持管道和重定向输入</title><link>https://mozillazg.com/2016/03/go-let-cli-support-pipe-read-data-from-stdin.html</link><description>&lt;p&gt;管道和重定向输入的数据都是通过标准输入传入程序的， &lt;tt class="docutils literal"&gt;os.Stdin&lt;/tt&gt; 即为标准输入。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;golang.org/x/crypto/ssh/terminal&lt;/tt&gt; 的 &lt;tt class="docutils literal"&gt;terminal.IsTerminal(0)&lt;/tt&gt;
判断是否是管道和重定向输入，为什么是 &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; ：因为标准输入的文件描述符是 &lt;tt class="docutils literal"&gt;0&lt;/tt&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;为 &lt;tt class="docutils literal"&gt;true&lt;/tt&gt; 时表示是交互式环境&lt;/li&gt;
&lt;li&gt;为 &lt;tt class="docutils literal"&gt;false&lt;/tt&gt; 时是我们要的场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先需要安装 &lt;tt class="docutils literal"&gt;golang.org/x/crypto/ssh/terminal&lt;/tt&gt; 这个包（安装时需要 VPN 的辅助）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
go get golang.org/x/crypto/ssh/terminal
&lt;/pre&gt;
&lt;p&gt;也可以使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;github.com/mattn/go-isatty&lt;/span&gt;&lt;/tt&gt; 这个包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
!isatty.IsTerminal(os.Stdin.Fd())
&lt;/pre&gt;
&lt;p&gt;下面是示例代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;

    &lt;span class="s"&gt;&amp;quot;golang.org/x/crypto/ssh/terminal&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;terminal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IsTerminal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;ioutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &amp;gt; hello.txt
$ go run main.go hello world       &lt;span class="c1"&gt;# 参数输入&lt;/span&gt;
hello world
$ cat hello.txt &lt;span class="p"&gt;|&lt;/span&gt; go run main.go   &lt;span class="c1"&gt;# 管道输入&lt;/span&gt;
hello

$ go run main.go &amp;lt; hello.txt       &lt;span class="c1"&gt;# 重定向输入&lt;/span&gt;
hello

$
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://godoc.org/golang.org/x/crypto/ssh/terminal"&gt;terminal - GoDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://godoc.org/os"&gt;os - GoDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://godoc.org/io/ioutil"&gt;ioutil - GoDoc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-12:2016/03/go-let-cli-support-pipe-read-data-from-stdin.html</guid></item><item><title>Python: 如何让命令行程序支持管道和重定向输入</title><link>https://mozillazg.com/2016/03/python-let-cli-support-pipe-read-data-from-stdin.html</link><description>&lt;p&gt;管道和重定向输入的数据都是通过标准输入传入程序的， &lt;tt class="docutils literal"&gt;sys.stdin&lt;/tt&gt; 这个 file-like 对象即为标准输入。
同时也可以通过 &lt;tt class="docutils literal"&gt;sys.stdin.isatty()&lt;/tt&gt;
判断是否是管道和重定向输入（为 &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; 时表示是交互式环境，
为 &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; 时是我们要的场景）。&lt;/p&gt;
&lt;p&gt;假设有个 &lt;tt class="docutils literal"&gt;hello.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isatty&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &amp;gt; hello.txt
$ python hello.py hello world       &lt;span class="c1"&gt;# 参数输入&lt;/span&gt;
hello world
$ cat hello.txt &lt;span class="p"&gt;|&lt;/span&gt; python hello.py   &lt;span class="c1"&gt;# 管道输入&lt;/span&gt;
hello

$ python hello.py &amp;lt; hello.txt       &lt;span class="c1"&gt;# 重定向输入&lt;/span&gt;
hello

$
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/sys.html#sys.stdin"&gt;29.1. sys — System-specific parameters and functions — Python 3.5.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-10:2016/03/python-let-cli-support-pipe-read-data-from-stdin.html</guid></item><item><title>Victims of Circumsolar：雏菊</title><link>https://mozillazg.com/2016/03/whoopsiedaisy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.victimsofcircumsolar.com/comic/whoops-a-daisy/"&gt;http://www.victimsofcircumsolar.com/comic/whoops-a-daisy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="whoopsiedaisy.zh-cn.png" src="/static/images/comics/whoopsiedaisy.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-09:2016/03/whoopsiedaisy.zh-cn.html</guid><category>Victims of Circumsolar</category></item><item><title>Python: exec 函数的 globals 和 locals 参数的用法</title><link>https://mozillazg.com/2016/03/python-exec-function-globals-and-locals-arguments.html</link><description>&lt;p&gt;我们都知道 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数可以用来动态执行 python 代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foobar = 123&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;
&lt;span class="mi"&gt;123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么大家是否知道 &lt;tt class="docutils literal"&gt;exec&lt;/tt&gt; 函数还支持两个可选参数呢(不支持通过关键字去指定参数)？ :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两个参数可以用来指定执行代码时可以使用的全局变量和局部变量,
以及收集执行代码后的全局变量和局部变量。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;globals&lt;/tt&gt; 默认为 &lt;tt class="docutils literal"&gt;globals()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;locals&lt;/tt&gt; 默认为 &lt;tt class="docutils literal"&gt;globals&lt;/tt&gt; 参数的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面将举例说明指定 &lt;tt class="docutils literal"&gt;globals&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;locals&lt;/tt&gt; 时的效果。&lt;/p&gt;
&lt;div class="section" id="globals"&gt;
&lt;h2 id="hidglobals"&gt;globals&lt;a class="headerlink" href="#hidglobals" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;globals&lt;/tt&gt; 是个 &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt; 对象，用来指定代码执行时可以使用的全局变量以及收集代码执行后的全局变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc = age + 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc = age + 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc = age + 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc = age + 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果只指定了 &lt;tt class="docutils literal"&gt;globals&lt;/tt&gt; 参数，它的值将同样用于 &lt;tt class="docutils literal"&gt;locals&lt;/tt&gt; 参数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有一点需要注意的是&lt;/strong&gt;: 当 &lt;tt class="docutils literal"&gt;globals&lt;/tt&gt; 字典不包含 &lt;tt class="docutils literal"&gt;__builtins__&lt;/tt&gt; 这个 key 时，
python 会自动加一个指向 &lt;a class="reference external" href="https://docs.python.org/3/library/builtins.html#module-builtins"&gt;builtins&lt;/a&gt; 的引用。所以如果要禁止/限制代码使用内置函数的话，
需要同时指定 &lt;tt class="docutils literal"&gt;__builtins__&lt;/tt&gt; 这个 key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int(1)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;int(1)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}})&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;string&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="locals"&gt;
&lt;h2 id="hidlocals"&gt;locals&lt;a class="headerlink" href="#hidlocals" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;locals&lt;/tt&gt; 可以是任何 mapping 对象，用来指定代码执行时的局部变量以及收集代码执行后的局部变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc = age + 1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;... name = &amp;#39;Tom&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;... age = 13&lt;/span&gt;
&lt;span class="s1"&gt;... &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#exec"&gt;2. Built-in Functions — Python 3.5.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-08:2016/03/python-exec-function-globals-and-locals-arguments.html</guid><category>exec</category><category>sanbox</category></item><item><title>Python: 使用 keyword 模块检查变量名是否是 python 关键字</title><link>https://mozillazg.com/2016/03/python-use-keyword-model-check-an-name-weither-keyword.html</link><description>&lt;p&gt;无意中发现 python 标准库中包含呢一个 &lt;tt class="docutils literal"&gt;keyword&lt;/tt&gt; 模块
可以用来检查一个变量名是否是 python 关键字:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;keyword&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iskeyword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iskeyword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwlist&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;False&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;None&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;True&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;and&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;as&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;with&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yield&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个模块只有两个函数:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;keyword.iskeyword(s)&lt;/tt&gt;: 是否是关键字&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;keyword.kwlist&lt;/tt&gt;: 返回解释器定义的所有关键字列表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/keyword.html"&gt;32.6. keyword — Testing for Python keywords — Python 3.5.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-08:2016/03/python-use-keyword-model-check-an-name-weither-keyword.html</guid></item><item><title>buttersafe：丑小鸭</title><link>https://mozillazg.com/2016/03/2016-03-03-TheUglyDuckling.zh-cn.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2016/03/03/the-ugly-duckling/"&gt;http://buttersafe.com/2016/03/03/the-ugly-duckling/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2016-03-03-TheUglyDuckling.zh-cn.png" src="/static/images/comics/2016-03-03-TheUglyDuckling.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;ha ha! check out the ugly duckling!    &lt;br /&gt;
哈哈！快看那只丑小鸭！&lt;/p&gt;
&lt;p&gt;go head and laugh! one day
I'll be beautiful! you'll see!    &lt;br /&gt;
尽管笑吧！总有一天我会变漂亮！
你们会看到那天的！&lt;/p&gt;
&lt;p&gt;check it out! now he
looks even weirder!   &lt;br /&gt;
快看！现在他看起来更怪了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-07:2016/03/2016-03-03-TheUglyDuckling.zh-cn.zh-cn.html</guid><category>buttersafe</category></item><item><title>pinyin-data: 汉字拼音数据库</title><link>https://mozillazg.com/2016/03/introduce-pinyin-data.html</link><description>&lt;h2&gt;缘起&lt;/h2&gt;
&lt;!-- 因为我维护了三个拼音相关的仓库（
[python-pinyin][1]
[go-pinyin][2]
[rust-pinyin][3]
），每次修改拼音数据的时候都需要手动修改不同编程语言版本的
拼音库，感觉这样不是很方便。

同时也  --&gt;

&lt;p&gt;希望建立一个跟编程语言无关的拼音数据库，
方便大家使用这个拼音数据库去开发不同编程语言的拼音模块。&lt;/p&gt;
&lt;h2&gt;项目介绍&lt;/h2&gt;
&lt;p&gt;项目地址: &lt;a href="https://github.com/mozillazg/pinyin-data"&gt;https://github.com/mozillazg/pinyin-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要用的是 &lt;a href="http://unicode.org/"&gt;Unicode.org&lt;/a&gt; 旗下的 &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 项目里的拼音数据。
通过程序自动解析和合并 &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中的拼音数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据格式：&lt;code&gt;{code point}: {pinyins}  # {hanzi}&lt;/code&gt; （示例：&lt;code&gt;U+4E2D: zhōng,zhòng  # 中&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kHanyuPinyin.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kHanyuPinyin"&gt;kHanyuPinyin&lt;/a&gt; 部分的拼音数据（来源于《漢語大字典》的拼音数据）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kHanyuPinlu.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kHanyuPinlu"&gt;kHanyuPinlu&lt;/a&gt; 部分的拼音数据（来源于《現代漢語頻率詞典》的拼音数据）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kXHC1983.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kXHC1983"&gt;kXHC1983&lt;/a&gt; 部分的拼音数据（来源于《现代汉语词典》的拼音数据）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonCJKUI.txt&lt;/code&gt;: 不属于 &lt;a href="https://en.wikipedia.org/wiki/CJK_Unified_Ideographs"&gt;CJK Unified Ideograph&lt;/a&gt; 但是却有拼音的字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kMandarin.txt&lt;/code&gt;: &lt;a href="http://www.unicode.org/charts/unihan.html"&gt;Unihan Database&lt;/a&gt; 中 &lt;a href="http://www.unicode.org/reports/tr38/#kMandarin"&gt;kMandarin&lt;/a&gt; 部分的拼音数据（普通话中最常用的一个读音。zh-CN 为主，如果 zh-CN 中没有则使用 zh-TW 中的拼音）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;overwrite.txt&lt;/code&gt;: 手工校验的拼音数据（上面的拼音数据都是自动生成的，修改的话只修改这个就可以了）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pinyin.txt&lt;/code&gt;: 合并上述文件后的拼音数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zdic.txt&lt;/code&gt;: &lt;a href="http://zdic.net"&gt;汉典网&lt;/a&gt; 的拼音数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;后续计划&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将 &lt;a href="https://github.com/mozillazg/python-pinyin"&gt;python-pinyin&lt;/a&gt;, &lt;a href="https://github.com/mozillazg/go-pinyin"&gt;go-pinyin&lt;/a&gt;, &lt;a href="https://github.com/mozillazg/rust-pinyin"&gt;rust-pinyin&lt;/a&gt; 里的拼音数据改为基于 &lt;a href="https://github.com/mozillazg/pinyin-data"&gt;pinyin-data&lt;/a&gt; 自动生成相关代码。
  然后统一在 &lt;a href="https://github.com/mozillazg/rust-pinyin"&gt;pinyin-data&lt;/a&gt; 这个项目中维护拼音数据（在 README 或 CONTRIBUTING.md 中增加提示）。&lt;/li&gt;
&lt;li&gt;向 &lt;a href="https://github.com/hotoo/pinyin"&gt;hotoo/pinyin&lt;/a&gt; 提一下这个仓库，看他是否有意使用这个仓库的数据。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-07:2016/03/introduce-pinyin-data.html</guid><category>pinyin</category></item><item><title>Cyanide &amp; Happiness #3186：最大的缺点</title><link>https://mozillazg.com/2016/03/3186.imnotsayingthisisagreatideabutgiveitagoitmightgiveyouaraiseifyouknowwhatimean.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3186/"&gt;Cyanide &amp;amp; Happiness #3186 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3186.imnotsayingthisisagreatideabutgiveitagoitmightgiveyouaraiseifyouknowwhatimean.zh-cn.png" src="/static/images/comics/3186.imnotsayingthisisagreatideabutgiveitagoitmightgiveyouaraiseifyouknowwhatimean.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;your resume is impressive,
mr watson. what would you say
is your largest weakness?         &lt;br /&gt;
沃森先生，你的简历让人印象深刻。
你能说一下你最大的缺点是什么吗？&lt;/p&gt;
&lt;p&gt;a man in a sharp suit.        &lt;br /&gt;
穿西装的男人。&lt;/p&gt;
&lt;p&gt;you're hired.     &lt;br /&gt;
你被雇佣了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-03-03:2016/03/3186.imnotsayingthisisagreatideabutgiveitagoitmightgiveyouaraiseifyouknowwhatimean.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4220：发现</title><link>https://mozillazg.com/2016/02/4220.found.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4220/"&gt;Cyanide &amp;amp; Happiness #4220 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4220.found.zh-cn.png" src="/static/images/comics/4220.found.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;我发现了这条狗！
我喜欢它！我可以把它留下来吗？求你了？&lt;/p&gt;
&lt;p&gt;唔唔唔。。。
儿子，我不确定。&lt;/p&gt;
&lt;p&gt;俗话说“如果你爱他，就让他离开。如果他
最后回来了，他就是你的。”&lt;/p&gt;
&lt;p&gt;但是。。。但是万一他一直都没有
找到一个好的归宿呢？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-28:2016/02/4220.found.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Tubeytoons：抱怨</title><link>https://mozillazg.com/2016/02/beefing.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/beefing"&gt;http://tubeytoons.com/comic/beefing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="beefing.zh-cn.png" src="/static/images/comics/beefing.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-27:2016/02/beefing.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Tubeytoons：公路旅行</title><link>https://mozillazg.com/2016/02/road-trips.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/road-trips"&gt;http://tubeytoons.com/comic/road-trips&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="road-trips.zh-cn.png" src="/static/images/comics/road-trips.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-26:2016/02/road-trips.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>CommitStrip：每日站立会议</title><link>https://mozillazg.com/2016/02/Strip-Daily-Standup-650-final.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.commitstrip.com/en/2016/01/29/the-daily-stand-up/"&gt;http://www.commitstrip.com/en/2016/01/29/the-daily-stand-up/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Strip-Daily-Standup-650-final.zh-cn.png" src="/static/images/comics/Strip-Daily-Standup-650-final.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-25:2016/02/Strip-Daily-Standup-650-final.zh-cn.html</guid><category>CommitStrip</category></item><item><title>Tubeytoons：第一个</title><link>https://mozillazg.com/2016/02/first-to-go.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/first-to-go"&gt;http://tubeytoons.com/comic/first-to-go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="first-to-go.zh-cn.png" src="/static/images/comics/first-to-go.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-24:2016/02/first-to-go.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Tubeytoons：做点预防措施</title><link>https://mozillazg.com/2016/02/taking-precautions.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/taking-precautions"&gt;http://tubeytoons.com/comic/taking-precautions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="taking-precautions.zh-cn.png" src="/static/images/comics/taking-precautions.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-23:2016/02/taking-precautions.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Cyanide &amp; Happiness #4218：汤</title><link>https://mozillazg.com/2016/02/4218.soup.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4218/"&gt;Cyanide &amp;amp; Happiness #4218 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4218.soup.zh-cn.png" src="/static/images/comics/4218.soup.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;how is your alphabet
soup, sir?        &lt;br /&gt;
先生，你的字母汤味道咋样？&lt;/p&gt;
&lt;p&gt;it's a little salty.      &lt;br /&gt;
有点咸。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-22:2016/02/4218.soup.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>bustard: 一个 web 框架</title><link>https://mozillazg.com/2016/02/bustard-a-tiny-wsgi-web-framework.html</link><description>&lt;p&gt;最近一直在填一个玩具式（仅供学习交流，不可用于生产环境）的 WEB 框架的坑，现在大部分功能都已经完成的差不多了， 所以写篇博文介绍一下这个框架。&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;项目地址： &lt;a class="reference external" href="https://github.com/mozillazg/bustard"&gt;https://github.com/mozillazg/bustard&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;安装：&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
pip install bustard
pip install psycopg2  # 如果需要 orm 功能
&lt;/pre&gt;
&lt;p&gt;包含的功能：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/bustard/blob/master/bustard/router.py"&gt;路由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/bustard/blob/master/bustard/http.py"&gt;Request 和 Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/bustard/blob/master/bustard/http.py"&gt;Cookies&lt;/a&gt; 和 &lt;a class="reference external" href="https://github.com/mozillazg/bustard/blob/master/bustard/sessions.py"&gt;Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/bustard/blob/master/bustard/orm.py"&gt;ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/bustard/blob/master/bustard/template.py"&gt;模版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mozillazg/bustard/blob/master/bustard/servers.py"&gt;WSGI server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依赖:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 3.5&lt;/li&gt;
&lt;li&gt;psycopg2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2 id="hidhello-world"&gt;Hello World&lt;a class="headerlink" href="#hidhello-world" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mozillazg/bustard"&gt;bustard&lt;/a&gt; 参考了 &lt;a class="reference external" href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt; 和 &lt;a class="reference external" href="https://github.com/django/django"&gt;Django&lt;/a&gt; 的设计，路由风格跟 &lt;a class="reference external" href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt;
类似采用装饰器风格，view 风格跟 &lt;a class="reference external" href="https://github.com/django/django"&gt;Django&lt;/a&gt; 类似采用显示传入 &lt;tt class="docutils literal"&gt;request&lt;/tt&gt;
的方式。 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bustard.app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bustard&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bustard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;helloword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;路由&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;支持以下三种方式的路由:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;静态路由 :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;类似 &lt;a class="reference external" href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt; 的动态路由(&lt;tt class="docutils literal"&gt;&amp;lt;name&amp;gt;&lt;/tt&gt;) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;类似 &lt;a class="reference external" href="https://github.com/django/django"&gt;Django&lt;/a&gt; 的动态路由(正则表达式) :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/(?P&amp;lt;name&amp;gt;\w+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;app.route&lt;/tt&gt; 支持一个可选参数 &lt;tt class="docutils literal"&gt;methods&lt;/tt&gt; 用于指定支持的 http method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="request"&gt;
&lt;h2 id="hidrequest"&gt;Request&lt;a class="headerlink" href="#hidrequest" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;request&lt;/tt&gt; 对象跟 &lt;a class="reference external" href="https://github.com/mitsuhiko/flask"&gt;Flask&lt;/a&gt; 里的 &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; 对象类似，常用的方法和属性如下:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;request.headers&lt;/tt&gt;: url 参数&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;request.args&lt;/tt&gt;: url 参数&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;request.form&lt;/tt&gt;: POST 表单数据（不包含文件）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;request.files&lt;/tt&gt;: POST 表单里的文件数据&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;request.data&lt;/tt&gt;: POST body&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;request.cookies&lt;/tt&gt;: Cookies&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="response"&gt;
&lt;h2 id="hidresponse"&gt;Response&lt;a class="headerlink" href="#hidresponse" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-Total&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;response&lt;/tt&gt; 对象常用的方法和属性如下:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;response.status_code&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;response.content_type&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;response.headers&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;response.content&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;response.set_cookie(...)&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;response.delete_cookie(...)&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="session"&gt;
&lt;h2 id="hidsession"&gt;Session&lt;a class="headerlink" href="#hidsession" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;访问 &lt;tt class="docutils literal"&gt;request.session&lt;/tt&gt; 来获取 &lt;tt class="docutils literal"&gt;session&lt;/tt&gt; 数据，它是一个类 &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt; 对象`:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="orm"&gt;
&lt;h2 id="hidorm"&gt;ORM&lt;a class="headerlink" href="#hidorm" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ORM&lt;/tt&gt; 只支持 &lt;a class="reference external" href="http://www.postgresql.org/docs/9.5/static/index.html"&gt;postgresql&lt;/a&gt; 数据库，用法类似 &lt;a class="reference external" href="https://github.com/django/django"&gt;Django&lt;/a&gt; ORM 和 &lt;a class="reference external" href="https://bitbucket.org/zzzeek/sqlalchemy/"&gt;SQLAlchemy&lt;/a&gt; 的结合体:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bustard.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AutoField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BooleanField&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;is_actived&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;postgresql://dbuser:password@localhost/exampledb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新增:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_actived&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查询:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_actived&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_actived&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_actived&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;模版&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;模版语法类似 &lt;a class="reference external" href="http://jinja.pocoo.org"&gt;Jinja2&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;user.is_actived&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        is_actived
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多使用示例详见 &lt;a class="reference external" href="https://github.com/mozillazg/bustard/tree/master/examples"&gt;examples&lt;/a&gt; 和 &lt;a class="reference external" href="https://github.com/mozillazg/bustard/tree/master/tests"&gt;tests&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-22:2016/02/bustard-a-tiny-wsgi-web-framework.html</guid><category>wsgi</category><category>framework</category><category>orm</category><category>template</category><category>router</category></item><item><title>multipart form data 的数据格式</title><link>https://mozillazg.com/2016/02/http-multipart-form-data.html</link><description>&lt;p&gt;假设 form 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/upload&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Username: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Password: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    File: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;header&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;boundary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;body&lt;/h2&gt;
&lt;h3&gt;普通 input 数据&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Tom&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;文件上传 input 数据&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Disposition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;form-data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myfile.txt&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;plain&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;Content-Transfer-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;binary&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;span class="nt"&gt;hello&lt;/span&gt; &lt;span class="nt"&gt;word&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;r&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;结束标志&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--{boundary}--\r\n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;数据示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/upload&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;172.16.100.128:5000&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;394 &lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;multipart/form-data; boundary=----WebKitFormBoundaryLumpDpF3AwbRwRBn&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;http://172.16.100.128:5000/&lt;/span&gt;

------WebKitFormBoundaryUNZIuug9PIVmZWuw
Content-Disposition: form-data; name=&amp;quot;username&amp;quot;

Tom
------WebKitFormBoundaryUNZIuug9PIVmZWuw
Content-Disposition: form-data; name=&amp;quot;password&amp;quot;

passwd
------WebKitFormBoundaryUNZIuug9PIVmZWuw
Content-Disposition: form-data; name=&amp;quot;file&amp;quot;; filename=&amp;quot;myfile.txt&amp;quot;
Content-Type: text/plain

hello world
------WebKitFormBoundaryUNZIuug9PIVmZWuw--
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc2388"&gt;https://tools.ietf.org/html/rfc2388&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2"&gt;https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/satox/20110726/1311665904"&gt;http://d.hatena.ne.jp/satox/20110726/1311665904&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mugenup-tech.hatenadiary.com/entry/2014/08/28/100910"&gt;http://mugenup-tech.hatenadiary.com/entry/2014/08/28/100910&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-19:2016/02/http-multipart-form-data.html</guid><category>http</category></item><item><title>psycopg2 插入数据时如何获取新纪录的主键值</title><link>https://mozillazg.com/2016/02/psycopg2-how-to-get-lastrowid-when-insert-a-new-row.html</link><description>&lt;p&gt;默认情况下，使用 psycopg2 时 &lt;code&gt;cursor.lastrowid&lt;/code&gt; 并不会返回新纪录的主键值。
&lt;a href="http://initd.org/psycopg/docs/cursor.html?highlight=lastrowid#cursor.lastrowid"&gt;文档&lt;/a&gt; 中是这样解释的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cursor.lastrowid&lt;/p&gt;
&lt;p&gt;This read-only attribute provides the OID of the last row inserted by the cursor.
If the table wasn’t created with OID support or the last operation is not a single record insert,
the attribute is set to None.&lt;/p&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;PostgreSQL currently advices to not create OIDs on the tables and the default for &lt;code&gt;CREATE TABLE&lt;/code&gt;
is to not support them. The &lt;code&gt;INSERT ... RETURNING&lt;/code&gt; syntax available from
PostgreSQL 8.3 allows more flexibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据文档，我们可以是用 &lt;code&gt;INSERT ... RETURNING&lt;/code&gt; 的方式来获取主键：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;exampledb=&amp;gt; INSERT INTO users (username) VALUES (&amp;#39;hello&amp;#39;) RETURNING id;
 id
----
 11
(1 row)

INSERT 0 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python 中这样用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; cursor.execute(&amp;quot;INSERT INTO users (username) VALUES (&amp;#39;hello&amp;#39;) RETURNING id;&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; cursor.fetchone()
(11,)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0249/#lastrowid"&gt;PEP 0249 -- Python Database API Specification v2.0 | Python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://initd.org/psycopg/docs/cursor.html?highlight=lastrowid#cursor.lastrowid"&gt;The cursor class — Psycopg 2.6.2.dev0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-15:2016/02/psycopg2-how-to-get-lastrowid-when-insert-a-new-row.html</guid><category>psycopg2</category><category>postgresql</category></item><item><title>Tubeytoons：千钧一发</title><link>https://mozillazg.com/2016/02/close-call.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/close-call"&gt;http://tubeytoons.com/comic/close-call&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="close-call.zh-cn.png" src="/static/images/comics/close-call.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-03:2016/02/close-call.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Tubeytoons：猎人和猎物</title><link>https://mozillazg.com/2016/02/hunter-and-hunted.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/hunter-and-hunted"&gt;http://tubeytoons.com/comic/hunter-and-hunted&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="hunter-and-hunted.zh-cn.png" src="/static/images/comics/hunter-and-hunted.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;he's in positon       &lt;br /&gt;
他已就位&lt;/p&gt;
&lt;p&gt;roger that    &lt;br /&gt;
收到&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-02:2016/02/hunter-and-hunted.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Tubeytoons：任职资格</title><link>https://mozillazg.com/2016/02/qualifications.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/qualifications"&gt;http://tubeytoons.com/comic/qualifications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="qualifications.zh-cn.png" src="/static/images/comics/qualifications.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hi I'm Nikki,
I'm applying for the
barista position      &lt;br /&gt;
嗨，我是妮基，我来应聘咖啡师的职位&lt;/p&gt;
&lt;p&gt;says here you have 
a c in english    &lt;br /&gt;
这上面说你的英语是 C&lt;/p&gt;
&lt;p&gt;it's not my forte     &lt;br /&gt;
那不是我的长项&lt;/p&gt;
&lt;p&gt;you're hired  &lt;br /&gt;
你被录用了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-02-01:2016/02/qualifications.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Cyanide &amp; Happiness #2647：逃课</title><link>https://mozillazg.com/2016/01/2647.hookey.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2647/"&gt;Cyanide &amp;amp; Happiness #2647 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2647.hookey.zh-cn.png" src="/static/images/comics/2647.hookey.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;want to play hookey wth me?   &lt;br /&gt;
想跟我玩逃课游戏吗？&lt;/p&gt;
&lt;p&gt;find me at school if you're game!     &lt;br /&gt;
如果你想玩这个游戏的话在学校里找我就可以了！&lt;/p&gt;
&lt;p&gt;ok!   &lt;br /&gt;
好的！&lt;/p&gt;
&lt;p&gt;shit! I lost!     &lt;br /&gt;
该死！我迷失了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-31:2016/01/2647.hookey.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>解决 git push 时出现 error: pack-objects died of signal 13 的问题</title><link>https://mozillazg.com/2016/01/fix-git-push-raise-error-pack-objects-died-of-signal-13.html</link><description>&lt;p&gt;今天执行 &lt;code&gt;git push&lt;/code&gt; 的时候报了如下的错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;ssh.github.com,192.30.252.149&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
对象计数中: 27, 完成.
Delta compression using up to &lt;span class="m"&gt;4&lt;/span&gt; threads.
压缩对象中: 100% &lt;span class="o"&gt;(&lt;/span&gt;26/26&lt;span class="o"&gt;)&lt;/span&gt;, 完成.
Write failed: Broken pipe 3.20 MiB &lt;span class="p"&gt;|&lt;/span&gt; 93.00 KiB/s
写入对象中:  81% &lt;span class="o"&gt;(&lt;/span&gt;22/27&lt;span class="o"&gt;)&lt;/span&gt;fatal: , 3.83 MiB &lt;span class="p"&gt;|&lt;/span&gt; 52.00 KiB/sThe remote end hung up unexpectedly
error: pack-objects died of signal 13
error: 无法推送一些引用到 &lt;span class="s1"&gt;&amp;#39;git@github.com:mozillazg/mozillazg.com.git&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后的解决办法是加大 &lt;code&gt;http.postBuffer&lt;/code&gt; 的值:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git config http.postBuffer 52428800
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;http.postBuffer&lt;/code&gt; 的值的单位是字节， 52428800 = 1024 * 1024 * 50 即 50 M。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/25846617/1804866"&gt;git - Can&amp;#39;t push to GitHub error: pack-objects died of signal 13 - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/site/master/issues/7567/git-push-remote-end-hung-up"&gt;site / master / issues / #7567 - git push remote end hung up &amp;mdash; Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-31:2016/01/fix-git-push-raise-error-pack-objects-died-of-signal-13.html</guid></item><item><title>python 中 += 运算符在可变对象和不可变对象上的不同效果</title><link>https://mozillazg.com/2016/01/python-plus-work-on-immutable-or-mutable-object.md.html</link><description>&lt;p&gt;先来看内置的不可变对象 &lt;code&gt;+=&lt;/code&gt; 的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;b&amp;#39;
&amp;gt;&amp;gt;&amp;gt; id(a)
140606482358088
&amp;gt;&amp;gt;&amp;gt; a += &amp;#39;c&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;bc&amp;#39;
&amp;gt;&amp;gt;&amp;gt; id(a)
140606244543656
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到内置的不可变对象 &lt;code&gt;+=&lt;/code&gt; 时，会返回一个新的对象。那么内置的可变对象 &lt;code&gt;+=&lt;/code&gt; 呢？：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2]
&amp;gt;&amp;gt;&amp;gt; id(a)
140606245413384
&amp;gt;&amp;gt;&amp;gt; a += [3, 4]
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; id(a)
140606245413384
&amp;gt;&amp;gt;&amp;gt; a += (1, 2)
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 1, 2]
&amp;gt;&amp;gt;&amp;gt; id(a)
140606245413384
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到内置的可变对象的 &lt;code&gt;+=&lt;/code&gt; 操作实际是原地修改操作，并不是返回一个新的对象。&lt;/p&gt;
&lt;h2&gt;启示&lt;/h2&gt;
&lt;p&gt;一方面要注意到 &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt; 之类的 &lt;code&gt;x=&lt;/code&gt; 操作在作用于内置的可变对象时是原地修改的情况，
另一方面也给了我们重载 &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt; 之类的 &lt;code&gt;x=&lt;/code&gt; 运算符时的一个参考。&lt;/p&gt;
&lt;p&gt;比如自定义的一个可变对象要实现支持 &lt;code&gt;+=&lt;/code&gt; 运算符:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Mutable:&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;number&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;number&lt;/span&gt; = &lt;span class="n"&gt;number&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__iadd__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;other&lt;/span&gt;):
        &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;可变对象原地修改，返回 self&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;number&lt;/span&gt; += &lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="n"&gt;number&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;


&amp;gt;&amp;gt;&amp;gt; &lt;span class="sr"&gt;m = Mutable(3)&lt;/span&gt;
&lt;span class="sr"&gt;&amp;gt;&amp;gt;&amp;gt; id(m)&lt;/span&gt;
&lt;span class="sr"&gt;140606244895432&lt;/span&gt;
&lt;span class="sr"&gt;&amp;gt;&amp;gt;&amp;gt; m +=&lt;/span&gt; &lt;span class="n"&gt;Mutable&lt;/span&gt;(&lt;span class="mi"&gt;4&lt;/span&gt;)
&amp;gt;&amp;gt;&amp;gt; &lt;span class="sr"&gt;m.number&lt;/span&gt;
&lt;span class="sr"&gt;7&lt;/span&gt;
&lt;span class="sr"&gt;&amp;gt;&amp;gt;&amp;gt; id(m)&lt;/span&gt;
&lt;span class="sr"&gt;140606244895432&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不可变对象:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Immutable:&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;number&lt;/span&gt;):
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_number&lt;/span&gt; = &lt;span class="n"&gt;number&lt;/span&gt;

    &lt;span class="nv"&gt;@property&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_number&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__iadd__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;other&lt;/span&gt;):
        &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;不可变对象，返回一个新的对象&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__class__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_number&lt;/span&gt; + &lt;span class="n"&gt;other&lt;/span&gt;.&lt;span class="n"&gt;number&lt;/span&gt;)


&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;im&lt;/span&gt; = &lt;span class="n"&gt;Immutable&lt;/span&gt;(&lt;span class="mi"&gt;3&lt;/span&gt;)
&amp;gt;&amp;gt;&amp;gt; &lt;span class="n"&gt;id&lt;/span&gt;(&lt;span class="nb"&gt;im&lt;/span&gt;)
&lt;span class="mi"&gt;140606234970432&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;im&lt;/span&gt; += &lt;span class="n"&gt;Immutable&lt;/span&gt;(&lt;span class="mi"&gt;4&lt;/span&gt;)
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nb"&gt;im&lt;/span&gt;.&lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="n"&gt;id&lt;/span&gt;(&lt;span class="nb"&gt;im&lt;/span&gt;)
&lt;span class="mi"&gt;140606245096192&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__"&gt;3. Data model &amp;mdash; Python 3.5.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-31:2016/01/python-plus-work-on-immutable-or-mutable-object.md.html</guid></item><item><title>Tubeytoons：白骨累累</title><link>https://mozillazg.com/2016/01/bone-pile.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/bone-pile"&gt;http://tubeytoons.com/comic/bone-pile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="bone-pile.zh-cn.png" src="/static/images/comics/bone-pile.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-30:2016/01/bone-pile.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>使用 sqlalchemy 时如何配置使用 postgresql 的 uuid 类型</title><link>https://mozillazg.com/2016/01/sqlalchemy-use-postgresql-uuid.html</link><description>&lt;p&gt;在 sqlalchemy 中 postgresql 的 uuid 类型对象是： 
&lt;code&gt;sqlalchemy.dialects.postgresql.UUID&lt;/code&gt;, 所以基本的用法是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.dialects.postgresql&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面重点要说的就是如何设置自动生成随机的 uuid。&lt;/p&gt;
&lt;p&gt;第一种办法是，使用 python 的 &lt;code&gt;uuid&lt;/code&gt; 模块生成 uuid:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id = Column(UUID, default=lambda: str(uuid.uuid4()))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种办法（推荐）是，服务端去生成 uuid 之 &lt;code&gt;gen_random_uuid()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;postgreql&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gen_random_uuid()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gen_random_uuid()&lt;/code&gt; 并不是默认可用的，需要在数据库中安装 &lt;code&gt;pgcrypto&lt;/code&gt; 模块（下面的操作在 postgresql 数据库控制台中操作）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# \c db_name
# create extension pgcrypto;
CREATE EXTENSION
# select gen_random_uuid();
           gen_random_uuid            
--------------------------------------
 52f3e12b-b42a-47df-80de-6bfd9396b87e
(1 row)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三种办法是，服务端去生成 uuid 之 &lt;code&gt;uuid_generate_v4()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id = Column(UUID, server_default=text(&amp;quot;uuid_generate_v4()&amp;quot;))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要在数据库中安装 &lt;code&gt;uuid-ossp&lt;/code&gt; 模块：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# \c db_name
# create extension &amp;quot;uuid-ossp&amp;quot;;
CREATE EXTENSION
# select uuid_generate_v4();
           uuid_generate_v4           
--------------------------------------
 53153822-8516-45d7-8804-9792439e449a
(1 row)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.sqlalchemy.org/en/rel_1_1/dialects/postgresql.html#sqlalchemy.dialects.postgresql.UUID"&gt;PostgreSQL &amp;mdash; SQLAlchemy 1.1 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.sqlalchemy.org/en/rel_1_1/core/defaults.html#server-side-defaults"&gt;Column Insert/Update Defaults &amp;mdash; SQLAlchemy 1.1 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/20537690/1804866"&gt;How to set a column default to a PostgreSQL function using SQLAlchemy? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/docs/9.5/static/pgcrypto.html"&gt;PostgreSQL: Documentation: 9.5: pgcrypto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/docs/9.5/static/uuid-ossp.html"&gt;PostgreSQL: Documentation: 9.5: uuid-ossp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-30:2016/01/sqlalchemy-use-postgresql-uuid.html</guid><category>sqlalchemy</category><category>postgresql</category></item><item><title>Tubeytoons：火星</title><link>https://mozillazg.com/2016/01/the-martian.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/the-martian"&gt;http://tubeytoons.com/comic/the-martian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="the-martian.zh-cn.png" src="/static/images/comics/the-martian.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;the martian       &lt;br /&gt;
火星&lt;/p&gt;
&lt;p&gt;thank god you're here!
I had to drink my own piss
for two months!       &lt;br /&gt;
谢天谢地你们终于来了！
我都喝了两个月自己的尿了！&lt;/p&gt;
&lt;p&gt;dude, there's water right here    &lt;br /&gt;
伙计，那里就有水&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 29 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-29:2016/01/the-martian.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Tubeytoons：神奇宝贝大战</title><link>https://mozillazg.com/2016/01/pokemon-battle.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/pokemon-battle"&gt;http://tubeytoons.com/comic/pokemon-battle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pokemon-battle.zh-cn.png" src="/static/images/comics/pokemon-battle.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-28:2016/01/pokemon-battle.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Victims of Circumsolar #65：过期</title><link>https://mozillazg.com/2016/01/65.expired.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.victimsofcircumsolar.com/comic/expired/"&gt;http://www.victimsofcircumsolar.com/comic/expired/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="65.expired.zh-cn.png" src="/static/images/comics/65.expired.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-27:2016/01/65.expired.zh-cn.html</guid><category>Victims of Circumsolar</category></item><item><title>buttersafe：再见了</title><link>https://mozillazg.com/2016/01/2007-05-01-jkbird.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2007/05/01/jk-bird/"&gt;http://buttersafe.com/2007/05/01/jk-bird/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2007-05-01-jkbird.zh-cn.png" src="/static/images/comics/2007-05-01-jkbird.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-26:2016/01/2007-05-01-jkbird.zh-cn.html</guid><category>buttersafe</category></item><item><title>如何在 centos 7 上安装 postgresql 9.5</title><link>https://mozillazg.com/2016/01/install-postgresql-9.5-on-centos-7.html</link><description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 yum 源（地址从 &lt;a href="http://yum.postgresql.org/repopackages.php"&gt;http://yum.postgresql.org/repopackages.php&lt;/a&gt; 获取）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install http://yum.postgresql.org/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;code&gt;postgresql95-server&lt;/code&gt; 和 &lt;code&gt;postgresql95-contrib&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install postgresql95-server postgresql95-contrib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装后，可执行文件在 &lt;code&gt;/usr/pgsql-9.5/bin/&lt;/code&gt;， 数据和配置文件在 &lt;code&gt;/var/lib/pgsql/9.5/data/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认不支持密码认证，修改 &lt;code&gt;pg_hab.conf&lt;/code&gt; 将 &lt;code&gt;ident&lt;/code&gt; 替换为 &lt;code&gt;md5&lt;/code&gt; （可选）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /var/lib/pgsql/9.5/data/pg_hba.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微调其他配置项（可选）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vim /var/lib/pgsql/9.5/data/postgresql.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start postgresql-9.5.service
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开机自动启动:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl enable postgresql-9.5.service
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/download/linux/redhat/"&gt;PostgreSQL: Linux downloads (Red Hat family)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/docs/9.5/static/auth-pg-hba-conf.html"&gt;PostgreSQL: Documentation: 9.5: The pg_hba.conf File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-26:2016/01/install-postgresql-9.5-on-centos-7.html</guid><category>centos</category><category>postgresql</category></item><item><title>buttersafe：谢谢奶奶</title><link>https://mozillazg.com/2016/01/2012-11-15-thanksgrandma.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2012/11/15/thanks-grandma/"&gt;http://buttersafe.com/2012/11/15/thanks-grandma/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2012-11-15-thanksgrandma.zh-cn.png" src="/static/images/comics/2012-11-15-thanksgrandma.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-25:2016/01/2012-11-15-thanksgrandma.zh-cn.html</guid><category>buttersafe</category></item><item><title>Tubeytoons：下班</title><link>https://mozillazg.com/2016/01/off-duty.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/off-duty"&gt;http://tubeytoons.com/comic/off-duty&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="off-duty.zh-cn.png" src="/static/images/comics/off-duty.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-24:2016/01/off-duty.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Tubeytoons：正确答案</title><link>https://mozillazg.com/2016/01/correct-answer.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://tubeytoons.com/comic/correct-answer"&gt;http://tubeytoons.com/comic/correct-answer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="correct-answer.zh-cn.png" src="/static/images/comics/correct-answer.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-23:2016/01/correct-answer.zh-cn.html</guid><category>Tubeytoons</category></item><item><title>Cyanide &amp; Happiness #1460：海伦凯勒只是口渴了</title><link>https://mozillazg.com/2016/01/1460,helen-keller-was-just-thirsty.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1460/"&gt;Cyanide &amp;amp; Happiness #1460 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1460,helen-keller-was-just-thirsty.zh-cn.png" src="/static/images/comics/1460,helen-keller-was-just-thirsty.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, helen keller!
what's new today?     &lt;br /&gt;
嘿，海伦凯勒！
今天咋样？&lt;/p&gt;
&lt;p&gt;wa-ter    &lt;br /&gt;
水&lt;/p&gt;
&lt;p&gt;really? that's it?
come find me when you've
got something new to say... 
真的？就这样？
当你有一些新鲜事可说的时候
再来找我吧。。。&lt;/p&gt;
&lt;p&gt;water...
水。。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-22:2016/01/1460,helen-keller-was-just-thirsty.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4185：晨间咖啡</title><link>https://mozillazg.com/2016/01/4185.amcoffee.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4185/"&gt;Cyanide &amp;amp; Happiness #4185 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4185.amcoffee.zh-cn.png" src="/static/images/comics/4185.amcoffee.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;don't talk to me until I've
had my morning coffee heh heh heh!        &lt;br /&gt;
在我喝完晨间咖啡前别跟我说话，呵呵呵！&lt;/p&gt;
&lt;p&gt;slap  crash   &lt;br /&gt;
啪  砰&lt;/p&gt;
&lt;p&gt;what?! what was that for, man?    &lt;br /&gt;
干嘛呢？！伙计，你为什么这么做？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-21:2016/01/4185.amcoffee.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Berkeley Mews #918：汉·索洛</title><link>https://mozillazg.com/2016/01/2015-12-17-han-solo.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.berkeleymews.com/?p=918"&gt;http://www.berkeleymews.com/?p=918&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-12-17-han-solo.zh-cn.png" src="/static/images/comics/2015-12-17-han-solo.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-20:2016/01/2015-12-17-han-solo.zh-cn.html</guid><category>Berkeley Mews</category></item><item><title>Cyanide &amp; Happiness #4183：打猎</title><link>https://mozillazg.com/2016/01/4183.thehunt.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4183/"&gt;Cyanide &amp;amp; Happiness #4183 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4183.thehunt.zh-cn.png" src="/static/images/comics/4183.thehunt.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;alright... steady...
steady....        &lt;br /&gt;
好的。。。稳住。。。稳住。。。&lt;/p&gt;
&lt;p&gt;wait... is that a... oh my god...         &lt;br /&gt;
等一下。。。那是。。。哦，天啦。。。&lt;/p&gt;
&lt;p&gt;oh jesus christ.
what are they doing?!
oh no. oh no...   &lt;br /&gt;
哦，耶稣。
他们在做什么？！
哦，不。哦，不。。。&lt;/p&gt;
&lt;p&gt;that's disgusting.        &lt;br /&gt;
实在是太令人气愤了。&lt;/p&gt;
&lt;p&gt;ooh, turducken!   &lt;br /&gt;
哦哦，火鸡！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 19 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-19:2016/01/4183.thehunt.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4180：假装游戏</title><link>https://mozillazg.com/2016/01/4180.pretend.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4180/"&gt;Cyanide &amp;amp; Happiness #4180 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4180.pretend.zh-cn.png" src="/static/images/comics/4180.pretend.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;daddy? can we play pretend?       &lt;br /&gt;
爹地？我们能一起玩假装游戏吗？&lt;/p&gt;
&lt;p&gt;of course!    &lt;br /&gt;
当然可以！&lt;/p&gt;
&lt;p&gt;just pretend I'm playing with you!    &lt;br /&gt;
只需假装我在跟你玩游戏就可以了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-18:2016/01/4180.pretend.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1730：咽下去了</title><link>https://mozillazg.com/2016/01/1730.Id-be-surprised-if-there-wasnt-a-porno-that-started-this-way.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1730/"&gt;Cyanide &amp;amp; Happiness #1730 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1730.Id-be-surprised-if-there-wasnt-a-porno-that-started-this-way.zh-cn.png" src="/static/images/comics/1730.Id-be-surprised-if-there-wasnt-a-porno-that-started-this-way.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-17:2016/01/1730.Id-be-surprised-if-there-wasnt-a-porno-that-started-this-way.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1729：男扮女装</title><link>https://mozillazg.com/2016/01/1729.drag.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1729/"&gt;Cyanide &amp;amp; Happiness #1729 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1729.drag.zh-cn.png" src="/static/images/comics/1729.drag.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i'm a drag queen!      &lt;br /&gt;
我是男扮女装王后！&lt;/p&gt;
&lt;p&gt;i'm a drag king!      &lt;br /&gt;
我是男扮女装国王！&lt;/p&gt;
&lt;p&gt;i'm a dragon!     &lt;br /&gt;
我是龙！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-16:2016/01/1729.drag.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2418：呼啦圈</title><link>https://mozillazg.com/2016/01/2418.comicjesushula1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2418/"&gt;Cyanide &amp;amp; Happiness #2418 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2418.comicjesushula1.zh-cn.png" src="/static/images/comics/2418.comicjesushula1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-15:2016/01/2418.comicjesushula1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4178：说不</title><link>https://mozillazg.com/2016/01/4178.sayno.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4178/"&gt;Cyanide &amp;amp; Happiness #4178 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4178.sayno.zh-cn.png" src="/static/images/comics/4178.sayno.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-14:2016/01/4178.sayno.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4176：咖啡</title><link>https://mozillazg.com/2016/01/4176.women-coffee2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4176/"&gt;Cyanide &amp;amp; Happiness #4176 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4176.women-coffee2.zh-cn.png" src="/static/images/comics/4176.women-coffee2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-13:2016/01/4176.women-coffee2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：直面恐惧</title><link>https://mozillazg.com/2016/01/2015-12-29-saddestturtlesnewyearsresolution2016.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/12/29/saddest-turtles-new-years-resolution-2016/"&gt;http://buttersafe.com/2015/12/29/saddest-turtles-new-years-resolution-2016/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-12-29-saddestturtlesnewyearsresolution2016.zh-cn.png" src="/static/images/comics/2015-12-29-saddestturtlesnewyearsresolution2016.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;this year, I resolve...       &lt;br /&gt;
今年，我决定。。。&lt;/p&gt;
&lt;p&gt;to face my fears!!    &lt;br /&gt;
直面我的恐惧！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-12:2016/01/2015-12-29-saddestturtlesnewyearsresolution2016.zh-cn.html</guid><category>buttersafe</category></item><item><title>如何获取 docker 容器(container)的 ip 地址</title><link>https://mozillazg.com/2016/01/docker-get-containers-ip-address.html</link><description>&lt;p&gt;主要命令是 &lt;code&gt;docker inspect&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker inspect --format &lt;span class="s1"&gt;&amp;#39;{{ .NetworkSettings.IPAddress }}&amp;#39;&lt;/span&gt; 1f7d8f36523c
172.17.0.6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以考虑在 ~/.bashrc 中写一个 bash 函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function docker_ip() {&lt;/span&gt;
&lt;span class="x"&gt;    sudo docker inspect --format &amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;.NetworkSettings.IPAddress&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;#39; $1&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;source ~/.bashrc&lt;/code&gt; 然后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker_ip 1f7d8f36523c
172.17.0.6
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-12:2016/01/docker-get-containers-ip-address.html</guid></item><item><title>Cyanide &amp; Happiness #4175：基督教电影</title><link>https://mozillazg.com/2016/01/4175.slasher-film.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4175/"&gt;Cyanide &amp;amp; Happiness #4175 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4175.slasher-film.zh-cn.png" src="/static/images/comics/4175.slasher-film.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;no! stop! please!         &lt;br /&gt;
不！停下来！求你了！&lt;/p&gt;
&lt;p&gt;why did you kill my friends!
what do you want?!    &lt;br /&gt;
为什么你要杀害我的朋友！
你想要什么？！&lt;/p&gt;
&lt;p&gt;no! no! nooo!         &lt;br /&gt;
不！不！不不不！&lt;/p&gt;
&lt;p&gt;my friends!   &lt;br /&gt;
我的朋友！&lt;/p&gt;
&lt;p&gt;grandpa?          &lt;br /&gt;
爷爷？&lt;/p&gt;
&lt;p&gt;now showing:  &lt;br /&gt;
carnality &lt;br /&gt;
a christian horror movie      &lt;br /&gt;
正在放映：     &lt;br /&gt;
欲望        &lt;br /&gt;
一部基督教恐怖片        &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-11:2016/01/4175.slasher-film.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4174：轻度脑损伤</title><link>https://mozillazg.com/2016/01/4174.braindamagehayhayhay.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4174/"&gt;Cyanide &amp;amp; Happiness #4174 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4174.braindamagehayhayhay.zh-cn.png" src="/static/images/comics/4174.braindamagehayhayhay.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i'm sorry sir,
but after the car crash you
have minor brain damage       &lt;br /&gt;
很抱歉，先生，车祸过后你有轻度的脑损伤&lt;/p&gt;
&lt;p&gt;phew, that's a relief!        &lt;br /&gt;
呼，这下我放心了！&lt;/p&gt;
&lt;p&gt;heeeeee       &lt;br /&gt;
帮帮帮帮&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-10:2016/01/4174.braindamagehayhayhay.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>git clone 时使用了 --depth 后，如何再重新拉取全部的历史</title><link>https://mozillazg.com/2016/01/git-revert-depth-1.html</link><description>&lt;p&gt;有时我们为了加快 clone 的速度会使用 &lt;code&gt;--depth&lt;/code&gt; 参数，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://xxx/xxx.git --depth 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我们之后要把之前的历史重新再 &lt;code&gt;pull&lt;/code&gt; 下来呢？
比如要把本地的仓库 &lt;code&gt;push&lt;/code&gt; 到一个新的空仓库（
会出现 &lt;code&gt;error: failed to push some refs&lt;/code&gt; 错误
）。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;--unshallow&lt;/code&gt; 参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull --unshallow
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-10:2016/01/git-revert-depth-1.html</guid></item><item><title>Cyanide &amp; Happiness #2273：礼物</title><link>https://mozillazg.com/2016/01/2273.presnt.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2273/"&gt;Cyanide &amp;amp; Happiness #2273 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2273.presnt.zh-cn.png" src="/static/images/comics/2273.presnt.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;aw, honey! you shouldn't have!    &lt;br /&gt;
哈，亲爱的！你没必要这样！&lt;/p&gt;
&lt;p&gt;merry christmas, my darling   &lt;br /&gt;
亲爱的，圣诞节快乐&lt;/p&gt;
&lt;p&gt;I wonder what's inside!       &lt;br /&gt;
我很好奇里面是什么！&lt;/p&gt;
&lt;p&gt;is that a baby?           &lt;br /&gt;
那是个婴儿？&lt;/p&gt;
&lt;p&gt;was a baby    &lt;br /&gt;
曾经是个婴儿&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-09:2016/01/2273.presnt.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4171：姐姐</title><link>https://mozillazg.com/2016/01/4171.sister.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4171/"&gt;Cyanide &amp;amp; Happiness #4171 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4171.sister.zh-cn.png" src="/static/images/comics/4171.sister.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;is my sister here, yet?       &lt;br /&gt;
我姐姐来了吗？&lt;/p&gt;
&lt;p&gt;no, why do you keep asking?   &lt;br /&gt;
没有，为什么你一直问这个？&lt;/p&gt;
&lt;p&gt;she's going to try to steal
the spotlight on my special day!
I just know she will!     &lt;br /&gt;
她会尝试在我的特殊日子里抢走属于我的关注!
我知道她会这么干的！&lt;/p&gt;
&lt;p&gt;you're just paranoid.         &lt;br /&gt;
你多疑了。&lt;/p&gt;
&lt;p&gt;behold!   &lt;br /&gt;
看啦！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-08:2016/01/4171.sister.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：一个简单的手术</title><link>https://mozillazg.com/2016/01/2011-04-14-ASimpleProcedure.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2011/04/14/a-simple-procedure/"&gt;http://buttersafe.com/2011/04/14/a-simple-procedure/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2011-04-14-ASimpleProcedure.zh-cn.png" src="/static/images/comics/2011-04-14-ASimpleProcedure.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;so you want me to remove the
mole from your face, eh?      &lt;br /&gt;
嗯，你想要我把这颗痣从你脸上移除掉？&lt;/p&gt;
&lt;p&gt;no problem!       &lt;br /&gt;
没问题！&lt;/p&gt;
&lt;p&gt;mole removal is a very standard,
very safe procedure. you'll
barely feel a thing!     &lt;br /&gt;
除痣是个非常常见，非常安全的手术。
你几乎不会感觉到一点异样！&lt;/p&gt;
&lt;p&gt;and there's a litter bandage
to help it heal. is there
anything else I can do for you?   &lt;br /&gt;
这点绷带有助于康复。还有其他事情我可以为您效劳的吗？&lt;/p&gt;
&lt;p&gt;can you also remove this
human from my butt?   &lt;br /&gt;
你能把这个人类从我的屁股上移除掉吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-07:2016/01/2011-04-14-ASimpleProcedure.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #3066：月亮</title><link>https://mozillazg.com/2016/01/3066.themoon.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3066/"&gt;Cyanide &amp;amp; Happiness #3066 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3066.themoon.zh-cn.png" src="/static/images/comics/3066.themoon.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I wanna put my art
on the internet but I'm
afraid of rejection.          &lt;br /&gt;
我想把我的艺术品放到网上，但是我害怕被嫌弃。&lt;/p&gt;
&lt;p&gt;dude, go for it.
you know what they say.   &lt;br /&gt;
哥们，试试吧。
俗话说的好。&lt;/p&gt;
&lt;p&gt;shoot for the moon!
even if you miss, you'll
end up among the stars.   &lt;br /&gt;
上天揽月吧！即便失败，你也会跌入繁星之中。&lt;/p&gt;
&lt;p&gt;extremely far away and probably dead.
which is where you belong.     &lt;br /&gt;
非常遥远而且还有可能会死亡。
这就是你的归宿。&lt;/p&gt;
&lt;p&gt;people say that?      &lt;br /&gt;
俗话这样说过？&lt;/p&gt;
&lt;p&gt;about you, yes.   &lt;br /&gt;
关于你，是的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-06:2016/01/3066.themoon.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>基于 Python 3 新增的函数注解（Function Annotations ）语法实现参数类型检查功能</title><link>https://mozillazg.com/2016/01/python-function-argument-type-check-base-on-function-annotations.html</link><description>&lt;h2&gt;函数注解（Function Annotations）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;函数注解语法&lt;/a&gt; 可以让你在定义函数的时候对参数和返回值添加注解：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def foobar(a: int, b: &amp;quot;it&amp;#39;s b&amp;quot;, c: str = 5) -&amp;gt; tuple:
    return a, b, c
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a: int&lt;/code&gt; 这种是注解参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c: str = 5&lt;/code&gt; 是注解有默认值的参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt; tuple&lt;/code&gt; 是注解返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注解的内容既可以是个类型也可以是个字符串，甚至表达式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def foobar(a: 1+1) -&amp;gt; 2 * 2:
    return a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那么如何获取我们定义的函数注解呢？至少有两种办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;__annotations__&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; foobar.__annotations__
{&amp;#39;a&amp;#39;: int, &amp;#39;b&amp;#39;: &amp;quot;it&amp;#39;s b&amp;quot;, &amp;#39;c&amp;#39;: str, &amp;#39;return&amp;#39;: tuple}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inspect.signature&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 获取函数参数&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;paraments&lt;/span&gt;
&lt;span class="n"&gt;mappingproxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OrderedDict&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a:int&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Parameter&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b:&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s b&amp;quot;&amp;quot;&amp;gt;), (&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;lt;Parameter &amp;quot;c:str=5&amp;quot;&amp;gt;)]))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 获取函数参数注解&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{k}: {a!r}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;     
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;it&amp;#39;s b&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;str&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 返回值注解&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_annotation&lt;/span&gt;
&lt;span class="nb"&gt;tuple&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然可以得到函数中定义的注解，那么我们就可以用它进行参数类型检查了。&lt;/p&gt;
&lt;h2&gt;类型检查&lt;/h2&gt;
&lt;p&gt;Python 解释器并不会基于函数注解来自动进行类型检查，需要我们自己去实现类型检查功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; foobar.__annotations__
{&amp;#39;a&amp;#39;: int, &amp;#39;b&amp;#39;: &amp;quot;it&amp;#39;s b&amp;quot;, &amp;#39;c&amp;#39;: str, &amp;#39;return&amp;#39;: tuple}

&amp;gt;&amp;gt;&amp;gt; foobar(a=&amp;#39;a&amp;#39;, b=2, c=3)
(&amp;#39;a&amp;#39;, 2, 3)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;既然通过 &lt;code&gt;inspect.signature&lt;/code&gt; 我们可以获取函数定义的参数的顺序以及函数注解，
那么我们就可以通过定义一个装饰器来检查传入函数的参数的类型是否跟函数注解相符，
这里实现的装饰器函数（check_type.py）如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding: utf8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Expected type {expected!r} for argument {argument}, &amp;#39;&lt;/span&gt;
           &lt;span class="s1"&gt;&amp;#39;but got type {got!r} with value {value!r}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 获取函数定义的参数&lt;/span&gt;
    &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;          &lt;span class="c1"&gt;# 参数有序字典&lt;/span&gt;
    &lt;span class="n"&gt;arg_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;   &lt;span class="c1"&gt;# 参数名称&lt;/span&gt;

    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;CheckItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CheckItem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;anno&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;check_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="c1"&gt;# collect args   *args 传入的参数以及对应的函数参数注解&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;arg_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg_keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;anno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotation&lt;/span&gt;
            &lt;span class="n"&gt;check_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CheckItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# collect kwargs  **kwargs 传入的参数以及对应的函数参数注解&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
           &lt;span class="n"&gt;anno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotation&lt;/span&gt;
           &lt;span class="n"&gt;check_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CheckItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# check type&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;check_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anno&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面来测试一下我们的装饰器:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@check
def foobar(a: int, b: str, c: float = 3.2) -&amp;gt; tuple:
    return a, b, c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;顺序传参测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; foobar(1, &amp;#39;b&amp;#39;)
(1, &amp;#39;b&amp;#39;, 3.2)

&amp;gt;&amp;gt;&amp;gt; foobar(1, &amp;#39;b&amp;#39;, 3.5)
(1, &amp;#39;b&amp;#39;, 3.5)

&amp;gt;&amp;gt;&amp;gt; foobar(&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;)
...
TypeError: Expected type &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; for argument a, but got type &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; with value &amp;#39;a

&amp;gt;&amp;gt;&amp;gt; foobar(1, 2)
...
TypeError: Expected type &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; for argument b, but got type &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; with value 2

&amp;gt;&amp;gt;&amp;gt; foobar(1, &amp;#39;b&amp;#39;, 3)
...
TypeError: Expected type &amp;lt;class &amp;#39;float&amp;#39;&amp;gt; for argument c, but got type &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; with value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;关键字传参:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; foobar(b=&amp;#39;b&amp;#39;, a=2)
(2, &amp;#39;b&amp;#39;, 3.2)
&amp;gt;&amp;gt;&amp;gt; foobar(b=&amp;#39;b&amp;#39;, a=2, c=3.5)
(2, &amp;#39;b&amp;#39;, 3.5)

&amp;gt;&amp;gt;&amp;gt;foobar(a=&amp;#39;foo&amp;#39;, b=&amp;#39;bar&amp;#39;)
...
TypeError: Expected type &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; for argument a, but got type &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; with value &amp;#39;foo&amp;#39;

&amp;gt;&amp;gt;&amp;gt; foobar(b=3, a=2)
...
TypeError: Expected type &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; for argument b, but got type &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; with value 3

&amp;gt;&amp;gt;&amp;gt; foobar(a=2, b=&amp;#39;bar&amp;#39;, c=3)
...
TypeError: Expected type &amp;lt;class &amp;#39;float&amp;#39;&amp;gt; for argument c, but got type &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; with value
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;借助于 Function Annotations 一个简单的参数类型检查的装饰器就这样实现了。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-3107/"&gt;PEP 3107 -- Function Annotations | Python.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-06:2016/01/python-function-argument-type-check-base-on-function-annotations.html</guid><category>python 3</category><category>Function Annotations</category></item><item><title>Cyanide &amp; Happiness #4168：书呆子</title><link>https://mozillazg.com/2016/01/4168.nerdy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4168/"&gt;Cyanide &amp;amp; Happiness #4168 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4168.nerdy.zh-cn.png" src="/static/images/comics/4168.nerdy.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;let me ask you this: are nerdy men a turn off?        &lt;br /&gt;
我让来问你一个问题：书呆子很让人讨厌吗？&lt;/p&gt;
&lt;p&gt;no way! in fact, I think knowledge is sexy!   &lt;br /&gt;
一点也不讨厌！事实上，我认为有知识的人非常有魅力！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-05:2016/01/4168.nerdy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4167：戒除</title><link>https://mozillazg.com/2016/01/4167.quitting1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4167/"&gt;Cyanide &amp;amp; Happiness #4167 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4167.quitting1.zh-cn.png" src="/static/images/comics/4167.quitting1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I don't need to drink to have fun,
I can quit anytime        &lt;br /&gt;
我不需要通过喝酒来获得快乐，
我随时都可以戒除&lt;/p&gt;
&lt;p&gt;you've tried to quit like 40 times    &lt;br /&gt;
你已经尝试戒酒将近40次了&lt;/p&gt;
&lt;p&gt;oh god, maybe I do have a promblem... &lt;br /&gt;
哦，天啦，可能我真的有点问题。。。&lt;/p&gt;
&lt;p&gt;I'm addicted to quitting          &lt;br /&gt;
我沉迷于戒除了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-04:2016/01/4167.quitting1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2988：小行星</title><link>https://mozillazg.com/2016/01/2988.asteroid.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2988/"&gt;Cyanide &amp;amp; Happiness #2988 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2988.asteroid.zh-cn.png" src="/static/images/comics/2988.asteroid.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh no.        &lt;br /&gt;
哦，不。&lt;/p&gt;
&lt;p&gt;an asteroid is about to hit
the earth!        &lt;br /&gt;
一颗小行星快要撞击地球了！&lt;/p&gt;
&lt;p&gt;how long to we have?!     &lt;br /&gt;
我们还有多长时间？！&lt;/p&gt;
&lt;p&gt;just long enough
for us to make love.      &lt;br /&gt;
刚好够我们做个爱。&lt;/p&gt;
&lt;p&gt;which is, like...
a long time. but not
a super long time.    &lt;br /&gt;
那个是，比喻。。。
很长的时间。但不是一个超级长的时间。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-03:2016/01/2988.asteroid.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3953：智者</title><link>https://mozillazg.com/2016/01/3953.wiseman.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3953/"&gt;Cyanide &amp;amp; Happiness #3953 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3953.wiseman.zh-cn.png" src="/static/images/comics/3953.wiseman.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I am stressed out!
my tires need fixed,
my phone is missing
and my neck hurts.        &lt;br /&gt;
我快崩溃了！
我的轮胎需要固定，我的手机丢了
同时我的脖子又受伤了。&lt;/p&gt;
&lt;p&gt;that reminds me of something
a wise man said.          &lt;br /&gt;
这让我想起了一个智者所说过的话。&lt;/p&gt;
&lt;p&gt;what?     &lt;br /&gt;
什么？&lt;/p&gt;
&lt;p&gt;nothing.      &lt;br /&gt;
没啥大不了的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-02:2016/01/3953.wiseman.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3950：口音</title><link>https://mozillazg.com/2016/01/3950.accents.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3950/"&gt;Cyanide &amp;amp; Happiness #3950 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3950.accents.zh-cn.png" src="/static/images/comics/3950.accents.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;could I get more water, please?       &lt;br /&gt;
能再给我来点水吗？&lt;/p&gt;
&lt;p&gt;right away.       &lt;br /&gt;
马上。&lt;/p&gt;
&lt;p&gt;so, how'd your blind date go?         &lt;br /&gt;
你的相亲进展咋样了？&lt;/p&gt;
&lt;p&gt;really well! he even has an accent!   &lt;br /&gt;
非常好！他甚至还有口音！&lt;/p&gt;
&lt;p&gt;I think accents are so sexy!      &lt;br /&gt;
我觉得有口音非常性感！&lt;/p&gt;
&lt;p&gt;me too!   &lt;br /&gt;
我也这么觉得！&lt;/p&gt;
&lt;p&gt;here is your water!   &lt;br /&gt;
你的水！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2016-01-01:2016/01/3950.accents.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4163：圣诞老人</title><link>https://mozillazg.com/2015/12/4163.santa.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4163/"&gt;Cyanide &amp;amp; Happiness #4163 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4163.santa.zh-cn.png" src="/static/images/comics/4163.santa.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;bobby... I need you to show
me what else you saw mommy doing
to santa claus.       &lt;br /&gt;
鲍比。。。我需要你给我演示一下你还看到妈妈
对圣诞老人做了什么。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-31:2015/12/4163.santa.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4161：西蒙说</title><link>https://mozillazg.com/2015/12/4161.simonsays.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4161/"&gt;Cyanide &amp;amp; Happiness #4161 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4161.simonsays.zh-cn.png" src="/static/images/comics/4161.simonsays.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;simon says: stand on one foot!        &lt;br /&gt;
西蒙说：金鸡独立！&lt;/p&gt;
&lt;p&gt;ok, simon says: touch your face!      &lt;br /&gt;
好的，西蒙说：摸你的脸！&lt;/p&gt;
&lt;p&gt;simon says: touch your-       &lt;br /&gt;
西蒙说：摸你的——&lt;/p&gt;
&lt;p&gt;wait! &lt;br /&gt;
等一下！&lt;/p&gt;
&lt;p&gt;why do we listen to simon, huh?
what has simon done for us?
are you with me?      &lt;br /&gt;
为什么我们要听西蒙的，哼嗯？
西蒙为我们做了什么？
你们同意我的观点不？&lt;/p&gt;
&lt;p&gt;¡Viva la Revolución!
革命万岁！&lt;/p&gt;
&lt;p&gt;西蒙说（simon says）：类似中文“你说我做”的游戏&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-30:2015/12/4161.simonsays.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1035：鹳</title><link>https://mozillazg.com/2015/12/1035.storks.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1035/"&gt;Cyanide &amp;amp; Happiness #1035 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1035.storks.zh-cn.png" src="/static/images/comics/1035.storks.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;wow, I can't believe we're
gonna be parents!     &lt;br /&gt;
哇，我不敢相信我们要当爹妈了！&lt;/p&gt;
&lt;p&gt;look!! it's hatching!!        &lt;br /&gt;
快看！！它正在孵化！！&lt;/p&gt;
&lt;p&gt;oh my god! it's a freak!!     &lt;br /&gt;
哦，天啦！是个怪胎！！&lt;/p&gt;
&lt;p&gt;don't cry, baby. it's be okay.    &lt;br /&gt;
宝贝，别哭。没事的。&lt;/p&gt;
&lt;p&gt;we'll just leave it on someone's
doorstep. who's gonna know?   &lt;br /&gt;
我们只需要把它放在某人的门前就可以了。谁会知道呢？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-29:2015/12/1035.storks.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3755：尿布</title><link>https://mozillazg.com/2015/12/3755.putdadoodooindadiaper.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3755/"&gt;Cyanide &amp;amp; Happiness #3755 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3755.putdadoodooindadiaper.zh-cn.png" src="/static/images/comics/3755.putdadoodooindadiaper.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I feel like babies have it easier
than adults. they get to wear diapers,
for example   &lt;br /&gt;
我觉得婴儿比成人更舒服。比如，他们可以穿尿布&lt;/p&gt;
&lt;p&gt;I don't want to wear a diaper.
I'd rather just poop my pants.    &lt;br /&gt;
我宁愿拉裤子也不想穿尿布。&lt;/p&gt;
&lt;p&gt;because I'm a grown up and can
make my own decisions     &lt;br /&gt;
因为我已经长大了，我可以自己做决定&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-28:2015/12/3755.putdadoodooindadiaper.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1824：床单</title><link>https://mozillazg.com/2015/12/1824.sheet.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1824/"&gt;Cyanide &amp;amp; Happiness #1824 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1824.sheet.zh-cn.png" src="/static/images/comics/1824.sheet.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I found what I'm going to be for
halloween         &lt;br /&gt;
我知道万圣节我要扮成啥了&lt;/p&gt;
&lt;p&gt;all I need is one bedsheet and
I'm a ghost!          &lt;br /&gt;
只需要一件床单，然后我就变成幽灵了！&lt;/p&gt;
&lt;p&gt;spooky, right?    &lt;br /&gt;
很恐怖，是吧？&lt;/p&gt;
&lt;p&gt;I'll go haunt the washing machine     &lt;br /&gt;
我要去纠缠洗衣机了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-27:2015/12/1824.sheet.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1363：吸</title><link>https://mozillazg.com/2015/12/1363.suck.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1363/"&gt;Cyanide &amp;amp; Happiness #1363 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1363.suck.zh-cn.png" src="/static/images/comics/1363.suck.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey baby! you should let me
suck more than your blood!        &lt;br /&gt;
嘿，宝贝！
你应该让我吸你的血！&lt;/p&gt;
&lt;p&gt;no way! freak!    &lt;br /&gt;
没门！怪物！&lt;/p&gt;
&lt;p&gt;that's ok, I have a backup plan       &lt;br /&gt;
没事，我有备用方案&lt;/p&gt;
&lt;p&gt;poof!
噗！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-26:2015/12/1363.suck.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1945：伤疤</title><link>https://mozillazg.com/2015/12/1945.scars.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1945/"&gt;Cyanide &amp;amp; Happiness #1945 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1945.scars.zh-cn.png" src="/static/images/comics/1945.scars.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;check out this sweet scar
I gave myself! chicks dig scars!      &lt;br /&gt;
快看这个我自己划的甜蜜伤疤！
女人喜欢伤疤！&lt;/p&gt;
&lt;p&gt;hey, boys! what are you... woah!
nice scar!    &lt;br /&gt;
嘿，男孩们！你们在。。。哇！
好棒的伤疤！&lt;/p&gt;
&lt;p&gt;wow! that sure is a sexy open wound!      &lt;br /&gt;
喔！那真是个性感的开放性伤口！&lt;/p&gt;
&lt;p&gt;hey! I like your severed limb!    &lt;br /&gt;
嘿！我喜欢你的断肢！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-25:2015/12/1945.scars.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4157：夹克</title><link>https://mozillazg.com/2015/12/4157.jacket.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4157/"&gt;Cyanide &amp;amp; Happiness #4157 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4157.jacket.zh-cn.png" src="/static/images/comics/4157.jacket.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;uh oh... that cute girl
is sitting on my jacket.          &lt;br /&gt;
呃，喔。。。那个可爱的女孩正坐在我的夹克上。&lt;/p&gt;
&lt;p&gt;I need my jacket back.
should I just walk up to her
and tell her?     &lt;br /&gt;
我要拿回我的夹克。我应该走到她那里然后告诉她吗？&lt;/p&gt;
&lt;p&gt;what if she thinks I'm
an idiot? what if she hates me?
what if - uh oh! she's looking
at me! don't screw this up!
ok, ok... here goes nothing!      &lt;br /&gt;
万一她觉得我是个傻瓜呢？
万一她恨我呢？
万一——呃，喔！她正在看着我！
别搞砸了！
没事，没事。。。没啥大不了的！&lt;/p&gt;
&lt;p&gt;being single is really hard.      &lt;br /&gt;
作为一只单身狗实在是太艰难了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 24 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-24:2015/12/4157.jacket.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3487：没啥事</title><link>https://mozillazg.com/2015/12/3487.onetimeigotanxrayformypeepeeandtheyfoundthegreatvalleyinsideit.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3487/"&gt;Cyanide &amp;amp; Happiness #3487 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3487.onetimeigotanxrayformypeepeeandtheyfoundthegreatvalleyinsideit.zh-cn.png" src="/static/images/comics/3487.onetimeigotanxrayformypeepeeandtheyfoundthegreatvalleyinsideit.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-23:2015/12/3487.onetimeigotanxrayformypeepeeandtheyfoundthegreatvalleyinsideit.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1649：打扰一下</title><link>https://mozillazg.com/2015/12/1649.excuse.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1649/"&gt;Cyanide &amp;amp; Happiness #1649 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1649.excuse.zh-cn.png" src="/static/images/comics/1649.excuse.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 22 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-22:2015/12/1649.excuse.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1802：X 光</title><link>https://mozillazg.com/2015/12/1802.xray.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1802/"&gt;Cyanide &amp;amp; Happiness #1802 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1802.xray.zh-cn.gif" src="/static/images/comics/1802.xray.zh-cn.gif" /&gt;&lt;/p&gt;
&lt;!--
I think my arm is broke         
我觉得我的胳膊断了

hmmm... I don't think it's
broken. let's get that x rayed          
唔。。。我不觉得它断了。让我们去照一下 X 光


our x ray machine is broken so
I'm going to need you to lick
your hand           
我们的 X 光机器坏了，因此我需要你舔一下你的手


and touch that outlet           
然后，摸一下那个插座


no, you were right it is broken.        
嗯，你是对的，它确实断了。
--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-21:2015/12/1802.xray.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1722：尖叫</title><link>https://mozillazg.com/2015/12/1722.scream.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1722/"&gt;Cyanide &amp;amp; Happiness #1722 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1722.scream.zh-cn.png" src="/static/images/comics/1722.scream.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-20:2015/12/1722.scream.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：鱼</title><link>https://mozillazg.com/2015/12/2012-06-26-fishybusiness.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2012/06/26/fishybusiness/"&gt;http://buttersafe.com/2012/06/26/fishybusiness/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2012-06-26-fishybusiness.zh-cn.png" src="/static/images/comics/2012-06-26-fishybusiness.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey man, what's wrong?    &lt;br /&gt;
嘿，哥们，咋啦？&lt;/p&gt;
&lt;p&gt;sandi left. she's gone.       &lt;br /&gt;
珊蒂离开了。她走了。&lt;/p&gt;
&lt;p&gt;ah man, don't worry there are
plenty of other fish in the sea.      &lt;br /&gt;
呃，哥们，别担心，在海里还有很多其他的鱼。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-19:2015/12/2012-06-26-fishybusiness.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #2601：过去的好日子</title><link>https://mozillazg.com/2015/12/2601.comicgoodoldays1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2601/"&gt;Cyanide &amp;amp; Happiness #2601 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2601.comicgoodoldays1.zh-cn.png" src="/static/images/comics/2601.comicgoodoldays1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;watcha thinking about, daddy?         &lt;br /&gt;
爹地，你在想什么呢？&lt;/p&gt;
&lt;p&gt;I'm thinking about the good
old days, son             &lt;br /&gt;
儿子，我在怀念过去的好日子&lt;/p&gt;
&lt;p&gt;your childhood?   &lt;br /&gt;
你的童年？&lt;/p&gt;
&lt;p&gt;before you were born!     &lt;br /&gt;
你出生前的日子！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-18:2015/12/2601.comicgoodoldays1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2123：消防演习</title><link>https://mozillazg.com/2015/12/2123.firedrill.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2123/"&gt;Cyanide &amp;amp; Happiness #2123 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2123.firedrill.zh-cn.png" src="/static/images/comics/2123.firedrill.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;fire drill everyone!      &lt;br /&gt;
大家注意了，消防演习！&lt;/p&gt;
&lt;p&gt;don't panic! everyone from a single
file line         &lt;br /&gt;
不要慌张！所有人都排成一排&lt;/p&gt;
&lt;p&gt;please proceed to the emergency
exit located to your left     &lt;br /&gt;
请前往位于你们左边的紧急出口处&lt;/p&gt;
&lt;p&gt;come on, people!
let's move it         &lt;br /&gt;
快点，伙计们！动起来&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-17:2015/12/2123.firedrill.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1104：美人鱼</title><link>https://mozillazg.com/2015/12/1104.real.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1104/"&gt;Cyanide &amp;amp; Happiness #1104 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1104.real.zh-cn.png" src="/static/images/comics/1104.real.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;woah! I've never seen a real
mermaid before        &lt;br /&gt;
哇哦！我之前从没见过一条真正的美人鱼&lt;/p&gt;
&lt;p&gt;I am not a mermaid!       &lt;br /&gt;
我不是美人鱼！&lt;/p&gt;
&lt;p&gt;my legs were stolen from me       &lt;br /&gt;
我的腿被偷了&lt;/p&gt;
&lt;p&gt;what do you mean?         &lt;br /&gt;
你是啥意思？&lt;/p&gt;
&lt;p&gt;get him!      &lt;br /&gt;
抓住他！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-16:2015/12/1104.real.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2473：蜘蛛网</title><link>https://mozillazg.com/2015/12/2473.comicspiderweb1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2473/"&gt;Cyanide &amp;amp; Happiness #2473 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2473.comicspiderweb1.zh-cn.png" src="/static/images/comics/2473.comicspiderweb1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;help me! I'm trapped in this
giant spider web!             &lt;br /&gt;
救我！我被困在这张巨大的蜘蛛网里了！&lt;/p&gt;
&lt;p&gt;oh no! here it comes!     &lt;br /&gt;
哦，不！它过来了！&lt;/p&gt;
&lt;p&gt;wait a minute- thats not
a spider, thats a spider moth         &lt;br /&gt;
等一下——那不是蜘蛛，那是个蜘蛛蛾&lt;/p&gt;
&lt;p&gt;why couldn't it be a spider?      &lt;br /&gt;
为什么它不是一只蜘蛛呢？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-15:2015/12/2473.comicspiderweb1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1270：生日快乐</title><link>https://mozillazg.com/2015/12/1270.sexiest-comic-ever.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1270/"&gt;Cyanide &amp;amp; Happiness #1270 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1270.sexiest-comic-ever.zh-cn.png" src="/static/images/comics/1270.sexiest-comic-ever.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;happy birthday to me!     &lt;br /&gt;
祝我生日快乐！&lt;/p&gt;
&lt;p&gt;wait, gross, did you leave
your tampon in?   &lt;br /&gt;
等一下，好恶心，你把你的卫生棉条落里面了？&lt;/p&gt;
&lt;p&gt;that's not a tompon...        &lt;br /&gt;
那不是卫生棉条。。。&lt;/p&gt;
&lt;p&gt;happy birthday!       &lt;br /&gt;
生日快乐！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-14:2015/12/1270.sexiest-comic-ever.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2249：礼物</title><link>https://mozillazg.com/2015/12/2249.get.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2249/"&gt;Cyanide &amp;amp; Happiness #2249 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2249.get.zh-cn.png" src="/static/images/comics/2249.get.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;so, hoeny, what did you get
me for christmas?     &lt;br /&gt;
亲爱的，你给我买什么圣诞礼物了？&lt;/p&gt;
&lt;p&gt;pregnant      &lt;br /&gt;
怀孕&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-13:2015/12/2249.get.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2428：蜗牛</title><link>https://mozillazg.com/2015/12/2428.snail.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2428/"&gt;Cyanide &amp;amp; Happiness #2428 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2428.snail.zh-cn.png" src="/static/images/comics/2428.snail.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-12:2015/12/2428.snail.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3200：钱包</title><link>https://mozillazg.com/2015/12/3200.purse.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3200/"&gt;Cyanide &amp;amp; Happiness #3200 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3200.purse.zh-cn.png" src="/static/images/comics/3200.purse.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-11:2015/12/3200.purse.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4135：成绩单</title><link>https://mozillazg.com/2015/12/4135.report-card2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4135/"&gt;Cyanide &amp;amp; Happiness #4135 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4135.report-card2.zh-cn.png" src="/static/images/comics/4135.report-card2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-10:2015/12/4135.report-card2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2909：搭讪台词</title><link>https://mozillazg.com/2015/12/2909.comicpickupline1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2909/"&gt;Cyanide &amp;amp; Happiness #2909 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2909.comicpickupline1.zh-cn.png" src="/static/images/comics/2909.comicpickupline1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;pick up lines
搭讪台词&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-09:2015/12/2909.comicpickupline1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3461：大人</title><link>https://mozillazg.com/2015/12/3461.a-man.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3461/"&gt;Cyanide &amp;amp; Happiness #3461 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3461.a-man.zh-cn.png" src="/static/images/comics/3461.a-man.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-08:2015/12/3461.a-man.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Victims of Circumsolar #114：飞得高</title><link>https://mozillazg.com/2015/12/114.flyinghigh2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.victimsofcircumsolar.com/comic/flying-high/"&gt;http://www.victimsofcircumsolar.com/comic/flying-high/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="114.flyinghigh2.zh-cn.png" src="/static/images/comics/114.flyinghigh2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;how'd you get up there?       &lt;br /&gt;
你是怎么飞到那个高度的？&lt;/p&gt;
&lt;p&gt;me? I worked hard for this!   &lt;br /&gt;
我？我通过努力到达这个高度！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-07:2015/12/114.flyinghigh2.zh-cn.html</guid><category>Victims of Circumsolar</category></item><item><title>Cyanide &amp; Happiness #2693：幽灵咨询</title><link>https://mozillazg.com/2015/12/2693.ask-a-ghost.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2693/"&gt;Cyanide &amp;amp; Happiness #2693 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2693.ask-a-ghost.zh-cn.png" src="/static/images/comics/2693.ask-a-ghost.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 06 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-06:2015/12/2693.ask-a-ghost.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：再见</title><link>https://mozillazg.com/2015/12/2008-10-09-Goodbye.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/10/09/goodbye/"&gt;http://buttersafe.com/2008/10/09/goodbye/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-10-09-Goodbye.zh-cn.png" src="/static/images/comics/2008-10-09-Goodbye.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;goodbye, greg.
I... I guess I'll never
see you again.        &lt;br /&gt;
再见，格雷格。
我。。。我想我再也见不到你了。&lt;/p&gt;
&lt;p&gt;don't screw this up, greg.
this is it. this is your last
goodbye. do not screw this up.        &lt;br /&gt;
别搞砸了，格雷格。
就这样。这是你最后的告别了。
别搞砸了。&lt;/p&gt;
&lt;p&gt;gloodbay, jarfiner.       &lt;br /&gt;
再见，简福儿。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 05 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-05:2015/12/2008-10-09-Goodbye.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #2739：爆米花</title><link>https://mozillazg.com/2015/12/2739.popcorn.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2739/"&gt;Cyanide &amp;amp; Happiness #2739 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2739.popcorn.zh-cn.gif" src="/static/images/comics/2739.popcorn.zh-cn.gif" /&gt;&lt;/p&gt;
&lt;p&gt;hey baby, want some popcorn?          &lt;br /&gt;
嘿，宝贝，要来点爆米花吗？&lt;/p&gt;
&lt;p&gt;the hole in the popcorn trick?
are you serious?      &lt;br /&gt;
在爆米花中戳个洞的恶作剧？
你是认真的？&lt;/p&gt;
&lt;p&gt;popcorn trick:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If one is at the movies with one's date, proceed to buy a extra large bucket of popcorn and place it on his lap during the movie. Cut a hole in the bottom of the bucket, and proceed to stick your bare penis in the hole (preferably bonered). When your date reaches in to grab popcorn, she will be delighted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://www.urbandictionary.com/define.php?term=popcorn%20trick"&gt;http://www.urbandictionary.com/define.php?term=popcorn%20trick&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-04:2015/12/2739.popcorn.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4133：给未来的信</title><link>https://mozillazg.com/2015/12/4133.depressingcomic2015222.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4133/"&gt;Cyanide &amp;amp; Happiness #4133 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4133.depressingcomic2015222.zh-cn.png" src="/static/images/comics/4133.depressingcomic2015222.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;dear future me
I hope you find this
in 20 years wen
your rich and famous and
you will be happy.        &lt;br /&gt;
亲爱的未来的我
我希望你能在二十年后发现这个，
那时你已经名利双收，
到时你会觉得很开心。&lt;/p&gt;
&lt;p&gt;by 7 years old me         &lt;br /&gt;
by 七岁的我&lt;/p&gt;
&lt;p&gt;20 years later        &lt;br /&gt;
二十年后&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-03:2015/12/4133.depressingcomic2015222.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4132：尿床</title><link>https://mozillazg.com/2015/12/4132.dcw10pt2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4132/"&gt;Cyanide &amp;amp; Happiness #4132 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4132.dcw10pt2.zh-cn.png" src="/static/images/comics/4132.dcw10pt2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;this is the best
sleepover ever!   &lt;br /&gt;
这是目前最棒的在朋友家过夜的经历！&lt;/p&gt;
&lt;p&gt;look! billy fell
asleep already!       &lt;br /&gt;
快看！比尔已经睡着了！&lt;/p&gt;
&lt;p&gt;did he pee himself?       &lt;br /&gt;
他尿床了？&lt;/p&gt;
&lt;p&gt;ew, gross!
hahaha!       &lt;br /&gt;
呃，确实呢！
哈哈哈哈！&lt;/p&gt;
&lt;p&gt;like a baby! haha!            &lt;br /&gt;
像个孩子一样！哈哈！&lt;/p&gt;
&lt;p&gt;you see, bedwetting is
just another sign that
your child has been touched.          &lt;br /&gt;
你瞧，尿床是另一个表明你
孩子被...摸过的迹象。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 02 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-02:2015/12/4132.dcw10pt2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：外来威胁</title><link>https://mozillazg.com/2015/12/2014-03-11-anoutsidethreat.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2014/03/11/an-outside-threat/"&gt;http://buttersafe.com/2014/03/11/an-outside-threat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2014-03-11-anoutsidethreat.zh-cn.png" src="/static/images/comics/2014-03-11-anoutsidethreat.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;commencing destruction
of all human civilization
in five seconds.      &lt;br /&gt;
开始在五秒钟之内毁灭人类文明。&lt;/p&gt;
&lt;p&gt;five... four...
three... two...           &lt;br /&gt;
五。。。四。。。
三。。。二。。。&lt;/p&gt;
&lt;p&gt;...one.
activate weapon.          &lt;br /&gt;
。。。一。
激活武器。&lt;/p&gt;
&lt;p&gt;funny cat videos          &lt;br /&gt;
搞笑喵咪视频&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-12-01:2015/12/2014-03-11-anoutsidethreat.zh-cn.html</guid><category>buttersafe</category></item><item><title>Django: 解决 OperationalError: (1093, "You can't specify target table 'xxx' for update in FROM clause")</title><link>https://mozillazg.com/2015/11/django-fix-operationalerror-1093-you-cant-specify-target-table-wedding-plan-for-update-in-from-clause.html</link><description>&lt;p&gt;&lt;img alt="" src="/static/images/django/djangopony.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源： &lt;a href="http://avalonstar.com/journal/2008/the-web-framework-for-ponies/"&gt;http://avalonstar.com/journal/2008/the-web-framework-for-ponies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;错误信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OperationalError: (1093, &amp;quot;You can&amp;#39;t specify target table &amp;#39;xxx&amp;#39; for update in FROM clause&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当使用类似如下代码时，会出现以上问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user_ids = User.objects.filter(
    pk__gt=10
).values_list(&amp;#39;pk&amp;#39;, flat=True)


User.objects.filter(id__in=user_ids).update(a=123)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法：将第一个结果转换为列表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user_ids = list(user_ids)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出现问题的原因是，上面报错的代码试图生成这样的 sql 语句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;update user set a=1234 where id in (
    select id from user where id &amp;gt; 10
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这条语句是有问题的。
而修改后的代码生成的 sql 语句是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;update user set a=1234 where id in (
    1, 2, 3
)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 30 Nov 2015 19:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-30:2015/11/django-fix-operationalerror-1093-you-cant-specify-target-table-wedding-plan-for-update-in-from-clause.html</guid></item><item><title>Cyanide &amp; Happiness #4131：人体炸弹</title><link>https://mozillazg.com/2015/11/4131.dcw_bomber.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4131/"&gt;Cyanide &amp;amp; Happiness #4131 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4131.dcw_bomber.zh-cn.png" src="/static/images/comics/4131.dcw_bomber.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-30:2015/11/4131.dcw_bomber.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4130：自闭症</title><link>https://mozillazg.com/2015/11/4130.depressingautism.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4130/"&gt;Cyanide &amp;amp; Happiness #4130 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4130.depressingautism.zh-cn.png" src="/static/images/comics/4130.depressingautism.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-29:2015/11/4130.depressingautism.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4127：爹地</title><link>https://mozillazg.com/2015/11/4127.dcw_daddy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4127/"&gt;Cyanide &amp;amp; Happiness #4127 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4127.dcw_daddy.zh-cn.png" src="/static/images/comics/4127.dcw_daddy.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;daddy, wake up...
I have to go to the bathroom.     &lt;br /&gt;
爹地，醒来啊。。。
我要去洗手间。&lt;/p&gt;
&lt;p&gt;please, daddy...
wake up. daddy, I have
to go to the bathroom!        &lt;br /&gt;
求你了，爹地。。。
醒来啊。爹地，我要去洗手间！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 28 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-28:2015/11/4127.dcw_daddy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2643：女孩</title><link>https://mozillazg.com/2015/11/2643.comicitsagirl1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2643/"&gt;Cyanide &amp;amp; Happiness #2643 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2643.comicitsagirl1.zh-cn.png" src="/static/images/comics/2643.comicitsagirl1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;congratulations, its a girl!      &lt;br /&gt;
恭喜，是个女孩！&lt;/p&gt;
&lt;p&gt;I'm pretty sure that's a boy      &lt;br /&gt;
我很确定那是个男孩&lt;/p&gt;
&lt;p&gt;oh, whoops! I even put "girl"
down on the birth certificate         &lt;br /&gt;
哦，该死！我都已经把“女孩”写到出生证明上了&lt;/p&gt;
&lt;p&gt;lemme go fix that     &lt;br /&gt;
让我去修正一下&lt;/p&gt;
&lt;p&gt;congratulations, its a girl!      &lt;br /&gt;
恭喜，是个女孩！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 27 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-27:2015/11/2643.comicitsagirl1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4126：云朵</title><link>https://mozillazg.com/2015/11/4126.cloud.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4126/"&gt;Cyanide &amp;amp; Happiness #4126 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4126.cloud.zh-cn.png" src="/static/images/comics/4126.cloud.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;look, that cloud
looks a bit like you!         &lt;br /&gt;
快看，那朵云看起来有点像你诶！&lt;/p&gt;
&lt;p&gt;I don't see it
我不这么认为&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-26:2015/11/4126.cloud.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4125：情报</title><link>https://mozillazg.com/2015/11/4125.knowingis.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4125/"&gt;Cyanide &amp;amp; Happiness #4125 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4125.knowingis.zh-cn.png" src="/static/images/comics/4125.knowingis.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;sir! sir! I've found
classified intel on
the enemy!             &lt;br /&gt;
长官！长官！我发现了敌军
的机密情报！&lt;/p&gt;
&lt;p&gt;they're moving units
along the coast?
this is great info!               &lt;br /&gt;
他们的部队正在沿着海岸移动？
这是个非常棒的信息！&lt;/p&gt;
&lt;p&gt;I'm glad it can be of use.
after all, "knowing is half
the battle!"              &lt;br /&gt;
我很高兴它有用。毕竟“战斗中一半的工作是了解情报”&lt;/p&gt;
&lt;p&gt;what's the other half?        &lt;br /&gt;
那另一半是什么呢？&lt;/p&gt;
&lt;p&gt;I don't know.         &lt;br /&gt;
我不知道。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-25:2015/11/4125.knowingis.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4123：玩偶</title><link>https://mozillazg.com/2015/11/4123.whatisitindeedpleasesomeonetellme.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4123/"&gt;Cyanide &amp;amp; Happiness #4123 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4123.whatisitindeedpleasesomeonetellme.zh-cn.png" src="/static/images/comics/4123.whatisitindeedpleasesomeonetellme.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;daddy, what's sex?        &lt;br /&gt;
爹地，性是什么？&lt;/p&gt;
&lt;p&gt;hold on son,
let me explain that
using puppets!        &lt;br /&gt;
儿子，等一下，
让我用玩偶给你解释一下！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-24:2015/11/4123.whatisitindeedpleasesomeonetellme.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4124：墓穴</title><link>https://mozillazg.com/2015/11/4124.grave.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4124/"&gt;Cyanide &amp;amp; Happiness #4124 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4124.grave.zh-cn.png" src="/static/images/comics/4124.grave.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;yeah...
just keep on digging
that grave...
嗯。。。
给我继续挖那个墓穴。。。。&lt;/p&gt;
&lt;p&gt;oh yeah... that's
a real nice grave...      &lt;br /&gt;
哦耶。。。
那可真是个好墓穴。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-23:2015/11/4124.grave.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>postgresql 全文检索功能搜索中文提示 “text-search query contains only stop words or doesn't contain lexemes, ignored”的解决办法</title><link>https://mozillazg.com/2015/11/postgresql-full-text-search-search-chinese-notice-text-search-query-contains-only-stop-words-or-doesn-t-contain-lexemes-ignored.html</link><description>&lt;p&gt;&lt;img alt="" src="/static/images/postgresql/tumblr_inline_nwxibtWTJU1rrl2l6_500.png" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源: &lt;a href="http://derpinews.tumblr.com/post/132078326118/were-back"&gt;http://derpinews.tumblr.com/post/132078326118/were-back&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近使用了一下 postgresql 的 full text search 功能，在开发机器上可以实现简单的搜索中文的功能，
但是到其他服务器上后总是出现可以搜索英文但是搜索中文却没有结果的情况。
通过在 postgres 的 shell 中执行程序生成的搜索语句后发现：当搜索条件是中文时，总是提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NOTICE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt; &lt;span class="n"&gt;lexemes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignored&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过大半天的查资料，验证之后，终于解决了这个问题。如果你也出现类似问题的话，可以检查是否有一样的问题：
数据库编码不是 &lt;code&gt;UTF-8&lt;/code&gt; 之类的支持中文的编码。&lt;/p&gt;
&lt;p&gt;P.S. 如果搜索英文也有这个问题的话，可以把搜索时的解释器由 &lt;code&gt;english&lt;/code&gt; 改成 &lt;code&gt;simple&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;to_tsvector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;somthing&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="nt"&gt;to_tsquery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;english&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s:*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;NOTICE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;text-search&lt;/span&gt; &lt;span class="nt"&gt;query&lt;/span&gt; &lt;span class="nt"&gt;contains&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;stop&lt;/span&gt; &lt;span class="nt"&gt;words&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;doesn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t contain lexemes, ignored&lt;/span&gt;
&lt;span class="s1"&gt; ?column? &lt;/span&gt;
&lt;span class="s1"&gt;----------&lt;/span&gt;
&lt;span class="s1"&gt; f&lt;/span&gt;
&lt;span class="s1"&gt;(1 row)&lt;/span&gt;

&lt;span class="s1"&gt;postgres=# SELECT to_tsvector(&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;somthing&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;) @@ to_tsquery(&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;simple&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;column&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
&lt;span class="nt"&gt;----------&lt;/span&gt;
 &lt;span class="nt"&gt;t&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--
##解析器

english -&gt; simple 。如果你搜索时使用的解释器是 `english` 的话改成 `simple` 或者安装的其他支持中文的解释器:
--&gt;

&lt;h2&gt;数据库编码&lt;/h2&gt;
&lt;p&gt;默认 postgresql 内的数据库编码是 &lt;code&gt;SQL_ASCII&lt;/code&gt; 编码，这个导致进行全文检索的时候没法搜索中文。
请看下面这个两个数据库，一个是 &lt;code&gt;SQL_ASCII&lt;/code&gt; 编码，一个是 &lt;code&gt;UTF8&lt;/code&gt; 编码。
相同的搜索语句结果也不一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;l&lt;/span&gt;
                                  &lt;span class="nt"&gt;List&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;databases&lt;/span&gt;
   &lt;span class="nt"&gt;Name&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="nt"&gt;Owner&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;Encoding&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="nt"&gt;Collate&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="nt"&gt;Ctype&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="nt"&gt;Access&lt;/span&gt; &lt;span class="nt"&gt;privileges&lt;/span&gt;   
&lt;span class="nt"&gt;-----------&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;----------&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;-----------&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;-------------&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;-------------&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;-----------------------&lt;/span&gt;
 &lt;span class="nt"&gt;db1&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;UTF8&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;en_US&lt;/span&gt;&lt;span class="nc"&gt;.UTF-8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;en_US&lt;/span&gt;&lt;span class="nc"&gt;.UTF-8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;Tc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;owner&lt;/span&gt;         &lt;span class="o"&gt;+&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;CTc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;owner&lt;/span&gt;
 &lt;span class="nt"&gt;db2&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;owner&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;SQL_ASCII&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;C&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;C&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;Tc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;owner&lt;/span&gt;           &lt;span class="o"&gt;+&lt;/span&gt;


&lt;span class="nt"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;c&lt;/span&gt; &lt;span class="nt"&gt;db1&lt;/span&gt;
&lt;span class="nt"&gt;db1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="nt"&gt;db1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;to_tsvector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;我们&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="nt"&gt;to_tsquery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;我:*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
 &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;column&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
&lt;span class="nt"&gt;----------&lt;/span&gt;
 &lt;span class="nt"&gt;t&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nt"&gt;db1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;

&lt;span class="nt"&gt;db1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;c&lt;/span&gt; &lt;span class="nt"&gt;db2&lt;/span&gt;
&lt;span class="nt"&gt;db2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="nt"&gt;db2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;to_tsvector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;我们&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="nt"&gt;to_tsquery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;我:*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;NOTICE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;text-search&lt;/span&gt; &lt;span class="nt"&gt;query&lt;/span&gt; &lt;span class="nt"&gt;contains&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;stop&lt;/span&gt; &lt;span class="nt"&gt;words&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;t&lt;/span&gt; &lt;span class="nt"&gt;contain&lt;/span&gt; &lt;span class="nt"&gt;lexemes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ignored&lt;/span&gt;
 &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;column&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
&lt;span class="nt"&gt;----------&lt;/span&gt;
 &lt;span class="nt"&gt;f&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nt"&gt;db2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面讲一下如何将数据库转换为 &lt;code&gt;UTF-8&lt;/code&gt; 编码。&lt;/p&gt;
&lt;h3&gt;修改数据库 Encoding, Collate, Ctype&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;备份要转换的数据库:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump --format=t -d db_name -U user_name -W -h 127.0.0.1 &amp;gt; dump.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新 &lt;code&gt;template1&lt;/code&gt; 的编码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;update pg_database set encoding = 6, datcollate = &amp;#39;en_US.UTF8&amp;#39;, datctype = &amp;#39;en_US.UTF8&amp;#39; where datname = &amp;#39;template1&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;drop 原有的数据库或者改名:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* 改名 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
ALTER&lt;span class="w"&gt; &lt;/span&gt;DATABASE&lt;span class="w"&gt; &lt;/span&gt;db_name&lt;span class="w"&gt; &lt;/span&gt;RENAME&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;db_name_bak&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;/* 删除 */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kr"&gt;drop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;db_name&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新创建数据库，指定编码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE db_name WITH ENCODING &amp;#39;UTF8&amp;#39; LC_COLLATE=&amp;#39;en_US.UTF-8&amp;#39; LC_CTYPE=&amp;#39;en_US.UTF-8&amp;#39; owner user_name TEMPLATE=template1;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库权限:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GRANT ALL PRIVILEGES ON DATABASE db_name to user_name;

\c db_name;
ALTER SCHEMA public OWNER to user_name;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO user_name;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO user_name;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恢复数据库数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_restore -d db_name -h 127.0.0.1 -U user_name &amp;lt; dump.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在再试一下应该已经可以正常搜索中文了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/16736891/pgerror-error-new-encoding-utf8-is-incompatible"&gt;http://stackoverflow.com/questions/16736891/pgerror-error-new-encoding-utf8-is-incompatible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/docs/9.4/static/multibyte.html"&gt;http://www.postgresql.org/docs/9.4/static/multibyte.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/380924/how-can-i-change-database-encoding-for-a-postgresql-database-using-sql-or-phppga"&gt;http://stackoverflow.com/questions/380924/how-can-i-change-database-encoding-for-a-postgresql-database-using-sql-or-phppga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coderwall.com/p/j-_mia/make-postgres-default-to-utf8"&gt;https://coderwall.com/p/j-_mia/make-postgres-default-to-utf8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wvanbergen/scoped_search/issues/23"&gt;https://github.com/wvanbergen/scoped_search/issues/23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ckan/ckan/pull/1838"&gt;https://github.com/ckan/ckan/pull/1838&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ruby-china.org/topics/14607"&gt;https://ruby-china.org/topics/14607&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kvesteri/sqlalchemy-searchable/issues/33"&gt;https://github.com/kvesteri/sqlalchemy-searchable/issues/33&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-23:2015/11/postgresql-full-text-search-search-chinese-notice-text-search-query-contains-only-stop-words-or-doesn-t-contain-lexemes-ignored.html</guid><category>postgresql</category></item><item><title>Cyanide &amp; Happiness #4121：沙发</title><link>https://mozillazg.com/2015/11/4121.couch.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4121/"&gt;Cyanide &amp;amp; Happiness #4121 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4121.couch.zh-cn.png" src="/static/images/comics/4121.couch.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;so... shall we go
somewhere more comfortable?
like your bed?        &lt;br /&gt;
那么。。。让我们去更舒服的地方吧？
比如你的床上？&lt;/p&gt;
&lt;p&gt;this is my bed.   &lt;br /&gt;
这就是我的床。&lt;/p&gt;
&lt;p&gt;oh... well. I'd still
like to get more comfortable...
didn't you say this couch
pulls out into a bed?     &lt;br /&gt;
哦。。。好吧。我仍然喜欢去更舒服的地方。。。
你不是说过这个沙发可以展开成一张床吗？&lt;/p&gt;
&lt;p&gt;it's not a "pull out couch."
that's just the nickname I gave it.   &lt;br /&gt;
这不是一个“折叠沙发。”那只是我给它取的一个外号。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-22:2015/11/4121.couch.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2598：狗屎</title><link>https://mozillazg.com/2015/11/2598.Dr.-Dre-is-a-poor-source-for-animal-care-advice.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2598/"&gt;Cyanide &amp;amp; Happiness #2598 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2598.Dr.-Dre-is-a-poor-source-for-animal-care-advice.zh-cn.png" src="/static/images/comics/2598.Dr.-Dre-is-a-poor-source-for-animal-care-advice.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;eww, your dog...
she's eating poop.        &lt;br /&gt;
呃，你的狗。。。
她在吃屎。&lt;/p&gt;
&lt;p&gt;well, you know what they say,
"you are what you eat."   &lt;br /&gt;
人们常说，“你吃啥就是啥。”&lt;/p&gt;
&lt;p&gt;so I guess my dog's the shit.         &lt;br /&gt;
所以，我想我的狗是个屎。&lt;/p&gt;
&lt;p&gt;but Dr.Dre says bitches AIN'T shit.       &lt;br /&gt;
但是，德瑞医生说了，母狗不是屎。&lt;/p&gt;
&lt;p&gt;yeah, well, Dr.Dre is a liar.     &lt;br /&gt;
耶，德瑞医生是个骗子。&lt;/p&gt;
&lt;p&gt;Dude's not even a real doctor.    &lt;br /&gt;
那家伙甚至不是一个真正的医生。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-21:2015/11/2598.Dr.-Dre-is-a-poor-source-for-animal-care-advice.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4119：让人讨厌</title><link>https://mozillazg.com/2015/11/4119.boring.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4119/"&gt;Cyanide &amp;amp; Happiness #4119 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4119.boring.zh-cn.png" src="/static/images/comics/4119.boring.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;everyone I know thinks
I'm a total bore.     &lt;br /&gt;
所有我认识的人都觉得我非常的让人讨厌。&lt;/p&gt;
&lt;p&gt;me too.   &lt;br /&gt;
我也是。&lt;/p&gt;
&lt;p&gt;wow, you are boring!          &lt;br /&gt;
哇，你太让人讨厌了！&lt;/p&gt;
&lt;p&gt;so are you!   &lt;br /&gt;
你也是！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-19:2015/11/4119.boring.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4118：清理</title><link>https://mozillazg.com/2015/11/4118.clean.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4118/"&gt;Cyanide &amp;amp; Happiness #4118 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4118.clean.zh-cn.png" src="/static/images/comics/4118.clean.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;this place is a mess!
you need to clean this up
immediately!      &lt;br /&gt;
这地方又乱又脏！你需要马上清理一下这些东西！&lt;/p&gt;
&lt;p&gt;mom, look around!     &lt;br /&gt;
妈妈，看看周围！&lt;/p&gt;
&lt;p&gt;there's literally nothing
around us but white space!    &lt;br /&gt;
我们周围除了空白啥东西也没有！&lt;/p&gt;
&lt;p&gt;you and I both know what really
needs to be clean...      &lt;br /&gt;
你和我都知道什么才是真正需要被清理的东西。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-18:2015/11/4118.clean.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>使用 weinre 远程调试微信页面</title><link>https://mozillazg.com/2015/11/how-to-debug-wechat-web-page-with-weinre.html</link><description>&lt;p&gt;&lt;img alt="" src="/static/images/weinre/weinre-demo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源： &lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/"&gt;https://people.apache.org/~pmuellr/weinre-docs/latest/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;weinre 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;weinre is WEb INspector REmote. Pronounced like the word "winery". Or maybe like the word "weiner". Who knows, really.&lt;/p&gt;
&lt;p&gt;weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it's designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.&lt;/p&gt;
&lt;p&gt;—— 摘自 &lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/Home.html"&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo npm -g install weinre
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;启动服务端&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;weinre --boundHost 0.0.0.0 --httpPort 8081
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开本地浏览器，访问 &lt;a href="http://localhost:8081"&gt;http://localhost:8081&lt;/a&gt; 可以看到一个 web 界面：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_7.png" /&gt;         &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Snip20151117_8.png" /&gt;&lt;/p&gt;
&lt;h2&gt;在待调试的页面中注入 weinre 代码&lt;/h2&gt;
&lt;p&gt;在页面中引入一个脚本就可以了，本例中是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://本机ip:8081/target/target-script-min.js#anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;远程调试&lt;/h2&gt;
&lt;p&gt;打开 &lt;a href="http://localhost:8081/client/#anonymous"&gt;http://localhost:8081/client/#anonymous&lt;/a&gt; 在这个页面进行调试:&lt;/p&gt;
&lt;p&gt;我们随便找一个公众号比如“语音云开放平台”，然后向这个公众号内的登录页面注入 &lt;code&gt;weinre&lt;/code&gt; 代码，
然后，我们就可以看到打开的页面了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-17-26_com.tencent.mm.png" /&gt;          &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Snip20151117_9.png" /&gt;         &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Snip20151117_10.png" /&gt;&lt;/p&gt;
&lt;h2&gt;修改 html&lt;/h2&gt;
&lt;p&gt;在调试页面内修改 html 内容会直接反映到移动端：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_13.png" /&gt;        &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-23-23_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;h2&gt;修改 css&lt;/h2&gt;
&lt;p&gt;比如修改 &lt;code&gt;background-color&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_14.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-25-12_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;h2&gt;执行 javascript&lt;/h2&gt;
&lt;p&gt;原先隐藏的菜单：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-18-16_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以在调试页面控制台里执行 javascript 把菜单显示出来：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_11.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-20-31_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;alert:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_15.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-26-05_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;更多内容请查阅 &lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/"&gt;官方文档&lt;/a&gt; ;)&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/"&gt;weinre 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 17 Nov 2015 20:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-17:2015/11/how-to-debug-wechat-web-page-with-weinre.html</guid><category>wechat</category><category>微信</category><category>weinre</category><category>移动端开发</category></item><item><title>使用 mitmproxy 搭建代理服务器的方式来调试微信开发</title><link>https://mozillazg.com/2015/11/how-to-debug-wechat-web-page-with-mitmproxy.html</link><description>&lt;p&gt;&lt;img alt="6adc8d35564a0044d1cec9e225f38794.png" src="/static/images/mitmproxy/6adc8d35564a0044d1cec9e225f38794.png" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a class="reference external" href="https://blog.selectel.ru/analiz-http-trafika-s-mitmproxy/"&gt;https://blog.selectel.ru/analiz-http-trafika-s-mitmproxy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲述如何使用代理服务器的方式本地调试已上线的
微信公众号内的网页。&lt;/p&gt;
&lt;p&gt;因为已经上线了，所以不能随便在线上服务器上修改代码增加 alert 之类的代码，也不能在线上启用 debug 模式。
所以，我们要通过在本地搭建代理服务器的方式来修改服务端返回
的信息，比如：将 jssdk 的调用改为 debug 模式，
替换页面内容为本地修改后的内容等等&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;mitmproxy 介绍&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;mitmproxy is a console tool that allows interactive examination and modification of HTTP traffic. It differs from mitmdump in that all flows are kept in memory, which means that it’s intended for taking and manipulating small-ish samples. Use the ? shortcut key to view, context-sensitive documentation from any mitmproxy screen.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;— 摘自 &lt;a class="reference external" href="http://docs.mitmproxy.org/en/latest/mitmproxy.html"&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;安装 mitmproxy&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们这里使用 mitmproxy 在 github 上的最新代码&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone git&amp;#64;github.com:mitmproxy/mitmproxy.git --depth=1
$ cd mitmproxy
$ virtualenv venv
$ source venv/bin/activate
$ pip install .
$
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-word"&gt;
&lt;h2 id="hidhello-word"&gt;hello word&lt;a class="headerlink" href="#hidhello-word" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直接执行 &lt;tt class="docutils literal"&gt;mitmproxy&lt;/tt&gt; 命令就会启动一个监听 &lt;tt class="docutils literal"&gt;0.0.0.0:8080&lt;/tt&gt; 的代理服务器:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snip20151116_1.png" src="/static/images/mitmproxy/Snip20151116_1.png" /&gt;
&lt;img alt="Snip20151116_2.png" src="/static/images/mitmproxy/Snip20151116_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是这个服务器不会修改任何服务器的返回内容，所以我们需要另一种启动方式 &lt;tt class="docutils literal"&gt;mitmproxy &lt;span class="pre"&gt;-s&lt;/span&gt; script.py&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;script.py 的内容如下，作用是将任意页面的响应改为 &lt;tt class="docutils literal"&gt;hello world&lt;/tt&gt; :&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;执行 &lt;tt class="docutils literal"&gt;mitmproxy &lt;span class="pre"&gt;-s&lt;/span&gt; script.py&lt;/tt&gt; 启动代理服务器，然后在手机上配置好 wifi 代理。
现在在手机浏览器上访问任意网页都将显示 &lt;tt class="docutils literal"&gt;hello world&lt;/tt&gt; :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snip20151116_4.png" src="/static/images/mitmproxy/Snip20151116_4.png" /&gt;
&lt;img alt="Screenshot_2015-11-16-16-48-38_com.tencent.mm.png" src="/static/images/mitmproxy/Screenshot_2015-11-16-16-48-38_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面我就讲几个微信开发中应该会用到的调试方式（以 “语音云开放平台”这个公众号为例）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wx-config-debug-true"&gt;
&lt;h2 id="hidwx-config-debug-true"&gt;修改 wx.config, 将 debug 参数改为 true&lt;a class="headerlink" href="#hidwx-config-debug-true" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上线后的公众号网页内的 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt; 中 &lt;tt class="docutils literal"&gt;debug&lt;/tt&gt; 参数的值都是 &lt;tt class="docutils literal"&gt;false&lt;/tt&gt;，
既然我要调试问题自然就要开启调试模式了。&lt;/p&gt;
&lt;p&gt;比如修改【我的应用】-【个人资料】这个页面的 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt;。
通过 mitmproxy 搭建的代理服务器，我们找到了 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt; 所在文件：
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://wx.openspeech.cn/xfyun-wx/userInfo/xxx&lt;/span&gt;&lt;/tt&gt;，查看源码发现 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt; 的代码片段如下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;script&amp;gt;
if(typeof wx != &amp;quot;undefined&amp;quot;){
    wx.config({
        debug : false,
        appId : '',
        timestamp : '',
        nonceStr : '',
        signature : ''
        jsApiList : [ 'checkJsApi', 'hideMenuItems', 'hideOptionMenu',
                'showOptionMenu', 'hideAllNonBaseMenuItem','onMenuShareAppMessage','onMenuShareTimeline' ]
    });
}
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;知道了这个后，我们就可以修改 &lt;tt class="docutils literal"&gt;debug&lt;/tt&gt; 参数了。修改后的 &lt;tt class="docutils literal"&gt;script.py&lt;/tt&gt; 内容如下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re

from libmproxy.models import decoded


def response(context, flow):
    with decoded(flow.response):
        if flow.request.path.startswith('/xfyun-wx/userInfo/'):
            body = flow.response.content
            flow.response.content = re.sub(
                r'{\s*debug\s*:\s*false,', '{debug:true,', body
            )
&lt;/pre&gt;
&lt;p&gt;按 &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; 退出先有的代理服务器，然后重新启动代理服务器：&lt;tt class="docutils literal"&gt;mitmproxy &lt;span class="pre"&gt;-s&lt;/span&gt; script.py&lt;/tt&gt;。
效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot_2015-11-16-18-15-49_com.tencent.mm.png" src="/static/images/mitmproxy/Screenshot_2015-11-16-18-15-49_com.tencent.mm.png" /&gt;
&lt;img alt="Screenshot_2015-11-16-18-16-00_com.tencent.mm.png" src="/static/images/mitmproxy/Screenshot_2015-11-16-18-16-00_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;我好像帮他们发现了一个 bug ;)&lt;/p&gt;
&lt;p&gt;下面我再举一些例子，更多例子请参考 &lt;a class="reference external" href="https://github.com/mitmproxy/mitmproxy/tree/master/examples"&gt;官方仓库的 example 目录&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;禁用本地缓存&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
def request(context, flow):
    headers = flow.request.headers
    for key in ['If-None-Match', 'If-Modified-Since']:
        headers.pop(key, None)
&lt;/pre&gt;
&lt;p&gt;如果这样还不行的话，可以尝试修改 response：替换 headers 以及修改 html 中与 cache 有关的 meta 标签内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;替换为本地文件内容&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
def response(context, flow):
    if flow.request.pretty_url == 'http://www.baidu.com':
        with decoded(flow.response):
            with open('baidu.html') as f:
                flow.response.content = f.read()
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;终止连接&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
def request(context, flow):
    if flow.request.path.startswith('/static/images/'):
        context.kill_flow(flow)
&lt;/pre&gt;
&lt;p&gt;更详细的用法请查阅 &lt;a class="reference external" href="http://docs.mitmproxy.org/en/stable/scripting/inlinescripts.html"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.mitmproxy.org/en/stable/index.html"&gt;mitmproxy 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mitmproxy/mitmproxy"&gt;https://github.com/mitmproxy/mitmproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 16 Nov 2015 19:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-16:2015/11/how-to-debug-wechat-web-page-with-mitmproxy.html</guid><category>wechat</category><category>微信</category><category>mitmproxy</category><category>python</category><category>移动端开发</category></item><item><title>Cyanide &amp; Happiness #4116：婴儿踢</title><link>https://mozillazg.com/2015/11/4116.babykicking.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4116/"&gt;Cyanide &amp;amp; Happiness #4116 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4116.babykicking.zh-cn.png" src="/static/images/comics/4116.babykicking.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oof, my baby's kicking
really hard           &lt;br /&gt;
哦呼，我孩子的踢劲可真够大的&lt;/p&gt;
&lt;p&gt;looks like he's gonna
grow up to be a football
player hahaha         &lt;br /&gt;
看起来似乎他长大后会成为一个足球运动员哈哈哈&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 15 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-15:2015/11/4116.babykicking.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3377：宇宙膨胀</title><link>https://mozillazg.com/2015/11/3377.expanding-universe.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3377/"&gt;Cyanide &amp;amp; Happiness #3377 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3377.expanding-universe.zh-cn.png" src="/static/images/comics/3377.expanding-universe.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;since the big bang 14
billion years ago, the
universe has been expanding.             &lt;br /&gt;
自从140亿年前的大爆炸后，宇宙就一直在扩大。&lt;/p&gt;
&lt;p&gt;like a balloon being inflated.        &lt;br /&gt;
就像一个气球一样一直在膨胀。&lt;/p&gt;
&lt;p&gt;the distance between galaxies,
as well as atoms, is increasing
every moment of every day.        &lt;br /&gt;
星系之间的距离，原子间的距离，每时每刻
都在增大。&lt;/p&gt;
&lt;p&gt;the universe is expanding,
and so is everything in it.       &lt;br /&gt;
宇宙一直在扩大，它里面的一切事物也在扩大。&lt;/p&gt;
&lt;p&gt;even me.      &lt;br /&gt;
甚至我也是。&lt;/p&gt;
&lt;p&gt;or maybe you're just
eating too much.      &lt;br /&gt;
或者也许你只是吃的太多了。&lt;/p&gt;
&lt;p&gt;nope, it's science.   &lt;br /&gt;
不是，这是科学。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-14:2015/11/3377.expanding-universe.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2926：酒鬼</title><link>https://mozillazg.com/2015/11/2926.omicalcoholic1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2926/"&gt;Cyanide &amp;amp; Happiness #2926 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2926.omicalcoholic1.zh-cn.png" src="/static/images/comics/2926.omicalcoholic1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;is it just me or are all
of our friends alcoholics?    &lt;br /&gt;
只有我还是我们的朋友都是酒鬼？&lt;/p&gt;
&lt;p&gt;it's just you.    &lt;br /&gt;
只有你是。&lt;/p&gt;
&lt;p&gt;hm. okey.     &lt;br /&gt;
唔。好吧。&lt;/p&gt;
&lt;p&gt;oh god... you're so right...          &lt;br /&gt;
哦，天啦。。。你说的太对了。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 13 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-13:2015/11/2926.omicalcoholic1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4114：枕头店</title><link>https://mozillazg.com/2015/11/4114.pillow_store.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4114/"&gt;Cyanide &amp;amp; Happiness #4114 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4114.pillow_store.zh-cn.png" src="/static/images/comics/4114.pillow_store.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;excuse me, sir?
how much does this one cost?      &lt;br /&gt;
打扰一下，先生？
这个要多少钱？&lt;/p&gt;
&lt;p&gt;that pillow is $19.99. do you
want it?      &lt;br /&gt;
那个枕头19块9毛9。你要买吗？&lt;/p&gt;
&lt;p&gt;hmm. I'm not sure. let me try
it out.       &lt;br /&gt;
唔。我不确定。让我试一下。&lt;/p&gt;
&lt;p&gt;I'll take it!     &lt;br /&gt;
我要了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-12:2015/11/4114.pillow_store.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3204：一块钱</title><link>https://mozillazg.com/2015/11/3204.dollar.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3204/"&gt;Cyanide &amp;amp; Happiness #3204 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3204.dollar.zh-cn.png" src="/static/images/comics/3204.dollar.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;could you spare
a dollar for the homeless?        &lt;br /&gt;
您能施舍一块钱给无家可归的人吗？&lt;/p&gt;
&lt;p&gt;sorry, I only have a credit
card with me      &lt;br /&gt;
抱歉，我身上只有一张信用卡&lt;/p&gt;
&lt;p&gt;that's ok, my phone has a
card reader   &lt;br /&gt;
没关系，我的手机上有一个读卡器&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-11:2015/11/3204.dollar.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：你看到这只猫了吗？</title><link>https://mozillazg.com/2015/11/2009-02-26-HaveYouSeenThisCat.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2009/02/26/have-you-seen-this-cat/"&gt;http://buttersafe.com/2009/02/26/have-you-seen-this-cat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2009-02-26-HaveYouSeenThisCat.zh-cn.png" src="/static/images/comics/2009-02-26-HaveYouSeenThisCat.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;excuse me, ma'am.
have you seen this cat?           &lt;br /&gt;
女生，打了一下。
看到这只猫了吗？&lt;/p&gt;
&lt;p&gt;he is two years old, about
50 centimeters long, and has
a brown spot on his head.
he was last seen playing in
my backyard.      &lt;br /&gt;
他两岁了，大约50公分，在他的头上
有一个褐色的斑点。他最后被发现时正在我的后院里玩耍。&lt;/p&gt;
&lt;p&gt;answers to the name
'troubadour.'         &lt;br /&gt;
这是他叫‘游吟诗人’的原因&lt;/p&gt;
&lt;p&gt;yes, i've seen him,
and i'll tell you where
he is for fifty dollars.          &lt;br /&gt;
是的，我看到他了，
我要告诉你的是他哪里值五十美元了。&lt;/p&gt;
&lt;p&gt;troubadour, i need to borrow some money.      &lt;br /&gt;
游吟诗人，我需要借点钱。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-10:2015/11/2009-02-26-HaveYouSeenThisCat.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #4112：我们做到了</title><link>https://mozillazg.com/2015/11/4112.wedidit.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4112/"&gt;Cyanide &amp;amp; Happiness #4112 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4112.wedidit.zh-cn.png" src="/static/images/comics/4112.wedidit.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;okay, throw the
dart and wherever it
lands, we'll go there!        &lt;br /&gt;
好了，投掷这个飞镖，
然后无论它落到哪里，我们就要去哪里！&lt;/p&gt;
&lt;p&gt;alright, let's do this!       &lt;br /&gt;
好的，让我们开始吧！&lt;/p&gt;
&lt;p&gt;oh shit!      &lt;br /&gt;
哦，该死！&lt;/p&gt;
&lt;p&gt;thunk!!   &lt;br /&gt;
咚！！&lt;/p&gt;
&lt;p&gt;we did it!    &lt;br /&gt;
我们做到了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-10:2015/11/4112.wedidit.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1496：雪人</title><link>https://mozillazg.com/2015/11/1496.snowmanlove.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1496/"&gt;Cyanide &amp;amp; Happiness #1496 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1496.snowmanlove.zh-cn.png" src="/static/images/comics/1496.snowmanlove.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-09:2015/11/1496.snowmanlove.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4110：哗眼</title><link>https://mozillazg.com/2015/11/4110.stink-eye.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4110/"&gt;Cyanide &amp;amp; Happiness #4110 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4110.stink-eye.zh-cn.png" src="/static/images/comics/4110.stink-eye.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;so, you gonna ask jess out?       &lt;br /&gt;
所以，你要让杰西出去？&lt;/p&gt;
&lt;p&gt;i dunno if she's into
me... she's been
giving me the stink eye
all night.        &lt;br /&gt;
我不知道她是否在意我。。。
她整晚都拿屁眼对着我。&lt;/p&gt;
&lt;p&gt;i don't think you
understand. that's
a good thing.     &lt;br /&gt;
我觉得你理解错了。那是件好事。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-09:2015/11/4110.stink-eye.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2408：拍手</title><link>https://mozillazg.com/2015/11/2408.clapper.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2408/"&gt;Cyanide &amp;amp; Happiness #2408 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2408.clapper.zh-cn.png" src="/static/images/comics/2408.clapper.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;check out the new clapper
lights i just bought          &lt;br /&gt;
试试我刚买的拍手灯&lt;/p&gt;
&lt;p&gt;&lt;em&gt;clap&lt;/em&gt; &lt;em&gt;clap&lt;/em&gt;     &lt;br /&gt;
&lt;em&gt;啪&lt;/em&gt; &lt;em&gt;啪&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;clap&lt;/em&gt; &lt;em&gt;clap&lt;/em&gt;     &lt;br /&gt;
&lt;em&gt;啪&lt;/em&gt; &lt;em&gt;啪&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-08:2015/11/2408.clapper.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：小行星</title><link>https://mozillazg.com/2015/11/2015-11-05-Asteroid.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/11/05/asteroid/"&gt;http://buttersafe.com/2015/11/05/asteroid/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-11-05-Asteroid.zh-cn.png" src="/static/images/comics/2015-11-05-Asteroid.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh no, that asteroid
is coming right at me!        &lt;br /&gt;
哦，不，那颗小行星直朝我撞过来了！&lt;/p&gt;
&lt;p&gt;i'll save you!    &lt;br /&gt;
我会救你的！&lt;/p&gt;
&lt;p&gt;moon, nooooooo!   &lt;br /&gt;
月球，不不不不不！&lt;/p&gt;
&lt;p&gt;goodbye, old friend.      &lt;br /&gt;
再见了，老朋友。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 07 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-07:2015/11/2015-11-05-Asteroid.zh-cn.html</guid><category>buttersafe</category></item><item><title>Django: 使用 Q 对象构建复杂的查询语句</title><link>https://mozillazg.com/2015/11/django-the-power-of-q-objects-and-how-to-use-q-object.html</link><description>&lt;p&gt;本文将讲述如何在 Django 项目中使用 &lt;tt class="docutils literal"&gt;Q&lt;/tt&gt; 对象构建复杂的查询条件。
假设有如下的 model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;question_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后我们创建了一些数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;question_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;what are you doing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;question_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;what is wrong with you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;question_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;who are you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;question_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;who am i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;doing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="and"&gt;
&lt;h2 id="hidand"&gt;AND 查询&lt;a class="headerlink" href="#hidand" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;将多个 &lt;tt class="docutils literal"&gt;Q&lt;/tt&gt; 对象作为非关键参数或使用 &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; 联结即可实现 &lt;tt class="docutils literal"&gt;AND&lt;/tt&gt; 查询:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;
&lt;span class="c1"&gt;# Q(...)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;doing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Q(...), Q(...)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;what&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;doing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Q(...) &amp;amp; Q(...)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;what&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;doing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="or"&gt;
&lt;h2 id="hidor"&gt;OR 查询&lt;a class="headerlink" href="#hidor" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; 联结两个 &lt;tt class="docutils literal"&gt;Q&lt;/tt&gt; 对象即可实现 &lt;tt class="docutils literal"&gt;OR&lt;/tt&gt; 查询:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Q(...) | Q(...)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;who&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;doing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="not"&gt;
&lt;h2 id="hidnot"&gt;NOT 查询&lt;a class="headerlink" href="#hidnot" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~Q(...)&lt;/span&gt;&lt;/tt&gt; 客户实现 &lt;tt class="docutils literal"&gt;NOT&lt;/tt&gt; 查询:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ~Q(...)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;与关键字参数共用&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;记得要把 &lt;tt class="docutils literal"&gt;Q&lt;/tt&gt; 对象放前面:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Q(...), key=value&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;who&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="or-and-not"&gt;
&lt;h2 id="hidor-and-not"&gt;OR, AND, NOT 多条件查询&lt;a class="headerlink" href="#hidor-and-not" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这几个条件可以自由组合使用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# (A OR B) AND C AND (NOT D)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;who&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;what&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;are&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;动态构建查询条件&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比如你定义了一个包含一些 &lt;tt class="docutils literal"&gt;Q&lt;/tt&gt; 对象的列表，如何使用这个列表构建 &lt;tt class="docutils literal"&gt;AND&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;OR&lt;/tt&gt; 查询呢？
可以使用 &lt;tt class="docutils literal"&gt;operator&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;reduce&lt;/tt&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question_text__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;who&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# OR&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;or_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;doing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;what&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;wrong&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# AND&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;and_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个列表也可能是根据用户的输入来构建的，比如简单的搜索功能（搜索一个文章的标题或内容或作者名称包含某个关键字）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title__contains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content__contains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;author__name__contains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;q_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;or_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.michelepasin.org/blog/2010/07/20/the-power-of-djangos-q-objects/"&gt;Parerga und Paralipomena » Blog Archive » The power of django’s Q objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/topics/db/queries/#complex-lookups-with-q-objects"&gt;Making queries | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/ref/models/querysets/#django.db.models.Q"&gt;QuerySet API reference | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/django/django/blob/master/tests/or_lookups/tests.py"&gt;django/tests.py at master · django/django · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/operator.html#operator.and_"&gt;9.9. operator — Standard operators as functions — Python 2.7.10 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/functions.html#reduce"&gt;2. Built-in Functions — Python 2.7.10 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 07 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-07:2015/11/django-the-power-of-q-objects-and-how-to-use-q-object.html</guid></item><item><title>Cyanide &amp; Happiness #4107：技能</title><link>https://mozillazg.com/2015/11/4107.tricks.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4107/"&gt;Cyanide &amp;amp; Happiness #4107 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4107.tricks.zh-cn.png" src="/static/images/comics/4107.tricks.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;my dog is so smart!
he just learned
some new tricks!      &lt;br /&gt;
我的狗很聪明！
他刚刚学会了一些新技能！&lt;/p&gt;
&lt;p&gt;i want to see!    &lt;br /&gt;
我想看！&lt;/p&gt;
&lt;p&gt;here, boy! bang!      &lt;br /&gt;
这里，孩子！bang！&lt;/p&gt;
&lt;p&gt;n-no! get down, boy!  &lt;br /&gt;
不！下来，孩子！&lt;/p&gt;
&lt;p&gt;stop it!      &lt;br /&gt;
停下！&lt;/p&gt;
&lt;p&gt;no! not that kind of 'bang'!  &lt;br /&gt;
不！不是这种‘bang’！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-06:2015/11/4107.tricks.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1748：爸爸</title><link>https://mozillazg.com/2015/11/1748.papa.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1748/"&gt;Cyanide &amp;amp; Happiness #1748 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1748.papa.zh-cn.png" src="/static/images/comics/1748.papa.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-05:2015/11/1748.papa.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2640：约会告吹</title><link>https://mozillazg.com/2015/11/2640.That-date-sure-blew.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2640/"&gt;Cyanide &amp;amp; Happiness #2640 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2640.That-date-sure-blew.zh-cn.png" src="/static/images/comics/2640.That-date-sure-blew.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-04:2015/11/2640.That-date-sure-blew.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：喵咪的礼物</title><link>https://mozillazg.com/2015/11/2010-08-12-AGiftFromACat.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2010/08/12/a-gift-from-a-cat/"&gt;http://buttersafe.com/2010/08/12/a-gift-from-a-cat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2010-08-12-AGiftFromACat.zh-cn.png" src="/static/images/comics/2010-08-12-AGiftFromACat.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;honey, the cat left
another rat carcasss on
the porch!        &lt;br /&gt;
亲爱的，那只猫又把一只老鼠尸体
放在门廊上了！&lt;/p&gt;
&lt;p&gt;i konw it's pretty gross
and sad for the rat,
but when a cat does that,
it thinks it's giving
a very considerate gift.      &lt;br /&gt;
我知道看到老鼠尸体是件非常不幸的事情，
但是当一只猫做这个的时候，
它认为它是在送一件非常贴心的礼物。&lt;/p&gt;
&lt;p&gt;it's his way of showing
that the loves us!        &lt;br /&gt;
这是它表达它爱我们的方式！&lt;/p&gt;
&lt;p&gt;don meowconi, the hendersons
are not taking your death
threats very seriously.    &lt;br /&gt;
喵咕婶婶，亨德森并没有非常认真的对待你的死亡威胁。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-03:2015/11/2010-08-12-AGiftFromACat.zh-cn.html</guid><category>buttersafe</category></item><item><title>怎么给 django class view 增加权限判断</title><link>https://mozillazg.com/2015/11/django-check-user-permission-for-class-generic-view.html</link><description>&lt;p&gt;本文将讲述如何给 django 项目内的 class view 增加权限控制。&lt;/p&gt;
&lt;p&gt;至少有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义一个基类，包含一个 as_view 方法，在 as_view 方法中判断用户权限。然后其他 class view 继承这个基类&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;initkwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoginRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;initkwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义一个基类，包含一个 dispatch 方法，给这个方法加个权限判断的装饰器。然后其他 class view 继承这个基类&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;method_decorator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProtectedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secret.html&amp;#39;&lt;/span&gt;

    &lt;span class="nd"&gt;@method_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProtectedView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果所需的权限不只是 login_required 该怎么判断权限呢？还是上面的方法，我就举一个第一种方法的例子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;(&lt;span class="n"&gt;models&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    ...

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;is_god&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        ....


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;GodOnlyView&lt;/span&gt;(&lt;span class="n"&gt;TemplateView&lt;/span&gt;):
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假设有上面的 user 和 class view，其中 &lt;code&gt;OnlyGodView&lt;/code&gt; 只允许 &lt;code&gt;user.is_god() 为&lt;/code&gt;True` 用户才能查看。&lt;/p&gt;
&lt;p&gt;首先，我们定义一个 &lt;code&gt;GodRequiredMixin&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;user_passes_test&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;

&lt;span class="n"&gt;LOGIN_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;god_check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_god&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GodRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;initkwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GodRequiredMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;initkwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;actual_decorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_passes_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;god_check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LOGIN_URL&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;actual_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后定义 class view 的时候继承自这个 Mixin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;GodOnlyView&lt;/span&gt;(&lt;span class="n"&gt;GodRequiredMixin&lt;/span&gt;, &lt;span class="n"&gt;TemplateView&lt;/span&gt;):
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们的 &lt;code&gt;GodOnlyView&lt;/code&gt; 只有当用户是 &lt;code&gt;is_god()&lt;/code&gt; 的时候才能查看了。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/auth/default/#applying-permissions-to-generic-views"&gt;Applying permissions to generic views | Using the Django authentication system | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/auth/default/#django.contrib.auth.decorators.login_required"&gt;login_required | Using the Django authentication system | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/intro/#mixins-that-wrap-as-view"&gt;Mixins that wrap as_view() | Introduction to class-based views | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/intro/#decorating-the-class"&gt;Decorating the class | Introduction to class-based views | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-03:2015/11/django-check-user-permission-for-class-generic-view.html</guid></item><item><title>git 查看某个 commit 的改动</title><link>https://mozillazg.com/2015/11/git-view-one-commit-diff.html</link><description>&lt;p&gt;命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git show COMMIT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git diff COMMIT^!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git show d34ff657f5
git diff d34ff657f5^!
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7663451/view-a-specific-git-commit"&gt;http://stackoverflow.com/questions/7663451/view-a-specific-git-commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/17563726/git-diff-for-one-commit"&gt;http://stackoverflow.com/questions/17563726/git-diff-for-one-commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-03:2015/11/git-view-one-commit-diff.html</guid></item><item><title>Cyanide &amp; Happiness #4104：兴趣</title><link>https://mozillazg.com/2015/11/4104.interest.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4104/"&gt;Cyanide &amp;amp; Happiness #4104 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4104.interest.zh-cn.png" src="/static/images/comics/4104.interest.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i don't get it!           &lt;br /&gt;
我就不明白了！&lt;/p&gt;
&lt;p&gt;every time i talk to a girl,
she ends up losing interest.      &lt;br /&gt;
每次我跟女孩子讲话的时候，
她最后都会失去兴趣。&lt;/p&gt;
&lt;p&gt;i think you just need to
be less aggressive.
slow down a litle bit.    &lt;br /&gt;
我觉得你只需要少点侵略性。
慢慢来。&lt;/p&gt;
&lt;p&gt;what do you mean?     &lt;br /&gt;
你是什么意思？&lt;/p&gt;
&lt;p&gt;hey there. do you come here
often?    &lt;br /&gt;
嘿，这里。你经常来这里吗？&lt;/p&gt;
&lt;p&gt;where? in my pants?   &lt;br /&gt;
哪里？我的裤子里？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-02:2015/11/4104.interest.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>解决 gitlab 配置不正确导致 ci 中 git clone 时出现 “You appear to have cloned an empty repository” 的问题</title><link>https://mozillazg.com/2015/11/gitlab-ci-fix-reference-is-not-a-tree-you-appear-to-have-cloned-an-empty.html</link><description>&lt;p&gt;最近在使用 gitlab 的 ci 服务时出现了如下问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gitlab-ci-multi-runner ...
...

Cloning repository... 
Cloning into &amp;#39;/builds/...&amp;#39;... 
warning: You appear to have cloned an empty repository. 
Checking out 2c80f515 as develop... 
fatal: reference is not a tree: 1b53f5157b357f4c006ceccf0e36035bad340185
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过多翻搜索验证后发现是 gitlab-git-http-server 的配置问题：
这个 gitlab 服务没有使用内置的 nginx 来反向代理 gitlab 服务而是使用的 yum 安装的 nginx。
由于配置有问题导致 ci 任务一直失败。&lt;/p&gt;
&lt;p&gt;解决办法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;, 找到如下配置并修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx[&amp;#39;enabled&amp;#39;] = false
gitlab_git_http_server[&amp;#39;listen_network&amp;#39;] = &amp;quot;tcp&amp;quot;
# 这个端口修改为你实际需要的端口
gitlab_git_http_server[&amp;#39;listen_addr&amp;#39;] = &amp;quot;localhost:8081&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用更改 &lt;code&gt;sudo gitlab-ctl reconfigure&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载官方 nginx 配置（选择相应版本分支下的文件）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://gitlab.com/gitlab-org/gitlab-ce/raw/v8.1.2/lib/support/nginx/gitlab -O /etc/nginx/conf.d/gitlab.conf
# 如果你的 ci 服务器使用的是独立的域名或者使用了 ssl 的话，可以去
# https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/support/nginx
# 下载相应的配置文件
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 nginx 配置文件中的 &lt;code&gt;upstream&lt;/code&gt;， &lt;code&gt;server_name&lt;/code&gt;, &lt;code&gt;root&lt;/code&gt;，提示：
   如果不存在 &lt;code&gt;/home/git/gitlab/public&lt;/code&gt; 目录的话，那么 &lt;code&gt;root&lt;/code&gt; 就是
   &lt;code&gt;/opt/gitlab/embedded/service/gitlab-rails/public&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;reload nginx: &lt;code&gt;nginx -t &amp;amp;&amp;amp; nginx -s reload&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/issues/2727"&gt;https://gitlab.com/gitlab-org/gitlab-ce/issues/2727&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#gitlab"&gt;https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/nginx.md#gitlab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/support/nginx"&gt;https://gitlab.com/gitlab-org/gitlab-ce/tree/master/lib/support/nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-02:2015/11/gitlab-ci-fix-reference-is-not-a-tree-you-appear-to-have-cloned-an-empty.html</guid><category>gitlab</category><category>gitlab-git-http-server</category></item><item><title>Loading Artist：浪费时间</title><link>https://mozillazg.com/2015/11/2015-09-10-waste-of-time.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://www.loadingartist.com/comic/waste-of-time/"&gt;http://www.loadingartist.com/comic/waste-of-time/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-09-10-waste-of-time.zh-cn.png" src="/static/images/comics/2015-09-10-waste-of-time.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what are you doing?       &lt;br /&gt;
你在干什么？&lt;/p&gt;
&lt;p&gt;whatching this guy play a game.         &lt;br /&gt;
看这个哥们玩游戏。&lt;/p&gt;
&lt;p&gt;it's pretty funny.        &lt;br /&gt;
真的很有意思。&lt;/p&gt;
&lt;p&gt;wait, so you aren't even playing?         &lt;br /&gt;
等一下，这么说你还没玩过？&lt;/p&gt;
&lt;p&gt;yeesh what a complete waste of time.      &lt;br /&gt;
完全是在浪费时间。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-01:2015/11/2015-09-10-waste-of-time.zh-cn.html</guid><category>Loading Artist</category></item><item><title>解决在 Django 中使用 rq 或 celery 任务队列有时会出现 DoesNotExist 的问题</title><link>https://mozillazg.com/2015/11/django-use-queue-maybe-raise-object-not-exist-error.html</link><description>&lt;p&gt;在 Django 中下面的代码有时会抛出 &lt;code&gt;DoesNotExist&lt;/code&gt; 异常：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@app.task
def job1(pk):
    Foobar.objects.get(pk=pk)


@transaction.atomic
def foo(request):
    foobar = Foobar.objects.create(...)
    job1.delay(foobar.pk)
    ...
    return ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码有时就会出现: &lt;code&gt;DoesNotExist: Foobar matching query does not exist.&lt;/code&gt; 异常。
为什么为出现这种情况呢?&lt;/p&gt;
&lt;p&gt;原来在这种情况下只在 view return 的时候 Django 才会提交数据库事物，如果 view 中有异常的话会回滚事物。
也就是说虽然我们通过 &lt;code&gt;create&lt;/code&gt; 方法创建了记录同时得到了一个主键，但是在事物提交之前这条记录其实并没有
真实存在于数据库中，所以如果 job1 在 return 之前就立马执行了的话就会出现 &lt;code&gt;DoesNotExist&lt;/code&gt; 异常。（
在实践中发现就算是使用 Django 默认的自动提交事物有时也会出现 &lt;code&gt;DoesNotExist&lt;/code&gt; 异常）&lt;/p&gt;
&lt;p&gt;解决办法就是，只在事物执行成功的时候才执行放入任务队列的操作。有一个第三方 app: &lt;a href="https://github.com/carljm/django-transaction-hooks"&gt;django-transaction-hooks&lt;/a&gt;
可以很方便的帮助我们解决这个问题:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装: &lt;code&gt;pip install django-transaction-hooks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 settings 中 &lt;code&gt;DATABASES&lt;/code&gt; 的值，将  &lt;code&gt;ENGINE&lt;/code&gt; 替换为这个包内置的 engine。
   postgresql 替换为 &lt;code&gt;transaction_hooks.backends.postgresql_psycopg2&lt;/code&gt;,
   mysql 替换为 &lt;code&gt;transaction_hooks.backends.mysql&lt;/code&gt;,
   sqlite 替换为 &lt;code&gt;transaction_hooks.backends.sqlite3&lt;/code&gt;,
   postgis 替换为 &lt;code&gt;transaction_hooks.backends.postgis&lt;/code&gt; 比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATABASES = {
&amp;#39;default&amp;#39;: {
    &amp;#39;ENGINE&amp;#39;: &amp;#39;transaction_hooks.backends.postgresql_psycopg2&amp;#39;,
    &amp;#39;NAME&amp;#39;: &amp;#39;foo&amp;#39;,
    },
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;connection.on_commit&lt;/code&gt; 来执行需要在事物成功提交时才执行的操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;connection.on_commit(lambda: job1.delay(foobar.pk))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详情请查看文档：&lt;a href="https://django-transaction-hooks.readthedocs.org"&gt;https://django-transaction-hooks.readthedocs.org&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;《High Performance Django》&lt;/li&gt;
&lt;li&gt;&lt;a href="http://celery.readthedocs.org/en/latest/userguide/tasks.html#database-transactions"&gt;http://celery.readthedocs.org/en/latest/userguide/tasks.html#database-transactions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-11-01:2015/11/django-use-queue-maybe-raise-object-not-exist-error.html</guid><category>rq</category><category>celery</category><category>django-rq</category></item><item><title>buttersafe：拿着剪刀跑</title><link>https://mozillazg.com/2015/10/2012-12-06-runningwithscissors.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2012/12/06/running-with-scissors/"&gt;http://buttersafe.com/2012/12/06/running-with-scissors/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2012-12-06-runningwithscissors.zh-cn.png" src="/static/images/comics/2012-12-06-runningwithscissors.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 31 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-31:2015/10/2012-12-06-runningwithscissors.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness：南瓜雕刻</title><link>https://mozillazg.com/2015/10/scary-pumpkin-carving.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/victimsofcomics/status/660212156089147392"&gt;https://twitter.com/victimsofcomics/status/660212156089147392&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="scary-pumpkin-carving.zh-cn.png" src="/static/images/comics/scary-pumpkin-carving.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, check out 
my scary pumpkin carving!       &lt;/p&gt;
&lt;p&gt;嘿，快看我的可怕的南瓜雕刻！&lt;/p&gt;
&lt;p&gt;i don't see anything      &lt;br /&gt;
我啥也没看到&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 31 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-31:2015/10/scary-pumpkin-carving.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4101：怕黑</title><link>https://mozillazg.com/2015/10/4101.afraidofdark.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4101/"&gt;Cyanide &amp;amp; Happiness #4101 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4101.afraidofdark.zh-cn.png" src="/static/images/comics/4101.afraidofdark.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;goodnight, son!       &lt;br /&gt;
晚安，儿子！&lt;/p&gt;
&lt;p&gt;wait!     &lt;br /&gt;
等一下！&lt;/p&gt;
&lt;p&gt;what is it?     &lt;br /&gt;
那是什么？&lt;/p&gt;
&lt;p&gt;well... it's just that...
i'm afraid of the dark.       &lt;br /&gt;
嗯...那只是...我怕黑。&lt;/p&gt;
&lt;p&gt;son...          &lt;br /&gt;
儿子...&lt;/p&gt;
&lt;p&gt;that's racist.        &lt;br /&gt;
这是种族歧视。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;slam&lt;/em&gt;    &lt;br /&gt;
&lt;em&gt;砰&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 30 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-30:2015/10/4101.afraidofdark.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：漂浮</title><link>https://mozillazg.com/2015/10/2008-12-09-floating.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/12/09/floating/"&gt;http://buttersafe.com/2008/12/09/floating/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-12-09-floating.zh-cn.png" src="/static/images/comics/2008-12-09-floating.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-29:2015/10/2008-12-09-floating.zh-cn.html</guid><category>buttersafe</category></item><item><title>《Web 全栈工程师的自我修养》读书笔记</title><link>https://mozillazg.com/2015/10/web-full-stack-engineer-note-1.html</link><description>&lt;p&gt;&lt;a href="http://book.douban.com/subject/26598045/"&gt;&lt;img alt="Web 全栈工程师的自我修养" src="/static/images/reading/web-full-stack-programmer.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;什么是全栈工程师&lt;/h2&gt;
&lt;p&gt;关于全栈工程师的定义，Quora 上得票最高的回答是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全栈工程师是指，一个能处理数据库、服务器、系统工程和客户端的所有工作的工程师。根据项目的不同，客户需要的可能是移动栈、Web 栈、或者原生应用程序栈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;流水线开发流程“各司其职”的弊端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工程师职责不清导致效率低下&lt;/li&gt;
&lt;li&gt;工程师缺乏主人感导致产品质量差&lt;/li&gt;
&lt;li&gt;工程师缺乏全局的视野影响个人成长&lt;/li&gt;
&lt;li&gt;更多角色导致项目效率低下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;全栈工程师首先要“一专多长”。一专多长的意思是，工程师首先有一个专精的方向，在这个方向上足够精通后（高级工程师级别），以此为突破点去学习更多的知识，增加自己的长处。如果还没有获得某个方向上足够深入的理解，就不要囫囵吞枣地去学习其他领域的知识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;勿在浮沙筑高台，“全栈”是一个长期积累的过程，是专精型工程师
在不断解决问题的过程中积累知识和经验所形成的能力，而不是一蹴而就的过程。&lt;/p&gt;
&lt;p&gt;解决问题，而不是醉心技术。如果新计划不是你擅长的，怎么办？您应该马上开始学习新的技术，这就是我说的关注问题，而不是醉心技术。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《黑客与画家》&lt;/li&gt;
&lt;li&gt;《专业主义》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;如何成为全栈工程师&lt;/h2&gt;
&lt;h3&gt;“先精后广，一专多长”&lt;/h3&gt;
&lt;p&gt;建议初学者学习全栈技能的时候，先在一个特定的方向上有比较深入的钻研，然后再将学习目标逐渐推广开来。&lt;/p&gt;
&lt;p&gt;作为一个求职者，无论是毕业生还是社会招聘，仅仅满足招聘要求是不够的。您需要在招聘要求的方向上 200% 的能力来得到这个职位。&lt;/p&gt;
&lt;h3&gt;围绕商业目标&lt;/h3&gt;
&lt;p&gt;老板雇用一个员工，不是因为他能写程序，而是因为他能帮助自己赚钱。
一切都要围绕商业目标来进行，包括您做的项目、您的汇报方式，以及您在学习新技能时进行的取舍。&lt;/p&gt;
&lt;p&gt;记住，当您只有一把锤子，您看什么都是钉子。
而如果您痴迷于工具，反而看不到问题的所在。因此，要先看看
有哪些问题需要解决，然后再补充您的工具箱。
永远从商业目标的角度来决定学习哪个东西，而不是纯粹为了锻炼
技术能力而去学习。&lt;/p&gt;
&lt;h3&gt;关注用户体验&lt;/h3&gt;
&lt;p&gt;老板雇用您不是因为您能写代码（或者做工具），而是因为您能帮他赚钱。所以您要用一切办法，去优化流程解决痛点，
做工具是一个可选的方法，但不应该是您的第一个想法，更不是唯一的方法。假使真的是做一个工具，最终汇报邮件的时候，不要以
“我做了一个工具。。。”开头，而应该以“我发现了一个问题。。。”开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《重来：更为简单有效的商业思维》&lt;/li&gt;
&lt;li&gt;《精益创业》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;从学生到工程师&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《编程之美：微软技术面试心得》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;野生程序员的故事&lt;/h2&gt;
&lt;p&gt;野生程序员容易陷入样样不精通的窘境。&lt;/p&gt;
&lt;h3&gt;大公司还是创业公司&lt;/h3&gt;
&lt;p&gt;大公司能给您的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;较小的风险&lt;/li&gt;
&lt;li&gt;技术最佳实践&lt;/li&gt;
&lt;li&gt;垂直专精的技能&lt;/li&gt;
&lt;li&gt;服务海量用户的经验&lt;/li&gt;
&lt;li&gt;软技能&lt;/li&gt;
&lt;li&gt;人脉&lt;/li&gt;
&lt;li&gt;心态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者个人建议是，从毕业生自己前途发展的角度来看，
先加入一家上市大公司是个不错的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《打造 Facebook》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;工程师事业指南&lt;/h2&gt;
&lt;h3&gt;那个什么都懂的家伙&lt;/h3&gt;
&lt;p&gt;软件工程师事业指南告诉您，最核心的 3 个词就是技术、成长和声望。
技术是您的武器，成长就是好好打磨武器，而声望是
您一生的积累。&lt;/p&gt;
&lt;h3&gt;积累作品集&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《您就是极客：软件开发人员生存指南》&lt;/li&gt;
&lt;li&gt;《代码整洁之道》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;全栈工程师眼中的 HTTP&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;尽量减少同一域下的 HTTP 请求数&lt;/strong&gt;
浏览器常常限定了对同一域名发起的并发连接数的上限。
IE 6/7 和 Firefox 2 的设计规则是，同时只能对一个
域名发起两个并发连接。新版本的各种浏览器普遍把这一上限
设定为 4 至 8 个。&lt;/p&gt;
&lt;p&gt;把静态资源放在非主域名下，这种做法除了可以增加浏览器并发，
还有一个好处是，减少 HTTP 请求中携带的不必要的 cookie 数据。&lt;/p&gt;
&lt;p&gt;除此之外，前端工程师经常做的优化是合并同一域名下
的资源，比如把多个 css 合并为一个 css, 或者将图片组合成 css 拼图。&lt;/p&gt;
&lt;p&gt;还有一些优化建议是省掉不必要的 HTTP 请求，比如内嵌小型 css, 内嵌小型 javascript,
设置缓存，以及减少重定向。&lt;/p&gt;
&lt;h2&gt;高性能网站的关键：缓存&lt;/h2&gt;
&lt;p&gt;服务器缓存&lt;/p&gt;
&lt;p&gt;浏览器缓存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《网站性能监测与优化》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;大前端&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;知识体系&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对浏览器兼容性的了解&lt;/li&gt;
&lt;li&gt;对 HTML/CSS/JavaScript 语法和原理的理解&lt;/li&gt;
&lt;li&gt;对编辑器和插件的熟悉程度&lt;/li&gt;
&lt;li&gt;对调试工具的了解程度&lt;/li&gt;
&lt;li&gt;对版本管理软件的熟悉和应用经验&lt;/li&gt;
&lt;li&gt;对前端库/框架的使用。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准/规范&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对代码质量，代码规范的理解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;对 JavaSript 单元测试的熟悉。&lt;/li&gt;
&lt;li&gt;对性能优化的应用和理解。&lt;/li&gt;
&lt;li&gt;对 SEO 的应用和理解。&lt;/li&gt;
&lt;li&gt;代码部署。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动 Web。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码架构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;对自动化测试的理解&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;向移动端转型&lt;/h2&gt;
&lt;h3&gt;有哪些方向&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;iOS 原生 App&lt;/li&gt;
&lt;li&gt;Android 原生 App&lt;/li&gt;
&lt;li&gt;Windows Phone 原生 App&lt;/li&gt;
&lt;li&gt;Web App&lt;/li&gt;
&lt;li&gt;混合模式 App(Hybrid App)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Getting Real》&lt;/li&gt;
&lt;li&gt;《从 0 到 1：开启商业与未来的秘密》&lt;/li&gt;
&lt;li&gt;《Building iPhone Apps with HTML, CSS, and JavaScript》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;持续集成&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;版本控制最佳实践&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼓励频繁地提交&lt;/li&gt;
&lt;li&gt;确定分支流程&lt;/li&gt;
&lt;li&gt;定义主干原则，并且坚守它&lt;/li&gt;
&lt;li&gt;不要把逻辑的修改和代码格式化操作混在一起&lt;/li&gt;
&lt;li&gt;不相干的代码分开提交&lt;/li&gt;
&lt;li&gt;保持工作代码库的“干净”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;包管理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;bower&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《Pro Git book》&lt;/li&gt;
&lt;li&gt;《Git 版本控制管理》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;理解编程语言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通用用途语言 VS 特定领域语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特定领域语言（Domain Specific Language, DSL）。
DSL 的目的是解决特定领域的问题。&lt;/p&gt;
&lt;p&gt;如果您是一个以解决问题为目标的全栈工程师，我建议您在考虑
发明一个 DSL 之前先考虑以下方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽量使用您熟悉的通用语言来解决问题，比如 Python, Java 或 C++.&lt;/li&gt;
&lt;li&gt;优化您的方案，提炼出一种真正精简、优雅的扩展库。&lt;/li&gt;
&lt;li&gt;开源您的扩展库，根据其他人的贡献来继续优化解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《代码大全》&lt;/li&gt;
&lt;li&gt;《代码的未来》&lt;/li&gt;
&lt;li&gt;《禅与摩托车维修的艺术》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;全栈游乐场&lt;/h2&gt;
&lt;p&gt;就是说了需要有一个自己的 VPS, VPS 可以让你对网站的全貌有所了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《鸟哥的 Linux 私房菜：基础学习篇》&lt;/li&gt;
&lt;li&gt;《只是为了好玩：Linux 之父林纳斯自传》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;软件设计方法&lt;/h2&gt;
&lt;h3&gt;设计模式&lt;/h3&gt;
&lt;p&gt;设计模式的关注点在于以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效编写代码&lt;/li&gt;
&lt;li&gt;高可复用性&lt;/li&gt;
&lt;li&gt;抽象带来的可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;《设计模式》一书中作者列出了 23 种软件设计模式，分为三大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建型模式，就是用来创建对象的模式，它对实例化的过程进行了抽象。创建型模式帮助一个系统独立于如何创建、组合和表示它的那些对象。&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;工厂方法&lt;/li&gt;
&lt;li&gt;抽象工厂&lt;/li&gt;
&lt;li&gt;建造模型&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;li&gt;对象池模式&lt;/li&gt;
&lt;li&gt;多例模式等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结构型模式，主要解决类、对象、模块之间的耦合关系。&lt;ul&gt;
&lt;li&gt;适配器模式(Adapter)&lt;/li&gt;
&lt;li&gt;桥接模式&lt;/li&gt;
&lt;li&gt;组合模式&lt;/li&gt;
&lt;li&gt;装饰模式&lt;/li&gt;
&lt;li&gt;外观模式&lt;/li&gt;
&lt;li&gt;享元模式&lt;/li&gt;
&lt;li&gt;代理模式等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行为模式，用来识别对象之间的常用交流模式并加以实现。&lt;ul&gt;
&lt;li&gt;观察者模式（发布订阅模式）&lt;/li&gt;
&lt;li&gt;黑板&lt;/li&gt;
&lt;li&gt;责任链&lt;/li&gt;
&lt;li&gt;命令&lt;/li&gt;
&lt;li&gt;解释器&lt;/li&gt;
&lt;li&gt;迭代器&lt;/li&gt;
&lt;li&gt;中介者&lt;/li&gt;
&lt;li&gt;备忘录&lt;/li&gt;
&lt;li&gt;空对象&lt;/li&gt;
&lt;li&gt;模板方法&lt;/li&gt;
&lt;li&gt;访问者等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;架构模式&lt;/h3&gt;
&lt;p&gt;比如：MVC&lt;/p&gt;
&lt;h3&gt;设计原则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DRY，是 "Don't Repeat Yourself" 的缩写，在一个系统里，对于任何数据或变量，都应该配置在有且只有一个地方，其他地方都应该引用这里的数据。&lt;/li&gt;
&lt;li&gt;惯例优于设置，开发人员仅需要规定应用中不符合约定的部分。&lt;/li&gt;
&lt;li&gt;KISS 原则，是 "Keep it simple, stupid" 的缩写，意思是说软件设计当中应该注重简约的原则。&lt;/li&gt;
&lt;li&gt;最少知道原则，它是“松耦合原则”的一个具体实例，是指在面向对象编程中，每一个软件单元应该尽可能少地与其他单元发生作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《设计模式：可复用面向对象软件的基础》&lt;/li&gt;
&lt;li&gt;《JavaScript 设计模式》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;高效工程师&lt;/h2&gt;
&lt;h3&gt;提速 100 倍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;阅读英文资料&lt;/li&gt;
&lt;li&gt;时间管理四象限&lt;ul&gt;
&lt;li&gt;既紧急又重要的（立即执行）&lt;/li&gt;
&lt;li&gt;紧急不重要（他人代劳）&lt;/li&gt;
&lt;li&gt;重要不紧急（制定计划，建议工程师把 80% 的工作投入到该象限中，避免“瞎忙”）&lt;/li&gt;
&lt;li&gt;不紧急不重要（对它所不）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消除重复工作&lt;/li&gt;
&lt;li&gt;给自己留出不被打扰的时间&lt;/li&gt;
&lt;li&gt;番茄工作法&lt;/li&gt;
&lt;li&gt;跨界思考&lt;/li&gt;
&lt;li&gt;纸上头脑风暴&lt;/li&gt;
&lt;li&gt;使用版本控制工具和构建系统&lt;/li&gt;
&lt;li&gt;不要加班&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《软件随想录：程序员部落酋长 Joel 谈软件》&lt;/li&gt;
&lt;li&gt;《卓有成效的程序员》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;学习设计&lt;/h2&gt;
&lt;h3&gt;设计基础&lt;/h3&gt;
&lt;p&gt;设计的四大基本理论是：亲密性，对齐，重复，对比。&lt;/p&gt;
&lt;p&gt;设计工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Axure&lt;/li&gt;
&lt;li&gt;Sketch&lt;/li&gt;
&lt;li&gt;Quartz Composer&lt;/li&gt;
&lt;li&gt;代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《响应式 Web 设计全流程解析》&lt;/li&gt;
&lt;li&gt;《写给大家看的设计书（第 3 版）》&lt;/li&gt;
&lt;li&gt;《写给大家看的设计书：实例与创意》&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;全栈思维&lt;/h2&gt;
&lt;h3&gt;有兴趣就够了吗？&lt;/h3&gt;
&lt;p&gt;扯一些理由（特别是私人的理由）根本就是不专业的态度。
不要给自己没能完成的事情找任何理由，而要以诚恳的态度说明当前进度，以及未来是否能如期完成目标，如果不能，就直接说出来。&lt;/p&gt;
&lt;p&gt;在职场中，我们评估一个人并不是根据他的能力，而是他能
承担的责任。同样，我们最终评估一个人是否应该升职加薪，
不是看他的能力，也不是看他投入的时间，更不是看兴趣，
只是看他的责任。&lt;/p&gt;
&lt;h3&gt;学一点管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;好的管理者能让平凡的员工做不平凡的事&lt;/li&gt;
&lt;li&gt;根据员工特质来授权&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;沟通： 被忽视的竞争力&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《卓有成效的管理者》&lt;/li&gt;
&lt;li&gt;《麦肯锡教我的写作武器》&lt;/li&gt;
&lt;li&gt;《金字塔原理》&lt;/li&gt;
&lt;li&gt;《安静：内向性格的竞争力》&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-29:2015/10/web-full-stack-engineer-note-1.html</guid><category>Web 全栈工程师的自我修养</category></item><item><title>buttersafe：豌豆</title><link>https://mozillazg.com/2015/10/2008-08-26-lateliferealizations.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/08/26/late-life-realizations/"&gt;http://buttersafe.com/2008/08/26/late-life-realizations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-08-26-lateliferealizations.zh-cn.png" src="/static/images/comics/2008-08-26-lateliferealizations.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;shit!     &lt;br /&gt;
该死！&lt;/p&gt;
&lt;p&gt;i'm a bean!       &lt;br /&gt;
我是一粒豌豆！&lt;/p&gt;
&lt;p&gt;how could this have happened??    &lt;br /&gt;
怎么会发生这种事情？？&lt;/p&gt;
&lt;p&gt;hello, son.   &lt;br /&gt;
嗨，儿子。&lt;/p&gt;
&lt;p&gt;oh yeah.      &lt;br /&gt;
哦，原来如此。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-28:2015/10/2008-08-26-lateliferealizations.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #4098：海参</title><link>https://mozillazg.com/2015/10/4098.hackeddddd.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4098/"&gt;Cyanide &amp;amp; Happiness #4098 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4098.hackeddddd.zh-cn.png" src="/static/images/comics/4098.hackeddddd.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;don't you know that sea
cucumbers expell
their internal organs as
a defense mechanism?          &lt;br /&gt;
你难道不知道海参通过吐内脏来防御敌害？&lt;/p&gt;
&lt;p&gt;so i'm just defending
myself successfully?          &lt;br /&gt;
所以，我只是防卫成功了？&lt;/p&gt;
&lt;p&gt;yup!      &lt;br /&gt;
是的！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-28:2015/10/4098.hackeddddd.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：消极彩票</title><link>https://mozillazg.com/2015/10/2008-05-13-thenegativelottery.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/05/13/the-negative-lottery/"&gt;http://buttersafe.com/2008/05/13/the-negative-lottery/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-05-13-thenegativelottery.zh-cn.png" src="/static/images/comics/2008-05-13-thenegativelottery.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-27:2015/10/2008-05-13-thenegativelottery.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #3709：睡</title><link>https://mozillazg.com/2015/10/3709.sleepwife.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3709/"&gt;Cyanide &amp;amp; Happiness #3709 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3709.sleepwife.zh-cn.png" src="/static/images/comics/3709.sleepwife.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-26:2015/10/3709.sleepwife.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：牙齿</title><link>https://mozillazg.com/2015/10/2011-08-30-jaws.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2011/08/30/jaws/"&gt;http://buttersafe.com/2011/08/30/jaws/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2011-08-30-jaws.zh-cn.png" src="/static/images/comics/2011-08-30-jaws.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-25:2015/10/2011-08-30-jaws.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：糟糕的松饼</title><link>https://mozillazg.com/2015/10/2007-06-07-CrappyMuffin.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2007/06/07/the-crappy-muffin/"&gt;http://buttersafe.com/2007/06/07/the-crappy-muffin/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2007-06-07-CrappyMuffin.zh-cn.png" src="/static/images/comics/2007-06-07-CrappyMuffin.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, what's going on?     &lt;br /&gt;
嘿，你在干嘛呢？&lt;/p&gt;
&lt;p&gt;oh geeze...
you made a crappy muffin.         &lt;br /&gt;
哦，天啦。。。
你做了一个非常糟糕的松饼。&lt;/p&gt;
&lt;p&gt;yep...    &lt;br /&gt;
是的。。。&lt;/p&gt;
&lt;p&gt;it's really crappy.   &lt;br /&gt;
它真的非常糟糕。&lt;/p&gt;
&lt;p&gt;it is the carppiest
muffin.   &lt;br /&gt;
它是最糟糕的松饼了。&lt;/p&gt;
&lt;p&gt;well, i guess i'm
going down to city hall
now.      &lt;br /&gt;
嗯。我想我现在要去市政厅了。&lt;/p&gt;
&lt;p&gt;you know...   &lt;br /&gt;
你知道。。。&lt;/p&gt;
&lt;p&gt;to get your son's
name changed to
'crappy muffin'.          &lt;br /&gt;
去把你儿子的名字改成“糟糕的松饼”吧。&lt;/p&gt;
&lt;p&gt;oh hey billy.     &lt;br /&gt;
哦，嘿，比利。&lt;/p&gt;
&lt;p&gt;is that a--   &lt;br /&gt;
那是一个——&lt;/p&gt;
&lt;p&gt;yeah, your dad
made a ccrappy muffin.    &lt;br /&gt;
是的，你的爸爸做了一个糟糕的松饼。&lt;/p&gt;
&lt;p&gt;so i guess you're
going to--
我想你要去——&lt;/p&gt;
&lt;p&gt;city hall, yeah.      &lt;br /&gt;
市政厅，是的。&lt;/p&gt;
&lt;p&gt;well, goodbye.    &lt;br /&gt;
好了，再见。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-24:2015/10/2007-06-07-CrappyMuffin.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：一个婴儿</title><link>https://mozillazg.com/2015/10/2007-05-17-ABaby.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2007/05/17/a-baby/"&gt;http://buttersafe.com/2007/05/17/a-baby/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2007-05-17-ABaby.zh-cn.png" src="/static/images/comics/2007-05-17-ABaby.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh...             &lt;br /&gt;
哦。。。&lt;/p&gt;
&lt;p&gt;a baby.           &lt;br /&gt;
一个婴儿。&lt;/p&gt;
&lt;p&gt;ok, you can stay here.        &lt;br /&gt;
好吧，你可以待在这里。&lt;/p&gt;
&lt;p&gt;...if you prove your might.           &lt;br /&gt;
。。。如果你能证明你的实力的话。&lt;/p&gt;
&lt;p&gt;you'll need this.         &lt;br /&gt;
你需要这个。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 22 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-22:2015/10/2007-05-17-ABaby.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #4093：不给糖就捣乱</title><link>https://mozillazg.com/2015/10/4093.trickortreat.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4093/"&gt;Cyanide &amp;amp; Happiness #4093 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4093.trickortreat.zh-cn.png" src="/static/images/comics/4093.trickortreat.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;trick or treat!       &lt;br /&gt;
不给糖就捣乱！&lt;/p&gt;
&lt;p&gt;i just love your costume!
guess what my son is for halloween!       &lt;br /&gt;
我喜欢你的衣服！
猜猜我儿子为万圣节准备了什么！&lt;/p&gt;
&lt;p&gt;he's a ghots, too!    &lt;br /&gt;
他也是个幽灵！&lt;/p&gt;
&lt;p&gt;ever since he overdosed...        &lt;br /&gt;
自从他用药过量以后。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 22 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-22:2015/10/4093.trickortreat.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2130：钱包</title><link>https://mozillazg.com/2015/10/2130.wallet.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2130/"&gt;Cyanide &amp;amp; Happiness #2130 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2130.wallet.zh-cn.png" src="/static/images/comics/2130.wallet.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, have you seen
my wallet anywhere?   &lt;br /&gt;
嘿，你有看到过我的钱包吗？&lt;/p&gt;
&lt;p&gt;i hid it. i think you
have a very serious
gambling addiction    &lt;br /&gt;
我藏起来了。我认为你有非常严重
的赌博嗜好&lt;/p&gt;
&lt;p&gt;what? i do not!!      &lt;br /&gt;
什么？我没有！！&lt;/p&gt;
&lt;p&gt;bet you $5,000 you do     &lt;br /&gt;
赌 5000 块你有&lt;/p&gt;
&lt;p&gt;you're on!    &lt;br /&gt;
一言为定！&lt;/p&gt;
&lt;p&gt;shit      &lt;br /&gt;
该死&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-21:2015/10/2130.wallet.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3341：嘿</title><link>https://mozillazg.com/2015/10/3341.boo.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3341/"&gt;Cyanide &amp;amp; Happiness #3341 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3341.boo.zh-cn.png" src="/static/images/comics/3341.boo.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-20:2015/10/3341.boo.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>修复 gitlab 中 fork 失败，提示 "visibility level private visibility has been restricted"</title><link>https://mozillazg.com/2015/10/gitlab-fix-fork-error-because-visibility-level-private-visibility-has-been-restricted-by-your-gitlab-administrator.html</link><description>&lt;p&gt;版本：Gitlab 8.0.4, 错误截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="gitlab-fork-error-1.png" src="/static/images/2015/gitlab-fork-error-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;出现这个错误是因为管理员没有配置 private 仓库允许 被 fork。解决办法如下（管理员身份操作）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入【admin area】                 &lt;br /&gt;
&lt;img alt="" src="/static/images/2015/gitlab-fork-error-2.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【settings】             &lt;br /&gt;
&lt;img alt="" src="/static/images/2015/gitlab-fork-error-3.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改【Restricted visibility levels】，&lt;strong&gt;取消&lt;/strong&gt; Private 的选中状态          &lt;br /&gt;
&lt;img alt="" src="/static/images/2015/gitlab-fork-error-4.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-20:2015/10/gitlab-fix-fork-error-because-visibility-level-private-visibility-has-been-restricted-by-your-gitlab-administrator.html</guid><category>gitlab</category></item><item><title>buttersafe：蜗牛邮件</title><link>https://mozillazg.com/2015/10/2007-05-15-snailmail.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2007/05/15/snail-mail/"&gt;http://buttersafe.com/2007/05/15/snail-mail/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2007-05-15-snailmail.zh-cn.png" src="/static/images/comics/2007-05-15-snailmail.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-19:2015/10/2007-05-15-snailmail.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #2881：惊喜</title><link>https://mozillazg.com/2015/10/2881.comicsurprisehappy1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2881/"&gt;Cyanide &amp;amp; Happiness #2881 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2881.comicsurprisehappy1.zh-cn.png" src="/static/images/comics/2881.comicsurprisehappy1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-18:2015/10/2881.comicsurprisehappy1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4086：噩梦</title><link>https://mozillazg.com/2015/10/4086.bedtime.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4086/"&gt;Cyanide &amp;amp; Happiness #4086 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4086.bedtime.zh-cn.png" src="/static/images/comics/4086.bedtime.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-17:2015/10/4086.bedtime.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：快乐的云朵</title><link>https://mozillazg.com/2015/10/2011-06-16-HappyFluffyClouds.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2011/06/16/happy-fluffy-clouds/"&gt;http://buttersafe.com/2011/06/16/happy-fluffy-clouds/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2011-06-16-HappyFluffyClouds.zh-cn.png" src="/static/images/comics/2011-06-16-HappyFluffyClouds.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-16:2015/10/2011-06-16-HappyFluffyClouds.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：玩具房子</title><link>https://mozillazg.com/2015/10/2009-03-10-tinyhouse.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2009/03/10/tiny-house/"&gt;http://buttersafe.com/2009/03/10/tiny-house/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2009-03-10-tinyhouse.zh-cn.png" src="/static/images/comics/2009-03-10-tinyhouse.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;it's great having a tiny house!   &lt;br /&gt;
有个玩具房子真的是太棒了！&lt;/p&gt;
&lt;p&gt;now i can take my home with
me wherever i go!     &lt;br /&gt;
现在我无论去哪里都可以带着我的家了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-15:2015/10/2009-03-10-tinyhouse.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #1592：消息</title><link>https://mozillazg.com/2015/10/1592.news.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1592/"&gt;Cyanide &amp;amp; Happiness #1592 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1592.news.zh-cn.png" src="/static/images/comics/1592.news.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;are you claire maxworth?      &lt;br /&gt;
你是克莱尔•霍沃思吗？&lt;/p&gt;
&lt;p&gt;yes...    &lt;br /&gt;
是的。。。&lt;/p&gt;
&lt;p&gt;i'm sorry to tell you this,
ma'am. your husband is dead. he--     &lt;br /&gt;
夫人，很遗憾的告诉你。
你的丈夫去世了。他——&lt;/p&gt;
&lt;p&gt;what?!        &lt;br /&gt;
什么？！&lt;/p&gt;
&lt;p&gt;how?? no... no...
this can't be happening...        &lt;br /&gt;
怎么会？？不。。。不。。。
怎么能发生这种事情。。。&lt;/p&gt;
&lt;p&gt;do you always interrupt
people like that?     &lt;br /&gt;
你总是这样打断别人吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 14 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-14:2015/10/1592.news.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3325：恶心</title><link>https://mozillazg.com/2015/10/3325.my.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3325/"&gt;Cyanide &amp;amp; Happiness #3325 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3325.my.zh-cn.png" src="/static/images/comics/3325.my.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 13 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-13:2015/10/3325.my.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4084：大战</title><link>https://mozillazg.com/2015/10/4084.fightyfiigghh.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4084/"&gt;Cyanide &amp;amp; Happiness #4084 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4084.fightyfiigghh.zh-cn.png" src="/static/images/comics/4084.fightyfiigghh.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-12:2015/10/4084.fightyfiigghh.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4085：犯法吗？</title><link>https://mozillazg.com/2015/10/4085.masturbating-to-porn2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4085/"&gt;Cyanide &amp;amp; Happiness #4085 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4085.masturbating-to-porn2.zh-cn.png" src="/static/images/comics/4085.masturbating-to-porn2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-11:2015/10/4085.masturbating-to-porn2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4079：皮肤</title><link>https://mozillazg.com/2015/10/4079.skinface.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4079/"&gt;Cyanide &amp;amp; Happiness #4079 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4079.skinface.zh-cn.png" src="/static/images/comics/4079.skinface.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-09:2015/10/4079.skinface.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4077：打标签</title><link>https://mozillazg.com/2015/10/4077.taggy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4077/"&gt;Cyanide &amp;amp; Happiness #4077 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4077.taggy.zh-cn.png" src="/static/images/comics/4077.taggy.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-10-08:2015/10/4077.taggy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：现在睡觉太早了</title><link>https://mozillazg.com/2015/09/2007-07-10-tooearlyforbed.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2007/07/10/too-early-for-bed/"&gt;http://buttersafe.com/2007/07/10/too-early-for-bed/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2007-07-10-tooearlyforbed.zh-cn.png" src="/static/images/comics/2007-07-10-tooearlyforbed.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-29:2015/09/2007-07-10-tooearlyforbed.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：新宠物</title><link>https://mozillazg.com/2015/09/2008-04-17-NewPet.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/04/17/the-new-pet/"&gt;http://buttersafe.com/2008/04/17/the-new-pet/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-04-17-NewPet.zh-cn.png" src="/static/images/comics/2008-04-17-NewPet.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-28:2015/09/2008-04-17-NewPet.zh-cn.html</guid><category>buttersafe</category></item><item><title>《High Performance Django》阅读笔记（三）</title><link>https://mozillazg.com/2015/09/high-performance-django-note-3.html</link><description>&lt;p&gt;&lt;a href="http://book.douban.com/subject/26359018/"&gt;&lt;img alt="" src="/static/images/reading/s28041145.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;第四章：预备&lt;/h2&gt;
&lt;h3&gt;使用 Jmeter 进行负载测试&lt;/h3&gt;
&lt;p&gt;这一部分主要讲解了 Jmeter 的各种是否方法及配置。&lt;/p&gt;
&lt;h3&gt;启动计划&lt;/h3&gt;
&lt;p&gt;启动的时候有些东西需要考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用负载均衡器在新的和旧的之间分流&lt;/li&gt;
&lt;li&gt;使用“dark launch”，这样用户就不会感觉到他们访问的是新的服务器&lt;/li&gt;
&lt;li&gt;使用代理功能分一部分流量到新的服务器&lt;/li&gt;
&lt;li&gt;使用特性标志来发布一个新的特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发送流量到一个新的没有缓存的服务器可能会导致临时的高负载
从而在缓存热和起来前击垮你的服务器。预热你的缓存可以解决这个问题。一个比较简单的办法是使用一个脚本在有真实请求前去抓取你的网站上的热门 URLs。&lt;/p&gt;
&lt;p&gt;不要在一天的最后时间段或周五的时候升启动，除非你想让你的
整个团队在晚上或周末加班。
你应该在大家都在并且有几个小时或几天的时间来处理
启动过程中出现的问题时候启动，同时也要确保你的成员有时间休息。
如果你的网站访问量比较高的话，尝试在访问量比较低的时间段进行升级操作。&lt;/p&gt;
&lt;h3&gt;启动前的检查事项&lt;/h3&gt;
&lt;h4&gt;Django 配置项&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DEBUG&lt;/code&gt; 和 &lt;code&gt;TEMPLATE_DEBUG&lt;/code&gt; 都设为 &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt; 是个非常大的随机字符串并且保密&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ALLOWED_HOSTS&lt;/code&gt; 包含了访问者可能会使用的有效域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TEMPLATE_LOADERS&lt;/code&gt;: Cached template loader 已启用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SESSION_ENGINE&lt;/code&gt; 比默认设置更快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CACHES&lt;/code&gt;: 使用 Memcached 或 Redis 后端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt; 和 &lt;code&gt;MEDIA_URL&lt;/code&gt; 接受并显示文件上传&lt;/li&gt;
&lt;li&gt;管理员账户被限制并且有一个强壮的密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;部署&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过点击各种页面和链接的方式来确认网站是否按预期的结果
  工作（没有挂掉的图片和链接）&lt;/li&gt;
&lt;li&gt;Django 日志是否正常工作&lt;/li&gt;
&lt;li&gt;监控平台是否接收到数据。确保你能看到整个技术栈中各级
  的错误信息。&lt;/li&gt;
&lt;li&gt;错误被汇报并且触发了通知&lt;/li&gt;
&lt;li&gt;第三方服务能够接收到数据（支付，分析等等）&lt;/li&gt;
&lt;li&gt;从你的应用服务和 Celery workers 中发出邮件的功能
  能够正常运行&lt;/li&gt;
&lt;li&gt;自定义的错误页面（400，500）已经在各个级别中被设置（负载均衡器，web 加速器，Django）&lt;/li&gt;
&lt;li&gt;Django admin 没法通过 /admin/ 公开访问&lt;/li&gt;
&lt;li&gt;SSL 证书有效并且设置是安全的。&lt;/li&gt;
&lt;li&gt;Django-secure 的 &lt;code&gt;manage.py checksecure&lt;/code&gt; 运行起来没有错误输出&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;基础设施&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;服务器和服务是安全的，已经锁好了大门&lt;/li&gt;
&lt;li&gt;有个简单，正式的程序用来部署新的代码&lt;/li&gt;
&lt;li&gt;你有一个可以在需要的时候快速水平扩展服务的计划&lt;/li&gt;
&lt;li&gt;DNS TTL 可以被修改为 5 分钟或更短的时间在需要更改的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 The Launch&lt;/h2&gt;
&lt;h3&gt;监控整个 Launch&lt;/h3&gt;
&lt;h4&gt;服务器资源&lt;/h4&gt;
&lt;p&gt;可以使用如下工具参考服务器资源使用情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;varnishstat&lt;/li&gt;
&lt;li&gt;varnishhist&lt;/li&gt;
&lt;li&gt;varnishtop&lt;/li&gt;
&lt;li&gt;varnishlop&lt;/li&gt;
&lt;li&gt;uwsgitop&lt;/li&gt;
&lt;li&gt;celery inspect&lt;/li&gt;
&lt;li&gt;celery events&lt;/li&gt;
&lt;li&gt;flower&lt;/li&gt;
&lt;li&gt;memcache-top&lt;/li&gt;
&lt;li&gt;pg_top&lt;/li&gt;
&lt;li&gt;pg_stat_statements&lt;/li&gt;
&lt;li&gt;pt-query-digest&lt;/li&gt;
&lt;li&gt;mytop&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;当灾难来临的时候&lt;/h3&gt;
&lt;h4&gt;应用服务器过载&lt;/h4&gt;
&lt;p&gt;最简单的办法就是通过增加服务器的方式进行水平扩展。
不过你需要注意这将导致你的数据库承受更大的压力，
可能会把数据库搞挂。&lt;/p&gt;
&lt;p&gt;当你通过增加服务器的方式把负载降低到可以接受的级别后，
你就需要使用你的低级别的工具来查看为什么会出现负载过高的
情况。你的 web 加速器端缓存命中率过低是一个需要考虑的因素。&lt;/p&gt;
&lt;h4&gt;数据库服务器过载&lt;/h4&gt;
&lt;p&gt;如果你的网站是 读多写少的话，可以通过增加 replica 的方式来简单解决响应时间问题。
同时也看看是否在数据库优化时遗漏某些可以优化的项。&lt;/p&gt;
&lt;h4&gt;应用和数据库服务器过载&lt;/h4&gt;
&lt;p&gt;你可以从自底向上优化你的数据库，减轻数据库的压力可以让你的应用拥有更高的性能。
你也可以通过优化你的 web 加速器从而减轻应用服务器的压力，进而减轻数据库服务器的压力。&lt;/p&gt;
&lt;h2&gt;前方的路&lt;/h2&gt;
&lt;p&gt;恭喜你的网站已经启动了！现在你需要确保它能够持续稳定的运行。在这个战争中你需要与下列事物做斗争：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的用户（流量增长）&lt;/li&gt;
&lt;li&gt;你的软件（一点点腐烂）&lt;/li&gt;
&lt;li&gt;你（错误的决定）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个没啥好惊讶的，最后两个可能会让你惊讶同时也是让你网站宕机的一些因素。&lt;/p&gt;
&lt;h3&gt;流量增长&lt;/h3&gt;
&lt;p&gt;正常情况下你的网站不应该在技术栈的任何层次占用 100% 的资源，一旦出现超过 70%（CPU,内存，磁盘等等）
的资源占用，那就说明某些地方需要优化了或者增加更多的资源。当流量突增的时候如果你有额外的资源的话就可以很好
的应对。&lt;/p&gt;
&lt;p&gt;有些时候的流量激增可能是商业上进行了某些吸引用户的活动，确保开发者知道这些商业活动，以便应对激增的流量。
一个好的主意是像刚启动时那样，大家在桌子上一起讨论分享这些商业信息。&lt;/p&gt;
&lt;h3&gt;一点点腐烂&lt;/h3&gt;
&lt;p&gt;由于高性能网站使用了很多不同的服务，所以需要保持这些服务打上了最新的安全补丁。
“如果没出现问题，就不要去修复它”是个非常危险的准则。&lt;/p&gt;
&lt;p&gt;跳过几个小版本是没什么问题的，但是不要落下太远，不然的话到时就会失去升级动力。
定期小步升级你的依赖（你的操作系统，主要的服务以及 Python 库）。&lt;/p&gt;
&lt;p&gt;作者的小贴士：&lt;/p&gt;
&lt;p&gt;当 review 升级的时候，我们通常不会使用最新的版本，一般最新版本也意味着有新的 bug ，我想
你不希望当小白鼠吧。给新版本几个月的成熟期。
升级到第一个稳定的版本或者你已经确保这个版本没什么大的问题了。&lt;/p&gt;
&lt;h3&gt;错误的决定&lt;/h3&gt;
&lt;h4&gt;意外的刷新了缓存&lt;/h4&gt;
&lt;p&gt;在流量特别高的时候重启缓存或 web 加速器可能会击垮你的网站。这个问题叫做 &lt;a href="http://en.wikipedia.org/wiki/Cache_stampede"&gt;dog-piling/cache stampede&lt;/a&gt;
所以尽量使用 reload 的方式来更新服务。对于使用 memcached/redis 的缓存可以通过给不同的缓存定义不同的 &lt;code&gt;KEY_PREFIX&lt;/code&gt;
的方式来实现逐个清理缓存（通过 &lt;code&gt;VERSION&lt;/code&gt;）而不是一下子删除所有缓存的功能。
如果一定要重启的话，进行选择在流量低的时候重启服务。&lt;/p&gt;
&lt;h4&gt;数据库锁表&lt;/h4&gt;
&lt;p&gt;数据库锁会临时阻塞主写操作，如果这个操作特别长的话就会成为一个问题。两个比较常见的长时间锁表的场景是： schema migration 和备份。&lt;/p&gt;
&lt;p&gt;在开发的时候， South 和内置的 migration 可以很方便的应用 Model 更改，
但是在生成环境下， migrate 操作可能会导致长时间的锁表现象，这个对你的用户来说就是个糟糕的消息了。
对于 &lt;code&gt;ADD COLUMN&lt;/code&gt; 操作，如果你使用的是 MySQL 数据库的话你需要留意一下这个，但是 PostgreSQL 很少会出现这个问题。&lt;/p&gt;
&lt;p&gt;无论你使用哪种数据库，migrations 都需要被 review 并且使用最近的线上数据的副本数据测试过后才能在生产环境使用。&lt;/p&gt;
&lt;p&gt;备份是另一个会导致长时间锁住数据库的操作。最好是在一个只读的 replica 上进行备份操作。&lt;/p&gt;
&lt;h4&gt;大量的缓存过期&lt;/h4&gt;
&lt;p&gt;跟刷新缓存差不多糟糕的事情就是有大量的缓存过期，这将导致数据库压力倍增。
如果你不是很确定的话，应该选择在流量比较低的时候进行部署操作，避免击垮你的站点。&lt;/p&gt;
&lt;h4&gt;昂贵的 admin 视图&lt;/h4&gt;
&lt;p&gt;构建一个未优化的 admin 视图会导致上千的数据库查询。
如果你正在使用一个查询缓存比如 johnny-cache, 每一次在 admin 中保存都将
导致与所在表相关的缓存都将失效。所以 admin 视图也需要像普通视图那样进行优化。&lt;/p&gt;
&lt;h4&gt;昂贵的后台任务&lt;/h4&gt;
&lt;p&gt;未优化，数据库依赖的任务会导致非预期的负载负担。所有应该像优化视图一样优化你的后台任务。&lt;/p&gt;
&lt;h4&gt;逐渐恶化&lt;/h4&gt;
&lt;p&gt;随着新功能的增加，网站的性能也在接受不同的考验，你需要随时关注性能问题。&lt;/p&gt;
&lt;p&gt;每次发布新版本的时候都关注一下性能的变化，如果响应时间变长了或者负载变高了，
立马去解决它。这样就不会出现在几个月的提交过去后再去查找问题所在的情况。&lt;/p&gt;
&lt;h4&gt;complexity creep&lt;/h4&gt;
&lt;p&gt;如果你按照前面所说的步骤做了的话，你已经做的非常好了。
随着你的网站的成长你可能会遇到各种各样的新问题，你可以很容易的就构建自己
独有的解决方法。
构建你自己的工具是件很有乐趣的事情，但是 &lt;a href="http://en.wikipedia.org/wiki/Not_invented_here"&gt;not invented here&lt;/a&gt; 对于长时间运行
的站点是非常危险的。你最好去学习如何让 Varnish 更高效而不是丢弃它转而使用你自己的工具。
这个决定衍生的代价是非常巨大的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;训练新的开发者需要更高的花费。你可以找到一名拥有使用一个比如 Varnish 这种服务经验的开发者，
  但是如果使用你自定义的方案的话，你需要训练每一位在门外徘徊的开发者。&lt;/li&gt;
&lt;li&gt;开发低级别的基础设施工具将会导致开发时间远离了你的核心产品。使用一个支持良好的开源服务，
  你的团队的开发者的效率会很高效。&lt;/li&gt;
&lt;li&gt;写你自己的软件代码不是一锤子买卖。所有的软件都需要不断的开发，测试，文档，等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;最后的想法&lt;/h2&gt;
&lt;p&gt;现在你可以在看看那个老问题“Django doesn't scale”，你是怎么认为的呢？
如果只用 &lt;code&gt;manage.py runserver&lt;/code&gt;，使用 SQLite 在一个非常小的云服务器上跑
当然不会很快。&lt;/p&gt;
&lt;p&gt;让我们回到 2012 年，当 Instagram 只有3个的 Django 团队却支撑起了 1千4百多万的用户的时候，
他们在博客上是 &lt;a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-ofinstances-dozens-of"&gt;这么说的&lt;/a&gt; ：&lt;/p&gt;
&lt;p&gt;我们选择一个系统的核心宗旨是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持非常简单&lt;/li&gt;
&lt;li&gt;不要重复造轮子&lt;/li&gt;
&lt;li&gt;可能的话，使用久经考验的成熟的技术&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们非常同意。因此，在你继续你的 Django 旅程的时候，不要忘了你在这里学到的东西。
简单是指导原则。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-28:2015/09/high-performance-django-note-3.html</guid><category>High Performance Django</category><category>Django</category></item><item><title>Cyanide &amp; Happiness #2423：理发</title><link>https://mozillazg.com/2015/09/2423.comichaircut1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2423/"&gt;Cyanide &amp;amp; Happiness #2423 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2423.comichaircut1.zh-cn.png" src="/static/images/comics/2423.comichaircut1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-27:2015/09/2423.comichaircut1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>《High Performance Django》阅读笔记（二）</title><link>https://mozillazg.com/2015/09/high-performance-django-note-2.html</link><description>&lt;p&gt;&lt;a href="http://book.douban.com/subject/26359018/"&gt;&lt;img alt="" src="/static/images/reading/s28041145.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;第三章：The Deployment&lt;/h2&gt;
&lt;h3&gt;先决条件&lt;/h3&gt;
&lt;h4&gt;操作系统&lt;/h4&gt;
&lt;p&gt;作者推荐使用 Ubuntu。同时作者给出了选择其他操作系统时，需要考虑的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够很容易的就使用 Python 2.7+ 。有些操作系统要安装 2.7+ 版本的 Python 非常的麻烦，如果是这样的话你就要慎重考虑了。&lt;/li&gt;
&lt;li&gt;有长久的安全更新支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;配置管理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Chef, Puppet, Ansible, Salt 都是比较好的配置管理工具&lt;/li&gt;
&lt;li&gt;Fabric 不是配置管理工具，如果你把它当作配置管理工具的话，会有你头疼的时候。你可以在 Fabric 的基础上
  构建你自己的配置管理工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;进程管理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;系统默认的工具：upstart, systemd&lt;/li&gt;
&lt;li&gt;第三方软件：deamontools, supervisord, circus&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;更新代码&lt;/h4&gt;
&lt;p&gt;更新代码一般需要进行下面几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从版本控制服务器上拉取最新的代码&lt;/li&gt;
&lt;li&gt;更新依赖&lt;/li&gt;
&lt;li&gt;合并数据库更改(migrate)&lt;/li&gt;
&lt;li&gt;收集，压缩，推送静态文件到 CDN&lt;/li&gt;
&lt;li&gt;reload WSGI 服务器&lt;/li&gt;
&lt;li&gt;重启后台 workers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐写个脚本自动执行这些操作，这样不容易出错。如果要更新多台服务器的话，可以使用远程执行
框架来做这种事情，比如： Salt, Fabric。&lt;/p&gt;
&lt;p&gt;有一点特别要注意的是，一旦服务上线就应该尽可能的使用平滑 reload 的方式来代替重启进程的暴力方式。&lt;/p&gt;
&lt;h4&gt;多个远程环境&lt;/h4&gt;
&lt;p&gt;至少要有两个环境吧：打包/开发环境，生产环境。
同时多个环境尽量保证一致性，尤其是多个生产环境之间（设置，软件，系统，等等）。
不过有些东西还行要区分的，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三方服务配置。比如，你肯定不希望在开发环境下触发支付操作或发送文件到生产环境下的 CDN 上。&lt;/li&gt;
&lt;li&gt;获取数据的问题。经常看到某些人在开发环境下使用线上数据库的副本，但是这里有几个问题要考虑：&lt;ul&gt;
&lt;li&gt;你的开发环境更生产环境一样安全吗？监控松散的开发机器是黑帽黑客经常会攻击的目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能会从你的应用中发送邮件或通知吗？从你的开发环境下向你的用户发送数千封邮件不仅是非常
  尴尬的事情，同时也会影响你们的商业。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;避免单点故障&lt;/h4&gt;
&lt;p&gt;要经常备份，确保你知道所有存储的数据（数据库，用户上传的数据，等等）都有备份。这样出现故障的时候
其他其他机器的时候丢失的数据会少一点。&lt;/p&gt;
&lt;p&gt;高可用是一个可以考虑的方法，如果对你的商业来说他是非常重要的话。 HA 可以保证在出现服务挂掉
的情况下能够无缝自动切换到备用服务或者说不用手动切换。不过需要注意的是通常构建高可用
的花费比服务当掉的花费还高。&lt;/p&gt;
&lt;p&gt;在考虑架构的时候要考虑到如何解决单点故障的问题。举个例子，当使用第三方的 Amazon EC2 的时候，
你是否能够接受某些区域的设备宕机，整个地区呢？如果服务商 Amazone 当了怎么办？
越早考虑这些问题就能在灾难实际发生的时候更好的应对。&lt;/p&gt;
&lt;h3&gt;服务器布局&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡器： 可以使用云服务商提供的负载均衡服务或者使用 nginx, Haproxy。对于负载均衡器网络
  带宽是个非常重要的注意点。&lt;/li&gt;
&lt;li&gt;Web 加速器：网络带宽和内存是值得关注的点&lt;/li&gt;
&lt;li&gt;应用：CPU 和内存值得关注。&lt;/li&gt;
&lt;li&gt;后台运行的 workers：后台运行的任务通常都是 CPU 密集型的任务并且运行在独立的服务器上。一个服务器上可以运行
  多个 workers。&lt;/li&gt;
&lt;li&gt;缓存：你的缓存服务器需要更多的内存。另一个需要注意就是网络带宽，它可能会在内存之前成为瓶颈。如果网络开始
  拥堵的时候， Django 可以配置多个缓存服务器。&lt;/li&gt;
&lt;li&gt;数据库：足够的内存非常重要，最用是足够把你的数据都装载在内存里。
  如果你预期会有 64GB 的数据，那么至少要有 64GB 的内存。
  磁盘速度也非常重要。购买你能够负担得起的最快的磁盘。
  如果你用的是虚拟机的话，你需要留意你其实是在跟你的邻居共享一个物理磁盘，常规的实践是尽可能的买最大的虚拟机。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;优化技术栈&lt;/h3&gt;
&lt;h4&gt;优化数据库&lt;/h4&gt;
&lt;h4&gt;优化 uWSGI&lt;/h4&gt;
&lt;h4&gt;优化 Django&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;CACHES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你使用 Memcached，使用 pylibmc 这个库会有更高的性能。
redis 的话可以使用 &lt;a href="http://niwibe.github.io/django-redis"&gt;django-redis&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;缓存过期是第一个需要面临的问题，一个缓存 key 过期或者被刷新都有可能摧毁你的数据库。
幸运的是有个简单包可以解决这个问题： &lt;a href="https://github.com/joshourisman/django-newcache"&gt;django-newcache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有一个问题就是如果缓存服务器宕机了会到期用户收到 “500 Server Error”的响应。
将使用一个缓存服务器改为三个可以降低出错的几率。
你需要考虑当缓存服务器宕机的时候，你是需要你的网站也跟着宕机，还是希望你的应用继续
运行良好只是把它当作缓存未命中来处理？作者创建了一个 &lt;a href="https://github.com/lincolnloop/django-ft-cache"&gt;django-ft-cache&lt;/a&gt; 包用来
解决这个问题，它会将任何的 memcached 操作用 try/except 包裹，捕获这里的异常，
这样缓存服务器当掉时请求依然可以被正确处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SESSION_ENGINE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把 session 保存在数据库中非常影响性能，一个好的办法是保存在缓存中。如果用 redis 的话
可以使用 cache backend, 用 memcached 的话 cached_db backend 也还行。
另一个办法就是使用 signed_cookies backend, 让客户端存储 session 数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DATABASES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;DATABASES&lt;/code&gt; 设置增加 &lt;code&gt;CNN_MAX_AG&lt;/code&gt; key 选项来定义重用数据库连接。
比如 300, 这将告诉 Django 保持打开和重用数据库连接 5 分钟。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOGGING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要定义 LOGGING 将日志保存到文件中，而是应该输出到 &lt;code&gt;STDERR&lt;/code&gt; ，让进程管理器来处理日志。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MIDDLEWARE_CLASSES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要轻易自定义中间件，因为中间件会在每个请求中执行。所以确保你知道每个中间件都做了什么，
以及尽可能的不要在中间件中执行数据库查询操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常规安全问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要注意 clickjacking 和 XSS(Cross Site Scripting)。最简单的方法是使用
&lt;a href="https://github.com/carljm/django-secure#readme"&gt;django-secure&lt;/a&gt; 项目来检查安全问题。
另一个安全问题是，确保你的 admin 后台处于保护中，如果你把它开放出去了，确保使用了非常
复杂的管理员密码。最好是把它变成一个内网服务，让它不能从外部互联网访问。&lt;/p&gt;
&lt;h3&gt;配置你的服务器&lt;/h3&gt;
&lt;h4&gt;安全&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;调整 SSH 配置：禁用 &lt;code&gt;root&lt;/code&gt; 登录，禁用密码登录，更改默认端口。&lt;/li&gt;
&lt;li&gt;应用安全补丁：关注一下系统安全问题，及时更新 zer-day 补丁（比如，Hearbleed）&lt;/li&gt;
&lt;li&gt;使用私有网络：大多数云服务器都提供私有网络服务，只允许访问你帐号下的服务。在私有网络
  中访问你的服务器可以加大被人攻击你的难度。&lt;/li&gt;
&lt;li&gt;保护内网服务：内网服务包括控制台，开发服务器，持续集成系统。它们会成为你安全网络的一道暗门。
  将它们用 VPN 或认证代理锁起来，如果你没有使用 VPN 的话，确保传输数据以及登录时总是使用 SSL/HTTPS。
  锁住你的开发环境可以确保 google 不会抓取它从而伤害你的 SEO）&lt;/li&gt;
&lt;li&gt;防火墙：只允许指定端口和 IP 访问你的服务器。硬件防火墙很棒，软件防火墙比如 iptables 也不错。&lt;/li&gt;
&lt;li&gt;不要在 root 下运行：不在 root 下运行可以防止某些人运用 RCE(remote code execution)获取你服务器的
  root 访问权限。使用标准用户登录服务器，只在必要时使用 sudo。&lt;/li&gt;
&lt;li&gt;保护你的第三方服务的账户：使用强壮的密码，尽可能的开启两步验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;备份&lt;/h4&gt;
&lt;p&gt;对于数据库，有一个运行的 replica 可以很方便的执行全备份。推荐在半夜执行全备份。
进行备份的时候有几个问题需要问一下你自己：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有人黑进了你的服务器，他们能够删掉或破坏你的备份吗？
  基于这个原因拉取到备份服务器比推送要更好。&lt;/li&gt;
&lt;li&gt;如果有人拿到了你的备份会有多糟糕？加密备份文件并且确保黑客没法在同一个服务器上找到解密的方法（注：比如可以使用公钥进行加密，同时服务器上不要存有私钥，这样就不会被黑客在服务器上找到解密的方法）。&lt;/li&gt;
&lt;li&gt;你有测试过备份是否可用吗？定期测试你的备份，验证它们是否真的有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;监控&lt;/h3&gt;
&lt;p&gt;没有监控的话，线上网站就会成为一个大黑盒。你没法知道实际情况是怎样的，也就没法进行性能优化了。&lt;/p&gt;
&lt;h4&gt;instrumentation&lt;/h4&gt;
&lt;p&gt;对于应用，你需要知道下面这个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的系统中最慢的部分是什么？&lt;/li&gt;
&lt;li&gt;Django 处理响应的平均耗时是多少？&lt;/li&gt;
&lt;li&gt;哪个视图是最慢的？或者花费最多的时间？&lt;/li&gt;
&lt;li&gt;哪个数据库查询是最慢的？或者花费最多的时间？&lt;/li&gt;
&lt;li&gt;这些数据一段时间内是如何变化的？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://newrelic.com/"&gt;NewRelic&lt;/a&gt; 是个探测这些问题的比较好的服务，它可以很方便的安装。
然而， NewRelic 是闭源的，专有的系统，同时也非常的贵。有一些开源产品可以替代它。
比如：Graphite&lt;/p&gt;
&lt;h4&gt;服务器资源&lt;/h4&gt;
&lt;p&gt;关于服务器资源需要监控如下数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均负载&lt;/li&gt;
&lt;li&gt;CPU 负载&lt;/li&gt;
&lt;li&gt;物理内存使用情况&lt;/li&gt;
&lt;li&gt;磁盘相关数据&lt;/li&gt;
&lt;li&gt;网络 I/O&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;告警&lt;/h4&gt;
&lt;p&gt;下列情况需要发送告警：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超过 X% 的请求出现错误&lt;/li&gt;
&lt;li&gt;服务器宕机&lt;/li&gt;
&lt;li&gt;服务器资源占用过高：负载，虚拟内存，磁盘等等&lt;/li&gt;
&lt;li&gt;服务未响应&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;日志&lt;/h4&gt;
&lt;p&gt;需要收集如下日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从你的负载均衡器都应用的 Apache 风格的日志&lt;/li&gt;
&lt;li&gt;任何应用内的日志&lt;/li&gt;
&lt;li&gt;相关服务的 syslog 日志&lt;/li&gt;
&lt;li&gt;数据库慢查询日志，以及在不会导致数据库连接的 I/O 问题（尤其是磁盘或网络）的前提下收集所有数据库查询的日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;错误汇报&lt;/h4&gt;
&lt;p&gt;在生成环境下 Django 默认会在出现异常时给网站管理员发送异常邮件。这个功能有时也会导致一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Email 不利于追踪错误&lt;/li&gt;
&lt;li&gt;如果你的错误发生在一个高访问的页面的话，你实际上是在 DoS 你的邮件服务器，
  可能导致被加入黑名单，或者你的邮件服务商会关掉你的服务（他们不想在几秒内发送超过 10K 的邮件）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;幸运的是，更好的错误汇报方式已经存在了，开源的 &lt;a href="https://www.getsentry.com/"&gt;Sentry&lt;/a&gt; 项目是个非常好的解决方案。
Sentry 并不会发送 10K 的邮件，它之后在第一次出现错误时邮件通知你，之后收集并在 Web 页面上
暂时其他时候的错误用于分析问题。&lt;/p&gt;
&lt;p&gt;还有一个关于错误的主题就是确保有一个漂亮的不引来应用服务的 500.html 文件，并且已经在服务器上配置好了出错是使用
这个页面。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-27:2015/09/high-performance-django-note-2.html</guid><category>High Performance Django</category><category>Django</category></item><item><title>Cyanide &amp; Happiness #4067：期望</title><link>https://mozillazg.com/2015/09/4067.expectations.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4067/"&gt;Cyanide &amp;amp; Happiness #4067 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4067.expectations.zh-cn.png" src="/static/images/comics/4067.expectations.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-26:2015/09/4067.expectations.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>《High Performance Django》阅读笔记（一）</title><link>https://mozillazg.com/2015/09/high-performance-django-note-1.html</link><description>&lt;p&gt;&lt;a href="http://book.douban.com/subject/26359018/"&gt;&lt;img alt="" src="/static/images/reading/s28041145.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一句话点评：老司机的经验之谈，物有所值。&lt;/p&gt;
&lt;h2&gt;第一章：The Big Picture&lt;/h2&gt;
&lt;p&gt;作者开篇就提到大家总说 Django 性能不行，但是实际上
有很多高性能的站点是使用 Django 开发的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django’s scaling success stories are almost too numerous to list at this point. It backs Disqus,
Instagram, and Pinterest. Want some more proof? Instagram was able to sustain over 30
million users on Django with only 3 engineers (2 of which had no back-end development
experience). Disqus serves over 8 billion page views per month. Those are some huge
numbers. These teams have proven Django most certainly does scale. Our experience here
at Lincoln Loop backs it up. We’ve built big Django sites capable of spending the day on
the Reddit homepage without breaking a sweat.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在作者的公司，他们开发高性能 Django 站点的准则就是 &lt;strong&gt;simplicity&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using as few moving parts as possible to make it all work. “Moving parts” may be
servers, services or third-party software.&lt;/li&gt;
&lt;li&gt;Choosing proven and dependable moving parts instead of the new hotness.&lt;/li&gt;
&lt;li&gt;Using a proven and dependable architecture instead of blazing your own trail.&lt;/li&gt;
&lt;li&gt;Deflecting traffic away from complex parts and toward fast, scalable, and simple parts .&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Simple systems are easier to scale, easier to understand, and easier to develop. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建高性能 Web 应用通常需要关注一下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库。关系型数据库通常是整个技术栈中最慢最复杂的部分，一个办法是改用 NoSQL 数据库，不过
  大多数情况下都可以通过缓存解决。&lt;/li&gt;
&lt;li&gt;模板。我们可以用一个更快的模板引擎替换 Django 自带的模板引擎，不过即便是这样模板仍旧是
  整个技术栈中第二慢的部分。我们仍然可以通过缓存解决这个问题。&lt;/li&gt;
&lt;li&gt;Python。Python 在通常情况下已经足够快了。我们可以使用 Web 加速器（比如：Varnish）缓存服务器响应，
  在请求进入到 Python 那一层之前就返回相应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这章作者一直在强调缓存，"CACHE ALL THE THINGS"。无论你怎么优化你的技术栈，没有比缓存更快的优化方案。
说到缓存可能大家可能会顾虑缓存过期的问题，作者说了现在先别关心这个问题，之后会给出解决方案。&lt;/p&gt;
&lt;p&gt;作者提到一般的网站都保护这几层：负载均衡器，Web 加速器，APP 服务器，缓存，数据库。&lt;/p&gt;
&lt;p&gt;顺便提了一个 HTTPS 的负载均衡配置方法：客户端与负载均衡器之间使用 HTTPS，负载均衡器与后端服务之间使用 HTTP。这样既保证了安全又可以减少 HTTPS 对性能的影响。&lt;/p&gt;
&lt;h2&gt;第二章 The Build&lt;/h2&gt;
&lt;h3&gt;小技巧&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本地开发环境应该尽可能的与线上环境一致：相同的数据库，相同的操作系统以及相同的软件版本。。。&lt;/li&gt;
&lt;li&gt;组织 settings 文件，创建一个基础的配置文件 settings/base.py ，然后再为开发，测试，部署分别创建一个配置文件，一些重要的配置信息可以通过环境变量获取&lt;ul&gt;
&lt;li&gt;settings/base.py&lt;/li&gt;
&lt;li&gt;settings/dev.py&lt;/li&gt;
&lt;li&gt;settings/deploy.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里作者有提到一个小技巧，那就是环境变量的值都是字符串，那么如果将值转换为布尔值，元组甚至字典呢？答案就是可以使用 ast 模块:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt;&amp;gt;&amp;gt; ast.literal_eval(&amp;#39;True&amp;#39;)
     True

    &amp;gt;&amp;gt;&amp;gt; ast.literal_eval(&amp;#39;1, 2, 3&amp;#39;)
     (1, 2, 3)

    &amp;gt;&amp;gt;&amp;gt; ast.literal_eval(&amp;#39;{&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;}&amp;#39;)
     {&amp;#39;foo&amp;#39;: &amp;#39;bar&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;小心第三方 APP&lt;/h3&gt;
&lt;p&gt;在决定使用某个第三方 APP 之前，先回答下面几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它真的符合你的需求吗？还是只是有点相近？&lt;/li&gt;
&lt;li&gt;它是个健康的项目吗？&lt;ul&gt;
&lt;li&gt;维护者有一个好的追踪记录吗？&lt;/li&gt;
&lt;li&gt;文档写的好吗？&lt;/li&gt;
&lt;li&gt;测试覆盖率够吗？&lt;/li&gt;
&lt;li&gt;社区怎样（贡献者，pull requests 等等）？&lt;/li&gt;
&lt;li&gt;还在处于活跃开发吗？&lt;/li&gt;
&lt;li&gt;有很多旧的 issues 和 pull requests 吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能咋样？&lt;ul&gt;
&lt;li&gt;它会产生多少数据库查询？&lt;/li&gt;
&lt;li&gt;易于缓存吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跟你项目的其他部分有冲突吗？&lt;/li&gt;
&lt;li&gt;它的授权协议跟你的项目兼容吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不再维护以及不稳定的第三方应用很快就会成为你的项目的负债。
可以尝试阅读源代码，然后从中找出你的项目需要的代码然后应用到项目中。&lt;/p&gt;
&lt;h3&gt;找出性能问题&lt;/h3&gt;
&lt;p&gt;可以使用下面这些工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://django-debug-toolbar.readthedocs.org/"&gt;Django Debug Toolbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/recamshak/django-debug-panel"&gt;django-debug-panel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dcramer/django-devserver"&gt;django-devserver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;观察页面性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行了多少条 SQL 语句？&lt;/li&gt;
&lt;li&gt;有多少时间花费在数据库上？&lt;/li&gt;
&lt;li&gt;执行了什么特殊的查询操作，每次查询花费多长时间？&lt;/li&gt;
&lt;li&gt;这些查询是有什么代码生成的？&lt;/li&gt;
&lt;li&gt;渲染页面都用到了哪些模板？&lt;/li&gt;
&lt;li&gt;冷/热缓存是如果影响性能的？（提示：可以使用 settings 来切换缓存）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;哪里需要优化&lt;/h3&gt;
&lt;h4&gt;数据库优化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;减少查询次数&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;select_related&lt;/code&gt;, &lt;code&gt;prefetch_related&lt;/code&gt;, (提示：&lt;code&gt;prefetch_related&lt;/code&gt; 要放在查询的最后，不然会没有效果。)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少查询时间&lt;ul&gt;
&lt;li&gt;不要忘记加索引（索引也是有代价的，每次对数据库进行写操作都需要更新索引）&lt;/li&gt;
&lt;li&gt;某些情况下 join 查询性能很差，在这种情况下两条查询语句比一条 join 耗时更少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制结果数&lt;ul&gt;
&lt;li&gt;留意 &lt;code&gt;.all()&lt;/code&gt; 只取需要的结果数, &lt;code&gt;queryset[:20]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;count 查询很慢。可以的话，不要使用 count。比如使用 &lt;code&gt;.exists()&lt;/code&gt; 代替 count 进行判断记录是否存在。&lt;/li&gt;
&lt;li&gt;generic 外键。generic 外键是个很 cool 的功能，但是它会生成一些特别复杂的查询，所以可能的话，不要使用它。如果你一定要用的话，记得这是个需要缓存的地方。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化 model 方法。如果某个 model 方法在一个请求内会多次被调用，可以使用 &lt;code&gt;cache_property&lt;/code&gt; 缓存方法解决（缓存只在该请求内有效）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.functional&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cached_property&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TheModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@cached_property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expensive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="c1"&gt;# ...&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果太大了，包含了不需要的字段。使用 &lt;code&gt;defer&lt;/code&gt;, &lt;code&gt;only&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt;, &lt;code&gt;values_list&lt;/code&gt; 限制结果大小:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;posts = Post.objects.all().defer(&amp;#39;body&amp;#39;)
posts = Post.objects.all().only(&amp;#39;title&amp;#39;)
posts = Post.objects.all().values(&amp;#39;id&amp;#39;)
posts = Post.objects.all().values_list(&amp;#39;id&amp;#39;)
posts = Post.objects.all().values_list(&amp;#39;id&amp;#39;, flat=True)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缓存查询结果。这里提到两个库: &lt;a href="https://johnny-cache.readthedocs.org/en/latest/"&gt;Johnny Cache&lt;/a&gt; 和 &lt;a href="https://cache-machine.readthedocs.org/en/latest/"&gt;Cache Machine&lt;/a&gt; 这两个库的原理都是在 ORM 和数据库中间加了一个缓存层，将 ORM 生成的 SQL 作为 key 来缓存查询结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;只读 replicas。对那些读远远大于写的站点，可以考虑从 只读 replicas 中读取数据，实现读写分离。减少主库的负担优化性能。&lt;/li&gt;
&lt;li&gt;raw 查询。如果感觉 ORM 有点慢话，可以考虑使用 &lt;code&gt;raw&lt;/code&gt; 方法执行原生的 SQL 语句。&lt;/li&gt;
&lt;li&gt;反范式。这种方法有个问题就是每次更新的时候都需要同时更新其他表中相关的冗余字段。&lt;/li&gt;
&lt;li&gt;使用其他数据存储方式。比如： Postgres, redis, mongodb，使用 Elasticsearch 进行全文检索等。
  需要注意的是，在生产环境下新增一个服务并无法没有代价的。作为开发者我们可以不太在意这个，但是系统需要
  支持，配置，监控，备份等。新增服务的时候要考虑到这些代价以及你的系统管理员的意见。&lt;/li&gt;
&lt;li&gt;sharding。99.9% 的网站都不需要用到数据库的 sharding 功能，所以只有在你确信你遇到了那 0.1% 的时候
  再使用 sharding 功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;模板优化&lt;/h3&gt;
&lt;p&gt;应该缓存模板中一切可以缓存的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;俄罗斯套娃式缓存。在一个模板里缓存嵌套缓存，就像俄罗斯套娃一样，一层套一层。比如:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% cache MIDDLE_TTL &amp;quot;post_list&amp;quot; request.GET.page %}
    {% include &amp;quot;inc/post/header.html&amp;quot; %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-list&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% for post in post_list %}
        {% cache LONG_TTL &amp;quot;post_teaser_&amp;quot; post.id post.last_modified %}
            {% include &amp;quot;inc/post/teaser.html&amp;quot; %}
        {% endcache %}
    {% endfor %}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endcache %}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;自定义一个支持通过 url 参数刷新模板缓存的 cache 标签，这样就可以随时刷新缓存了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;随后处理耗时的任务&lt;/h3&gt;
&lt;p&gt;可以把耗时的，不需要同步知道结果的任务放到类似 celery 的任务队列中异步执行，
从而减少请求——响应的处理时间。下面这些任务可以考虑放到 celery 中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三方 API 的调用&lt;/li&gt;
&lt;li&gt;发邮件&lt;/li&gt;
&lt;li&gt;非常复杂的计算（视频处理，大量的数字处理等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于使用 celery 作者提到了一下小提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要将 model 实例作为任务的参数，可以改用传主键的方式。因为在这期间 model 的数据可能已经发生改变了，
  还有就是那个 model 实例可能不支持序列化。&lt;/li&gt;
&lt;li&gt;保持任务小，不要再一个任务中执行太多的工作。把一个任务分割成多个任务，一方面可以使用多核或多 worker 的
  方式加速任务执行，另一方面，单个任务可以很快的执行完方便安全快速的重启 worker，因为一个 worker 重启时
  会等待正在执行的问题完成，保持任务小巧的话，可以加快部署时间。&lt;/li&gt;
&lt;li&gt;可以考虑使用 celery 的 beat 功能去自习定时任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;前段优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;压缩 css 和 javascript（min, gzip, 版本化静态文件）。（个人建议：版本化文件应该类似这样 foo-xxyy.js 而不是这样 foo.js?v=xxyy ，主要是方便使用 CDN，防止出现缓存未过期的情况。）&lt;/li&gt;
&lt;li&gt;压缩图片。&lt;/li&gt;
&lt;li&gt;使用 CDN 服务静态文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;文件上传&lt;/h3&gt;
&lt;p&gt;可以考虑使用分布式文件系统或者云存储来存储上传的文件。使用云存储的时候要考虑备用方案，万一服务不可用怎么办。&lt;/p&gt;
&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;好的测试用例是健康代码的强有力的基石。测试应该覆盖到你代码中最复杂，最重要，最容易出问题的地方。&lt;/p&gt;
&lt;h4&gt;自动化测试以及持续集成&lt;/h4&gt;
&lt;p&gt;一个持续集成系统可以让开发者在开发进度的早期就发现问题，通过持续集成系统来执行
自动化测试以及检查你的代码的健康度。作者提到了他们的检查点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;代码覆盖率&lt;/li&gt;
&lt;li&gt;PEP8/linting&lt;/li&gt;
&lt;li&gt;使用 Selenium 进行功能测试&lt;/li&gt;
&lt;li&gt;所以 Jmeter 进行性能测试&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-26:2015/09/high-performance-django-note-1.html</guid><category>High Performance Django</category><category>Django</category></item><item><title>buttersafe：UFO</title><link>https://mozillazg.com/2015/09/2015-09-24-UFO.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/09/24/ufo/"&gt;http://buttersafe.com/2015/09/24/ufo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-09-24-UFO.zh-cn.png" src="/static/images/comics/2015-09-24-UFO.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-25:2015/09/2015-09-24-UFO.zh-cn.html</guid><category>buttersafe</category></item><item><title>配置 django-rq 在 admin 后台显示队列管理页面</title><link>https://mozillazg.com/2015/09/how-to-configure-for-show-django-rq-admin.html</link><description>&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-rq-admin-1" src="/static/images/django/django-rq-admin-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-rq-admin-2" src="/static/images/django/django-rq-admin-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-rq-admin-2" src="/static/images/django/django-rq-admin-3.png" /&gt;&lt;/p&gt;
&lt;p&gt;详细步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置 settings.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RQ_SHOW_ADMIN_LINK = True
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 urls.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;urlpatterns += patterns(
    &amp;#39;&amp;#39;,
    (r&amp;#39;^admin/django-rq/&amp;#39;, include(&amp;#39;django_rq.urls&amp;#39;)),
)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Done!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Demo 项目： &lt;a href="https://github.com/mozillazg/django-simple-projects/tree/master/projects/django_rq_admin"&gt;django_rq_admin&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ui/django-rq"&gt;https://github.com/ui/django-rq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-25:2015/09/how-to-configure-for-show-django-rq-admin.html</guid><category>django-rq</category></item><item><title>配置 Summernote 上传并插入本地图片</title><link>https://mozillazg.com/2015/09/how-to-use-Summernote-upload-and-insert-local-image.html</link><description>&lt;p&gt;&lt;img alt="Summernote-upload-and-insert-local-image-01.png" src="/static/images/javascript/Summernote-upload-and-insert-local-image-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;本文将讲述如何在 summernote 中实现上传并插入本地图片的功能。&lt;/p&gt;
&lt;p&gt;主要是通过设置 &lt;code&gt;onImageUpload&lt;/code&gt; 事件回调函数来实现的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#editor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nv"&gt;summernote&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="err"&gt;onImageUpload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;editor&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="err"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
      &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;构建一个&lt;/span&gt; &lt;span class="err"&gt;form&lt;/span&gt; &lt;span class="err"&gt;数据&lt;/span&gt;
      &lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;data&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;new&lt;/span&gt; &lt;span class="err"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;增加一个字段&lt;/span&gt; &lt;span class="err"&gt;fileup&lt;/span&gt; &lt;span class="err"&gt;值是待上传的文件的内容&lt;/span&gt;
      &lt;span class="err"&gt;data.append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fileup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

      &lt;span class="p"&gt;$.&lt;/span&gt;&lt;span class="nv"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;         &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;上传文件到服务器端&lt;/span&gt;
        &lt;span class="err"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/upload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;processData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;这两个比较关键，禁止处理&lt;/span&gt; &lt;span class="err"&gt;form&lt;/span&gt; &lt;span class="err"&gt;数据&lt;/span&gt;
        &lt;span class="err"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="err"&gt;//&lt;/span&gt; 
        &lt;span class="err"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;imgURL&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;data.url;&lt;/span&gt;   &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;获取服务端返回的图片地址&lt;/span&gt;
            &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;插入图片&lt;/span&gt;
            &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;summernote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;insertImage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;imgURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="x"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Demo: &lt;/p&gt;
&lt;p&gt;&lt;a class="jsbin-embed" href="http://jsbin.com/taxire/embed"&gt;JS Bin on jsbin.com&lt;/a&gt;&lt;script src="http://static.jsbin.com/js/embed.min.js?3.35.0"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/summernote/summernote/issues/72"&gt;Using amazon s3 storage with summernote #72&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-25:2015/09/how-to-use-Summernote-upload-and-insert-local-image.html</guid><category>Summernote</category></item><item><title>[译][漫]Cyanide &amp; Happiness #4064：飞蛾</title><link>https://mozillazg.com/2015/09/4064.moth-light.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4064/"&gt;Cyanide &amp;amp; Happiness #4064 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4064.moth-light.zh-cn.gif" src="/static/images/comics/4064.moth-light.zh-cn.gif" /&gt;&lt;/p&gt;
&lt;p&gt;why do moths do that?         &lt;br /&gt;
为什么飞蛾要做那样的事情？&lt;/p&gt;
&lt;p&gt;i dunno.
let's check the internet.             &lt;br /&gt;
我不知道。让我们上网找找看。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 23 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-23:2015/09/4064.moth-light.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：哦，不</title><link>https://mozillazg.com/2015/09/2010-03-30-ohno.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2010/03/30/oh-no/"&gt;http://buttersafe.com/2010/03/30/oh-no/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2010-03-30-ohno.zh-cn.png" src="/static/images/comics/2010-03-30-ohno.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh no!    &lt;br /&gt;
哦，不！&lt;/p&gt;
&lt;p&gt;all my firends are
zombies!!     &lt;br /&gt;
我的朋友都是僵尸！！&lt;/p&gt;
&lt;p&gt;scary zombies!!
吓人的僵尸！！&lt;/p&gt;
&lt;p&gt;ugly zombies!!        &lt;br /&gt;
丑陋的僵尸！！&lt;/p&gt;
&lt;p&gt;brain-eating zombies!!!       &lt;br /&gt;
吃脑子的僵尸！！！&lt;/p&gt;
&lt;p&gt;oh no!        &lt;br /&gt;
哦，不！&lt;/p&gt;
&lt;p&gt;our friend is a racist.       &lt;br /&gt;
我们的朋友是个种族主义者。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-22:2015/09/2010-03-30-ohno.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：如果你爱他</title><link>https://mozillazg.com/2015/09/2012-03-01-IfYouLoveSomething.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2012/03/01/if-you-love-something/"&gt;http://buttersafe.com/2012/03/01/if-you-love-something/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2012-03-01-IfYouLoveSomething.zh-cn.png" src="/static/images/comics/2012-03-01-IfYouLoveSomething.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;chris...
haven't you ever heard
that old adage?
if you love something,
let it go...      &lt;br /&gt;
克里斯。。。
你没听说过那句谚语吗？
如果你爱他，就让他离去。。。&lt;/p&gt;
&lt;p&gt;if it comes back
to you, it's yours.       &lt;br /&gt;
如果他回到你身边，那么他就是你的。&lt;/p&gt;
&lt;p&gt;i'm sorry, i never
realized you felt the same
way!          &lt;br /&gt;
我很抱歉，我从没用相同的
方式来了解你的感受！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 21 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-21:2015/09/2012-03-01-IfYouLoveSomething.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：约翰逊</title><link>https://mozillazg.com/2015/09/2008-09-23-johnson.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/09/23/johnson/"&gt;http://buttersafe.com/2008/09/23/johnson/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-09-23-johnson.zh-cn.png" src="/static/images/comics/2008-09-23-johnson.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;at the office     &lt;br /&gt;
在办公室&lt;/p&gt;
&lt;p&gt;johnsen, what it that?        &lt;br /&gt;
约翰逊，那是什么？&lt;/p&gt;
&lt;p&gt;this?
life's lemons.        &lt;br /&gt;
这个？生活的柠檬。&lt;/p&gt;
&lt;p&gt;oh.
anyway, pack up your stapler.
you're fired.         &lt;br /&gt;
哦。不管怎样，收拾一下你的订书机。你被解雇了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-20:2015/09/2008-09-23-johnson.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：高蒂</title><link>https://mozillazg.com/2015/09/2012-08-21-goldie.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2012/08/21/goldie/"&gt;http://buttersafe.com/2012/08/21/goldie/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2012-08-21-goldie.zh-cn.png" src="/static/images/comics/2012-08-21-goldie.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh no!
goldie!!      &lt;br /&gt;
哦，不！
高蒂！！&lt;/p&gt;
&lt;p&gt;don't worry! we'll
find you some new water
somewhere!!       &lt;br /&gt;
别担心！
我们会给你在某个地方
找点新水的！！&lt;/p&gt;
&lt;p&gt;bovnce    &lt;br /&gt;
嘣&lt;/p&gt;
&lt;p&gt;oh no,
the lake is
still frozen over!        &lt;br /&gt;
哦，不，这个湖还在结冰！&lt;/p&gt;
&lt;p&gt;ah crap!
that's just
a painting!!      &lt;br /&gt;
呃，该死！
那只是一幅画！！&lt;/p&gt;
&lt;p&gt;hey, what are
you up to?        &lt;br /&gt;
嘿，你在干嘛呢？&lt;/p&gt;
&lt;p&gt;carl! quick!
fill your mouth
with saliva!!     &lt;br /&gt;
卡尔！快点！
在你的嘴里蓄满口水！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-19:2015/09/2012-08-21-goldie.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：按计划行事</title><link>https://mozillazg.com/2015/09/2009-04-09-ThePerfectHeist.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2009/04/09/the-perfect-heist/"&gt;http://buttersafe.com/2009/04/09/the-perfect-heist/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2009-04-09-ThePerfectHeist.zh-cn.png" src="/static/images/comics/2009-04-09-ThePerfectHeist.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-18:2015/09/2009-04-09-ThePerfectHeist.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：歌</title><link>https://mozillazg.com/2015/09/2010-12-14-hitsong.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2010/12/14/hit-song/"&gt;http://buttersafe.com/2010/12/14/hit-song/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2010-12-14-hitsong.zh-cn.png" src="/static/images/comics/2010-12-14-hitsong.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-16:2015/09/2010-12-14-hitsong.zh-cn.html</guid><category>buttersafe</category></item><item><title>如何在 django admin site 中设置某个 model 只读</title><link>https://mozillazg.com/2015/09/django-setup-readonly-model-on-admin.html</link><description>&lt;p&gt;本文主要讲解如何在 django 1.8.4 项目的 admin-site 中配置一个只读的 model。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;禁用添加操作，主要是重写 &lt;code&gt;has_delete_permission&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def has_add_permission(self, request):
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁用修改操作，这里有两种方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一种是重写 &lt;code&gt;has_change_permission&lt;/code&gt; 方法&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def has_change_permission(self, request, obj=None):
    if obj is None:     # 显示列表页
        return True
    else:               # 禁用详情页
        return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果是无法查看详情页，间接实现了禁用修改操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二种是定义 &lt;code&gt;readonly_fields&lt;/code&gt; 属性&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;readonly_fields = [field.name for field in ModelName._meta.fields]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果是详情页的所有表单项只读，间接实现了禁用修改操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁用删除操作，主要是重写 &lt;code&gt;has_delete_permission&lt;/code&gt; 方法以及禁用 actions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;actions = None
def has_delete_permission(self, request, obj=None):
    return False
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完整代码举例 (admin.py)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@admin.register(Foo)
class FooAdmin(admin.ModelAdmin):
    actions = None

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        if obj is None:
            return True
        else:
            return False

    def has_delete_permission(self, request, obj=None):
        return False


@admin.register(Bar)
class BarAdmin(admin.ModelAdmin):
    readonly_fields = [field.name for field in Bar._meta.fields]
    actions = None

    def has_add_permission(self, request):
        return False

    def has_delete_permission(self, request, obj=None):
        return False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;demo 项目: &lt;a href="https://github.com/mozillazg/django-simple-projects/tree/master/projects/admin_readonly_model"&gt;admin_readonly_model&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin.has_add_permission"&gt;The Django admin site | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-16:2015/09/django-setup-readonly-model-on-admin.html</guid></item><item><title>Cyanide &amp; Happiness #2403：牙仙</title><link>https://mozillazg.com/2015/09/2403.comictoothfairy1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2403/"&gt;Cyanide &amp;amp; Happiness #2403 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2403.comictoothfairy1.zh-cn.png" src="/static/images/comics/2403.comictoothfairy1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;daddy, my tooth
fell out, what do i do!?          &lt;br /&gt;
爹地，我的牙掉了，我该怎么办！？&lt;/p&gt;
&lt;p&gt;well son, if you put it
under your pillow
when you sleep, the tooth
fairy will come and replace
it with a dollar bill!    &lt;br /&gt;
嗯，儿子。如果你在睡觉的时候把它
放在枕头下的话，牙仙将会
把它换成钞票！&lt;/p&gt;
&lt;p&gt;hm.... i wonder what'll
happen if i put all my
teeth under my pillow         &lt;br /&gt;
唔。。。我很好奇如果我把所有
的牙齿都放在枕头下的话会怎样&lt;/p&gt;
&lt;p&gt;the next morning...       &lt;br /&gt;
第二天早上。。。&lt;/p&gt;
&lt;p&gt;rise and shine son, it's
a new day         &lt;br /&gt;
儿子，太阳晒屁股了，又是新的一天&lt;/p&gt;
&lt;p&gt;son...? oh my god!!   &lt;br /&gt;
儿子。。。？哦，天哪！！&lt;/p&gt;
&lt;p&gt;wait-         &lt;br /&gt;
等一下——&lt;/p&gt;
&lt;p&gt;yessss!!       &lt;br /&gt;
耶耶耶!!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-14:2015/09/2403.comictoothfairy1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2410：探戈</title><link>https://mozillazg.com/2015/09/2410.comictango1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2410/"&gt;Cyanide &amp;amp; Happiness #2410 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2410.comictango1.zh-cn.png" src="/static/images/comics/2410.comictango1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-14:2015/09/2410.comictango1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #734：狗</title><link>https://mozillazg.com/2015/09/734.depressing-dog.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/734/"&gt;Cyanide &amp;amp; Happiness #734 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="734.depressing-dog.zh-cn.png" src="/static/images/comics/734.depressing-dog.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;son, it's time we put
OI' Teller down.      &lt;br /&gt;
儿子，是时候杀死特勒了。&lt;/p&gt;
&lt;p&gt;no, dad. I wanna
do it. He's my dog.   &lt;br /&gt;
不，爸爸。让我来。他是我的狗。&lt;/p&gt;
&lt;p&gt;sorry, boy.       &lt;br /&gt;
抱歉，孩子。&lt;/p&gt;
&lt;p&gt;I'll see you in
doggy heaven, OI' Teller!         &lt;br /&gt;
我会去狗狗天堂看你的，特勒！&lt;/p&gt;
&lt;p&gt;timmy, noooooo!!          &lt;br /&gt;
蒂米，不不不不！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 13 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-13:2015/09/734.depressing-dog.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4050：招贴</title><link>https://mozillazg.com/2015/09/4050.poster.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4050/"&gt;Cyanide &amp;amp; Happiness #4050 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4050.poster.zh-cn.png" src="/static/images/comics/4050.poster.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i'm here for my reward!       &lt;br /&gt;
我是来领赏金的！&lt;/p&gt;
&lt;p&gt;reward?   &lt;br /&gt;
赏金？&lt;/p&gt;
&lt;p&gt;for this missing child I found!   &lt;br /&gt;
因为我找到了这个走失的儿童！&lt;/p&gt;
&lt;p&gt;sir, this isn't for missing
persons...    &lt;br /&gt;
先生，这个不是在找走失的人。。。&lt;/p&gt;
&lt;p&gt;wanted
reward
通缉
赏金&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 12 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-12:2015/09/4050.poster.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4051：独轮</title><link>https://mozillazg.com/2015/09/4051.unicycle.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4051/"&gt;Cyanide &amp;amp; Happiness #4051 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4051.unicycle.zh-cn.png" src="/static/images/comics/4051.unicycle.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hahaha, you bought
training wheels for your
bicycle?!         &lt;br /&gt;
哈哈，你给你的自行车买辅助轮？！&lt;/p&gt;
&lt;p&gt;what? no, I'm a unicyclist.       &lt;br /&gt;
什么？不，我是独轮车手。&lt;/p&gt;
&lt;p&gt;these are for my kids.        &lt;br /&gt;
这些是给我的孩子们的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-11:2015/09/4051.unicycle.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：透视侠</title><link>https://mozillazg.com/2015/09/2015-06-02-xrayman.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/06/02/x-ray-man/"&gt;http://buttersafe.com/2015/06/02/x-ray-man/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-06-02-xrayman.zh-cn.png" src="/static/images/comics/2015-06-02-xrayman.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-10:2015/09/2015-06-02-xrayman.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #4048：呃呃</title><link>https://mozillazg.com/2015/09/4048.aa.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4048/"&gt;Cyanide &amp;amp; Happiness #4048 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4048.aa.zh-cn.png" src="/static/images/comics/4048.aa.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I'm not racist,
I adopted an
african american child
into my family.           &lt;br /&gt;
我不是种族主义者，
我们家收养了一个黑人儿童。&lt;/p&gt;
&lt;p&gt;that's nice!          &lt;br /&gt;
真是太棒了！&lt;/p&gt;
&lt;p&gt;just like my forefathers!     &lt;br /&gt;
就像我的祖先那样！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-09:2015/09/4048.aa.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4049：遗骨</title><link>https://mozillazg.com/2015/09/4049.remains.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4049/"&gt;Cyanide &amp;amp; Happiness #4049 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4049.remains.zh-cn.png" src="/static/images/comics/4049.remains.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what about you?
what do you want
to happen when you die?   &lt;br /&gt;
你呢？
当你去世的时候你希望发生什么？&lt;/p&gt;
&lt;p&gt;i want my remains
scattered around
my parents' estate.       &lt;br /&gt;
我想要用我的遗骨包围我父母的遗产。&lt;/p&gt;
&lt;p&gt;you want to be cremated?      &lt;br /&gt;
你想被火化？&lt;/p&gt;
&lt;p&gt;no.   &lt;br /&gt;
不想。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-08:2015/09/4049.remains.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4046：种族战争</title><link>https://mozillazg.com/2015/09/4046.racewar.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4046/"&gt;Cyanide &amp;amp; Happiness #4046 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4046.racewar.zh-cn.png" src="/static/images/comics/4046.racewar.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;so... this is
goodby, huh?          &lt;br /&gt;
那么，这就要说再见了，嗯？&lt;/p&gt;
&lt;p&gt;yep, I got drafted
for the race war.         &lt;br /&gt;
是的，我被征召去参加种族战争。&lt;/p&gt;
&lt;p&gt;how'd you avoid the draft?    &lt;br /&gt;
你是如何躲避这次征召的？&lt;/p&gt;
&lt;p&gt;I'm colorblind.       &lt;br /&gt;
我有色盲。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-06:2015/09/4046.racewar.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4043：多味豆</title><link>https://mozillazg.com/2015/09/4043.beans.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4043/"&gt;Cyanide &amp;amp; Happiness #4043 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4043.beans.zh-cn.png" src="/static/images/comics/4043.beans.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh boy! every flavour beans!
I love there!     &lt;br /&gt;
哦，乖乖！多味豆！我喜欢！&lt;/p&gt;
&lt;p&gt;mom?      &lt;br /&gt;
妈妈？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-05:2015/09/4043.beans.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4045：阿道夫</title><link>https://mozillazg.com/2015/09/4045.thehitman.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4045/"&gt;Cyanide &amp;amp; Happiness #4045 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4045.thehitman.zh-cn.png" src="/static/images/comics/4045.thehitman.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;adolf, what are you doing!?
why are you killing yourself!?    &lt;br /&gt;
阿道夫，你在做什么！？
为什么你要自杀！？&lt;/p&gt;
&lt;p&gt;i'm going to bettle
the king of the jews head on.         &lt;br /&gt;
我要去正面迎击犹太人之王。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-04:2015/09/4045.thehitman.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #922：孩子</title><link>https://mozillazg.com/2015/09/922.pregnant-IN-OPPOSITE-LAND.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/922/"&gt;Cyanide &amp;amp; Happiness #922 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="922.pregnant-IN-OPPOSITE-LAND.zh-cn.png" src="/static/images/comics/922.pregnant-IN-OPPOSITE-LAND.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-03:2015/09/922.pregnant-IN-OPPOSITE-LAND.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #322：怀孕</title><link>https://mozillazg.com/2015/09/322.pregnant.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/322/"&gt;Cyanide &amp;amp; Happiness #322 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="322.pregnant.zh-cn.png" src="/static/images/comics/322.pregnant.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-02:2015/09/322.pregnant.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1913：中奖</title><link>https://mozillazg.com/2015/09/1913.comichomelesslottery1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1913/"&gt;Cyanide &amp;amp; Happiness #1913 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1913.comichomelesslottery1.zh-cn.png" src="/static/images/comics/1913.comichomelesslottery1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you've won the lottery!
one million dollars!!     &lt;br /&gt;
你的彩票中奖了！
一百万美元！！&lt;/p&gt;
&lt;p&gt;oh my god!!       &lt;br /&gt;
哦，天啦！！&lt;/p&gt;
&lt;p&gt;I'm guessing you're
gonna use that money
to buy a better house!?   &lt;br /&gt;
我猜你将用这笔钱买一个更好的房子！？&lt;/p&gt;
&lt;p&gt;haha, you konw it!!   &lt;br /&gt;
哈哈，你知道了啊！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-09-01:2015/09/1913.comichomelesslottery1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2055：水上公园</title><link>https://mozillazg.com/2015/08/2055.TOTALLY-TRUE-FACT!-Waterpark-bathrooms-dont-have-urinals.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2055/"&gt;Cyanide &amp;amp; Happiness #2055 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2055.TOTALLY-TRUE-FACT!-Waterpark-bathrooms-dont-have-urinals.zh-cn.png" src="/static/images/comics/2055.TOTALLY-TRUE-FACT!-Waterpark-bathrooms-dont-have-urinals.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-31:2015/08/2055.TOTALLY-TRUE-FACT!-Waterpark-bathrooms-dont-have-urinals.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4041：尿尿</title><link>https://mozillazg.com/2015/08/4041.peepeepee.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4041/"&gt;Cyanide &amp;amp; Happiness #4041 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4041.peepeepee.zh-cn.png" src="/static/images/comics/4041.peepeepee.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey! what the fuck
dude, quit peeing one
my tree!      &lt;br /&gt;
嘿！你他妈的在干什么呢？
不准对着我的树尿尿！&lt;/p&gt;
&lt;p&gt;i planted it using
my father's ashes!    &lt;br /&gt;
它是用我爸爸的骨灰种植起来的！&lt;/p&gt;
&lt;p&gt;he had a pee fetish   &lt;br /&gt;
他有恋尿癖&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-31:2015/08/4041.peepeepee.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2816：舒坦</title><link>https://mozillazg.com/2015/08/2816.comiccomfortablenw.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2816/"&gt;Cyanide &amp;amp; Happiness #2816 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2816.comiccomfortablenw.zh-cn.png" src="/static/images/comics/2816.comiccomfortablenw.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;okay asshat,
colthes off, now!     &lt;br /&gt;
猪头，衣服脱掉，马上！&lt;/p&gt;
&lt;p&gt;okay, here!   &lt;br /&gt;
好的，给你！&lt;/p&gt;
&lt;p&gt;don't you want them?  &lt;br /&gt;
你不要它们吗？&lt;/p&gt;
&lt;p&gt;nah, I just feel more
comfortable now           &lt;br /&gt;
不要，我只是现在感觉更舒坦了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 30 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-30:2015/08/2816.comiccomfortablenw.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]buttersafe：宠物洗发水</title><link>https://mozillazg.com/2015/08/2015-08-11-petshampoo.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/08/11/washing-the-dog-2/"&gt;http://buttersafe.com/2015/08/11/washing-the-dog-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-08-11-petshampoo.zh-cn.png" src="/static/images/comics/2015-08-11-petshampoo.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-29:2015/08/2015-08-11-petshampoo.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #4036：骷髅王</title><link>https://mozillazg.com/2015/08/4036.skeletor.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4036/"&gt;Cyanide &amp;amp; Happiness #4036 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4036.skeletor.zh-cn.png" src="/static/images/comics/4036.skeletor.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;dad!  &lt;br /&gt;
爸爸！&lt;/p&gt;
&lt;p&gt;what?         &lt;br /&gt;
什么？&lt;/p&gt;
&lt;p&gt;I want to name it dad!
wait, no! skeletor!   &lt;br /&gt;
我想给它取名叫爸爸！
等一下，不了！骷髅王！&lt;/p&gt;
&lt;p&gt;how about we
wait for your wife
to wake up before
we name your daughter.    &lt;br /&gt;
等你的妻子醒来后我们再给你的女儿取名咋样。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 28 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-28:2015/08/4036.skeletor.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>《图解 HTTP》阅读笔记</title><link>https://mozillazg.com/2015/08/tujie-http-note.html</link><description>&lt;p&gt;&lt;a href="http://book.douban.com/subject/25863515/"&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/s27283822.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文记录了我阅读 《图解 HTTP》这本书时觉得重要的或之前不知道的内容。&lt;/p&gt;
&lt;h2&gt;了解 Web 及网络基础&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TCP/IP 四层模型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层：HTTP, FTP, DNS 协议之类的处于这一层&lt;/li&gt;
&lt;li&gt;传输层：提供两台计算机之间的数据传输，TCP, UDP 协议处于这一层&lt;/li&gt;
&lt;li&gt;网络层：处理在网络上流动的数据包，IP 协议处于这一层&lt;/li&gt;
&lt;li&gt;链路层（数据链路层）：处理网络的硬件部分：网卡，光纤等物理可见的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP 协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 ARP 协议凭借 MAC 地址进行通信&lt;/p&gt;
&lt;p&gt;ip -&amp;gt; mac1 -&amp;gt; mac2 -&amp;gt; mac3 -&amp;gt; mac&lt;/p&gt;
&lt;p&gt;ARP 协议（Address Resolution Protocol）是一种用以解析地址的协议，
根据通信方的 IP 地址就可以反查出对应的 MAC 地址。&lt;/p&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP 三次握手&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我要给你发数据了 SYN (发送端） -&amp;gt; 回应一个收到 SYN + ACK（接收端） -&amp;gt; 回应一个 OK ACK （发送端）&lt;/p&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各协议与 HTTP 协议的关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URI 和 URL&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI：统一资源标识符（Uniform Resource Identifier），比如：&lt;ul&gt;
&lt;li&gt;http://abc.com/a.txt&lt;/li&gt;
&lt;li&gt;redis://127.0.0.1/0&lt;/li&gt;
&lt;li&gt;mailto:foo@bar.com&lt;/li&gt;
&lt;li&gt;tel:+86123455&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL：统一资源定位符（Uniform Resource Locator）即我们熟悉的网址，比如：&lt;ul&gt;
&lt;li&gt;http://abc.com/a.txt&lt;/li&gt;
&lt;li&gt;https://foo.bar.com/foobar.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联网上所处的位置）。
&lt;strong&gt;可见 URL 是 URI 的子集&lt;/strong&gt; 。&lt;/p&gt;
&lt;!--
## 简单的 HTTP 协议

## HTTP 报文内的 HTTP 信息

## 返回结果中的 HTTP 状态码
--&gt;

&lt;h2&gt;与 HTTP 协作的 Web 服务器&lt;/h2&gt;
&lt;p&gt;HTTP 通信时，处客户端和服务器外，还有一些用于通信数据转发的应用程序，例如：代理，网关和隧道。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理：代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的
  请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。&lt;ul&gt;
&lt;li&gt;缓存代理：代理转发响应时，缓存代理会预先将资源的副本（缓存）保存在代理服务器上。&lt;/li&gt;
&lt;li&gt;透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理。反之，对
  报文内容进行加工的代理被成为非透明代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网关：网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源
  的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。
  网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非 HTTP 协议服务。&lt;/li&gt;
&lt;li&gt;隧道：隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;HTTP 首部&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;no-cache&lt;/code&gt;: 使用 no-cache 指令的目的是为了防止从缓存总返回过期的资源。
  事实上， no-cache 代表不缓存过期的资源，缓存会向源服务器进行有效期确认，然后再处理资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-store&lt;/code&gt;: 该指令规定缓存不能在本地存储请求或响应的任一部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pragma&lt;/code&gt; 是 HTTP/1.1 之前版本的历史遗留字段。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Pargma: no-cache&lt;/code&gt;: 只能用在客户端发送的请求中。客户端会要求所有的中间服务器不返回缓存的资源。
  但要整体掌握全部中间服务器使用 HTTP 协议版本确实不现实的。因此，发送的请求会同时含有
  &lt;code&gt;Cache-Control: no-cache&lt;/code&gt;和 &lt;code&gt;Pragma: no-cache&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-Frame-Options: 作用于 HTTP 响应，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。
  其主要目的是为了防止点击劫持（clickjacking）攻击。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DENY&lt;/code&gt;: 拒绝&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SAMEORIGINE&lt;/code&gt;: 仅同源域名下的页面可以加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-XSS-Protection: 用于控制浏览器 XSS 防护机制的开关&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: 将 XSS 过滤设置为无效状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: 将 XSS 过滤设置为有效状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNT: 拒绝个人信息被收集&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: 同意被追踪&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: 拒绝被追踪&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;协议中对 X- 前缀的废除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 HTTP 等多种协议中，通过给非标准参数加上前缀 X-, 来区分标准参数，并使
那些非标准的参数作为扩展变成可能。但是这种简单粗暴的做法有百害而无一益，
因此在 "RFC 6648 - Deprecating the "X-" Prefix and Similar
Constructs in Application Protocols" 中提议停止该做法。&lt;/p&gt;
&lt;p&gt;然而，对已经在使用中的 X- 前缀来说，不应该要求其变更。&lt;/p&gt;
&lt;h2&gt;确保 HTTP 安全的 HTTPS&lt;/h2&gt;
&lt;p&gt;HTTP 协议的实现本是非常简单，不论是谁发送过来的请求都会返回响应，
因此不确认通信方，会存在以下各种隐患。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法确定请求发送至目标的 Web 服务器是否是按真实意图返回响应的那台服务器。
  有可能是已伪装的 Web 服务器。&lt;/li&gt;
&lt;li&gt;无法确定响应返回到的客户端是否是按真实意图接收响应的那个客户端。有可能是已伪装的客户端。&lt;/li&gt;
&lt;li&gt;无法确定正在通信的对方是否具有访问权限。因为某些 Web 服务器上保存着重要的信息，
  只想发给特定用户通信的权限。&lt;/li&gt;
&lt;li&gt;无法判定请求是来自何方、出自谁手。&lt;/li&gt;
&lt;li&gt;即时是无意义的请求也会照单全收。无法阻止海量请求下的 DoS 攻击（Denial of Service, 拒绝服务器攻击）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP + 加密 + 认证 + 完整性包含 = HTTPS&lt;/p&gt;
&lt;p&gt;HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL(Secure Socket Layer) 和
TLS(Transport Layer Security)协议代替而已。&lt;/p&gt;
&lt;p&gt;通常， HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和
SSL 通信，再由 SSL 和 TCP 通信了。简言之，所谓 HTTPS，其实就是身披 SSL 协议这层外壳的 HTTP。
所以 HTTPS 又叫 HTTP over SSL, HTTP over TLS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对称密钥加密&lt;/strong&gt;: 加密和解密同用一个密钥的方式称为共享密钥加密(Common key crypto system)，
也被叫做对称密钥加密。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非对称加密&lt;/strong&gt;：公开密钥加密方式很好地解决了共享密钥加密的困难。公开密钥加密使用一对非对称密钥。一把叫做私有密钥
(private key)，另一把叫做公开密钥（public key）。顾名思义，私有密钥
不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTPS 通信步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/6.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/7.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/8.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么不一直使用 HTTPS&lt;/strong&gt; 既然 HTTPS 那么安全可靠，那为何所有的 Web 网站不一直使用 HTTPS？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中一个原因是，因为与纯文本通信相比，加密通信会消耗更多的 CPU 及内存资源。如果每次通信都加密，会消耗
  相当多的资源，平摊到一台计算机上时，能够处理的请求数量必定也会随之减少。&lt;/li&gt;
&lt;li&gt;除此之外，想要节约购买证书的开销也是原因之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;基于 HTTP 的功能追加协议&lt;/h2&gt;
&lt;p&gt;HTTP 的瓶颈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一条连接只可发送一个请求&lt;/li&gt;
&lt;li&gt;请求只能从客户端开始。客户端不可以接收除响应以外的指令&lt;/li&gt;
&lt;li&gt;请求/响应首部(header)未经压缩就发送。首部信息越多延迟越大。&lt;/li&gt;
&lt;li&gt;发送冗长的首部(header)。每次互相发送相同的首部造成的浪费较多。&lt;/li&gt;
&lt;li&gt;可任意选择数据压缩格式。非强制压缩发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SPDY&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。
使用 SPDY 后，HTTP 协议额外获得以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多路复用流：通过单一的 TCP 请求，可以无限制处理多个 HTTP 请求。所有请求的处理
  都在一条 TCP 连接上完成，因此 TCP 的处理效率得到提高。&lt;/li&gt;
&lt;li&gt;赋予请求优先级&lt;/li&gt;
&lt;li&gt;压缩 HTTP 首部(header)&lt;/li&gt;
&lt;li&gt;推送功能：支持服务器主动向客户端推送数据。&lt;/li&gt;
&lt;li&gt;服务器提示功能：服务器可以主动提示客户端请求所需的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/9.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用浏览器进行全双工的 WebSocket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一旦 Web 服务器与客户端之间建立起 WebSocket 协议的通信连接，之后所有
的通信都依靠这个专用协议进行。 WebSocket 协议的主要特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推送功能&lt;/li&gt;
&lt;li&gt;减少通信量：只要建立起 WebSocket 连接，就希望一直保持连接状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="图解 HTTP" src="/static/images/reading/tujie-http-note/10.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;期盼已久的 HTTP/2.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下摘自： https://http2.github.io/faq/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the key differences to HTTP/1.x?&lt;/p&gt;
&lt;p&gt;At a high level, HTTP/2:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is binary, instead of textual&lt;/li&gt;
&lt;li&gt;is fully multiplexed, instead of ordered and blocking&lt;/li&gt;
&lt;li&gt;can therefore use one connection for parallelism&lt;/li&gt;
&lt;li&gt;uses header compression to reduce overhead&lt;/li&gt;
&lt;li&gt;allows servers to “push” responses proactively into client caches&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Web 的攻击技术&lt;/h2&gt;
&lt;p&gt;因输出值转义不完全引发的安全漏洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;跨站脚本攻击（Cross-Site Scripting, XSS）&lt;/strong&gt; 主要是指在用户浏览器内运行了非法的 HTML 标签或 JavaScript 
  脚本。比如富文本编辑器，如果不过滤用户输入的数据直接显示用户输入的 HTML 内容的话，就会有可能运行恶意的 
  JavaScript 脚本，导致页面结构错乱，Cookies 信息被窃取等问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL 注入攻击（SQL Injection）&lt;/strong&gt; 是指针对 Web 应用使用的数据库，通过运行非法
  的 SQL 而产生的攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS 命令注入攻击（OS Command Injection）&lt;/strong&gt; 是指通过 Web 应用，执行非法的操作系统命令达到攻击的目的。
  只要在能调用 Shell 函数的地方就有存在被攻击的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP 首部注入攻击（HTTP Header Injection）&lt;/strong&gt; 是指攻击者通过在响应首部字段内插入换行，添加任意响应首部
  或主体的一种攻击。属于被动工具模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP 响应截断攻击&lt;/strong&gt; 是用在 HTTP 首部注入的一种攻击。攻击顺序相同，但是要将两个 %0D%0A%0D%0A 并排插入字符串后
  发送。利用两个连续的换行就可作出 HTTP 首部与主体分隔所需的空行了，这样
  就能显示伪造的主体，达到攻击的目的。这样的攻击叫做 HTTP 响应截断攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邮件首部注入攻击（Mail Header Injection）&lt;/strong&gt; 是指 Web 应用中的邮件发送功能，攻击者通过向邮件首部
  To 或 Subject 内任意添加非法内容发起的攻击。利用存在安全漏洞的 Web 网站，可对任意邮件地址发送广告邮件或
  病毒邮件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目录遍历攻击（Directory Traversal）&lt;/strong&gt; 是指对本无意公开的文件目录，通过非法截断其目录路径后，达成访问
  目的的一种攻击。比如，通过 ../ 等相对路径定位到 /etc/passwd 等绝对路径上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;远程文件包含漏洞（Remote File Inclusion）&lt;/strong&gt; 是指当部分脚本内容需要从其他文件读入是，攻击者利用指定外部服务器
  的 URL 充当依赖文件，让脚本读取之后，就可运行任意脚本的一种攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因设置或设计上的缺陷引发的安全漏洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;强制浏览（Forced Browsing）安全漏洞&lt;/strong&gt; 是指，从安置在 Web 服务器的公开目录下的文件中，浏览那些原本非自愿公开
  的文件。比如，没有对那些需要保护的静态资源增加权限控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不正确的错误消息处理（Error Handling Vulerability）的安全漏洞&lt;/strong&gt; 是指，Web 应用的错误信息内包含对攻击者有用
  的信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开放重定向（Open Redirect）&lt;/strong&gt; 是一种对指定的任意 URL 作重定向跳转的功能。而于此功能相关联的安全漏洞是指，
  假如指定的重定向 URL 到某个具有恶意的 Web 网站，那么用户就会被诱导至那个 Web 网站。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因会话管理疏忽引发的安全漏洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;会话劫持（Session Hijiack）&lt;/strong&gt; 是指攻击者通过某种手段拿到了用户的会话 ID，并非法使用此会话 ID 伪装成
  用户，达到攻击的目的。&lt;/li&gt;
&lt;li&gt;对以窃取目标会话 ID 为主动攻击手段的会话劫持而言， &lt;strong&gt;会话固定攻击（Session Fixation）&lt;/strong&gt; 会强制用户使用攻击者指定
  的会话 ID，属于被动攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨站请求伪造（Cross-Site Request Forgeries, CSRF）攻击&lt;/strong&gt; 是指攻击者通过设置好陷阱，
  强制对已完成认证的用户进行非预期的个人信息或设定等某些状态更新，属于被动攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他安全漏洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;密码破解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击劫持（Clickjacking）&lt;/strong&gt; 是指利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，
  单击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UI Redressing）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DoS 攻击（Denial of Service attack）&lt;/strong&gt; 是一种让运行中的服务呈停止状态的攻击。
  有时也叫做服务停止攻击或拒绝服务攻击。多台计算机发起的 Dos 攻击称为
  &lt;strong&gt;DDoS 攻击（Distributed Denial of Service attach）&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;后门程序（Backdoor）&lt;/strong&gt; 是指开发设置的隐藏入口，可不按正常步骤使用受限功能。利用后门程序就能够使用原本受限的功能。&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 28 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-28:2015/08/tujie-http-note.html</guid><category>HTTP</category><category>图解 HTTP</category></item><item><title>Cyanide &amp; Happiness #4035：海格</title><link>https://mozillazg.com/2015/08/4035.hagrid.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4035/"&gt;Cyanide &amp;amp; Happiness #4035 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4035.hagrid.zh-cn.png" src="/static/images/comics/4035.hagrid.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;yer a magician, 'arry.
哈利，你是个巫师。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-25:2015/08/4035.hagrid.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>改用 443 端口连接 Github 修复 git push 时出现 Connection timed out 的问题</title><link>https://mozillazg.com/2015/08/use-443-port-fix-github-connection-timeout.html</link><description>&lt;p&gt;最近几天我这里出现了 &lt;code&gt;git push&lt;/code&gt; 出现 timeout 的问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push
ssh: connect to host github.com port 22: Connection timed out
fatal: Could not &lt;span class="nb"&gt;read&lt;/span&gt; from remote repository.

Please make sure you have the correct access rights
and the repository exists.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不想改用 https 协议，因为 https 每次都要询问用户名，密码太烦了。最后找到了一个使用 443 端口连接 github 的方法：&lt;/p&gt;
&lt;p&gt;修改 ~/.ssh/config 中 github.com 的配置，
&lt;code&gt;Hostname&lt;/code&gt; 改为 &lt;code&gt;ssh.github.com&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt; 改为
&lt;code&gt;443&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
  Hostname ssh.github.com
  Port 443
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -T git@github.com
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[ssh.github.com]:443,[192.30.252.148]:443&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
Hi mozillazg! You&lt;span class="s1"&gt;&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.&lt;/span&gt;

&lt;span class="s1"&gt;$ git push&lt;/span&gt;
&lt;span class="s1"&gt;Warning: Permanently added &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;ssh.github.com&lt;span class="o"&gt;]&lt;/span&gt;:443,&lt;span class="o"&gt;[&lt;/span&gt;192.30.252.151&lt;span class="o"&gt;]&lt;/span&gt;:443&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/using-ssh-over-the-https-port/"&gt;Using SSH over the HTTPS port - User Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-25:2015/08/use-443-port-fix-github-connection-timeout.html</guid><category>github</category></item><item><title>Cyanide &amp; Happiness #1849：实验结果</title><link>https://mozillazg.com/2015/08/1849.doctorlist.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1849/"&gt;Cyanide &amp;amp; Happiness #1849 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1849.doctorlist.zh-cn.png" src="/static/images/comics/1849.doctorlist.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;well, I got the lab
results back...   &lt;br /&gt;
嗯，我已经拿到实验结果了。。。&lt;/p&gt;
&lt;p&gt;you've got pancreatitis,
hepatits, bone disease,
intestinal parasites,
skin cancer, lung cancer,
hair cancer, ingrown rib,
elbow cancer,
herpes, dysentery,
broken pelvis, internal bleeding,
spanish flu, kung flu,
trench foot,
athlete's foot,
archer's elbow, cholera,
four brain tumors,
seven kidney stones,
sleep apnea, and heart disease.       &lt;br /&gt;
你得了胰腺炎，肝病，骨病，
肠道寄生虫病，皮肤癌，
肺癌，发癌，肋骨内生长，
肘癌，疱疹，痢疾，
盆骨骨折，内出血，
西班牙流感，功夫流感，
战壕足病，足癣，
射手肘，霍乱，
四脑肿瘤，七肾结石，
睡眠呼吸暂停，心脏病。&lt;/p&gt;
&lt;p&gt;and also you're deaf.     &lt;br /&gt;
还有就是你耳聋。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-24:2015/08/1849.doctorlist.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4034：厕纸</title><link>https://mozillazg.com/2015/08/4034.myassyourassweallcraveforass.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4034/"&gt;Cyanide &amp;amp; Happiness #4034 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4034.myassyourassweallcraveforass.zh-cn.png" src="/static/images/comics/4034.myassyourassweallcraveforass.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;uhhh, why are you
eating toilet paper?      &lt;br /&gt;
呃，为什么你在吃厕纸？&lt;/p&gt;
&lt;p&gt;so my ass can wipe itself.    &lt;br /&gt;
这样我的屁股就可以擦干净自己了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-24:2015/08/4034.myassyourassweallcraveforass.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1423：康茄</title><link>https://mozillazg.com/2015/08/1423.comicagaingrr.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1423/"&gt;Cyanide &amp;amp; Happiness #1423 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1423.comicagaingrr.zh-cn.png" src="/static/images/comics/1423.comicagaingrr.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh god, we're all doomed!!
we're all doomed!!        &lt;br /&gt;
哦，天啦，我们死定了！！
我们死定了！！&lt;/p&gt;
&lt;p&gt;quick, to the fire exit!
we need to get out of here!!!     &lt;br /&gt;
快点，快去安全出口！
我们需要离开这里！！！&lt;/p&gt;
&lt;p&gt;lets all exit in a calm,
orderly fashion.          &lt;br /&gt;
我们所有人冷静有序的离开这里。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-23:2015/08/1423.comicagaingrr.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4030：男保姆</title><link>https://mozillazg.com/2015/08/4030.mannyboy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4030/"&gt;Cyanide &amp;amp; Happiness #4030 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4030.mannyboy.zh-cn.png" src="/static/images/comics/4030.mannyboy.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;son, today's the day!
the day i've made you a man!      &lt;br /&gt;
儿子，今天是个重要的日子！
我给你造了个人！&lt;/p&gt;
&lt;p&gt;what's this for?      &lt;br /&gt;
这是干嘛用的？&lt;/p&gt;
&lt;p&gt;hello, son    &lt;br /&gt;
嗨, 儿子&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-22:2015/08/4030.mannyboy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4029：接走</title><link>https://mozillazg.com/2015/08/4029.pick2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4029/"&gt;Cyanide &amp;amp; Happiness #4029 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4029.pick2.zh-cn.png" src="/static/images/comics/4029.pick2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hello?        &lt;br /&gt;
你好？&lt;/p&gt;
&lt;p&gt;this is miss harris.
you need to come
pick up your son from school.         &lt;br /&gt;
我是哈里斯小姐。
你需要到学校来把你的儿子接走。&lt;/p&gt;
&lt;p&gt;oh no... did he
do something wrong?       &lt;br /&gt;
哦，不。。。他做错什么了吗？&lt;/p&gt;
&lt;p&gt;no, he's just, like...
30 years old by now.      &lt;br /&gt;
没有。他只是，像是。。。
已经有 30 岁了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-20:2015/08/4029.pick2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2372：行李</title><link>https://mozillazg.com/2015/08/2372.comicbaggage1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2372/"&gt;Cyanide &amp;amp; Happiness #2372 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2372.comicbaggage1.zh-cn.png" src="/static/images/comics/2372.comicbaggage1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;excuse me ma'am,
but can I take
some of your baggage
for you?      &lt;br /&gt;
抱歉，太太，
我可以帮你拿点行李吗?&lt;/p&gt;
&lt;p&gt;yes please!   &lt;br /&gt;
可以，谢谢！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-19:2015/08/2372.comicbaggage1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1851：灰姑娘</title><link>https://mozillazg.com/2015/08/1851.cinderella.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1851/"&gt;Cyanide &amp;amp; Happiness #1851 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1851.cinderella.zh-cn.png" src="/static/images/comics/1851.cinderella.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;cinderella,
did you wear this
slipper to the ball?          &lt;br /&gt;
灰姑娘，你是穿这只鞋去的舞会吗？&lt;/p&gt;
&lt;p&gt;wait a second...          &lt;br /&gt;
等一下。。。&lt;/p&gt;
&lt;p&gt;nope! doesn't fit me          &lt;br /&gt;
不！不合脚&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-16:2015/08/1851.cinderella.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：来点糖怎样？</title><link>https://mozillazg.com/2015/08/2009-07-30-HowAboutSomeSugar.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2009/07/30/how-about-some-sugar/"&gt;http://buttersafe.com/2009/07/30/how-about-some-sugar/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2009-07-30-HowAboutSomeSugar.zh-cn.png" src="/static/images/comics/2009-07-30-HowAboutSomeSugar.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey baby, how about
some sugar?       &lt;br /&gt;
嘿，小孩，来点糖怎样？&lt;/p&gt;
&lt;p&gt;are you talking to me?    &lt;br /&gt;
你是在跟我说话吗？&lt;/p&gt;
&lt;p&gt;or this baby sitting
next to a sack of sugar?      &lt;br /&gt;
或者是跟这个正坐在一袋糖旁边的小孩？&lt;/p&gt;
&lt;p&gt;i guess that depends.
which would yield better
results?      &lt;br /&gt;
我想这取决于哪种选择会有更好的结果？&lt;/p&gt;
&lt;p&gt;well, if you were talking
to me then I'd say
you're crass and pathetic.    &lt;br /&gt;
嗯，如果你是在跟我说话的话，我就会说你是个可悲的蠢蛋。&lt;/p&gt;
&lt;p&gt;I was talking to the
baby then.
can I have some sugar
so I can mke a pie?       &lt;br /&gt;
那我就是在跟那个小孩说话。可以借点糖给我让我做个派吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-16:2015/08/2009-07-30-HowAboutSomeSugar.zh-cn.html</guid><category>buttersafe</category></item><item><title>buttersafe：家庭公路旅行</title><link>https://mozillazg.com/2015/08/2010-06-15-familyroadtrip.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2010/06/15/family-road-trip/"&gt;http://buttersafe.com/2010/06/15/family-road-trip/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2010-06-15-familyroadtrip.zh-cn.png" src="/static/images/comics/2010-06-15-familyroadtrip.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;family road trip!!        &lt;br /&gt;
家庭公路旅行！！&lt;/p&gt;
&lt;p&gt;yay!!!        &lt;br /&gt;
耶！！！&lt;/p&gt;
&lt;p&gt;...to be supermarket!!    &lt;br /&gt;
。。。去超市！！&lt;/p&gt;
&lt;p&gt;soon          &lt;br /&gt;
一会儿&lt;/p&gt;
&lt;p&gt;you better
eat your souvenirs!!      &lt;br /&gt;
你们最好吃了你们的纪念品！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-16:2015/08/2010-06-15-familyroadtrip.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #2829：水</title><link>https://mozillazg.com/2015/08/2829.water.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2829/"&gt;Cyanide &amp;amp; Happiness #2829 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2829.water.zh-cn.png" src="/static/images/comics/2829.water.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;whatcha got there?        &lt;br /&gt;
那是什么？&lt;/p&gt;
&lt;p&gt;instagram!    &lt;br /&gt;
instagram！&lt;/p&gt;
&lt;p&gt;just add water!   &lt;br /&gt;
只需加点水！&lt;/p&gt;
&lt;p&gt;so vintage!       &lt;br /&gt;
年份十足！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-16:2015/08/2829.water.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>使用 git-remote-hg 镜像一个 Hg 仓库</title><link>https://mozillazg.com/2015/08/git-how-to-mirror-an-Mercurial-hg-repo-with-git-remote-hg.html</link><description>&lt;p&gt;前段时间在 github 上建了一个 PyPy 的 &lt;a href="https://github.com/mozillazg/pypy"&gt;镜像仓库&lt;/a&gt; （官方 PyPy 仓库是个存放在  bitbucket 上的 Mercurial(Hg) 仓库）。本文将记录我使用 git-remote-hg 镜像 Hg 仓库的步骤以及后续的同步更新操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 git 2.x （如果系统上的 git 是 2.x 版本可以跳过本步骤）。由于我用的是 CentOS 6 系统，通过 yum 安装的 git 版本是 1.x ，所以需要编译安装 2.x 版本的 git。详细步骤在这里: &lt;a href="http://mozillazg.com/2015/08/install-git-2-on-centos-6.html"&gt;在 CentOS 6 上编译安装 git 2.x&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 Python 包：mercurial&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /tmp
wget https://bootstrap.pypa.io/get-pip.py
python get-pip.py
pip install mercurial
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;a href="https://github.com/fingolfin/git-remote-hg"&gt;git-remote-hg&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /usr/local/bin
curl -o /usr/local/bin/git-remote-hg https://raw.githubusercontent.com/fingolfin/git-remote-hg/master/git-remote-hg
chmod +x /usr/local/bin/git-remote-hg
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 &lt;code&gt;PATH&lt;/code&gt; 环境变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;echo &amp;#39;export PATH=/usr/local/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;
&lt;span class="x"&gt;source ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global core.notesRef refs/notes/hg
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clone Hg 仓库，假设仓库存放在 /www&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /www
git clone &amp;quot;hg::https://mozillazg@bitbucket.org/pypy/pypy&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 github 仓库地址&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /www/pypy/
git remote add mine git@github.com:mozillazg/pypy.git
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步分支信息&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载 &lt;a href="https://github.com/mozillazg/snippets/blob/master/git/track_all_remote_branches.py"&gt;fetch_remote_branch_name_to_local.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;执行脚本&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /www/pypy/
python fetch_remote_branch_name_to_local.py
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;push 到 github 仓库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push mine --all
git push mine --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定时同步代码&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载同步分支信息的脚本： &lt;a href="https://github.com/mozillazg/snippets/blob/master/git/track_all_remote_branches.py"&gt;fetch_remote_branch_name_to_local.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将下面的代码同步脚本保存为 update.sh:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 0&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /www/pypy/

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 1&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; remote in &lt;span class="sb"&gt;`&lt;/span&gt;git branch&lt;span class="p"&gt;|&lt;/span&gt;grep -v &lt;span class="s1"&gt;&amp;#39;\* master&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; git branch -d &lt;span class="nv"&gt;$remote&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 2&amp;quot;&lt;/span&gt;
git fetch origin

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 3&amp;quot;&lt;/span&gt;
python track_all_remote_branches.py

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 4&amp;quot;&lt;/span&gt;
git pull

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 5&amp;quot;&lt;/span&gt;
git push mine --all -f

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;step 6&amp;quot;&lt;/span&gt;
git push mine --tags -f
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 crontab 定时任务，每天 3 点同步一次代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ crontab -e

&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; * * * &lt;span class="nb"&gt;cd&lt;/span&gt; /www/pypy &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /usr/bin/env bash /www/pypy/update.sh &amp;gt; /var/log/mirror_pypy.log 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想抢先查看实际效果？欢迎围观我创建的 &lt;a href="https://github.com/mozillazg/pypy"&gt;PyPy 镜像仓库&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/fingolfin/git-remote-hg"&gt;https://github.com/fingolfin/git-remote-hg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/pypy/pypy"&gt;https://bitbucket.org/pypy/pypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/latest/installing.html"&gt;https://pip.pypa.io/en/latest/installing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mozillazg/pypy"&gt;https://github.com/mozillazg/pypy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-16:2015/08/git-how-to-mirror-an-Mercurial-hg-repo-with-git-remote-hg.html</guid></item><item><title>如何撤销第一次提交的 git commit</title><link>https://mozillazg.com/2015/08/ru-he-che-xiao-di-yi-ci-ti-jiao-de-git-commit.html</link><description>&lt;p&gt;可以通过如下命令撤销创建仓库后第一次提交的 commit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git update-ref -d HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;http://stackoverflow.com/questions/6632191/how-to-revert-initial-git-commit&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-16:2015/08/ru-he-che-xiao-di-yi-ci-ti-jiao-de-git-commit.html</guid></item><item><title>Cyanide &amp; Happiness #1795：最困难的事情</title><link>https://mozillazg.com/2015/08/1795.thehardestthing.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1795/"&gt;Cyanide &amp;amp; Happiness #1795 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1795.thehardestthing.zh-cn.png" src="/static/images/comics/1795.thehardestthing.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;nothing is more
difficult than burying
your son....              &lt;br /&gt;
没有比埋葬自己的儿子更困难的事情了。。。&lt;/p&gt;
&lt;p&gt;jeez... I'm really
sorry to hear that.
how did he die?       &lt;br /&gt;
天啦。。。真是遗憾。他是因为什么原因去世的？&lt;/p&gt;
&lt;p&gt;I hit him with
shovel so he'd
stop climbing out.        &lt;br /&gt;
我用铁锹打他，这样他就不会再爬出来了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-15:2015/08/1795.thehardestthing.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>解决安装 VMware workstation 时提示“The MSI '' failed”</title><link>https://mozillazg.com/2015/08/fix-install-vmware-raise-the-msi-failed.html</link><description>&lt;p&gt;昨天碰到了安装 VMware workstation 时提示 &lt;code&gt;“The MSI '' failed”&lt;/code&gt; 的问题，最终的解决办法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先需要准备一个安装文件，比如：VMware-workstation-full-xxx.exe&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压 exe 文件，在 CMD 命令行中输入（假设 exe 文件放在 f:\Downloads 目录下）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f:\Downloads&amp;gt;VMware-workstation-full-10.0.2-1744117.1398244508.exe /extract vm\
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入解压后的目录，使用 vmwareworkstation_xx.msi 进行安装（32 位的系统使用 vmwareworkstation_x86.msi ，64 位的系统使用 vmwareworkstation_x64.msi）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f:\Downloads&amp;gt;cd vm
f:\Downloads\vm&amp;gt;vmwareworkstation_x64.msi EULAS_AGREED=1
f:\Downloads\vm&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完成，现在看看桌面上是不是已经有了一个 VMware Workstation 的快捷键了。:)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-15:2015/08/fix-install-vmware-raise-the-msi-failed.html</guid><category>VMware</category></item><item><title>在 CentOS 6 上编译安装 git 2.x</title><link>https://mozillazg.com/2015/08/install-git-2-on-centos-6.html</link><description>&lt;p&gt;CentOS 6 上通过 yum 安装的是 git 1.x 版本，
本文将讲述如何在 CentOS 6 上编译安装 git 2.x 。下面是详细步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装编译所需的环境依赖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum -y install wget curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker gcc asciidoc xmlto docbook2x

# 解决编译时出现的 /bin/sh: line 1: docbook2x-texi: command not found
ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 &lt;a href="https://www.kernel.org/pub/software/scm/git/"&gt;git 2.x 源码包&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /tmp
wget https://www.kernel.org/pub/software/scm/git/git-2.5.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压，编译，安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /tmp
tar zxvf git-2.5.0.tar.gz 
cd git-2.5.0/
make configure
./configure --prefix=/usr/local
make all doc info
make install install-doc install-html install-info
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 &lt;code&gt;PATH&lt;/code&gt; 环境变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;echo &amp;#39;export PATH=/usr/local/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;
&lt;span class="x"&gt;source ~/.bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git --version
git version 2.5.0
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;Git - Installing Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-15:2015/08/install-git-2-on-centos-6.html</guid></item><item><title>Cyanide &amp; Happiness #1056：现代艺术</title><link>https://mozillazg.com/2015/08/1056.modernartsucks.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1056/"&gt;Cyanide &amp;amp; Happiness #1056 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1056.modernartsucks.zh-cn.png" src="/static/images/comics/1056.modernartsucks.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you call this art?
it's just colored
rectangles and circles.       &lt;br /&gt;
你们把这叫做艺术？只不过是些涂了颜色的圆圈和方块。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-13:2015/08/1056.modernartsucks.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4008：打嗝</title><link>https://mozillazg.com/2015/08/4008.hiccups.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4008/"&gt;Cyanide &amp;amp; Happiness #4008 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4008.hiccups.zh-cn.png" src="/static/images/comics/4008.hiccups.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i've been having
hiccups for the
past three weeks          &lt;br /&gt;
过去三周里我一直打嗝&lt;/p&gt;
&lt;p&gt;a good cure is to
scare the sufferer,
and then they go away         &lt;br /&gt;
一个比较好的治疗方法就是惊吓患者，
然后他们就会离开了&lt;/p&gt;
&lt;p&gt;rawwwwwrarrrrrr!      &lt;br /&gt;
呃呃呃呃呃呃呃呃呃！&lt;/p&gt;
&lt;p&gt;aaghh!!       &lt;br /&gt;
啊啊啊啊！！&lt;/p&gt;
&lt;p&gt;ah good, now I can get back
to real problems          &lt;br /&gt;
啊，好了，现在我可以回去处理真正的问题了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-13:2015/08/4008.hiccups.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #731：全家福</title><link>https://mozillazg.com/2015/08/731.dw_allalone.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/731/"&gt;Cyanide &amp;amp; Happiness #731 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="731.dw_allalone.zh-cn.png" src="/static/images/comics/731.dw_allalone.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;look, daddy! I
drew a picture of
our family!   &lt;br /&gt;
爹地，快看！我画了一幅全家福！&lt;/p&gt;
&lt;p&gt;I don't care.
Go show your worthless mother.    &lt;br /&gt;
我不在意。拿去给你那没用的妈妈看吧。&lt;/p&gt;
&lt;p&gt;Look, mommy! I
drew a picture of     &lt;br /&gt;
妈咪，快看！我画了一幅&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-12:2015/08/731.dw_allalone.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #728：游戏机</title><link>https://mozillazg.com/2015/08/728.comicdepressing4.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/728/"&gt;Cyanide &amp;amp; Happiness #728 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="728.comicdepressing4.zh-cn.png" src="/static/images/comics/728.comicdepressing4.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 11 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-11:2015/08/728.comicdepressing4.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2291：麻烦</title><link>https://mozillazg.com/2015/08/2291.problems.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2291/"&gt;Cyanide &amp;amp; Happiness #2291 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2291.problems.zh-cn.gif" src="/static/images/comics/2291.problems.zh-cn.gif" /&gt;&lt;/p&gt;
&lt;p&gt;hey man,
i have a problem...       &lt;br /&gt;
嘿，哥们，
我遇到个麻烦。。。&lt;/p&gt;
&lt;p&gt;yeah? my father
always said you could
just dance your problems
away!         &lt;br /&gt;
是吗？我爸爸总是告诉我，
当你跳舞的时候，你的麻烦就会消失！&lt;/p&gt;
&lt;p&gt;my problem is you
dancing all the time.         &lt;br /&gt;
我的麻烦就是你一直在跳舞。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-08:2015/08/2291.problems.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3052：烧烤</title><link>https://mozillazg.com/2015/08/3052.comicbps1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3052/"&gt;Cyanide &amp;amp; Happiness #3052 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3052.comicbps1.zh-cn.png" src="/static/images/comics/3052.comicbps1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;is it a bird?!    &lt;br /&gt;
是鸟？！&lt;/p&gt;
&lt;p&gt;is it a plane!?   &lt;br /&gt;
是飞机！？&lt;/p&gt;
&lt;p&gt;no, it's superman         &lt;br /&gt;
不，是超人&lt;/p&gt;
&lt;p&gt;awwwwwwwwwww
唉唉唉唉唉唉&lt;/p&gt;
&lt;p&gt;annual ornithologist and
aeroplane enthusiasts bbq         &lt;br /&gt;
年度鸟类和飞机爱好者烧烤聚会&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-08:2015/08/3052.comicbps1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4018：臭</title><link>https://mozillazg.com/2015/08/4018.smelly.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4018/"&gt;Cyanide &amp;amp; Happiness #4018 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4018.smelly.zh-cn.png" src="/static/images/comics/4018.smelly.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;haha! you're so smelly
you have flies circling
you!          &lt;br /&gt;
哈哈！你实在是太臭了，
都有苍蝇在你周围环绕了！&lt;/p&gt;
&lt;p&gt;hey, that's not true!
they're orbiting me
because i'm so fat!       &lt;br /&gt;
嘿，那不是真的！
是我太胖了以至于它们都在环绕着我
做椭圆轨道运动！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-08:2015/08/4018.smelly.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1120：需要</title><link>https://mozillazg.com/2015/08/1120.need.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1120/"&gt;Cyanide &amp;amp; Happiness #1120 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1120.need.zh-cn.png" src="/static/images/comics/1120.need.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;aaaaagh!      &lt;br /&gt;
啊啊啊啊！&lt;/p&gt;
&lt;p&gt;i need your help!!!       &lt;br /&gt;
我需要你的帮助！！！&lt;/p&gt;
&lt;p&gt;my arm got ripped off!!!      &lt;br /&gt;
我的手臂被扯断了！！！&lt;/p&gt;
&lt;p&gt;what should i do?!?!      &lt;br /&gt;
我该做什么！？！&lt;/p&gt;
&lt;p&gt;dude, just be yourself!     &lt;br /&gt;
伙计，只须做你自己！  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-06:2015/08/1120.need.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1257：自由</title><link>https://mozillazg.com/2015/08/1257.white_people_suck2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1257/"&gt;Cyanide &amp;amp; Happiness #1257 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1257.white_people_suck2.zh-cn.png" src="/static/images/comics/1257.white_people_suck2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;do you think
we'll ever be free
and treated equally?          &lt;br /&gt;
你觉得我们会过上自由且平等的生活吗？&lt;/p&gt;
&lt;p&gt;we wont, but maybe
our child will grow up
free in a life without
prejudice or hate     &lt;br /&gt;
我们不会，但是，我们的孩子可能
会在一个没有歧视或仇恨的环境下自由成长&lt;/p&gt;
&lt;p&gt;you're coming with me!    &lt;br /&gt;
你跟我来！&lt;/p&gt;
&lt;p&gt;no!   &lt;br /&gt;
不！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-06:2015/08/1257.white_people_suck2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4010：妻子</title><link>https://mozillazg.com/2015/08/4010.wife.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4010/"&gt;Cyanide &amp;amp; Happiness #4010 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4010.wife.zh-cn.png" src="/static/images/comics/4010.wife.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, bill,
you always seem so happy.
what's your secret?       &lt;br /&gt;
嘿，比尔，
你总是看起来如此的开心。
你的秘诀是什么？&lt;/p&gt;
&lt;p&gt;well, my wife always makes
me smile!     &lt;br /&gt;
嗯，我的妻子总是让我微笑！&lt;/p&gt;
&lt;p&gt;at gun point.     &lt;br /&gt;
在枪口下。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-05:2015/08/4010.wife.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4004：乔和芭比</title><link>https://mozillazg.com/2015/08/4004.gijoebarbie.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4004/"&gt;Cyanide &amp;amp; Happiness #4004 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4004.gijoebarbie.zh-cn.png" src="/static/images/comics/4004.gijoebarbie.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-04:2015/08/4004.gijoebarbie.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4007：见面</title><link>https://mozillazg.com/2015/08/4007.met.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4007/"&gt;Cyanide &amp;amp; Happiness #4007 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4007.met.zh-cn.png" src="/static/images/comics/4007.met.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;have you two met?     &lt;br /&gt;
你们俩之前有见过吗？&lt;/p&gt;
&lt;p&gt;this is olivia.       &lt;br /&gt;
这是奥利维娅。&lt;/p&gt;
&lt;p&gt;hi! i'm james.        &lt;br /&gt;
嗨！我是詹姆斯。&lt;/p&gt;
&lt;p&gt;"durrr! hi! i'm james!"   &lt;br /&gt;
“杜尔！嗨！我是詹姆斯！”&lt;/p&gt;
&lt;p&gt;sorry, i'm bad at first
impressions       &lt;br /&gt;
抱歉，我不擅长第一印象&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-04:2015/08/4007.met.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>让我们一起来构建一个 Web 服务器（三）</title><link>https://mozillazg.com/2015/08/let-us-build-a-web-server-part-3-zh-cn.html</link><description>&lt;p&gt;本文译自： &lt;a class="reference external" href="http://ruslanspivak.com/lsbaws-part3/"&gt;http://ruslanspivak.com/lsbaws-part3/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
“当我们必须要发明创造的时候学到的东西最多” —— Piaget&lt;/blockquote&gt;
&lt;p&gt;在 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html"&gt;第二部分&lt;/a&gt; 你创建了一个能够处理基本的 GET 请求的微型 WSGI 服务器。
同时我向你提了一个问题，“如何才能让你的服务器在同一时刻能够处理多个请求？”
在本篇文章中你可以找到答案。那么，系好安全带，加足马力吧。
你将会有一趟非常快速的旅程。
确保你已经准备好了你的 Linux, Mac OS X （或任一 *nix 系统）以及 Python 。
本文所有的源代码都已经放在 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/"&gt;Github&lt;/a&gt; 上了。&lt;/p&gt;
&lt;p&gt;首先，让我们来回顾一下一个非常基础的 Web 服务器看起来是啥样的，
以及这个服务器需要做些什么才能服务来自客户端的请求。
你在 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-1-zh-cn.html"&gt;第一部分&lt;/a&gt; 和 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html"&gt;第二部分&lt;/a&gt; 创建的服务器是个一次只能处理一个客户端请求的循环服务器。
在它处理完正在处理的客户端请求之前，它是无法接受新的连接的。
一些客户端可能会不高兴，因为它们必须得排队等待，
对于那些非常繁忙的服务器，这个等待可能会是个非常漫长的过程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it1.png" src="/static/images/lsbaws-part3/lsbaws_part3_it1.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面是循环服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3a.py"&gt;webserver3a.py&lt;/a&gt; 代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#####################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Iterative server - webserver3a.py                                 #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                   #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X  #&lt;/span&gt;
&lt;span class="c1"&gt;#####################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Serving HTTP on port {port} ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了观察你的服务器一次只能处理一个客户端请求的现象，
服务器代码需要做一点修改，在发送响应信息给客户端后的地方增加了
一个 60 秒的延时。这一行的更改是为了告诉服务器进程需要休息 60 秒。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it2.png" src="/static/images/lsbaws-part3/lsbaws_part3_it2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面是包含休息代码的服务器代码 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Iterative server - webserver3b.py                                     #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                       #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X      #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                       #&lt;/span&gt;
&lt;span class="c1"&gt;# - Server sleeps for 60 seconds after sending a response to a client   #&lt;/span&gt;
&lt;span class="c1"&gt;#########################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# sleep and block the process for 60 seconds&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Serving HTTP on port {port} ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用以下方式启动服务器：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3b.py
&lt;/pre&gt;
&lt;p&gt;现在打开一个新的终端窗口，然后执行 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令。
你应该会看到屏幕上打印了 &amp;quot;Hello, World!&amp;quot; 字符串：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8888/hello
Hello, World!
&lt;/pre&gt;
&lt;p&gt;然后立即打开第二个终端窗口并执行相同的 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8888/hello
&lt;/pre&gt;
&lt;p&gt;如果你在 60 秒内做完了这些操作的话，第二个 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 应该不会立马
输出任何的的信息，只是会阻塞在那里。
服务器应该也没有在它的标准输出中答应新的请求 body 信息。
下面是这种现象在我的 Mac 电脑上的样子（右下角用黄色高亮的窗口显示第二个 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令阻塞了，
正在等待连接能够被服务器接受）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it3.png" src="/static/images/lsbaws-part3/lsbaws_part3_it3.png" /&gt;&lt;/p&gt;
&lt;p&gt;在你等了足够长的时间后（大于 60 秒）你应该会看到第一个 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt;  结束
以及第二个 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 在屏幕上打印了 &amp;quot;Hello, World!&amp;quot;，然后阻塞 60 秒，之后再结束：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it4.png" src="/static/images/lsbaws-part3/lsbaws_part3_it4.png" /&gt;&lt;/p&gt;
&lt;p&gt;它的工作方式是，服务器完成对第一个 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 客户端的请求后，只有等它休息完 60 秒之后才会
开始处理第二个请求。这将导致出现顺序，或一步一步的循环，或在这里是一次只能处理一个客户端请求。&lt;/p&gt;
&lt;p&gt;让我们抽出一点时间来说一下关于客户端和服务器之间的通信方面的东西。
为了让两个程序能够在网络进行中进行通信，它们需要使用套接字（socket）。
你已经在 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-1-zh-cn.html"&gt;第一部分&lt;/a&gt; 和 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html"&gt;第二部分&lt;/a&gt; 中见过 socket 了。但是什么是一个 socket 呢？&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_socket.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_socket.png" /&gt;&lt;/p&gt;
&lt;p&gt;一个 socket 是一个通信端点的抽象概念，
它允许你的程序通过文件描述与另一个程序进行通信。
在这篇文章中，我会特别讲述在 Linux/Mac OS X 上的  TCP/IP socket。
需要理解一个重要的概念，那就是 TCP socket 对。&lt;/p&gt;
&lt;blockquote&gt;
一个 TCP 连接的 socket 对是一个 4 元组，这个元组标识了一个 TCP 连接的两个端点：
本地 IP 地址，本地端口，远程 IP 地址，以及远程端口。
一个套接字对唯一标识了网络上每个 TCP 连接。
一个 IP 地址和一个端口号这个两个值标识了每个端点，通常被叫做一个套接字。 &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_socketpair.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_socket.png" /&gt;&lt;/p&gt;
&lt;p&gt;因此，元组 &lt;tt class="docutils literal"&gt;{10.10.10.2:49152, 12.12.12.3:8888}&lt;/tt&gt; 是一个套接字对，它唯一标识了
客户端 上的一个 TCP 连接的两个端点。
元组 &lt;tt class="docutils literal"&gt;{12.12.12.3:8888, 10.10.10.2:49152}&lt;/tt&gt; 是一个套接字对，它唯一标识了
服务端 上的一个 TCP 连接的两个端点。这个两个值标识了一个 TCP 连接的服务端端点，
IP 地址 12.12.12.3 和端口 8888 在这里被归为一个套接字（客户端端点有相同的应用）。&lt;/p&gt;
&lt;p&gt;一个服务器通常通过创建一个套接字,然后开始接受来自客户端的请求，它的常规顺序如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_server_socket_sequence.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_server_socket_sequence.png" /&gt;&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;服务器创建一个 TCP/IP socket。这个用的是下面的 Python 语句来实现的：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;服务器可能会设置一些 socket 选项（这是可选的，但是你能在上面的服务器代码中看到它,只是为了在你决定杀死或重启服务器的时候能够立即就可以一遍又一遍的重复使用相同的地址）。:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;然后，服务器绑定这个地址. &lt;tt class="docutils literal"&gt;bind&lt;/tt&gt; 函数在 socket 上分配一个本地协议地址。对于 TCP 则是，调用 &lt;tt class="docutils literal"&gt;bind&lt;/tt&gt; 让你指定一个端口号，一个 IP 地址，这两个都要或都不需要指定。:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
listen_socket.bind(SERVER_ADDRESS)
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;然后，服务器把这个 socket 设定为一个监听 socket&lt;/p&gt;
&lt;pre class="literal-block"&gt;
listen_socket.listen(REQUEST_QUEUE_SIZE)
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个 &lt;tt class="docutils literal"&gt;listen&lt;/tt&gt; 方法只需要在服务器端进行调用。
它告诉内核，它应该接受目标为这个 socket 的接入连接请求。&lt;/p&gt;
&lt;p&gt;这样做以后，服务器就开始在一个循环内一次接受来自一个客户端的连接。
当有一个可用的连接的时候， &lt;tt class="docutils literal"&gt;accept&lt;/tt&gt; 调用返回连接的客户端的套接字。
然后，服务器从这个连接的客户端的套接字中读取请求数据，
在它的标准输出上答应这个数据，然后给客户端发送回一条消息。
然后，服务器关闭了这个客户端连接，它准备再次开始接受来的新客户端的连接。&lt;/p&gt;
&lt;p&gt;下面是一个客户端与服务器通过 TCP/IP 进行通信需要做的事情：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_client_socket_sequence.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_client_socket_sequence.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面是客户端连接你的服务器，发送一个请求然后答应响应的一段示例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="c1"&gt;# create a socket and connect to a server&lt;/span&gt;
&lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# send and receive some data&lt;/span&gt;
&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建完套接字后，客户端需要连接服务器. 可以通过调用 &lt;tt class="docutils literal"&gt;connect&lt;/tt&gt; 实现这个功能：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sock.connect(('localhost', 8888))
&lt;/pre&gt;
&lt;p&gt;客户端只需要提供想要连接的服务器的远程 IP 地址或主机名以及远程端口号就可以了。&lt;/p&gt;
&lt;p&gt;你可能已经注意到了，客户端没有调用 &lt;tt class="docutils literal"&gt;bind&lt;/tt&gt;  和 &lt;tt class="docutils literal"&gt;accept&lt;/tt&gt;。
客户不需要调用 &lt;tt class="docutils literal"&gt;bind&lt;/tt&gt; 是因为客户端不关系本地 IP 地址和本地端口号。
当客户端调用 &lt;tt class="docutils literal"&gt;connect&lt;/tt&gt; 时，内核里的 TCP/IP 协议栈会分配本地 IP 地址和本地端口号。
这个本地端口叫做 &lt;strong&gt;临时端口&lt;/strong&gt; 或者 短命端口 :)。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_ephemeral_port.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_ephemeral_port.png" /&gt;&lt;/p&gt;
&lt;p&gt;服务器上的端口标识了一个知名(well-know)服务，客户端连接的端口叫做一个知名端口（比如，HTTP 的 80 端口， SSH 的 22 端口）。
起一个 Python shell 然后发起一个到你本地运行的服务器的客户端连接，
然后查看为你创建的套接字分配了什么样的临时端口（在尝试下面的例子前需要先启动服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3a.py"&gt;webserver3a.py&lt;/a&gt; 或 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt; ）：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import socket
&amp;gt;&amp;gt;&amp;gt; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&amp;gt;&amp;gt;&amp;gt; sock.connect(('localhost', 8888))
&amp;gt;&amp;gt;&amp;gt; host, port = sock.getsockname()[:2]
&amp;gt;&amp;gt;&amp;gt; host, port
('127.0.0.1', 60589)
&lt;/pre&gt;
&lt;p&gt;在上面的例子中，内核给那个套接字分配了一个临时端口 60589。&lt;/p&gt;
&lt;p&gt;在回答 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html"&gt;第二部分&lt;/a&gt; 的问题前我还需要快速讲一下其他一些重要的概念。
你很快就会看到为什么它们是重要的。
这两个概念是 &lt;em&gt;进程&lt;/em&gt; 和 &lt;em&gt;文件描述符&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;什么是进程？一个进程只是一个正在执行的程序的实例。
比如说，当服务器代码被执行的时候，它被加载到内存里，然后这个正在执行的程序的实例就叫做进程。
内核记录了有关这个进程的一大串的信息—— 比如进程的 ID ——为了方便跟踪这个进程。
当你运行你的循环服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3a.py"&gt;webserver3a.py&lt;/a&gt; 或 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt; 的时候，你只是运行了一个进程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_server_process.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_server_process.png" /&gt;&lt;/p&gt;
&lt;p&gt;在终端窗口中启动服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt;  :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3b.py
&lt;/pre&gt;
&lt;p&gt;在另一个不同的终端窗口中使用 &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; 命令来获取刚才那个进程的一些信息:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ps | grep webserver3b | grep -v grep
7182 ttys003    0:00.04 python webserver3b.py
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; 命令告诉你你确实只是运行了一个 Python 进程 webserver3b 。
当一个进程被创建的时候，内核给它分配了一个进程 ID, PID。
在 UNIX 中，每个用户进程同时也有一个父进程，这个进程有它自己的进程 ID 叫做父进程 ID 或缩写为 PPID。
一般情况下，我假定你运行了一个 BASH shell ，然后当你启用服务器的时候，
一个新的进程被创建并且有一个 PID，同时它的父 PID 其实就是那个 BASH shel 的 PID。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_ppid_pid.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_ppid_pid.png" /&gt;&lt;/p&gt;
&lt;p&gt;亲自试一下，然后看看具体是什么情况。
再次启动你的 Python shell ，这将创建一个新的进程，
然后通过调用 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.getpid"&gt;os.getpid()&lt;/a&gt; 和 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.getppid"&gt;os.getppid()&lt;/a&gt; 来获取这个  Python shell 进程的 PID 和父 PID（你的 BASH shell 的 PID）。
然后在另一个终端窗口中运行 &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; 命令来获取 PPID（父进程 ID，在我的这里是 3148）。
在下面的截图中你可以看到一个父子关系的例子，
它展示的是在我的 Mac OS X 机器上子 Python shell 进程与父 BASH shell 进程之间的父子关系：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_pid_ppid_screenshot.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_pid_ppid_screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;另一个非常重要并且需要了解的概念是 &lt;strong&gt;文件描述符&lt;/strong&gt; 。
那么，什么是文件描述符呢？
一个文件描述符是一个正整数，
当一个进程打开一个存在的文件，创建一个新文件或创建一个新的套接字的时候，内核返回一个正整数给进程，这个正整数就是文件描述符。
你可能听说过，在 UNIX 中一切皆文件。
内核通过文件描述符来索引一个进程打开的文件。
当你需要读或写一个文件时，你需要用文件描述符来标记它。
Python 给了你一些更高级别的对象用来处理文件（和套接字），
你不需要使用文件描述符来标识一个文件。
下面展示了在 Unix 中文件和套接字是如何被标识的：通过它们的整数文件描述符。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_process_descriptors.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_process_descriptors.png" /&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，UNIX shell 给一个进程的标准输出分配的文件描述符是 0，
标准输入的文件描述符是 1，标准错误的文件描述符是 2。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it_default_descriptors.png" src="/static/images/lsbaws-part3/lsbaws_part3_it_default_descriptors.png" /&gt;&lt;/p&gt;
&lt;p&gt;正如我前面提到的，尽管 Python 给了你一个更高级别的文件或类文件对象用来进行操作，
你依然可以使用对象的 &lt;tt class="docutils literal"&gt;fileno()&lt;/tt&gt; 方法来获取分配给这个文件的文件描述符。
返回到你的 Python shell 看看你怎样才能做到这样：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; sys.stdin
&amp;lt;open file '&amp;lt;stdin&amp;gt;', mode 'r' at 0x102beb0c0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sys.stdin.fileno()
0
&amp;gt;&amp;gt;&amp;gt; sys.stdout.fileno()
1
&amp;gt;&amp;gt;&amp;gt; sys.stderr.fileno()
2
&lt;/pre&gt;
&lt;p&gt;当你在 Python 中处理文件和套接字的时候，你通常需要使用一个高级别的
file/socket 对象。
但是在这里你可能需要多次直接使用文件描述符。
下面的例子展示了你可以通过调用一个 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.write"&gt;write&lt;/a&gt; 系统并把文件描述符正数作为一个参数
的方式来写入一个字符串到标准输出：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; res = os.write(sys.stdout.fileno(), 'hello\n')
hello
&lt;/pre&gt;
&lt;p&gt;这里是个非常有意思的地方——这应该不会让你感到特别的惊讶，因为你已经知道在 UNIX
中万物皆文件——你的套接字也有一个分配给它的文件描述符。
在说一遍，当你在 Python 中创建一个套接字的时候，
你得到了一个对象和一个正整数，
你也可以通过直接访问我之前提过的 &lt;tt class="docutils literal"&gt;fileno()&lt;/tt&gt; 方法的方式得到这个套接字的整数文件描述符。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import socket
&amp;gt;&amp;gt;&amp;gt; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
&amp;gt;&amp;gt;&amp;gt; sock.fileno()
3
&lt;/pre&gt;
&lt;p&gt;还有一件需要提及的事情是：在第二个例子中的循环服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt; 中你已经知道了，当服务器进程正在休眠 60 秒的时候，你仍然能够用第二个 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令连接服务器吗？当然可以，只是 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 将不会立即输出任何信息，它只是会阻塞在那里。
但是，为什么当时服务器并没有在 &lt;tt class="docutils literal"&gt;accept&lt;/tt&gt; 接受一个连接，而客户端却没有立即被拒绝连接，却依然能够连接服务器？
答案是套接字对象的 &lt;tt class="docutils literal"&gt;listen&lt;/tt&gt; 方法以及它的  &lt;tt class="docutils literal"&gt;BACKLOG&lt;/tt&gt; 参数，在代码里面我调用的是 &lt;tt class="docutils literal"&gt;REQUEST_QUEUE_SIZE&lt;/tt&gt; 。
&lt;tt class="docutils literal"&gt;BACKLOG&lt;/tt&gt; 参数指定了内核中接入连接请求的队列大小。
当服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt; 正在休眠的时候，你可以用第二个 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令
连接服务器，是因为内核中用于该服务器套接字的接入连接请求队列还有足够的可用空间。&lt;/p&gt;
&lt;p&gt;虽然加大 &lt;tt class="docutils literal"&gt;BACKLOG&lt;/tt&gt; 参数的值并不能把你的服务器变成一个可以一次处理多个客户端请求的服务器，但是，对于非常繁忙的服务器来说，有一个足够大
的 backlog 参数是非常重要的，这样 &lt;tt class="docutils literal"&gt;accept&lt;/tt&gt; 调用就不用等待有新的连接被建立，可以直接从队列中拿取新的连接，然后开始没有延时的处理这个客户端请求。&lt;/p&gt;
&lt;p&gt;哇哦！你已经了解到很多知识了。让我们快速回顾一下你目前说学到的东西（
如果这些你都非常熟悉的话，那就再加深一下）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_checkpoint.png" src="/static/images/lsbaws-part3/lsbaws_part3_checkpoint.png" /&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;循环服务器&lt;/li&gt;
&lt;li&gt;服务器 socket 创建顺序（socket, bind, listen, accept）&lt;/li&gt;
&lt;li&gt;客户端链接创建顺序（socket, connect）&lt;/li&gt;
&lt;li&gt;套接字对&lt;/li&gt;
&lt;li&gt;套接字&lt;/li&gt;
&lt;li&gt;临时端口和知名端口&lt;/li&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;li&gt;进程 ID（PID），父进程 ID（PPID），以及父子关系。&lt;/li&gt;
&lt;li&gt;文件描述符&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;listen&lt;/tt&gt; socket 方法的 &lt;tt class="docutils literal"&gt;BACKLOG&lt;/tt&gt; 参数的含义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，我已经准备号回答 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html"&gt;第二部分&lt;/a&gt; 的问题了：“如何让你的服务器在同一时刻
处理多个请求？” 或者换一种方式“如何写一个并发服务器？”&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc2_service_clients.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc2_service_clients.png" /&gt;&lt;/p&gt;
&lt;p&gt;在 Unix 下写一个并发服务器的最简单的方法是使用 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.fork"&gt;fork()&lt;/a&gt; 系统调用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_fork.png" src="/static/images/lsbaws-part3/lsbaws_part3_fork.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面是一个新的并发服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3c.py"&gt;webserver3c.py&lt;/a&gt; 的代码，这个服务器能够同时处理多个客户端请求（同上一个服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt; 一样，每个子进程都会休息 60 秒 ）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_it2.png" src="/static/images/lsbaws-part3/lsbaws_part3_it2.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Concurrent server - webserver3c.py                                      #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                         #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X        #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                         #&lt;/span&gt;
&lt;span class="c1"&gt;# - Child process sleeps for 60 seconds after handling a client&amp;#39;s request #&lt;/span&gt;
&lt;span class="c1"&gt;# - Parent and child processes close duplicate descriptors                #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                         #&lt;/span&gt;
&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Child PID: {pid}. Parent PID {ppid}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;ppid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getppid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Serving HTTP on port {port} ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parent PID (PPID): {pid}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# child&lt;/span&gt;
            &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close child copy&lt;/span&gt;
            &lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# child exits here&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# parent&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close parent copy and loop over&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在深入讨论 fork 是如何工作前，先试一下吧，看看服务器是否真的能够同时处理多个客户端发送过来的请求，
而不是想它的同胞 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3a.py"&gt;webserver3a.py&lt;/a&gt; 和 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3b.py"&gt;webserver3b.py&lt;/a&gt; 那样无法处理。
在命令行下用以下命令启动服务器：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3c.py
&lt;/pre&gt;
&lt;p&gt;然后尝试你之前试过的那两条同样的命令，现在尽管服务器的子进程在服务了一个客户端请求后会休眠 60 秒，但是仍然不
影响其它的客户端，因为它们是由完全没有依赖的不同进程服务的。你可以看到你的 curl 命令立即输出了 “Hello, World!”，
然后卡住了 60 秒。你可以继续执行 n 条 curl 命令（嗯，差不多是你想执行多少就多少）所有的这些命令都将立即输出服务器的响应“Hello, World”，没有肉眼可见的延迟。试试吧。&lt;/p&gt;
&lt;p&gt;为了理解 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.fork"&gt;fork()&lt;/a&gt; 有一点很长的重要那就是，你调用了一次 fork 但是它返回了两次：一次在父进程，一次在子进程。
当你 fork 一个新进程时，返回给子进程的进程 ID 是 0。当 fork 在父进程中返回时，它返回的是子进程的 PID。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc2_how_fork_works.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc2_how_fork_works.png" /&gt;&lt;/p&gt;
&lt;p&gt;我仍然记得当我第一次研究 fork 并尝试它的时候我有多么的着迷。它对我看起来就像魔法一样。&lt;/p&gt;
&lt;p&gt;我当时正在阅读一段连续的代码，然后“嘭！”：那段代码克隆了它自己，现在同时运行了两个具有相同代码的实例。
我当时真的认为这就是魔法。&lt;/p&gt;
&lt;p&gt;当一个父进程 fork 一个新的子进程时，子进程获得了一份父进程的文件描述符的拷贝：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc2_shared_descriptors.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc2_shared_descriptors.png" /&gt;&lt;/p&gt;
&lt;p&gt;你可能已经看到了，在上面代码中父进程关闭了客户端连接：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
else:  # parent
    client_connection.close()  # close parent copy and loop over
&lt;/pre&gt;
&lt;p&gt;如果父进程已经关掉了这个 socket 那么子进程是怎么做仍然可以从客户端 socet 中读取到数据呢？
答案就在上图总。内核使用描述符引用计数来决定是否需要关闭一个 socket。
只有当某个 socket 的描述符引用计数变成 0 的时候才会关闭这个 socket。
当你的服务器创建一个子进程的时候，子进程获得了父进程的文件描述符拷贝，内核将这些描述符的引用计数也相应的增加了。
在有一个父进程和一个子进程的情况下，关联者客户端 socket 的描述符引用计数就会是 2，
当父进程想在上面的代码中那样关闭了客户端 socket 链接的时候，引用计数就会减少变成 1，但是
仍然还没达到让内核关闭这个 socket 的条件。
子进程也需要关闭来自父进程监听的 socket 拷贝，因为子进程不关心接收新的客户端请求，
它只关心处理来自已建立连接的客户端连接：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
listen_socket.close()  # close child copy
&lt;/pre&gt;
&lt;p&gt;我将会在稍后讲述如果你不关闭描述符副本时话会发生什么。&lt;/p&gt;
&lt;p&gt;正如你在这个并发服务器源码中说发现的那样，服务器的父进程现在只有一个角色，那就是
接收一个新的客户端连接， fork 一个新的子进程用来处理这个请求，然后循环以便接收另一个客户端的连接，
没有其他多余的事情了。服务器的父进程不会处理客户端请求 —— 它的子进程会去处理。&lt;/p&gt;
&lt;p&gt;说点额外的事情。当我们说两个事件是并发执行的时候，具体说的是什么意思呢？&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc2_concurrent_events.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc2_concurrent_events.png" /&gt;&lt;/p&gt;
&lt;p&gt;当我们说两个事件是并发执行的时候，通常我们的意思是，它们是同时发生的。
简短的定义当然非常好，但是你也应该记住复杂的定义：&lt;/p&gt;
&lt;blockquote&gt;
如果你没法通过观察程序来知道哪个是先执行的，那么这两个事件就是并发执行的。&lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;又到了概况你目前所学知识的时间了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_checkpoint.png" src="/static/images/lsbaws-part3/lsbaws_part3_checkpoint.png" /&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;在 Unix 下写并发服务器的最简单的方法是调用系统内的 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.fork"&gt;fork()&lt;/a&gt; 方法&lt;/li&gt;
&lt;li&gt;当一个进程 fork 了一个新的进程的时候，它就变成了那个新 fork 的子进程的父进程。&lt;/li&gt;
&lt;li&gt;在调用 fork 后父子进程共享相同的文件描述符。&lt;/li&gt;
&lt;li&gt;内核使用描述符引用计数来决定是否需要关闭文件/socket&lt;/li&gt;
&lt;li&gt;服务器的父进程现在只有一个角色，那就是接收一个新的客户端连接， fork 一个新的子进程用来处理这个请求，然后循环以便接收另一个客户端的连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们来看一下，如果你没有在父子进程中关闭 socket 描述符副本会发生什么。
下面是一个修改版的并发服务器，它没有关闭描述符副本，
&lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3d.py"&gt;webserver3d.py&lt;/a&gt; ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Concurrent server - webserver3d.py                                      #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                         #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X        #&lt;/span&gt;
&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Serving HTTP on port {port} ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# store the reference otherwise it&amp;#39;s garbage collected&lt;/span&gt;
        &lt;span class="c1"&gt;# on the next loop run&lt;/span&gt;
        &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# child&lt;/span&gt;
            &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close child copy&lt;/span&gt;
            &lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# child exits here&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# parent&lt;/span&gt;
            &lt;span class="c1"&gt;# client_connection.close()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用以下方式启动服务器：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3d.py
&lt;/pre&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令来连接服务器：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8888/hello
Hello, World!
&lt;/pre&gt;
&lt;p&gt;好了，curl 打印了来自并发服务器的响应，但是它并没有立即退出而是卡住那儿了。
发生什么事情了？服务器不再休息 60 了：它的子进程还在处理客户端请求，
关闭客户端连接然后退出，但是客户端 curl 仍然没有退出。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc3_child_is_active.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc3_child_is_active.png" /&gt;&lt;/p&gt;
&lt;p&gt;那么，为什么 curl 没有退出呢？原因就是文件描述符副本。
当子进程关闭客户端连接的时候，内核减少了那个客户端 socket 的引用计数，此时计数变成了 1。
虽然服务器的子进程退出了，但是客户端 socket 并没有被内核关闭，因为此时该 socket 描述符的引用计数还不是 0，
结果终止包（在 TCP/IP 中被叫做 FIN）并没有被发送给客户端，可以说是客户端就会一直在线。
这里还有另外一个问题。如果你的长时间运行的服务器没有关闭文件描述符副本的话，
它最终将用尽所有可用的文件描述符：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc3_out_of_descriptors.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc3_out_of_descriptors.png" /&gt;&lt;/p&gt;
&lt;p&gt;使用 ctrl + c 停止你的服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3d.py"&gt;webserver3d.py&lt;/a&gt; ，然后通过在 shell 中输入内置的 &lt;tt class="docutils literal"&gt;ulimit&lt;/tt&gt; 命令来查看服务器进程默认可用的资源：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ulimit -a
core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 3842
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 1024
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 8192
cpu time               (seconds, -t) unlimited
max user processes              (-u) 3842
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
&lt;/pre&gt;
&lt;p&gt;正如你在上面看到的，服务器进程在我的 Ubuntu 上最大可打开的文件描述符（open files）数目是 1024。&lt;/p&gt;
&lt;p&gt;现在我们来看一下如果你的服务器没有关闭描述符副本，它是怎么样用尽可用的文件描述符的。
在一个已有的或新开的终端窗口中，设置最大可打开的文件描述符数目为 256：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ulimit -n 256
&lt;/pre&gt;
&lt;p&gt;在你刚执行 &lt;tt class="docutils literal"&gt;$ ulimit &lt;span class="pre"&gt;-n&lt;/span&gt; 256&lt;/tt&gt; 命令的那个终端中启动服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3d.py"&gt;webserver3d.py&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3d.py
&lt;/pre&gt;
&lt;p&gt;然后使用下面的客户端 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/client3.py"&gt;client3.py&lt;/a&gt; 测试这个服务器。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#####################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Test client - client3.py                                          #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                   #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X  #&lt;/span&gt;
&lt;span class="c1"&gt;#####################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;errno&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;


&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;GET /hello HTTP/1.1&lt;/span&gt;
&lt;span class="s2"&gt;Host: localhost:8888&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_conns&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;socks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;client_num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_clients&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;connection_num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_conns&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection_num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Test client for LSBAWS.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;formatter_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentDefaultsHelpFormatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;--max-conns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Maximum number of connections per client.&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;--max-clients&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Maximum number of clients.&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_conns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在一个新的终端窗口中，启动 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/client3.py"&gt;client3.py&lt;/a&gt; 并告诉它同时创建 300 个连接到服务器的连接：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python client3.py --max-clients=300
&lt;/pre&gt;
&lt;p&gt;很快你的服务器就会爆炸。下面是我机子上的异常信息的截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc3_too_many_fds_exc.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc3_too_many_fds_exc.png" /&gt;&lt;/p&gt;
&lt;p&gt;教训已经非常清晰了——你的服务器应该关闭描述符副本。但是，就算你关闭了描述符副本，
你仍然还没有跳出丛林，因为你的服务器还有另一个问题，这个问题就是僵尸进程！&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc3_zombies.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc3_zombies.png" /&gt;&lt;/p&gt;
&lt;p&gt;是的，你的服务器代码实际上创建了一些僵尸进程。
让我们来看一下是怎么回事。再次启动你的服务器：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3d.py
&lt;/pre&gt;
&lt;p&gt;在另一个终端窗口中执行下面的 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8888/hello
&lt;/pre&gt;
&lt;p&gt;现在使用 ps 命令来显示正在运行的 Python 进程。
下面是我的 Ubuntu 上的 &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; 命令输出：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ps auxw | grep -i python | grep -v grep
vagrant   9099  0.0  1.2  31804  6256 pts/0    S+   16:33   0:00 python webserver3d.py
vagrant   9102  0.0  0.0      0     0 pts/0    Z+   16:33   0:00 [python] &amp;lt;defunct&amp;gt;
&lt;/pre&gt;
&lt;p&gt;你有注意到第二行吗？上面说进程 PID 为 9102 的进程状态是 &lt;strong&gt;Z+&lt;/strong&gt; ，进程名称是 &lt;strong&gt;&amp;lt;defunct&amp;gt;&lt;/strong&gt; 。
这就是我们的僵尸进程了。僵尸进程的问题是你没法杀死它们。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc3_kill_zombie.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc3_kill_zombie.png" /&gt;&lt;/p&gt;
&lt;p&gt;就算你想尝试通过使用 &lt;tt class="docutils literal"&gt;$ kill &lt;span class="pre"&gt;-9&lt;/span&gt;&lt;/tt&gt; 的方式来杀死僵尸进程也没有用，它们仍然能够活下来。你可以自己试试看。&lt;/p&gt;
&lt;p&gt;僵尸进程究竟是什么呢？为什么我们的服务器会创建它们？
僵尸进程是指一个已经终止了的进程，但是它的父进程并没有等待它，也没有收到它的终止状态。
当一个子进程在它的父进程之前退出时，内核会把这个子进程转换为僵尸进程，同时存储该进程的一下信息方便它的父进程之后来恢复它。
存储的信息通常包括进程 ID,进程终止状态，以及进程的资源使用情况。
好的，因此僵尸进程服务一个特殊的目的，但是如果你的服务器没有照顾好这些僵尸进程的话，你的系统将会变得拥堵不堪。
让我们来看看这是怎么发生的。
首先，停止你正在运行的服务器，然后在一个新的终端窗口总，使用 &lt;tt class="docutils literal"&gt;ulimit&lt;/tt&gt; 命令设置 max user processes 为 400（确保设置的 open files 足够高，也可以设置为 500）：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ulimit -u 400$ ulimit -n 500
&lt;/pre&gt;
&lt;p&gt;在你刚才输入 &lt;tt class="docutils literal"&gt;$ ulimit &lt;span class="pre"&gt;-u&lt;/span&gt; 400&lt;/tt&gt; 命令的窗口启动 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3d.py"&gt;webserver3d.py&lt;/a&gt;  服务器：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3d.py
&lt;/pre&gt;
&lt;p&gt;在另一个新的终端窗口中，启动 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/client3.py"&gt;client3.py&lt;/a&gt; 并告诉它同时创建 500 个连接：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python client3.py --max-clients=500
&lt;/pre&gt;
&lt;p&gt;很快，你的服务器就会崩溃并抛出 &lt;tt class="docutils literal"&gt;OSError: Resource temporarily unavailable&lt;/tt&gt; 的异常信息，
当它尝试创建一个新的子进程，但是却没法创建成功，因为它已经超出了允许创建的最大子进程数量。
下面是我机子上关于异常信息的截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc3_resource_unavailable.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc3_resource_unavailable.png" /&gt;&lt;/p&gt;
&lt;p&gt;如你所见，如果你的长久运行的服务器不好好照看好僵尸进程的话，它们就会导致出现问题。
我将会简短的讨论一下服务器应该如何处理僵尸进程问题。&lt;/p&gt;
&lt;p&gt;让我们来回顾一下你目前已经了解到的知识点：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_checkpoint.png" src="/static/images/lsbaws-part3/lsbaws_part3_checkpoint.png" /&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果你没有关闭描述符副本，客户端将不会退出，因为客户端连接还没有被关闭。&lt;/li&gt;
&lt;li&gt;如果你没有关闭描述符副本，你那长时间运行的服务器最终将耗尽所有可用的文件描述符（&lt;tt class="docutils literal"&gt;max open files&lt;/tt&gt;）。&lt;/li&gt;
&lt;li&gt;当你 fork 一个子进程然后退出，同时父进程没有等待( &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; )子进程完成退出操作，父进程就收集不到子进程的退出状态，子进程最终就会变成一个僵尸进程。&lt;/li&gt;
&lt;li&gt;僵尸是需要吃东西的。我咱们这里，它们吃内存。如果不管这些僵尸进程的话，你的服务器将最终耗尽所有可用的进程（&lt;tt class="docutils literal"&gt;max user processes&lt;/tt&gt;）&lt;/li&gt;
&lt;li&gt;你无法 &lt;tt class="docutils literal"&gt;kill&lt;/tt&gt; 一个僵尸进程，你需要等( &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; )它完成退出操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么，你应该如何处理僵尸进程呢？
你需要修改你的服务器代码 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 等待所有的僵尸进程直到得到它们的退出状态。
你可以通过修改你的服务器去调用一个 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.wait"&gt;wait&lt;/a&gt; 系统调用的方式来达到这个目的。
不幸的是，理想跟现实是有差距的，因为如果你调用 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 然后又没有已经退出的子进程的话，调用 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 将阻塞你的服务器， 这就阻止你的服务器处理新的客户端连接请求。
难道就没有其他选项了吗？有的，一种解决办法就是联合使用 &lt;tt class="docutils literal"&gt;signal handler&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 系统调用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc4_signaling.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc4_signaling.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面展示了是它如何工作。当一个子进程退出的时候，内核发送了一个 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 信号。
父进程可以设置一个用于异步接收 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 事件的信号处理器，并且这个处理可以 wait 子进程以便收集它的终止状态，
这样就可以阻止僵尸进程的发生了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part_conc4_sigchld_async.png" src="/static/images/lsbaws-part3/lsbaws_part_conc4_sigchld_async.png" /&gt;&lt;/p&gt;
&lt;p&gt;随便说一句，一个异步事件意味着父进程事先并不知道那个事件会发生。&lt;/p&gt;
&lt;p&gt;修改你的服务器代码，设置一个 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 时间处理器，在这个时间处理器中 wait 子进程终止。
可用的 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3e.py"&gt;webserver3e.py&lt;/a&gt; 代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Concurrent server - webserver3e.py                                      #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                         #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X        #&lt;/span&gt;
&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grim_reaper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Child {pid} terminated with status {status}&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# sleep to allow the parent to loop over to &amp;#39;accept&amp;#39; and block there&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Serving HTTP on port {port} ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grim_reaper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# child&lt;/span&gt;
            &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close child copy&lt;/span&gt;
            &lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# parent&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动服务器：:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3e.py
&lt;/pre&gt;
&lt;p&gt;使用你的老朋友 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 向修改后的并发服务器发送一个请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl http://localhost:8888/hello
&lt;/pre&gt;
&lt;p&gt;看一下服务器：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc4_eintr.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc4_eintr.png" /&gt;&lt;/p&gt;
&lt;p&gt;发生了什么？ accept 调用是吧了，并报了个 &lt;tt class="docutils literal"&gt;EINTR&lt;/tt&gt; 错误。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc4_eintr_error.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc4_eintr_error.png" /&gt;&lt;/p&gt;
&lt;p&gt;当子进程退出，触发 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 事件时，激活了时间信号处理器，然后父进程阻塞在了 accept 调用这个地方，&lt;/p&gt;
&lt;p&gt;当信号处理器处理完成以后， accept 系统调用也跟着中断了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc4_eintr_accept.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc4_eintr_accept.png" /&gt;&lt;/p&gt;
&lt;p&gt;别担心，这是个非常简单问题很容易解决。你要做到的就是重新开始 accept 系统调用。&lt;/p&gt;
&lt;p&gt;下面是修改版本的服务器 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3f.py"&gt;webserver3f.py&lt;/a&gt; ，这个版本解决了这个问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Concurrent server - webserver3f.py                                      #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                         #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X        #&lt;/span&gt;
&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;errno&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grim_reaper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Serving HTTP on port {port} ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grim_reaper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;
            &lt;span class="c1"&gt;# restart &amp;#39;accept&amp;#39; if it was interrupted&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EINTR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt;

        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# child&lt;/span&gt;
            &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close child copy&lt;/span&gt;
            &lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# parent&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close parent copy and loop over&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动更新后的 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3f.py"&gt;webserver3f.py&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3f.py
&lt;/pre&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 向修改过的并发服务器发送一个请求：&lt;/p&gt;
&lt;blockquote&gt;
$ curl &lt;a class="reference external" href="http://localhost:8888/hello"&gt;http://localhost:8888/hello&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;看到了没？ 不再有  EINTR 异常了。现在，验证一下，不再有僵尸了，而且你的 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 事件处理器通过 wait 调用来处理子进程的终止事件。为了验证这个，只需要运行 ps 命令，然后你可以看一下应该不再有状态为 &lt;strong&gt;Z+&lt;/strong&gt; 的 Python 僵尸进程了（不再有 &lt;strong&gt;&amp;lt;default&amp;gt;&lt;/strong&gt; 进程）。太棒了！不再有僵尸进程的日子安全感终于有保障了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_checkpoint.png" src="/static/images/lsbaws-part3/lsbaws_part3_checkpoint.png" /&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果你 fork 了一个子进程，但是却没有 wait 它，它就会变成一个僵尸进程。&lt;/li&gt;
&lt;li&gt;使用 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 事件处理器来异步 wait 终止的子进程以便收集它的终止状态，&lt;/li&gt;
&lt;li&gt;当使用事件处理器的时候，你需要考虑到系统可能会中断，这样的话你就需求为这个场景做些准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，目前来看一起都很棒。没问题，是吧？嗯，确实如此。
再试试 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3f.py"&gt;webserver3f.py&lt;/a&gt; ，不过这次不是使用 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 制造一个请求，而是使用 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/client3.py"&gt;client3.py&lt;/a&gt; 创建 128 个同时发生的连接：:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python client3.py --max-clients 128
&lt;/pre&gt;
&lt;p&gt;现在再一次执行 &lt;tt class="docutils literal"&gt;ps&lt;/tt&gt; 命令&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ps auxw | grep -i python | grep -v grep
&lt;/pre&gt;
&lt;p&gt;看呐，哦，天哪，僵尸进程又回来了！&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc5_zombies_again.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc5_zombies_again.png" /&gt;&lt;/p&gt;
&lt;p&gt;这次又怎么了呢？当你运行了 128 个同步的客户端时，同时就建立了 128 条连接，服务器上处理请求和退出的子进程大多数都在同一时触发大量的 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 信号被发送给父进程。
问题就是这些信号并不是按队列进行处理的，这样的话，你的服务器进程就会错过一些信号，这会遗留一下无人照看的僵尸进程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc5_signals_not_queued.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc5_signals_not_queued.png" /&gt;&lt;/p&gt;
&lt;p&gt;解决这个问题的方法是设置一个 &lt;tt class="docutils literal"&gt;SIGCHLD&lt;/tt&gt; 事件处理器，
不使用 &lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; 而是调用 &lt;a class="reference external" href="https://docs.python.org/2.7/library/os.html#os.waitpid"&gt;waitpid&lt;/a&gt; 系统调用并在循环中使用 &lt;tt class="docutils literal"&gt;WNOHANG&lt;/tt&gt; 选项，确保所有终止的子进程都被照顾到了。
下面是修改后的服务器代码， &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3g.py"&gt;webserver3g.py&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# Concurrent server - webserver3g.py                                      #&lt;/span&gt;
&lt;span class="c1"&gt;#                                                                         #&lt;/span&gt;
&lt;span class="c1"&gt;# Tested with Python 2.7.9 &amp;amp; Python 3.4 on Ubuntu 14.04 &amp;amp; Mac OS X        #&lt;/span&gt;
&lt;span class="c1"&gt;###########################################################################&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;errno&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;
&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grim_reaper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitpid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c1"&gt;# Wait for any child process&lt;/span&gt;
                 &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WNOHANG&lt;/span&gt;  &lt;span class="c1"&gt;# Do not block and return EWOULDBLOCK error&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# no more zombies&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REQUEST_QUEUE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Serving HTTP on port {port} ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGCHLD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grim_reaper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;
            &lt;span class="c1"&gt;# restart &amp;#39;accept&amp;#39; if it was interrupted&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EINTR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt;

        &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# child&lt;/span&gt;
            &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close child copy&lt;/span&gt;
            &lt;span class="n"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# parent&lt;/span&gt;
            &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# close parent copy and loop over&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;启动服务器:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver3g.py
&lt;/pre&gt;
&lt;p&gt;使用测试客户端 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/client3.py"&gt;client3.py&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python client3.py --max-clients 128
&lt;/pre&gt;
&lt;p&gt;现在验证一下已经不再有僵尸进程了。耶！没有僵尸进程的生活是如此的美好 :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="lsbaws_part3_conc5_no_zombies.png" src="/static/images/lsbaws-part3/lsbaws_part3_conc5_no_zombies.png" /&gt;&lt;/p&gt;
&lt;p&gt;恭喜！这可真是个漫长的旅程，但是我希望你能喜欢它。
现在你已经有了你自己的简单的并发服务器，这些代码可以作为你将来开发产品级 Web 服务器的基础。&lt;/p&gt;
&lt;p&gt;我要给你留一个练习，那就是将的 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html"&gt;第二部分&lt;/a&gt; 的 WSGI 服务器更新为并发服务器。
你可以从 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part3/webserver3h.py"&gt;这里&lt;/a&gt; 得到最终的修改版。但是，只在你完成你的版本后才能查看我的代码。
你已经具备了完成这项工作的所必需的所有信息了。所以，放手去做吧：）&lt;/p&gt;
&lt;p&gt;下一步是什么？正如 Josh Billings 说过的，&lt;/p&gt;
&lt;blockquote&gt;
“像一张邮票一样 —— 坚持一件事情直到你到达终点。”&lt;/blockquote&gt;
&lt;p&gt;开始征服基础知识。质疑你已经知道的。同时总是深入挖掘。&lt;/p&gt;
&lt;blockquote&gt;
“如果你只学习方法，你将束缚于你的方法。但是，如果你学会了原理，你就可以发明你自己的方法。” —— Ralph Waldo Emerson&lt;/blockquote&gt;
&lt;p&gt;下面是一些我选出的覆盖本文大部分知识的书籍。它们将帮助你拓宽和加深我提到的知识点。
我高度推荐的你按照这个方式去获得这些数：从你的朋友那里借这些书，从你当地的图书馆里借，
或者干脆从亚马逊上购买。它们是守护者：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/4859464/"&gt;UNIX网络编程 卷1：套接字联网API（第3版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/25900403/"&gt;UNIX环境高级编程（第3版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/25809330/"&gt;Linux/UNIX系统编程手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/3571433/"&gt;TCP/IP详解 卷1：协议（第2版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/3666232/"&gt;The Little Book of SEMAPHORES (2nd Edition): The Ins and Outs of Concurrency Control and Common Mistakes&lt;/a&gt; 也可以从作者的网站上获取免费版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://book.douban.com/subject/4859464/"&gt;UNIX网络编程 卷1：套接字联网API（第3版）&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://book.douban.com/subject/3666232/"&gt;The Little Book of SEMAPHORES (2nd Edition): The Ins and Outs of Concurrency Control and Common Mistakes&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-04:2015/08/let-us-build-a-web-server-part-3-zh-cn.html</guid><category>let-us-build</category><category>server</category><category>http</category><category>fork</category><category>lsbaws</category><category>让我们一起来构建一个 Web 服务器</category></item><item><title>Cyanide &amp; Happiness #1000：面具</title><link>https://mozillazg.com/2015/08/1000.chainsaw.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1000/"&gt;Cyanide &amp;amp; Happiness #1000 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1000.chainsaw.zh-cn.png" src="/static/images/comics/1000.chainsaw.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 03 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-03:2015/08/1000.chainsaw.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4001：生日</title><link>https://mozillazg.com/2015/08/4001.depressing20152.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4001/"&gt;Cyanide &amp;amp; Happiness #4001 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4001.depressing20152.zh-cn.png" src="/static/images/comics/4001.depressing20152.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-02:2015/08/4001.depressing20152.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2257：假设</title><link>https://mozillazg.com/2015/08/2257.hypothetical.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2257/"&gt;Cyanide &amp;amp; Happiness #2257 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2257.hypothetical.zh-cn.png" src="/static/images/comics/2257.hypothetical.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hypotheticl question:
would you rather be
poor and loved, or
rich and also your
parents are dead?         &lt;br /&gt;
假设有个问题：
你是愿意贫穷且有爱，还是
愿意富有且父母双亡？&lt;/p&gt;
&lt;p&gt;probably the second one.
I love my parents
but I think they'd want
me to be successful.      &lt;br /&gt;
可能是第二个答案。
我爱我的父母，但是我想
他们应该会希望我成功。&lt;/p&gt;
&lt;p&gt;that wasn't actually
part of the question.
I was just informing you.
it was an elvator accident.       &lt;br /&gt;
这实际上并不是一个问题。
我只是想告诉你这是一起电梯事故。&lt;/p&gt;
&lt;p&gt;oh...     &lt;br /&gt;
呃。。 。&lt;/p&gt;
&lt;p&gt;is it too late to
change my answer?     &lt;br /&gt;
现在改变我的答案是不是已经太晚了？&lt;/p&gt;
&lt;p&gt;it's too late for a lot of things.   &lt;br /&gt;
对很多事情来说都已经太晚了。     &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-08-01:2015/08/2257.hypothetical.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #4003：超级大嘴</title><link>https://mozillazg.com/2015/07/4003.supermouth.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4003/"&gt;Cyanide &amp;amp; Happiness #4003 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4003.supermouth.zh-cn.png" src="/static/images/comics/4003.supermouth.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey there,
supermouth!       &lt;br /&gt;
嘿，这里，超级大嘴！&lt;/p&gt;
&lt;p&gt;love the costume!     &lt;br /&gt;
喜欢你的衣服！&lt;/p&gt;
&lt;p&gt;wow!          &lt;br /&gt;
哇喔！&lt;/p&gt;
&lt;p&gt;i had no idea that
you're a superhero!   &lt;br /&gt;
我一直不知道原来你是个超级英雄！&lt;/p&gt;
&lt;p&gt;i'm not.      &lt;br /&gt;
我不是。&lt;/p&gt;
&lt;p&gt;those guys are just
being jerks.      &lt;br /&gt;
那些家伙只是些混蛋。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-31:2015/07/4003.supermouth.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>buttersafe：英雄</title><link>https://mozillazg.com/2015/07/2015-07-14-heroman.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/07/14/hero-man/"&gt;http://buttersafe.com/2015/07/14/hero-man/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-07-14-heroman.zh-cn.png" src="/static/images/comics/2015-07-14-heroman.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-30:2015/07/2015-07-14-heroman.zh-cn.html</guid><category>buttersafe</category></item><item><title>Cyanide &amp; Happiness #4000：糟糕</title><link>https://mozillazg.com/2015/07/4000.dcw9part2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/4000/"&gt;Cyanide &amp;amp; Happiness #4000 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4000.dcw9part2.zh-cn.png" src="/static/images/comics/4000.dcw9part2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;there's nothing
worse than too late.          &lt;br /&gt;
没有哪件事比太迟还糟糕了。&lt;/p&gt;
&lt;p&gt;call me! it's important.      &lt;br /&gt;
给我打电话！非常重要。&lt;/p&gt;
&lt;p&gt;haven't heard from you in a a little      &lt;br /&gt;
有段时间没听到你&lt;/p&gt;
&lt;p&gt;hope to see you soon!         &lt;br /&gt;
希望马上看到你！&lt;/p&gt;
&lt;p&gt;come vist us! miss you :)     &lt;br /&gt;
来看我们！想你 ：）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-29:2015/07/4000.dcw9part2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]buttersafe：错误</title><link>https://mozillazg.com/2015/07/2015-07-07-bringinginthegroceriesorconvictions.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/07/07/bringing-in-the-groceries-or-convictions/"&gt;http://buttersafe.com/2015/07/07/bringing-in-the-groceries-or-convictions/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-07-07-bringinginthegroceriesorconvictions.zh-cn.png" src="/static/images/comics/2015-07-07-bringinginthegroceriesorconvictions.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-28:2015/07/2015-07-07-bringinginthegroceriesorconvictions.zh-cn.html</guid><category>buttersafe</category></item><item><title>[译][漫]buttersafe：伸展</title><link>https://mozillazg.com/2015/07/2008-08-07-earlymorningstretches.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/08/07/early-morning-stretches/"&gt;http://buttersafe.com/2008/08/07/early-morning-stretches/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-08-07-earlymorningstretches.zh-cn.png" src="/static/images/comics/2008-08-07-earlymorningstretches.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-27:2015/07/2008-08-07-earlymorningstretches.zh-cn.html</guid><category>buttersafe</category></item><item><title>django @admin.register 非线程安全陷阱</title><link>https://mozillazg.com/2015/07/dango-admin.register-ModelAdmin-is-not-thread-safe.html</link><description>&lt;p&gt;一直以为注册的 ModelAdmin 是线程安全的，直到最近看到&lt;a href="http://stackoverflow.com/questions/727928/django-admin-how-to-access-the-request-object-in-admin-py-for-list-display-met#comment27035661_729879"&gt;有人提到&lt;/a&gt; ModelAdmin 不是线程安全的。&lt;/p&gt;
&lt;p&gt;然后看了一下 Django admin.register 的源码，才发现确实不是线程安全的。 &lt;a href="https://github.com/django/django/blob/927b30a6ab33ea33e5e3b1e7408ac1d5d267ff6a/django/contrib/admin/sites.py#L110"&gt;核心代码&lt;/a&gt; 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Instantiate the admin class to save in the registry
self._registry[model] = admin_class(model, self)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当配置如下代码后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@admin.register(Foo)
class FooAdmin(admin.ModelAdmin):
    pass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上注册的是一个 FooAdmin 实例，也就是说 FooAdmin 这个类在启动的时候就实例化了，所有的请求访问的都是同一个实例。
所以类似下面的代码就会有非线程安全的问题，因为 FooAdmin 实例(self)会共享给所有子线程/所有请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@admin.register(Foo)
class FooAdmin(admin.ModelAdmin):

    def foobar(self):
        print(self.param)

    def changelist_view(self, request, extra_context=None):
        self.param = request.GET[&amp;#39;param&amp;#39;]
        return super(FooAdmin,self).changelist_view(request, extra_context=extra_context)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于使用多线程的服务，可以使用 Thread-Locals （内置的 threading.local 或 werkzeug.local） 解决这个问题:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@admin.register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;changelist_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;param&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FooAdmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changelist_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于使用协程（比如，使用 gevent）的服务，可以用 werkzeug.local.Local（内置的 threading.local 不行）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.local&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Local&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Local&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/727928/django-admin-how-to-access-the-request-object-in-admin-py-for-list-display-met#comment27035661_729879"&gt;http://stackoverflow.com/questions/727928/django-admin-how-to-access-the-request-object-in-admin-py-for-list-display-met#comment27035661_729879&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/blob/927b30a6ab33ea33e5e3b1e7408ac1d5d267ff6a/django/contrib/admin/sites.py#L110"&gt;https://github.com/django/django/blob/927b30a6ab33ea33e5e3b1e7408ac1d5d267ff6a/django/contrib/admin/sites.py#L110&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1408171/thread-local-storage-in-python"&gt;http://stackoverflow.com/questions/1408171/thread-local-storage-in-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://werkzeug.pocoo.org/docs/0.10/local/#werkzeug.local.LocalProxy"&gt;http://werkzeug.pocoo.org/docs/0.10/local/#werkzeug.local.LocalProxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 27 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-27:2015/07/dango-admin.register-ModelAdmin-is-not-thread-safe.html</guid><category>Thread-Locals</category></item><item><title>Cyanide &amp; Happiness #1557：我知道</title><link>https://mozillazg.com/2015/07/1557.iknow.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1557/"&gt;Cyanide &amp;amp; Happiness #1557 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1557.iknow.zh-cn.png" src="/static/images/comics/1557.iknow.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-26:2015/07/1557.iknow.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2627：阿尔茨海默病</title><link>https://mozillazg.com/2015/07/2627.comicalzheimers1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2627/"&gt;Cyanide &amp;amp; Happiness #2627 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2627.comicalzheimers1.zh-cn.png" src="/static/images/comics/2627.comicalzheimers1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-26:2015/07/2627.comicalzheimers1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3999：纹身</title><link>https://mozillazg.com/2015/07/3999.dcw_tattoo.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3999/"&gt;Cyanide &amp;amp; Happiness #3999 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3999.dcw_tattoo.zh-cn.png" src="/static/images/comics/3999.dcw_tattoo.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-25:2015/07/3999.dcw_tattoo.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3996：伤痛</title><link>https://mozillazg.com/2015/07/3996.dcw9part1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3996/"&gt;Cyanide &amp;amp; Happiness #3996 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3996.dcw9part1.zh-cn.png" src="/static/images/comics/3996.dcw9part1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, dad.         &lt;br /&gt;
嗨，爸爸。&lt;/p&gt;
&lt;p&gt;i've been thinking a lot
since you've been gone.
i guess i just wanted to tell you
what's on my mind...          &lt;br /&gt;
自从你去世后，我想了很多。
我只是想告诉你我是怎么想的。。。&lt;/p&gt;
&lt;p&gt;mom says that you killed
yourself because you
were in a lot of emotional
pain.         &lt;br /&gt;
妈妈说你是自杀的，因为你陷入了严重的情感伤痛。&lt;/p&gt;
&lt;p&gt;she said you left use cause
you didn't want anyone
to see you hurt.      &lt;br /&gt;
她说你离开我们是因为你不想让任何人看到你受伤。&lt;/p&gt;
&lt;p&gt;i wanted to tell you
that you didn't stop the pain.
you gave it to all of us.         &lt;br /&gt;
我想告诉你的是，你并没有终结伤痛。
你把伤痛留给了我们大家。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-24:2015/07/3996.dcw9part1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3995：忧桑照片</title><link>https://mozillazg.com/2015/07/3995.dcw_photos.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3995/"&gt;Cyanide &amp;amp; Happiness #3995 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3995.dcw_photos.zh-cn.png" src="/static/images/comics/3995.dcw_photos.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-23:2015/07/3995.dcw_photos.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3993：毒品2</title><link>https://mozillazg.com/2015/07/3993.drugs2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3993/"&gt;Cyanide &amp;amp; Happiness #3993 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3993.drugs2.zh-cn.png" src="/static/images/comics/3993.drugs2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;how much do you want?         &lt;br /&gt;
你要多少？&lt;/p&gt;
&lt;p&gt;i'll take everything you have.        &lt;br /&gt;
我要你所有的存货。&lt;/p&gt;
&lt;p&gt;woah, really?         &lt;br /&gt;
哇哦，真的吗？&lt;/p&gt;
&lt;p&gt;how do you afford this many drugs?        &lt;br /&gt;
你买得起这么多的毒品吗？&lt;/p&gt;
&lt;p&gt;it's really easy if you...        &lt;br /&gt;
这事非常容易，如果你。。。&lt;/p&gt;
&lt;p&gt;stay in school        &lt;br /&gt;
待在学校里&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-22:2015/07/3993.drugs2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2354：口哨</title><link>https://mozillazg.com/2015/07/2354.whistle.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2354/"&gt;Cyanide &amp;amp; Happiness #2354 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2354.whistle.zh-cn.png" src="/static/images/comics/2354.whistle.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;aaaaaaaagu!
what is that awful noise?     &lt;br /&gt;
啊啊啊啊啊！
这个可怕的声音是什么？&lt;/p&gt;
&lt;p&gt;it's my rape whistle          &lt;br /&gt;
是我的防强暴口哨&lt;/p&gt;
&lt;p&gt;but you're not being raped        &lt;br /&gt;
但是，你又不会被强暴&lt;/p&gt;
&lt;p&gt;only rapists can hear it         &lt;br /&gt;
只有强奸犯才会听到它 &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-21:2015/07/2354.whistle.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2376：贮藏食物</title><link>https://mozillazg.com/2015/07/2376.comicstoringfood1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2376/"&gt;Cyanide &amp;amp; Happiness #2376 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2376.comicstoringfood1.zh-cn.png" src="/static/images/comics/2376.comicstoringfood1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;holy crap, do you
have the mumps!?          &lt;br /&gt;
天呐，你有腮腺炎！？&lt;/p&gt;
&lt;p&gt;no, i'm storing food
in my mouth       &lt;br /&gt;
不是的，我正在把食物贮藏到我的嘴里&lt;/p&gt;
&lt;p&gt;haha, what gave you that idea?    &lt;br /&gt;
哈哈，什么给了你灵感？&lt;/p&gt;
&lt;p&gt;i was watching some squirrels     &lt;br /&gt;
我当时看到了一些松鼠&lt;/p&gt;
&lt;p&gt;then i ate them       &lt;br /&gt;
然后，我吃了它们&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-20:2015/07/2376.comicstoringfood1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2353：脸</title><link>https://mozillazg.com/2015/07/2353.assface.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2353/"&gt;Cyanide &amp;amp; Happiness #2353 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2353.assface.zh-cn.png" src="/static/images/comics/2353.assface.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;damnit, i forgot
to take my medicine
this morning.     &lt;br /&gt;
该死，我早上忘记拿药了。&lt;/p&gt;
&lt;p&gt;is it for your face?      &lt;br /&gt;
用来治疗你的脸？&lt;/p&gt;
&lt;p&gt;it's for my low self-esteem.          &lt;br /&gt;
用来治疗我的低自尊。&lt;/p&gt;
&lt;p&gt;you're not
taking anything for your face?        &lt;br /&gt;
你没说过任何有关你脸的事情？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-19:2015/07/2353.assface.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1720：车</title><link>https://mozillazg.com/2015/07/1720.car2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1720/"&gt;Cyanide &amp;amp; Happiness #1720 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1720.car2.zh-cn.png" src="/static/images/comics/1720.car2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;can you help me clean my car?
it's got bugs all over
the windshield.       &lt;br /&gt;
你能帮我清理一下我的车子吗？
它的挡风玻璃上全都是虫子。&lt;/p&gt;
&lt;p&gt;yeah, sure.       &lt;br /&gt;
嗯，当然可以。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-18:2015/07/1720.car2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #971：完美</title><link>https://mozillazg.com/2015/07/971.perfect2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/971/"&gt;Cyanide &amp;amp; Happiness #971 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="971.perfect2.zh-cn.png" src="/static/images/comics/971.perfect2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;in a perfect world...      &lt;br /&gt;
在一个完美的世界中。。。&lt;/p&gt;
&lt;p&gt;the mentally handicapped
will lead the blind       &lt;br /&gt;
智障人士将为盲人导盲&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-17:2015/07/971.perfect2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1582：妻子</title><link>https://mozillazg.com/2015/07/1582.wife.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1582/"&gt;Cyanide &amp;amp; Happiness #1582 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1582.wife.zh-cn.gif" src="/static/images/comics/1582.wife.zh-cn.gif" /&gt;&lt;/p&gt;
&lt;p&gt;what's wrong with you?    &lt;br /&gt;
你发什么神经？&lt;/p&gt;
&lt;p&gt;you ruined my family reunion!     &lt;br /&gt;
you spiked the lemonade and
threw up on my mom!       &lt;br /&gt;
你破坏了我的家庭聚会！
你在柠檬水里掺了烈性酒，还吐了我妈妈一身！&lt;/p&gt;
&lt;p&gt;what were you thinking?   &lt;br /&gt;
你在想什么？&lt;/p&gt;
&lt;p&gt;hmmm...   &lt;br /&gt;
唔唔唔。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-14:2015/07/1582.wife.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3119：小家伙</title><link>https://mozillazg.com/2015/07/3119.littleguys.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3119/"&gt;Cyanide &amp;amp; Happiness #3119 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3119.littleguys.zh-cn.png" src="/static/images/comics/3119.littleguys.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, no matter what....
don't forget us little
guys, alright?    &lt;br /&gt;
嘿，无论怎样。。。
不要忘了我们的小家伙，懂吗？&lt;/p&gt;
&lt;p&gt;what are you talking about?
i'm not becoming famous.      &lt;br /&gt;
你在说什么？
我还没那么出名。&lt;/p&gt;
&lt;p&gt;no, but you're getting
pretty fat.   &lt;br /&gt;
是的，但是你已经变得很胖了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-14:2015/07/3119.littleguys.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3118：观众</title><link>https://mozillazg.com/2015/07/3118.audience.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3118/"&gt;Cyanide &amp;amp; Happiness #3118 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3118.audience.zh-cn.png" src="/static/images/comics/3118.audience.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;for my next act,
i'll need a volunteer
from the audience!    &lt;br /&gt;
为了进行下一个表演，
我需要一名来自观众席的志愿者！&lt;/p&gt;
&lt;p&gt;step right up!    &lt;br /&gt;
快来吧！&lt;/p&gt;
&lt;p&gt;anyone?   &lt;br /&gt;
有人吗？&lt;/p&gt;
&lt;p&gt;fine!     &lt;br /&gt;
好吧！&lt;/p&gt;
&lt;p&gt;thanks for nothing!   &lt;br /&gt;
不劳大家费心了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-13:2015/07/3118.audience.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1466：雪天使</title><link>https://mozillazg.com/2015/07/1466.snow.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1466/"&gt;Cyanide &amp;amp; Happiness #1466 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1466.snow.zh-cn.png" src="/static/images/comics/1466.snow.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey dad!      &lt;br /&gt;
嘿，爹地！&lt;/p&gt;
&lt;p&gt;i made a snow angel!      &lt;br /&gt;
我做了个雪天使！&lt;/p&gt;
&lt;p&gt;great job, son!   &lt;br /&gt;
做的好，儿子！&lt;/p&gt;
&lt;p&gt;i'll make the halo!   &lt;br /&gt;
我来加个光环！&lt;/p&gt;
&lt;p&gt;P.S. 雪天使，双手双脚在雪地里上下滑动即可：
&lt;img alt="图片 1" src="http://qstatic.shanbay.com/media/media_store/forum/0fd0e1ddd33e77689f939144947558a6.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-12:2015/07/1466.snow.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3955：bitch</title><link>https://mozillazg.com/2015/07/3955.bitch.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3955/"&gt;Cyanide &amp;amp; Happiness #3955 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3955.bitch.zh-cn.png" src="/static/images/comics/3955.bitch.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-12:2015/07/3955.bitch.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3982：跟女孩子说话</title><link>https://mozillazg.com/2015/07/3982.talk-to-girls.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3982/"&gt;Cyanide &amp;amp; Happiness #3982 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3982.talk-to-girls.zh-cn.png" src="/static/images/comics/3982.talk-to-girls.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i think i'm bad at
talking to girls...      &lt;br /&gt;
我觉得我不擅长跟女孩子说话。。。&lt;/p&gt;
&lt;p&gt;try asking them
stuff instead of
talking about yourself.
girls like that.      &lt;br /&gt;
可以试试问她们一些问题而不只是
谈论你自己。女孩子喜欢这个。&lt;/p&gt;
&lt;p&gt;yeah...i'll try that.     &lt;br /&gt;
嗯。。我会试试的。&lt;/p&gt;
&lt;p&gt;hi i'm john. what
are your five favorite
things about me?      &lt;br /&gt;
嗨，我是约翰。关于我你最喜欢哪五件事情？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-12:2015/07/3982.talk-to-girls.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3985：戳</title><link>https://mozillazg.com/2015/07/3985.poke1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3985/"&gt;Cyanide &amp;amp; Happiness #3985 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3985.poke1.zh-cn.png" src="/static/images/comics/3985.poke1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;excuse me, is there
anything i can do to help you?        &lt;br /&gt;
打扰一下，有什么需要帮忙的吗？&lt;/p&gt;
&lt;p&gt;huh?      &lt;br /&gt;
啊？&lt;/p&gt;
&lt;p&gt;are you even blind?   &lt;br /&gt;
你是盲人吗？&lt;/p&gt;
&lt;p&gt;bilnd? what?   &lt;br /&gt;
盲人？什么？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-12:2015/07/3985.poke1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3806：吃了它</title><link>https://mozillazg.com/2015/07/3806.eatit.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3806/"&gt;Cyanide &amp;amp; Happiness #3806 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3806.eatit.zh-cn.png" src="/static/images/comics/3806.eatit.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;son, what have i told you about
playing with your food?       &lt;br /&gt;
儿子，关于玩弄食物我是怎么说的来着？&lt;/p&gt;
&lt;p&gt;huh? but i didn-      &lt;br /&gt;
啊？但是我没—&lt;/p&gt;
&lt;p&gt;eeeeaaat it...    &lt;br /&gt;
吃吃吃吃了它。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-11:2015/07/3806.eatit.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3965：打赌</title><link>https://mozillazg.com/2015/07/3965.chopdatdirtydickoffawwwyeahshoveitinyourmouthawwwwyeah.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3965/"&gt;Cyanide &amp;amp; Happiness #3965 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3965.chopdatdirtydickoffawwwyeahshoveitinyourmouthawwwwyeah.zh-cn.png" src="/static/images/comics/3965.chopdatdirtydickoffawwwyeahshoveitinyourmouthawwwwyeah.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-11:2015/07/3965.chopdatdirtydickoffawwwyeahshoveitinyourmouthawwwwyeah.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3967：扫脚</title><link>https://mozillazg.com/2015/07/3967.sweepfeet.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3967/"&gt;Cyanide &amp;amp; Happiness #3967 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3967.sweepfeet.zh-cn.png" src="/static/images/comics/3967.sweepfeet.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey... what's got you down?       &lt;br /&gt;
嘿。。。什么事情让你这么低落？&lt;/p&gt;
&lt;p&gt;i keep waiting for a
good man to sweep me off my
feet, but nothing happends!   &lt;br /&gt;
我一直在等待一个能让我坠入爱河的好男人，
但是什么也没发生！&lt;/p&gt;
&lt;p&gt;that's because sweeping is
a woman's job.    &lt;br /&gt;
那是因为打扫是女人干的活。&lt;/p&gt;
&lt;p&gt;译注：
sweep me off my feet: 让我坠入爱河
sweep: 打扫&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-10:2015/07/3967.sweepfeet.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3969：上学日</title><link>https://mozillazg.com/2015/07/3969.schoolday.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3969/"&gt;Cyanide &amp;amp; Happiness #3969 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3969.schoolday.zh-cn.png" src="/static/images/comics/3969.schoolday.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;okay son, are you ready
for your first day of
school? let's check.      &lt;br /&gt;
好了，儿子，你为第一天去学校
做好准备了吗？让我们来检查一下。&lt;/p&gt;
&lt;p&gt;notebook? check.
pencils in pencil case?
check     &lt;br /&gt;
笔记本？OK。铅笔在铅笔盒里？OK&lt;/p&gt;
&lt;p&gt;sick note? check      &lt;br /&gt;
病假单？OK&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-09:2015/07/3969.schoolday.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3971：看到一只蝴蝶</title><link>https://mozillazg.com/2015/07/3971.seeabutterfly.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3971/"&gt;Cyanide &amp;amp; Happiness #3971 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3971.seeabutterfly.zh-cn.png" src="/static/images/comics/3971.seeabutterfly.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i see... a butterfly!     &lt;br /&gt;
我看到。。。一只蝴蝶！&lt;/p&gt;
&lt;p&gt;hmm... a man in a boat?   &lt;br /&gt;
唔。。。一个人在一艘船上？&lt;/p&gt;
&lt;p&gt;that looks like a skull!      &lt;br /&gt;
那个看起来像一个脑袋!&lt;/p&gt;
&lt;p&gt;you don't know what an
ultrasound is, do you?    &lt;br /&gt;
你难道不知道超声波成像是什么吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-08:2015/07/3971.seeabutterfly.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3977：蜈蚣</title><link>https://mozillazg.com/2015/07/3977.work-bug.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3977/"&gt;Cyanide &amp;amp; Happiness #3977 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3977.work-bug.zh-cn.png" src="/static/images/comics/3977.work-bug.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-08:2015/07/3977.work-bug.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3976：我听到了</title><link>https://mozillazg.com/2015/07/3976.iheardthat.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3976/"&gt;Cyanide &amp;amp; Happiness #3976 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3976.iheardthat.zh-cn.png" src="/static/images/comics/3976.iheardthat.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hello there, young man!   &lt;br /&gt;
小伙子，你好！&lt;/p&gt;
&lt;p&gt;pleased to meet you   &lt;br /&gt;
很高兴遇到你&lt;/p&gt;
&lt;p&gt;why does he talk so quietly?      &lt;br /&gt;
为什么他说话这么小声？&lt;/p&gt;
&lt;p&gt;i've been wispering
to him his entire
life so he thinks
it's normal volume for a person       &lt;br /&gt;
这么多年来我一直小声的跟他说话，
因此他认为这就是人类正常的音量&lt;/p&gt;
&lt;p&gt;i heard that     &lt;br /&gt;
我听到了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-07:2015/07/3976.iheardthat.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2386：许愿</title><link>https://mozillazg.com/2015/07/2386.comicmegustailovefuuuuuu.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2386/"&gt;Cyanide &amp;amp; Happiness #2386 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2386.comicmegustailovefuuuuuu.zh-cn.png" src="/static/images/comics/2386.comicmegustailovefuuuuuu.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;okay son,
now blow out your candles
and make a wish,
but don't tell anyone what
it is. if you're lucky,
it might come true!   &lt;br /&gt;
好了，儿子。
现在吹灭你的蜡烛并许个愿，
但是不要告诉任何人你许了什么愿望。
如果你够幸运的话，愿望可能会成真！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-06:2015/07/2386.comicmegustailovefuuuuuu.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>配置应用在 django admin 中显示的名称和顺序</title><link>https://mozillazg.com/2015/07/django-how-to-change-app-name-and-sort-app-on-admin-site.html</link><description>&lt;p&gt;在 Django 1.7 之前，要想修改应用在 admin 中的名称的话，必须得 hack Django 代码。
好消息是 Django 1.7+ 支持 &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/ref/applications/#configuring-applications"&gt;配置应用的名称等信息&lt;/a&gt; 了。先看效果:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/static/images/django/2015-07/app-config-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面详细讲一下配置方法(假设这个应用叫 foo)。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;在应用目录下建一个 apps.py 文件，在其中定义一个继承自 AppConfig 的子类:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# foo/apps.py
from django.apps import AppConfig

class FooConfig(AppConfig):
    name = 'foo'  # app 名称，可以 import 的路径, 比如 foo.bar.foobar
    verbose_name = '1名称1'   # 后台显示的名称
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;然后应用配置，有两种方式（二选一，使用其中一种方法即可）:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;在应用目录下的 &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; 中指定 &lt;tt class="docutils literal"&gt;default_app_config&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# foo/__init__.py
default_app_config = 'foo.apps.FooConfig'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;配置 &lt;tt class="docutils literal"&gt;INSTALLED_APPS&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 INSTALLED_APPS = (
     # ...
     'foo.apps.FooConfig',
     # ....
)
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Demo 下载： &lt;a class="reference external" href="https://github.com/mozillazg/django-simple-projects/tree/master/projects/custom_app_name"&gt;https://github.com/mozillazg/django-simple-projects/tree/master/projects/custom_app_name&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/ref/applications/#configuring-applications"&gt;Applications | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-06:2015/07/django-how-to-change-app-name-and-sort-app-on-admin-site.html</guid></item><item><title>Cyanide &amp; Happiness #2379：死了</title><link>https://mozillazg.com/2015/07/2379.comicdepressingcomicweek51.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2379/"&gt;Cyanide &amp;amp; Happiness #2379 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2379.comicdepressingcomicweek51.zh-cn.png" src="/static/images/comics/2379.comicdepressingcomicweek51.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 04 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-04:2015/07/2379.comicdepressingcomicweek51.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2383：愿望</title><link>https://mozillazg.com/2015/07/2383.depressingcomicweek5pt2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2383/"&gt;Cyanide &amp;amp; Happiness #2383 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2383.depressingcomicweek5pt2.zh-cn.png" src="/static/images/comics/2383.depressingcomicweek5pt2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey son... you
have a vistor     &lt;br /&gt;
嘿，儿子。。。有人来看你了&lt;/p&gt;
&lt;p&gt;hey there, champ...
I have some good
news for you!     &lt;br /&gt;
嘿，这里，冠军。。。
我有个好消息要告诉你！&lt;/p&gt;
&lt;p&gt;I represent the
make-a-wish foundation
and we're going to
grant any wish you want!          &lt;br /&gt;
我是许愿基金会的代表，
我们将实现你的任何愿望！&lt;/p&gt;
&lt;p&gt;I wish I didn't
hurt anymore      &lt;br /&gt;
我希望我不再痛苦&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-03:2015/07/2383.depressingcomicweek5pt2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2117：长矛</title><link>https://mozillazg.com/2015/07/2117.Stride.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2117/"&gt;Cyanide &amp;amp; Happiness #2117 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2117.Stride.zh-cn.png" src="/static/images/comics/2117.Stride.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey man, want
some gum? it's spearmint.     &lt;br /&gt;
嘿，哥们，要来点口香糖吗？
它是荷兰薄荷味(spearmint)的。&lt;/p&gt;
&lt;p&gt;sure!         &lt;br /&gt;
当然！&lt;/p&gt;
&lt;p&gt;hey wait, this just tastes
like regular mint.    &lt;br /&gt;
嘿，等一下，这个尝起来跟普通的薄荷
没啥区别。&lt;/p&gt;
&lt;p&gt;spear: 长矛，标枪
mint: 薄荷
spearmint: 荷兰薄荷&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 02 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-02:2015/07/2117.Stride.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1379：法国</title><link>https://mozillazg.com/2015/07/1379.french.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1379/"&gt;Cyanide &amp;amp; Happiness #1379 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1379.french.zh-cn.png" src="/static/images/comics/1379.french.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;listen here,
frenchie!
you're in the
U.S. now!     &lt;br /&gt;
听着，法国佬！你现在在美国！&lt;/p&gt;
&lt;p&gt;here we don't
have french
fries or
french bread!     &lt;br /&gt;
这里没有法国薯条，也没有法国面包！&lt;/p&gt;
&lt;p&gt;we have freedom
fries and
freedom bread!    &lt;br /&gt;
我们有自由薯条和自由面包！&lt;/p&gt;
&lt;p&gt;have you ever
freedom kissed?   &lt;br /&gt;
你试过自由吻吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-07-01:2015/07/1379.french.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3970：合法</title><link>https://mozillazg.com/2015/06/3970.legalized.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3970/"&gt;Cyanide &amp;amp; Happiness #3970 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3970.legalized.zh-cn.png" src="/static/images/comics/3970.legalized.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh, cool! the fully legalized marriage.   &lt;br /&gt;
哦，太棒了！结婚完全合法了。&lt;/p&gt;
&lt;p&gt;don't you mean gay marriage?      &lt;br /&gt;
你是指同性结婚吧？&lt;/p&gt;
&lt;p&gt;is there a difference now?    &lt;br /&gt;
现在还有什么区别吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-27:2015/06/3970.legalized.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #927：室友</title><link>https://mozillazg.com/2015/06/927.roommate.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/927/"&gt;Cyanide &amp;amp; Happiness #927 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="927.roommate.zh-cn.png" src="/static/images/comics/927.roommate.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i heard jeremy is
living with you til
he finds a place.     &lt;br /&gt;
我听说杰里米在找到住的地方前
一直跟你住在一块。&lt;/p&gt;
&lt;p&gt;yeah. he sleeps on the couch.     &lt;br /&gt;
是啊。他睡在沙发上。&lt;/p&gt;
&lt;p&gt;you don't let him
sleep in bed with you?    &lt;br /&gt;
你没让他跟你一起睡在床上？&lt;/p&gt;
&lt;p&gt;nah, my bed's
way too small for two people.     &lt;br /&gt;
没有，我的床太小没办法
同时睡两个人。&lt;/p&gt;
&lt;p&gt;also I'm not gay!     &lt;br /&gt;
而且，我又不是 gay！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 27 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-27:2015/06/927.roommate.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3112：耶稣第二次归来</title><link>https://mozillazg.com/2015/06/3112.jesus-second-coming.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3112/"&gt;Cyanide &amp;amp; Happiness #3112 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3112.jesus-second-coming.zh-cn.png" src="/static/images/comics/3112.jesus-second-coming.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;jesus! you finally
returned!         &lt;br /&gt;
耶稣！你终于回归了！&lt;/p&gt;
&lt;p&gt;just in time, too.
there are gays trying
to get married over there!    &lt;br /&gt;
来的正好。
那里有两个基佬想结婚！&lt;/p&gt;
&lt;p&gt;nice one, jesus!
i'm glad you're here to-      &lt;br /&gt;
太棒了，耶稣！
很高兴你能——&lt;/p&gt;
&lt;p&gt;three donw, seven billon to go.   &lt;br /&gt;
解决了三个，还有 70 亿要解决。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-24:2015/06/3112.jesus-second-coming.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3238：你得帮我把毒吸出来</title><link>https://mozillazg.com/2015/06/3238.My-cunning-plan-to-get-bit-by-a-snake-on-my-weiner-so-my-buddy-Carl-would-suck-out-the-poison-sure-did-backfire.-He-swallowed-the-poison-and-it-got-kinda-gay-when-we-had-to-kiss-afterwards..zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3238/"&gt;Cyanide &amp;amp; Happiness #3238 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3238.My-cunning-plan-to-get-bit-by-a-snake-on-my-weiner-so-my-buddy-Carl-would-suck-out-the-poison-sure-did-backfire.-He-swallowed-the-poison-and-it-got-kinda-gay-when-we-had-to-kiss-afterwards..zh-cn.png" src="/static/images/comics/3238.My-cunning-plan-to-get-bit-by-a-snake-on-my-weiner-so-my-buddy-Carl-would-suck-out-the-poison-sure-did-backfire.-He-swallowed-the-poison-and-it-got-kinda-gay-when-we-had-to-kiss-afterwards..zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, check out
this cool snake!      &lt;br /&gt;
嘿，快看这条酷酷的蛇！&lt;/p&gt;
&lt;p&gt;oh no! you're gonna
have to suck the
poison out!   &lt;br /&gt;
哦，不！你得帮我把毒吸出来！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;slurp&lt;/em&gt;       &lt;br /&gt;
&lt;em&gt;啧啧&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gulp&lt;/em&gt;    &lt;br /&gt;
&lt;em&gt;咕噜&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;did you swallow the
poison?       &lt;br /&gt;
你把毒咽下去了？&lt;/p&gt;
&lt;p&gt;oh no! you're
gonna have to suck the
poison out!   &lt;br /&gt;
哦，不！你得帮我把毒吸出来！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;slurp&lt;/em&gt;   &lt;br /&gt;
&lt;em&gt;啧啧&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-24:2015/06/3238.My-cunning-plan-to-get-bit-by-a-snake-on-my-weiner-so-my-buddy-Carl-would-suck-out-the-poison-sure-did-backfire.-He-swallowed-the-poison-and-it-got-kinda-gay-when-we-had-to-kiss-afterwards..zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3322：最棒的身材</title><link>https://mozillazg.com/2015/06/3322.bestshape.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3322/"&gt;Cyanide &amp;amp; Happiness #3322 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3322.bestshape.zh-cn.png" src="/static/images/comics/3322.bestshape.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i'm in the best
shape of my life!     &lt;br /&gt;
我正处于一生中身材最棒的时候！&lt;/p&gt;
&lt;p&gt;you've been working out?      &lt;br /&gt;
你之前一直在健身吧？&lt;/p&gt;
&lt;p&gt;i'm planning to get really fat.   &lt;br /&gt;
我计划开始增肥。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-24:2015/06/3322.bestshape.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3964：准备好了</title><link>https://mozillazg.com/2015/06/3964.prepared.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3964/"&gt;Cyanide &amp;amp; Happiness #3964 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3964.prepared.zh-cn.png" src="/static/images/comics/3964.prepared.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;love is in the air!   &lt;br /&gt;
空气中弥漫着爱的气息！&lt;/p&gt;
&lt;p&gt;i've prepared for this!   &lt;br /&gt;
我已经早有准备！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-24:2015/06/3964.prepared.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>JSON Web Token (JWT) 简介</title><link>https://mozillazg.com/2015/06/hello-jwt.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/rfc7519"&gt;JSON Web Token (JWT)&lt;/a&gt;
是一种基于 token 的认证方案。&lt;/p&gt;
&lt;div class="section" id="json-web-token"&gt;
&lt;h2 id="hidjson-web-token"&gt;JSON Web Token 的结构&lt;a class="headerlink" href="#hidjson-web-token" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一个 JWT token 看起来是这样的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzODY4OTkxMzEsImlzcyI6ImppcmE6MTU0ODk1OTUiLCJxc2giOiI4MDYzZmY0Y2ExZTQxZGY3YmM5MGM4YWI2ZDBmNjIwN2Q0OTFjZjZkYWQ3YzY2ZWE3OTdiNDYxNGI3MTkyMmU5IiwiaWF0IjoxMzg2ODk4OTUxfQ.uKqU9dTB6gKwG6jQCuXYAiMNdfNRw98Hw_IWuA5MaMo
&lt;/pre&gt;
&lt;p&gt;可以简化为下面这样的结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
base64url_encode(Header) + '.' + base64url_encode(Claims) + '.' + base64url_encode(Signature)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="header"&gt;
&lt;h2 id="hidheader"&gt;Header&lt;a class="headerlink" href="#hidheader" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Header 包含了一些元数据，至少会表明 token 类型以及 签名方法。比如&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
      &amp;quot;typ&amp;quot; : &amp;quot;JWT&amp;quot;,
      &amp;quot;alg&amp;quot; : &amp;quot;HS256&amp;quot;
}
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;type&lt;/tt&gt;: 必需。token 类型，&lt;tt class="docutils literal"&gt;JWT&lt;/tt&gt; 表示是 JSON Web Token.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;alg&lt;/tt&gt;: 必需。token 所使用的签名算法，可用的值在 &lt;a class="reference external" href="http://tools.ietf.org/html/rfc7518#section-3.1"&gt;这里&lt;/a&gt; 有规定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="claims-payload"&gt;
&lt;h2 id="hidclaims-payload"&gt;Claims (Payload)&lt;a class="headerlink" href="#hidclaims-payload" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Claims 部分包含了一些跟这个 token 有关的重要信息。
JWT 标准规定了一些字段，下面节选一些字段:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;iss&lt;/tt&gt;: The issuer of the token，token 是给谁的&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sub&lt;/tt&gt;: The subject of the token，token 主题&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;exp&lt;/tt&gt;: Expiration Time。 token 过期时间，Unix 时间戳格式&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;iat&lt;/tt&gt;: Issued At。 token 创建时间， Unix 时间戳格式&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;jti&lt;/tt&gt;: JWT ID。针对当前 token 的唯一标识&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了规定的字段外，可以包含其他任何 JSON 兼容的字段。&lt;/p&gt;
&lt;p&gt;Payload 示例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
    &amp;quot;iss&amp;quot;: &amp;quot;mozillazg.com&amp;quot;,
    &amp;quot;exp&amp;quot;: 1435055117,
    &amp;quot;user_id&amp;quot;: 1,
    &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="signature"&gt;
&lt;h2 id="hidsignature"&gt;Signature&lt;a class="headerlink" href="#hidsignature" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JWT 标准遵照 JSON Web Signature (JWS) 标准来生成签名。签名主要用于验证 token 是否有效，是否被篡改。 签名时可以 这些算法进行签名，比如 HMAC SHA-256:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
content = base64url_encode(Header) + '.' + base64url_encode(Claims)
signature = hmacsha256.hash(content)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说到这里有一点需要特别注意的是，默认情况下，JWT 中信息都是明文的，即 Claims 的内容并没有
被加密，可以通过 base64url_decode(text) 的方式解码得到 Claims&lt;/strong&gt; 。
所以，不要在 Claims 里包含敏感信息，如果一定要包含敏感信息的话，记得先将 Claims 的内容进行加密（比如，使用 JSON Web Encryption (JWE) 标准进行加密）
然后在进行 base64url_encode 操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2 id="hidpython"&gt;Python 实现&lt;a class="headerlink" href="#hidpython" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;已有的轮子&lt;/strong&gt;: 上 PyPI 上 &lt;a class="reference external" href="https://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=JWT&amp;amp;submit=search"&gt;搜索 JWT&lt;/a&gt; 即可。
用的比较多是 &lt;a class="reference external" href="https://pypi.python.org/pypi/PyJWT/"&gt;PyJWT&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手动简单实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import base64
import json
import hashlib
import hmac


def base64url_encode(s):
    return base64.urlsafe_b64encode(s).replace('=', '')

headers = json.dumps({
    &amp;quot;typ&amp;quot; : &amp;quot;JWT&amp;quot;,
    &amp;quot;alg&amp;quot; : &amp;quot;HS256&amp;quot;
})
claims = json.dumps({
    &amp;quot;iss&amp;quot;: &amp;quot;mozillazg.com&amp;quot;,
    &amp;quot;exp&amp;quot;: 1435055117,
    &amp;quot;user_id&amp;quot;: 1,
    &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
})
content = base64url_encode(headers) + '.' + base64url_encode(claims)
secret_key = 'your secret key'
signature = hmac.new(secret_key, content, hashlib.sha256).digest()

token = content + '.' + base64url_encode(signature)
&lt;/pre&gt;
&lt;p&gt;最后得到的 token 的值是&lt;/p&gt;
&lt;pre class="literal-block"&gt;
eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJpc3MiOiAibW96aWxsYXpnLmNvbSIsICJmb28iOiAiYmFyIiwgInVzZXJfaWQiOiAxLCAiZXhwIjogMTQzNTA1NTExN30.iFAK1B-6xRlmlSHnS2P24wsS6Ko6iZjbSPHdldzIhp4
&lt;/pre&gt;
&lt;p&gt;之所以用 &lt;tt class="docutils literal"&gt;base64url_encode&lt;/tt&gt; 而不是 &lt;tt class="docutils literal"&gt;base64.b64encode&lt;/tt&gt; 是因为 token 可能会被用作 url 参数，
而 base64 中的 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt;， &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;， &lt;tt class="docutils literal"&gt;=&lt;/tt&gt; 在 url 里被转义成 &lt;tt class="docutils literal"&gt;%2B&lt;/tt&gt; &lt;tt class="docutils literal"&gt;%2F&lt;/tt&gt; &lt;tt class="docutils literal"&gt;%3D&lt;/tt&gt;，导致 token 的值变得更长了，所以这里使用 base64url 即进行如下替换 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; -&amp;gt; &lt;tt class="docutils literal"&gt;-&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; -&amp;gt; &lt;tt class="docutils literal"&gt;_&lt;/tt&gt;, 删除 &lt;tt class="docutils literal"&gt;=&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;再次提示， &lt;strong&gt;claims 的值并没有被加密&lt;/strong&gt;，就算不知道 secert_key 的值也可以得到 claims 的值。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jwt.io/"&gt;http://jwt.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html"&gt;http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html"&gt;https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about"&gt;http://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/"&gt;https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs"&gt;http://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://scotch.io/tutorials/the-anatomy-of-a-json-web-token"&gt;https://scotch.io/tutorials/the-anatomy-of-a-json-web-token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpadilla/pyjwt/"&gt;https://github.com/jpadilla/pyjwt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/JSON_Web_Token"&gt;https://en.wikipedia.org/wiki/JSON_Web_Token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/rfc7519"&gt;http://tools.ietf.org/html/rfc7519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Base64#URL_applications"&gt;https://en.wikipedia.org/wiki/Base64#URL_applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tools.ietf.org/html/rfc4648#section-5"&gt;https://tools.ietf.org/html/rfc4648#section-5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-24:2015/06/hello-jwt.html</guid><category>jwt</category></item><item><title>Cyanide &amp; Happiness #3174：最棒的 party</title><link>https://mozillazg.com/2015/06/3174.bestparty.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3174/"&gt;Cyanide &amp;amp; Happiness #3174 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3174.bestparty.zh-cn.png" src="/static/images/comics/3174.bestparty.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i'm gonna throw
the best party ever
for all my friends!   &lt;br /&gt;
我要去为我所有的朋友们举办一场
最棒的 party！&lt;/p&gt;
&lt;p&gt;wait. i don't have any party hats.    &lt;br /&gt;
等一下，我还没有 party 帽。&lt;/p&gt;
&lt;p&gt;or friends.
也没有朋友。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-23:2015/06/3174.bestparty.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3080：许愿井4</title><link>https://mozillazg.com/2015/06/3080.wishingwell2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3080/"&gt;Cyanide &amp;amp; Happiness #3080 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3080.wishingwell2.zh-cn.png" src="/static/images/comics/3080.wishingwell2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;say, wishing well.
what do you wish for?     &lt;br /&gt;
说吧，许愿井。
你的愿望是什么？&lt;/p&gt;
&lt;p&gt;small children
getting trapped in me.    &lt;br /&gt;
希望有小孩掉进来。&lt;/p&gt;
&lt;p&gt;it's the only time
people pay attention to me....        &lt;br /&gt;
只有在这种情况下，
人们才会注意到我。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-22:2015/06/3080.wishingwell2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3077：许愿井2</title><link>https://mozillazg.com/2015/06/3077.wishingwell1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3077/"&gt;Cyanide &amp;amp; Happiness #3077 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3077.wishingwell1.zh-cn.png" src="/static/images/comics/3077.wishingwell1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i wish this well had
water so that my
family can live.          &lt;br /&gt;
我希望这口井里有水，
这样我的家人就能活下来。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;clink&lt;/em&gt;
&lt;em&gt;叮当&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-21:2015/06/3077.wishingwell1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3078：许愿井3</title><link>https://mozillazg.com/2015/06/3078.comicwellweek1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3078/"&gt;Cyanide &amp;amp; Happiness #3078 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3078.comicwellweek1.zh-cn.png" src="/static/images/comics/3078.comicwellweek1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh hey, a wishing well.   &lt;br /&gt;
哦，一口许愿井。&lt;/p&gt;
&lt;p&gt;i wish i wasn't so broke.      &lt;br /&gt;
我希望我不再这么落魄。&lt;/p&gt;
&lt;p&gt;shit like this is why
you're so fucking broke   &lt;br /&gt;
该死的，这就是你为什么这么落魄的原因&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-21:2015/06/3078.comicwellweek1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3079：许愿</title><link>https://mozillazg.com/2015/06/3079.Monkeys-Paw.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3079/"&gt;Cyanide &amp;amp; Happiness #3079 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3079.Monkeys-Paw.zh-cn.png" src="/static/images/comics/3079.Monkeys-Paw.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;woah!     &lt;br /&gt;
哇！&lt;/p&gt;
&lt;p&gt;shazam!   &lt;br /&gt;
沙赞！&lt;/p&gt;
&lt;p&gt;blow out these candles.       &lt;br /&gt;
吹灭这些蜡烛。&lt;/p&gt;
&lt;p&gt;i wish i was a millionaire!   &lt;br /&gt;
我希望我是个百万富翁！&lt;/p&gt;
&lt;p&gt;who said anything
about wishes?     &lt;br /&gt;
谁说让你许愿了？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-21:2015/06/3079.Monkeys-Paw.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3081：许愿井</title><link>https://mozillazg.com/2015/06/3081.comicwellweek2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3081/"&gt;Cyanide &amp;amp; Happiness #3081 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3081.comicwellweek2.zh-cn.png" src="/static/images/comics/3081.comicwellweek2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i wish i'd
actually asked
sarah out so
many years ago.   &lt;br /&gt;
我希望在很多年前就把
萨拉约出来。&lt;/p&gt;
&lt;p&gt;wish granted!!    &lt;br /&gt;
愿望被接受！！&lt;/p&gt;
&lt;p&gt;timewarp!!    &lt;br /&gt;
时空穿梭！！&lt;/p&gt;
&lt;p&gt;hey sarah, sarah, it's me!          &lt;br /&gt;
嘿，萨拉，萨拉，是我啊！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-20:2015/06/3081.comicwellweek2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3143：钱</title><link>https://mozillazg.com/2015/06/3143.cash.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3143/"&gt;Cyanide &amp;amp; Happiness #3143 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3143.cash.zh-cn.png" src="/static/images/comics/3143.cash.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;can i borrow some cash?      &lt;br /&gt;
能借我点钱吗？&lt;/p&gt;
&lt;p&gt;what for?     &lt;br /&gt;
干嘛用？&lt;/p&gt;
&lt;p&gt;i want to buy a motorycle!    &lt;br /&gt;
我想买辆摩托车！&lt;/p&gt;
&lt;p&gt;a motorcycle?
do you think i'm
made of money?    &lt;br /&gt;
摩托车？你以为我是钱做的吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-19:2015/06/3143.cash.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3109：爸爸，打他</title><link>https://mozillazg.com/2015/06/3109.comicdadfight1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3109/"&gt;Cyanide &amp;amp; Happiness #3109 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3109.comicdadfight1.zh-cn.png" src="/static/images/comics/3109.comicdadfight1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-17:2015/06/3109.comicdadfight1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3126：你在读什么？</title><link>https://mozillazg.com/2015/06/3126.whatareyoureading.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3126/"&gt;Cyanide &amp;amp; Happiness #3126 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3126.whatareyoureading.zh-cn.png" src="/static/images/comics/3126.whatareyoureading.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-16:2015/06/3126.whatareyoureading.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3093：杜尚</title><link>https://mozillazg.com/2015/06/3093.Duchamp.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3093/"&gt;Cyanide &amp;amp; Happiness #3093 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3093.Duchamp.zh-cn.png" src="/static/images/comics/3093.Duchamp.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;关于这个漫画可以搜索 “杜尚 小便池”&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-15:2015/06/3093.Duchamp.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3122：箭</title><link>https://mozillazg.com/2015/06/3122.arrow.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3122/"&gt;Cyanide &amp;amp; Happiness #3122 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3122.arrow.zh-cn.png" src="/static/images/comics/3122.arrow.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;alright, now i'm gonna
shoot the apple off your
head with blindfolded.        &lt;br /&gt;
好了，现在我将蒙着脸将
苹果从你的头上射下来。&lt;/p&gt;
&lt;p&gt;did i hit it?         &lt;br /&gt;
我射中了吗？&lt;/p&gt;
&lt;p&gt;pretty close.     &lt;br /&gt;
差一点。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-15:2015/06/3122.arrow.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #1298：跳棋</title><link>https://mozillazg.com/2015/06/1298.checkers.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1298/"&gt;Cyanide &amp;amp; Happiness #1298 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1298.checkers.zh-cn.png" src="/static/images/comics/1298.checkers.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;*scoot*     &lt;/p&gt;
&lt;p&gt;dude, what the hell?!     &lt;br /&gt;
哥们，你发什么神经？&lt;/p&gt;
&lt;p&gt;my bad, i thought
we were playing
street checkers.      &lt;br /&gt;
我的错，我还以为我们在玩街头跳棋。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-14:2015/06/1298.checkers.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3743：耶稣</title><link>https://mozillazg.com/2015/06/3743.jesus.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3743/"&gt;Cyanide &amp;amp; Happiness #3743 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3743.jesus.zh-cn.png" src="/static/images/comics/3743.jesus.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;check it out!
it's jesus!   &lt;br /&gt;
快看！是耶稣！&lt;/p&gt;
&lt;p&gt;you're so dumb, jeses!
get out of here, stupid!      &lt;br /&gt;
你可真笨，耶稣！
滚开，蠢蛋！&lt;/p&gt;
&lt;p&gt;oh yeah? well you... um...
是吗？你。。。呃。。。&lt;/p&gt;
&lt;p&gt;what's wrong?
too stupid to think
of a comeback?    &lt;br /&gt;
怎么了？蠢到想不起来了？&lt;/p&gt;
&lt;p&gt;hahaha!   &lt;br /&gt;
哈哈哈!&lt;/p&gt;
&lt;p&gt;3 dys later   &lt;br /&gt;
三天后&lt;/p&gt;
&lt;p&gt;your mam is stupid!   &lt;br /&gt;
你妈妈是个蠢蛋！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 13 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-13:2015/06/3743.jesus.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #2190：打猎</title><link>https://mozillazg.com/2015/06/2190.hunting.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2190/"&gt;Cyanide &amp;amp; Happiness #2190 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2190.hunting.zh-cn.png" src="/static/images/comics/2190.hunting.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i forgot it was
hunting season already        &lt;br /&gt;
我都忘了已经到打猎的季节了&lt;/p&gt;
&lt;p&gt;it's not. it's swim suit season   &lt;br /&gt;
不是的。是到泳装季节了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-12:2015/06/2190.hunting.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #838：果汁</title><link>https://mozillazg.com/2015/06/838.juicenew.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/838/"&gt;Cyanide &amp;amp; Happiness #838 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="838.juicenew.zh-cn.png" src="/static/images/comics/838.juicenew.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;this juice sort
of tastes like bloob      &lt;br /&gt;
这个果汁尝起来有点像血&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-11:2015/06/838.juicenew.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3949：妈妈</title><link>https://mozillazg.com/2015/06/3949.mybigdeadmummy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3949/"&gt;Cyanide &amp;amp; Happiness #3949 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3949.mybigdeadmummy.zh-cn.png" src="/static/images/comics/3949.mybigdeadmummy.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;mom? are you there?       &lt;br /&gt;
妈妈？你在这里吗？&lt;/p&gt;
&lt;p&gt;yes mom... okay mom...
i'll make sure i do that mom...   &lt;br /&gt;
是的妈妈。。。
好的妈妈。。。
我保证会去做的妈妈。。。&lt;/p&gt;
&lt;p&gt;okay mom i have to go now bye!!   &lt;br /&gt;
好的妈妈我现在必须要走了再见！！&lt;/p&gt;
&lt;p&gt;now i remember why i killed her   &lt;br /&gt;
我现在想起来为什么要杀她了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-10:2015/06/3949.mybigdeadmummy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3482：机器</title><link>https://mozillazg.com/2015/06/3482.machine-2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3482/"&gt;Cyanide &amp;amp; Happiness #3482 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3482.machine-2.zh-cn.png" src="/static/images/comics/3482.machine-2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-09:2015/06/3482.machine-2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>Cyanide &amp; Happiness #3946：放射性蜘蛛</title><link>https://mozillazg.com/2015/06/3946.radioactive_spider.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3946/"&gt;Cyanide &amp;amp; Happiness #3946 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3946.radioactive_spider.zh-cn.png" src="/static/images/comics/3946.radioactive_spider.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-08:2015/06/3946.radioactive_spider.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>在 python 中使用 str.strip 方法时需要注意的地方</title><link>https://mozillazg.com/2015/06/python-str-strip-lstrip-rstrip-warnning.html</link><description>&lt;p&gt;首先问大家一个问题：你觉得下面代码的输出会是什么？&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print '12345-abc-12345-defg-54321'.strip('12345')
&lt;/pre&gt;
&lt;p&gt;我猜有些同学的答案会是: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-abc-12345-defg-54321&lt;/span&gt;&lt;/tt&gt; ，实际的结果是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; print '12345-abc-12345-defg-54321'.strip('12345')
-abc-12345-defg-
&lt;/pre&gt;
&lt;p&gt;为什么不是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-abc-12345-defg-54321&lt;/span&gt;&lt;/tt&gt; 呢？我们先来看一下 &lt;tt class="docutils literal"&gt;str.strip&lt;/tt&gt; 的文档就知道了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
S.strip([chars]) -&amp;gt; string or unicode

Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
&lt;/pre&gt;
&lt;p&gt;通过文档我们可以知道:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;如果未指定 chars 参数或参数值未 None, 去除字符串 &lt;strong&gt;首尾空白符（空格、换行符等等）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;否则，只要 &lt;strong&gt;首尾字符包含在 chars 定义的字符串内&lt;/strong&gt; ，就会被去除。并且会递归调用直到首尾字符不在 chars 内。类似:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def _strip(s, chars):
    if s[0] in chars:
        return _strip(s[1:], chars)
    elif s[-1] in chars:
        return _strip(s[:-1], chars)
    else:
        return s
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的例子:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; '18349-13-3434'.strip('0123456789')
'-13-'

&amp;gt;&amp;gt;&amp;gt; '18349-13-3434'.strip('123')
'8349-13-3434'

&amp;gt;&amp;gt;&amp;gt; 'scene_scdefg'.strip('scene_')
'defg'

&amp;gt;&amp;gt;&amp;gt; '\r   \t\n '.strip()
''
&lt;/pre&gt;
&lt;p&gt;现在我们知道 &lt;tt class="docutils literal"&gt;str.strip&lt;/tt&gt; 是按 &lt;strong&gt;字符&lt;/strong&gt; 进行移除操作的。
那么如何按字符串进行移除呢？&lt;/p&gt;
&lt;p&gt;一种解决办法就是使用 &lt;tt class="docutils literal"&gt;re.sub&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def strip2(s, chars):
    re_chars = re.escape(chars)
    s = re.sub(r'^(?:%s)+(?P&amp;lt;right&amp;gt;.*)$' % re_chars, '\g&amp;lt;right&amp;gt;', s)
    s = re.sub(r'^(?P&amp;lt;left&amp;gt;.*?)(?:%s)+$' % re_chars, '\g&amp;lt;left&amp;gt;', s)
    return s

&amp;gt;&amp;gt;&amp;gt; print strip2('12345-abc-12345-defg-54321', '12345')
-abc-12345-defg-54321
&lt;/pre&gt;
&lt;!-- 一种解决办法就是，使用 ``str.replace``: :: --&gt;
&lt;!--  --&gt;
&lt;!-- &gt;&gt;&gt; '12345-abc-12345-defg-54321'.replace('12345', '', 1) --&gt;
&lt;!-- '-abc-12345-defg-54321' --&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-08:2015/06/python-str-strip-lstrip-rstrip-warnning.html</guid></item><item><title>微信开发过程中遇到的问题</title><link>https://mozillazg.com/2015/06/wechat-develop-note.html</link><description>&lt;div class="section" id="jssdk"&gt;
&lt;h2 id="hidjssdk"&gt;JSSDK&lt;a class="headerlink" href="#hidjssdk" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;invalid signature&lt;/strong&gt;, 排查:&lt;/p&gt;
&lt;p&gt;前端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;url&lt;/tt&gt; 参数动态获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;注意参数大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
appId: '',         //  I 大写
timestamp: 134xxx, // 全小写, 必须与后端签名时 timestamp 的值一致
nonceStr: '',      //  ** 尤其注意 S 是大写 **, 必须与后端签名时 noncestr 的值一致
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;确保 jsapi_ticket 未过期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;确认参与签名的参数，注意大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
noncestr        // 全小写，** 尤其注意 s 是小写 **
jsapi_ticket    // 全小写
timestamp       // 全小写
url             // 小写，必须是前端动态获取
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;签名算法
* 是否按字段名的ASCII 码从小到大排序
* 使用 sha1 签名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微信支付 &lt;strong&gt;商户签名错误&lt;/strong&gt;, 排查:&lt;/p&gt;
&lt;p&gt;前端:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;检查参数大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
timestamp: 0,                     // ** 小写 **
nonceStr: '',                     // S 大写
package: 'prepay_id=wx2015xxxx',  // 内容是否对了？
paySign: 'MD5',                   // 新版是 MD5
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后端:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;检查参与签名的参数大小写:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
appId            // I 大写
timeStamp        // ** S 大写 **
nonceStr         // S 大写
package          // prepay_id=wx2015xxxx
signType         // 新版是 MD5
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://pay.weixin.qq.com/wiki/doc/api/index.php?chapter=4_3"&gt;签名算法&lt;/a&gt; 是否正确&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;微信支付&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; 模块发送请求时，如何使用商户证书?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cert = ('/path/to/apiclient_cert.pem', '/path/to/apiclient_key.pem')
requests.post(url, data=data, cert=cert)
&lt;/pre&gt;
&lt;p&gt;使用证书发送请求时，出现 &lt;tt class="docutils literal"&gt;UnicodeEncodeError&lt;/tt&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
File &amp;quot;/xxx/lib/python2.7/ssl.py&amp;quot;, line 198, in send
v = self._sslobj.write(data)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 363-364: ordinal not in range(128)
&lt;/pre&gt;
&lt;p&gt;ssl data 不支持 unicode, data 参数不要传 &lt;tt class="docutils literal"&gt;unicode&lt;/tt&gt;, 改为 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;utf-8&lt;/span&gt;&lt;/tt&gt; 编码字符串:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
xml = u'&amp;lt;xml&amp;gt;巴拉巴拉巴拉&amp;lt;xml&amp;gt;'
requests.post(url, data=xml, cert=cert)   # UnicodeEncodeError
改为
requests.post(url, data=xml.encode('utf8'), cert=cert)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;企业付款&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;参数错误:输入的商户号有误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;检查提交的参数名称是否有误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mch_appid         # ** 在其他支付 api 中参数的名称是 appid **
mchid             # ** 在其他支付 api 中参数的名称是 mch_id **
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-08:2015/06/wechat-develop-note.html</guid><category>微信</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1372：为什么他们总是跌倒</title><link>https://mozillazg.com/2015/06/1372.why-do-they-ALWAYS-trip-and-fall.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1372/"&gt;Cyanide &amp;amp; Happiness #1372 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1372.why-do-they-ALWAYS-trip-and-fall.zh-cn.png" src="/static/images/comics/1372.why-do-they-ALWAYS-trip-and-fall.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-07:2015/06/1372.why-do-they-ALWAYS-trip-and-fall.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1378：跑步</title><link>https://mozillazg.com/2015/06/1378.comicrunning3.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1378/"&gt;Cyanide &amp;amp; Happiness #1378 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1378.comicrunning3.zh-cn.png" src="/static/images/comics/1378.comicrunning3.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;race you to that tree over there!
我们比比谁先跑到那棵树那里！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-06:2015/06/1378.comicrunning3.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>让我们一起来构建一个 Web 服务器（二）</title><link>https://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html</link><description>&lt;p&gt;本文译自：&lt;a class="reference external" href="http://ruslanspivak.com/lsbaws-part2/"&gt;http://ruslanspivak.com/lsbaws-part2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还记得吗？在 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-1-zh-cn.html"&gt;第一部分&lt;/a&gt; 我向你问了一个问题：”如何在你新鲜出炉的 Web 服务器上不做任何修改的就运行 Django 应用，Flask 应用， Pyramid 应用?“
往下读就可以找到答案。&lt;/p&gt;
&lt;p&gt;在过去，当你选择的 Python Web 框架会限制你所能选择的 Web 服务器, 如果那个框架和服务器被设计的可以一起工作的话，那就皆大欢喜了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Server Framework Fit" src="/static/images/lsbaws-part2/lsbaws_part2_before_wsgi.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是，当你尝试把一个服务器和一个框架一起使用的时候可能会（可能你已经）面临它们被设计为不兼容的情况：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Server Framework Clash" src="/static/images/lsbaws-part2/lsbaws_part2_after_wsgi.png" /&gt;&lt;/p&gt;
&lt;p&gt;一般来说你必须使用能够一起工作的组件而不仅仅是你想使用的组件。&lt;/p&gt;
&lt;p&gt;那么，你如何确保你能够在你的 Web 服务器上运行多个 Web 框架，并且不需要修改 Web 服务器或 Web 框架的现有的代码呢？
解决这个问题的答案就是 Python Web Server Gateway Interface (或简称 WSGI , 读作 “wizgy”)&lt;/p&gt;
&lt;p&gt;&lt;img alt="WSGI Interface" src="/static/images/lsbaws-part2/lsbaws_part2_wsgi_idea.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0333/"&gt;WSGI&lt;/a&gt; 允许开发者自由选择 Web 框架和 Web 服务器。现在你可以任意混搭不同的 Web 服务器和 Web 框架，并选择一个你需要的合适的组合。
比如，你可以 用 &lt;a class="reference external" href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; or &lt;a class="reference external" href="http://uwsgi-docs.readthedocs.org/"&gt;Nginx/uWSGI&lt;/a&gt; or &lt;a class="reference external" href="http://waitress.readthedocs.org/"&gt;Waitress&lt;/a&gt; 运行 &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, 或 &lt;a class="reference external" href="http://trypyramid.com/"&gt;Pyramid&lt;/a&gt; .
真正的随意混搭，感谢那些服务器和框架对 WSGI 的支持：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mix &amp;amp; Match" src="/static/images/lsbaws-part2/lsbaws_part2_wsgi_interop.png" /&gt;&lt;/p&gt;
&lt;p&gt;因此，&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0333/"&gt;WSGI&lt;/a&gt; 就是我在 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-1-zh-cn.html"&gt;第一部分&lt;/a&gt; 向你问的并在文章开头重复过的问题的答案。
你的 Web 服务器必须实现 WSGI 接口的服务器端部分，
所有的现代 Python Web 框架都已经实现了 WSGI 接口的框架端部分，
这部分允许你不需要修改你的服务器代码去适应某个特定的框架就可以使用这些框架。&lt;/p&gt;
&lt;p&gt;现在你已经知道了被 Web 服务器和 Web 框架所支持的 WSGI 允许你选择适合你的组合，
它同样也对服务器和框架的开发者有益，因为他们可以专注于标准中他们各自的区域，不会出现因为越界而踩到对方的脚趾。
其他语言也有类似的接口：例如，Java 有 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Java_servlet"&gt;Servlet API&lt;/a&gt;，Ruby 有 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rack_%28web_server_interface%29"&gt;Rack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;一切都很棒，但是我猜你会说”Show me the code!“，好吧，一起来看看下面这个非常简约的 WSGI 服务器实现吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Tested with Python 2.7.9, Linux &amp;amp; Mac OS X&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WSGIServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;address_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;
    &lt;span class="n"&gt;socket_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;
    &lt;span class="n"&gt;request_queue_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_address&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Create a listening socket&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;address_family&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket_type&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Allow to reuse the same address&lt;/span&gt;
        &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Bind&lt;/span&gt;
        &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Activate&lt;/span&gt;
        &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_queue_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Get server host name and port&lt;/span&gt;
        &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfqdn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;
        &lt;span class="c1"&gt;# Return headers set by Web framework/Web application&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen_socket&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# New client connection&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c1"&gt;# Handle one request and close the client connection. Then&lt;/span&gt;
            &lt;span class="c1"&gt;# loop over to wait for another client connection&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_one_request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_one_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Print formatted request data a la &amp;#39;curl -v&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;&amp;lt; {line}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Construct environment dictionary using request data&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_environ&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# It&amp;#39;s time to call our application callable and get&lt;/span&gt;
        &lt;span class="c1"&gt;# back a result that will become HTTP response body&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Construct a response and send it back to the client&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finish_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;request_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Break down the request line into components&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# GET&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;# /hello&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_version&lt;/span&gt;  &lt;span class="c1"&gt;# HTTP/1.1&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request_line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_environ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="c1"&gt;# The following code snippet does not follow PEP8 conventions&lt;/span&gt;
        &lt;span class="c1"&gt;# but it&amp;#39;s formatted the way it is for demonstration purposes&lt;/span&gt;
        &lt;span class="c1"&gt;# to emphasize the required variables and their values&lt;/span&gt;
        &lt;span class="c1"&gt;#&lt;/span&gt;
        &lt;span class="c1"&gt;# Required WSGI variables&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.url_scheme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.errors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.multithread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.multiprocess&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wsgi.run_once&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="c1"&gt;# Required CGI variables&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REQUEST_METHOD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt;    &lt;span class="c1"&gt;# GET&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;              &lt;span class="c1"&gt;# /hello&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SERVER_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;       &lt;span class="c1"&gt;# localhost&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SERVER_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 8888&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Add necessary server headers&lt;/span&gt;
        &lt;span class="n"&gt;server_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Tue, 31 Mar 2015 12:54:48 GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;WSGIServer 0.2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;server_headers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# To adhere to WSGI specification the start_response must return&lt;/span&gt;
        &lt;span class="c1"&gt;# a &amp;#39;write&amp;#39; callable. We simplicity&amp;#39;s sake we&amp;#39;ll ignore that detail&lt;/span&gt;
        &lt;span class="c1"&gt;# for now.&lt;/span&gt;
        &lt;span class="c1"&gt;# return self.finish_response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;finish_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers_set&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HTTP/1.1 {status}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{0}: {1}&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
            &lt;span class="c1"&gt;# Print formatted response data a la &amp;#39;curl -v&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;&amp;gt; {line}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Provide a WSGI application object as module:callable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WSGIServer: Serving HTTP on port {port} ...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码比 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-1-zh-cn.html"&gt;第一部分&lt;/a&gt; 的服务器代码更长，但是，为了让你能够理解而不至于陷入细节的泥潭中，它已经足够小了（只有不到 150 行）。
上面的服务器代码同样也能做更多的工作——它能运行用你上面所见的 Web 框架（&lt;a class="reference external" href="http://trypyramid.com/"&gt;Pyramid&lt;/a&gt;, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, 或其他的 Python WSGI 框架）所写的基础 Web 应用，&lt;/p&gt;
&lt;p&gt;不信？动手试一下吧。把上面的代码保存为 &lt;tt class="docutils literal"&gt;webserver2.py&lt;/tt&gt; 或者直接从 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part2/webserver2.py"&gt;GitHub&lt;/a&gt; 上下载下来。如果你不带任何参数就运行这个程序的话，它会向你抱怨，然后退出。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver2.py
Provide a WSGI application object as module:callable
&lt;/pre&gt;
&lt;p&gt;它真的非常想要服务你的 Web 应用，这是个非常有趣的开始。
为了能够运行这个服务器你只需要安装 Python 就可以了。
但是，为了运行用 &lt;a class="reference external" href="http://trypyramid.com/"&gt;Pyramid&lt;/a&gt;, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, 或 &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; 开发的应用，你需要首先安装这些框架。
让我们来安装这三个框架吧。
我喜欢使用 &lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt;. 只需按照下面的步骤去创建并激活一个虚拟环境，然后就可以安装这三个框架了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ [sudo] pip install virtualenv
$ mkdir ~/envs
$ virtualenv ~/envs/lsbaws/
$ cd ~/envs/lsbaws/
$ ls
bin  include  lib
$ source bin/activate
(lsbaws) $ pip install pyramid
(lsbaws) $ pip install flask
(lsbaws) $ pip install django
&lt;/pre&gt;
&lt;p&gt;到这一步的时候你需要创建一个 Web 应用。让我们先用 &lt;a class="reference external" href="http://trypyramid.com/"&gt;Pyramid&lt;/a&gt; 开始吧。把下面的代码保存为 &lt;tt class="docutils literal"&gt;pyramidapp.py&lt;/tt&gt;  并放到你之前所保存的 &lt;tt class="docutils literal"&gt;webserver2.py&lt;/tt&gt; 文件或直接从 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part2/pyramidapp.py"&gt;GitHub&lt;/a&gt; 所下载的文件所在目录（即：把 &lt;tt class="docutils literal"&gt;pyramidapp.py&lt;/tt&gt; 放在 &lt;tt class="docutils literal"&gt;webserver2.py&lt;/tt&gt; 所在目录）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyramid.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Hello world from Pyramid!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configurator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_wsgi_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，你可以准备用你自己的 Web 服务器来服务你的 Pyramid 应用了：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(lsbaws) $ python webserver2.py pyramidapp:app
WSGIServer: Serving HTTP on port 8888 ...
&lt;/pre&gt;
&lt;p&gt;你只需告诉你的服务器从 python 模块 &lt;tt class="docutils literal"&gt;pyramidapp&lt;/tt&gt; 中载入一个可调用的 &lt;tt class="docutils literal"&gt;app&lt;/tt&gt; 对象，你的服务器现在已经准备好
接收请求并把它们转发给你的 Pyramid 应用了。
这个应用目前只处理了一个路由：&lt;tt class="docutils literal"&gt;/hello&lt;/tt&gt; 路由。
在你的浏览器中输入 &lt;a class="reference external" href="http://localhost:8888/hello"&gt;http://localhost:8888/hello&lt;/a&gt; 地址，然后按下回车键，注意返回的结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pyramid" src="/static/images/lsbaws-part2/lsbaws_part2_browser_pyramid.png" /&gt;&lt;/p&gt;
&lt;p&gt;你也可以在命令行中使用 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令来测试这个服务器：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl -v http://localhost:8888/hello
...
&lt;/pre&gt;
&lt;p&gt;检查服务器以及 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 打印到标准输出的内容。&lt;/p&gt;
&lt;p&gt;现在轮到 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 了。让我们按照相同的步骤来操作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="n"&gt;flask_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;flaskapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@flask_app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Hello world from Flask!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把上面的代码保存为 &lt;tt class="docutils literal"&gt;flaskapp.py&lt;/tt&gt;  或从 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part2/flaskapp.py"&gt;GitHub&lt;/a&gt; 上下载，然后用以下方式运行服务器:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(lsbaws) $ python webserver2.py flaskapp:app
WSGIServer: Serving HTTP on port 8888 ...
&lt;/pre&gt;
&lt;p&gt;现在在你的浏览器中输入 &lt;a class="reference external" href="http://localhost:8888/hello"&gt;http://localhost:8888/hello&lt;/a&gt; 然后按下回车键：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Flask" src="/static/images/lsbaws-part2/lsbaws_part2_browser_flask.png" /&gt;&lt;/p&gt;
&lt;p&gt;再一次，尝试 &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 命令，然后看一下服务器返回的由这个 Flask 应用所生成的信息：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl -v http://localhost:8888/hello
...
&lt;/pre&gt;
&lt;p&gt;这个服务器能处理 &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; 应用吗啊？试一下就知道了！
这次涉及的东西有点复杂，我建议你克隆这个 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/"&gt;仓库&lt;/a&gt; 然后使用  GitHub 仓库 中的 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part2/djangoapp.py"&gt;djangoapp.py&lt;/a&gt; 文件。
下面的源码主要是添加 Django &lt;tt class="docutils literal"&gt;helloworld&lt;/tt&gt; 项目（预先使用 Django 的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin.py&lt;/span&gt; startproject&lt;/tt&gt; 命令）到当前 Python 路径
然后导入项目中的 WSGI 应用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./helloworld&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;helloworld&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wsgi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把上面的代码保存为 &lt;tt class="docutils literal"&gt;djangoapp.py&lt;/tt&gt;  然后用你的 Web 服务器运行这个 Django 应用：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(lsbaws) $ python webserver2.py djangoapp:app
WSGIServer: Serving HTTP on port 8888 ...
&lt;/pre&gt;
&lt;p&gt;输入如下地址并回车：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Django" src="/static/images/lsbaws-part2/lsbaws_part2_browser_django.png" /&gt;&lt;/p&gt;
&lt;p&gt;正如你之前做过的那几次一样，你也可以在命令行中进行测试。
确认这个 Django 应用处理了你这一次的请求：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl -v http://localhost:8888/hello
...
&lt;/pre&gt;
&lt;p&gt;你试过了吗？你有确认过这个服务器可以与这三个框架一起工作吗？
如果还没有的话，一定要试一下。
阅读很重要，但是这个系列讲的是关于重新构建，这意味着你需要手动进行这些尝试。
快去试试吧。别担心，我会等你的。
我是认真的，你必须去尝试，最好能够亲自一个字一个字的敲下所有的字符，
并确保它能达到预期的效果。&lt;/p&gt;
&lt;p&gt;好了，你已经熟悉 WSGI 的威力了：它允许你混搭你的 Web 服务器和 Web 框架。
WSGI 规定了 Python Web 服务器和  Python Web 框架之间的一些接口。
它非常的简单，不管是在服务器还是框架端都非常容易实现。
下面的片段展示了服务器和框架端的接口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Server code.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# This is where an application/framework stores&lt;/span&gt;
    &lt;span class="c1"&gt;# an HTTP status and HTTP response headers for the server&lt;/span&gt;
    &lt;span class="c1"&gt;# to transmit to the client&lt;/span&gt;
    &lt;span class="n"&gt;headers_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="c1"&gt;# Environment dictionary with WSGI/CGI variables&lt;/span&gt;
    &lt;span class="n"&gt;environ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;headers_set&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Server invokes the ‘application&amp;#39; callable and gets back the&lt;/span&gt;
    &lt;span class="c1"&gt;# response body&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Server builds an HTTP response and transmits it to the client&lt;/span&gt;
    &lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A barebones WSGI app.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;run_application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它的工作原理是这样的：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;框架提供了一个 &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; 可调用对象（WSGI 规范没有规定它应该如何被实现）&lt;/li&gt;
&lt;li&gt;每当收到来自 HTTP 客户端的请求的时候，服务器就调用这个 &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; 可调用对象。
它把一个包含 WSGI/CGI 变量的字典 &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt; 和一个 &lt;tt class="docutils literal"&gt;start_response&lt;/tt&gt; 可调用对象作为参数传递给了 &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; 可调用对象。&lt;/li&gt;
&lt;li&gt;框架/应用生成一个 HTTP 状态信息和 HTTP 响应头信息，并把它们传递给了 &lt;tt class="docutils literal"&gt;start_response&lt;/tt&gt; 可调用对象，
让服务器把它们存起来。框架/应用也返回了一个响应 body 信息。&lt;/li&gt;
&lt;li&gt;服务器把状态信息，响应头信息以及响应 body 信息合并为一个 HTTP 响应，然后把它传输给客户端（这一步不是规范的一部分，
但是它是流程中的下一个逻辑步骤，为了清晰可见我把它列在了这里）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是这个接口的可视化图表：&lt;/p&gt;
&lt;p&gt;&lt;img alt="WSGI Interface Visual" src="/static/images/lsbaws-part2/lsbaws_part2_wsgi_interface.png" /&gt;&lt;/p&gt;
&lt;p&gt;到目前位置，你已经见过了 &lt;a class="reference external" href="http://trypyramid.com/"&gt;Pyramid&lt;/a&gt;, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 以及 &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; Web 应用，你也见过了实现 WSGI 规范的服务器端代码。
你也见过不用任何框架所实现的极简 WSGI 应用的代码片段。&lt;/p&gt;
&lt;p&gt;事实是，当你用这些框架中某个开发一个 Web 应用的时候，你是在高层面进行工作，
并没有直接与 WSGI 打交到，但是我知道非常好奇框架端的 WSGI 接口实现，也是因为你正在阅读这篇文章。
那么，让我们来创建一个不使用 &lt;a class="reference external" href="http://trypyramid.com/"&gt;Pyramid&lt;/a&gt;, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; 的微型 WSGI Web 应用/Web 框架，
并用你的服务器来运行它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A barebones WSGI application.&lt;/span&gt;

&lt;span class="sd"&gt;    This is a starting point for your own Web framework :)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;200 OK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;response_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world from a simple WSGI application!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再一次的，把上面的代码保存为 &lt;tt class="docutils literal"&gt;wsgiapp.py&lt;/tt&gt; 或直接从 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part2/wsgiapp.py"&gt;GitHub&lt;/a&gt; 上下载它，然后用你的
Web 服务器像下面这样运行这个应用：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(lsbaws) $ python webserver2.py wsgiapp:app
WSGIServer: Serving HTTP on port 8888 ...
&lt;/pre&gt;
&lt;p&gt;输入如下地址并按下回车键。你应该会看到这样的结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simple WSGI Application" src="/static/images/lsbaws-part2/lsbaws_part2_browser_simple_wsgi_app.png" /&gt;&lt;/p&gt;
&lt;p&gt;在学习如何创建一个 Web 服务器的同时，你刚刚又写了一个你自己的微型 WSGI WEB 框架！
真是意外之喜！&lt;/p&gt;
&lt;p&gt;现在，让我们回到服务器都给客户端传输了什么东西。
下面是当你使用 HTTP 客户端调用你的 Pyramind 应用时，服务器生成的 HTTP 响应：&lt;/p&gt;
&lt;p&gt;&lt;img alt="HTTP Response Part 1" src="/static/images/lsbaws-part2/lsbaws_part2_http_response.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个响应有一些你在 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-1-zh-cn.html"&gt;第一部分&lt;/a&gt; 看到过的东西，但是它也有一些新东西。比如说，它有四个你之前还没见过的 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields"&gt;HTTP headers&lt;/a&gt;：
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Content-Type&lt;/span&gt;&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Content-Length&lt;/span&gt;&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;Date&lt;/tt&gt; 以及 &lt;tt class="docutils literal"&gt;Server&lt;/tt&gt; .
这些包含在响应里的头信息是一个 Web 服务器应该要生成的信息。
虽然它们中没有一个是严格要求必须提供的。
这些头信息的目的是传输关于 HTTP 请求/响应的附加信息。&lt;/p&gt;
&lt;p&gt;现在你已经了解了关于 WSGI 接口的更详细的信息了，下面是同一个 HTTP 响应部分是如何产生的更详细的信息：&lt;/p&gt;
&lt;p&gt;&lt;img alt="HTTP Response Part 2" src="/static/images/lsbaws-part2/lsbaws_part2_http_response_explanation.png" /&gt;&lt;/p&gt;
&lt;p&gt;我还没有说过任何有关 &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt; 字典相关的信息，但是，基本上就是它是一个 Python 字典，它必须包含某些由 WSGI 规范所规定的 WSGI 和 CGI 变量。
解析完请求信息后，服务器从 HTTP 请求中得到这个字典所需的一些值。
这个字典看起来像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Environ Python Dictionary" src="/static/images/lsbaws-part2/lsbaws_part2_environ.png" /&gt;&lt;/p&gt;
&lt;p&gt;Web 框架使用来自这个字典里的信息来决定那个 view 可以被用来服务，基于获得的路由，请求方法等信息,
决定可以从哪里读取请求的 body 信息以及哪里可以用来写入错误信息，如果有的话。&lt;/p&gt;
&lt;p&gt;到目前为止，你已经创建了你自己的 WSGI Web 服务器，你也用不同的 Web 框架编写过 Web 应用了。同时，你也顺便创建过极其简陋的 Web 应用/Web 框架。
真是一个操蛋的旅程。让我们来重述一下为了服务一个针对 WSGI 应用的请求信息，你的 WSGI Web 框架需要做的事情：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;首先，服务器启动并载入一个由你的 Web 框架/应用所定义的 &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; 可调用对象&lt;/li&gt;
&lt;li&gt;然后，服务器读取一个请求&lt;/li&gt;
&lt;li&gt;然后，服务器解析这个请求&lt;/li&gt;
&lt;li&gt;然后，服务器用这个请求数据构建了一个 &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt; 字典&lt;/li&gt;
&lt;li&gt;然后，服务器以 &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt; 字典和一个 &lt;tt class="docutils literal"&gt;start_response&lt;/tt&gt; 可调用对象作为参数来调用 &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; 对象，并获得一个返回的响应 body 。&lt;/li&gt;
&lt;li&gt;然后，服务器用通过调用 &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; 对象获得的 body 数据以及通过 &lt;tt class="docutils literal"&gt;start_reponse&lt;/tt&gt; 可调用对象设置的状态信息和响应头信息一起构建了一个 HTTP 响应。&lt;/li&gt;
&lt;li&gt;最后，服务器把 HTTP 响应传输回客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Server Summary" src="/static/images/lsbaws-part2/lsbaws_part2_server_summary.png" /&gt;&lt;/p&gt;
&lt;p&gt;就这些了。你现在有了一个可以工作的 WSGI 服务器，它能够服务那些用 WSGI 兼容的 Web 框架（比如：&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, &lt;a class="reference external" href="http://trypyramid.com/"&gt;Pyramid&lt;/a&gt; 或者是你自己开发的 WSGI 框架) 开发的基础的 Web 应用。最棒的是不需要修改任何的服务器代码就可以与多个 Web 框架一起使用。目前看起来还不赖嘛。&lt;/p&gt;
&lt;p&gt;在你离开前，这里有另一个问题需要你思考，”如何让你的服务器能够在同一时刻处理多个请求？“&lt;/p&gt;
&lt;p&gt;敬请期待，在 &lt;a class="reference external" href="http://mozillazg.com/2015/08/let-us-build-a-web-server-part-3-zh-cn.html"&gt;第三部分&lt;/a&gt; 我将向你展示一种方法。加油！&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-06:2015/06/let-us-build-a-web-server-part-2-zh-cn.html</guid><category>let-us-build</category><category>server</category><category>http</category><category>wsgi</category><category>lsbaws</category><category>让我们一起来构建一个 Web 服务器</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3105：外面</title><link>https://mozillazg.com/2015/06/3105.outside.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3105/"&gt;Cyanide &amp;amp; Happiness #3105 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3105.outside.zh-cn.png" src="/static/images/comics/3105.outside.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;it's such a beautiful day!
nobody ever grows up
wishing they could
spend more time inside!   &lt;br /&gt;
多么美好的一天啊！
没人希望长大后花更多的时间呆在家里！&lt;/p&gt;
&lt;p&gt;but then...   &lt;br /&gt;
另一方面...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-05:2015/06/3105.outside.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3935：google 医生</title><link>https://mozillazg.com/2015/06/3935.googledoc.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3935/"&gt;Cyanide &amp;amp; Happiness #3935 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3935.googledoc.zh-cn.png" src="/static/images/comics/3935.googledoc.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what's wrong with me,
google doc?   &lt;br /&gt;
我出什么毛病了，谷歌医生？&lt;/p&gt;
&lt;p&gt;well, we got your result back.    &lt;br /&gt;
嗯，我们已经拿到你的结果了。&lt;/p&gt;
&lt;p&gt;there's 18,300,000 of them.   &lt;br /&gt;
共有 18,300,000 条。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-04:2015/06/3935.googledoc.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2299：表情</title><link>https://mozillazg.com/2015/06/2299.pullthisface.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2299/"&gt;Cyanide &amp;amp; Happiness #2299 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2299.pullthisface.zh-cn.png" src="/static/images/comics/2299.pullthisface.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;c'mon baby.
let's head back
to my place.      &lt;br /&gt;
快过来，宝贝。
让我们回到我的位置去。&lt;/p&gt;
&lt;p&gt;forget it. you're
a jerk and i am not
sleeping with you.    &lt;br /&gt;
没门。你这个混蛋，我不会跟你睡觉的。&lt;/p&gt;
&lt;p&gt;what if pull this face?   &lt;br /&gt;
如果我露出这个表情呢？&lt;/p&gt;
&lt;p&gt;hey guys, i-      &lt;br /&gt;
嘿，伙计，我——&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-03:2015/06/2299.pullthisface.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3207：笑话</title><link>https://mozillazg.com/2015/06/3207.seed.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3207/"&gt;Cyanide &amp;amp; Happiness #3207 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3207.seed.zh-cn.png" src="/static/images/comics/3207.seed.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what're you planting?     &lt;br /&gt;
你在种什么？&lt;/p&gt;
&lt;p&gt;the seed of doubt
怀疑的种子&lt;/p&gt;
&lt;p&gt;that's the worst
joke i've ever heard!     &lt;br /&gt;
这是我听过的最糟糕的笑话！&lt;/p&gt;
&lt;p&gt;or is it the best?    &lt;br /&gt;
也许是最好的笑话？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-03:2015/06/3207.seed.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>让我们一起来构建一个 Web 服务器（一）</title><link>https://mozillazg.com/2015/06/let-us-build-a-web-server-part-1-zh-cn.html</link><description>&lt;p&gt;本文译自：&lt;a class="reference external" href="http://ruslanspivak.com/lsbaws-part1/"&gt;http://ruslanspivak.com/lsbaws-part1/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有一天出去散步的时候，一个女人来到一处工地上，她看到有三个男人在工作。
她问第一个人，“你在做什么？“，第一个男人对这个问题感到非常的厌烦，
他大声的说到”你没看到我正在砌砖吗？“女人对这个答案不大满意，
她又去问第二个男人他在做什么。
第二个男人回答道，”我正在建造一面砖墙。”
然后，他把注意力转向了第一个男人，他说道，
“嘿，你只完成墙的尾部。你需要把最后那块砖拿掉。”
仍旧不满意这个答案，她又问第三个男人他在做什么。
这个男人边望着天边对他说，
”我正在建造世界上最大的教堂。“
当他站在这里仰望着天空的时候，另外两个男人开始争吵应该怎么放砖。
这个男人转向前面的两个男人并说道，
“嘿，伙计们，别担心那块砖了。那只是一块内墙，
它将会被涂平没人会看到那块砖。
只需移动到另一层。” &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这则故事的寓意是当你了解了整个系统并且理解了不同的部分是如何组合在一起的时候（砖，墙，教堂），
你就可以更快的识别和解决问题（不正确的砖）。&lt;/p&gt;
&lt;p&gt;对于从零开始创建我们自己的 Web server 来说需要做些什么呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我相信要成为一个优秀的开发者你必须更好的理解你日常使用的基础软件系统，包括编程语言，编译器，解释器，数据库和操作系统，web server 和 web 框架。同时，为了更深入的理解整个系统，必须从零开始，一块砖一面墙的重新构建它们&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;子曾经曰过：&lt;/p&gt;
&lt;blockquote&gt;
“我听到，我忘记。“&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="LSBAWS_confucius_hear.png" src="/static/images/lsbaws-part1/LSBAWS_confucius_hear.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
”我看到，我记住。“&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="LSBAWS_confucius_see.png" src="/static/images/lsbaws-part1/LSBAWS_confucius_see.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
”我做到，我理解。“&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="LSBAWS_confucius_do.png" src="/static/images/lsbaws-part1/LSBAWS_confucius_do.png" /&gt;&lt;/p&gt;
&lt;p&gt;此刻，我希望你能深信通过重新构建一个不同的软件系统来学习它们是如何工作的是一个好主意。&lt;/p&gt;
&lt;p&gt;在这三篇系列中我将向你展示如何构建你自己的基础的 Web server。让我们开始吧。&lt;/p&gt;
&lt;p&gt;先开始最重要的事情，什么是一个 Web server？&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSBAWS_HTTP_request_response.png" src="/static/images/lsbaws-part1/LSBAWS_HTTP_request_response.png" /&gt;&lt;/p&gt;
&lt;p&gt;一言以蔽之，它是一个物理服务器上的一个网络服务器（哎呀，一个服务器上的服务器）同时等待客户端发送一个请求。
当它接收到一个请求的时候，它将生成一个响应并把它发送回客户端。
客户端和服务器的通信方式是使用的 HTTP 协议。
客户端可以是你的浏览器或其他会说 HTTP 的任何软件。&lt;/p&gt;
&lt;p&gt;一个非常简单的 Web server 实现长什么样呢？我放了一个在这里。这个例子使用 Python 写的，但是就算你不懂 Python（它是个非常容易学习的语言，你可以试一下！）你也能够从下面的代码和解释中理解基本的概念：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;

&lt;span class="n"&gt;listen_socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Serving HTTP on port &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; ...&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen_socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="n"&gt;http_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;HTTP/1.1 200 OK&lt;/span&gt;

&lt;span class="s2"&gt;Hello, World!&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将上面的代码保存为 &lt;em&gt;webserver1.py&lt;/em&gt; 或者直接从 &lt;a class="reference external" href="https://github.com/rspivak/lsbaws/blob/master/part1/webserver1.py"&gt;GitHub&lt;/a&gt;  上下载下来，然后在命令行下像这样运行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python webserver1.py
Serving HTTP on port 8888 …
&lt;/pre&gt;
&lt;p&gt;现在在你浏览器的地址栏中输入如下链接 &lt;a class="reference external" href="http://localhost:8888/hello"&gt;http://localhost:8888/hello&lt;/a&gt; ，按回车键然后就可以看到魔法效果了。
你应该会看到在你的浏览器中显示 &amp;quot;Hello, World!” ，就像下面这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="browser_hello_world.png" src="/static/images/lsbaws-part1/browser_hello_world.png" /&gt;&lt;/p&gt;
&lt;p&gt;放手去做吧，说真的。当你在测试的时候我会等你的。&lt;/p&gt;
&lt;p&gt;做完了？非常好。现在让我们讨论一下它实际上是如何工作的。&lt;/p&gt;
&lt;p&gt;首先让我们从你输入的 Web 地址开始。它被叫做 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Uniform_resource_locator"&gt;URL&lt;/a&gt; ，下面是它的基本结构：&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSBAWS_URL_Web_address.png" src="/static/images/lsbaws-part1/LSBAWS_URL_Web_address.png" /&gt;&lt;/p&gt;
&lt;p&gt;这就是你如何告诉你的浏览器它需要用来查找和连接的 Web server 地址以及需要显示给你的位于服务器上的页面（路径）。
在你的浏览器发送一个 HTTP 请求前，它首先需要与 Web server 建立一条 TCP 连接。
然后再通过这个 TCP 连接发送一个 HTTP 请求到服务器，然后等待服务器发送回一个 HTTP 响应。
当你的浏览器接收到这个响应的时候，它就会显示它。
在这里它将显示 &amp;quot;Hello, World!&amp;quot;&lt;/p&gt;
&lt;p&gt;让我们更详细的探索一下客户端和服务器在发送 HTTP 请求和响应之前是如何建立一条 TCP 连接的。
为了达到这个目的，它们都使用了所谓的 sockets 。
为了代替浏览器直连，你可以通过在命令行上使用 telnet 命令的方式来手动模拟浏览器的行为。&lt;/p&gt;
&lt;p&gt;在你运行 Web server 的电脑上打开一个 telnet 会话，可以通过在命令行上输入 telent 并指定连接到 localhost 这个主机和 8888 这个端口，然后按下回车键：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ telnet localhost 8888
Trying 127.0.0.1 …
Connected to localhost.
&lt;/pre&gt;
&lt;p&gt;此刻，你已经与运行在你的本地机器上的准备发送和接收 HTTP 消息的服务器建立了一条 TCP 连接。
在下面的图片中你将看到一套标准的程序，服务器必须遵守这套程序以便能够接受新的 TCP 连接。&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSBAWS_socket.png" src="/static/images/lsbaws-part1/LSBAWS_socket.png" /&gt;&lt;/p&gt;
&lt;p&gt;在相同的 telnet 会话中输入 &lt;tt class="docutils literal"&gt;GET /hello HTTP/1.1&lt;/tt&gt; 然后按下回车键：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ telnet localhost 8888
Trying 127.0.0.1 …
Connected to localhost.
GET /hello HTTP/1.1

HTTP/1.1 200 OK
Hello, World!
&lt;/pre&gt;
&lt;p&gt;你刚刚手动模拟了你的浏览器！你发送了一个 HTTP 请求并收到了一个 HTTP 响应。
下面是一个基本的 HTTP 请求的结构：&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSBAWS_HTTP_request_anatomy.png" src="/static/images/lsbaws-part1/LSBAWS_HTTP_request_anatomy.png" /&gt;&lt;/p&gt;
&lt;p&gt;HTTP 请求包含了一个表示 HTTP 方法的行（GET, 因为我们要求我们的服务器返回我们一下东西），
路径 /hello 表示了服务器上一个我们需要的”页面“，以及协议版本。&lt;/p&gt;
&lt;p&gt;为了简单起见，我们的 Web server 在这里完全忽略了上面提到的请求行。
你可以用任何垃圾数据代替 ”GET /hello HTTP/1.1“，你依然可以得到一个内容为 ”Hello, World!“ 的响应。&lt;/p&gt;
&lt;p&gt;一旦你输入完请求行并按下回车键，客户端就会把请求发送到服务器，服务器读取请求行，打印出来，并返回合适的 HTTP 响应。&lt;/p&gt;
&lt;p&gt;下面是 server 发送回你的客户端(在这里是 telnet)的 HTTP 响应：&lt;/p&gt;
&lt;p&gt;&lt;img alt="LSBAWS_HTTP_response_anatomy.png" src="/static/images/lsbaws-part1/LSBAWS_HTTP_response_anatomy.png" /&gt;&lt;/p&gt;
&lt;p&gt;让我们来分析一下。响应包括一个状态行 &lt;tt class="docutils literal"&gt;HTTP/1.1&amp;nbsp; 200 OK&lt;/tt&gt;, 接下来是一个空行，然后是 HTTP 响应的 body 。&lt;/p&gt;
&lt;p&gt;response 状态行 &lt;tt class="docutils literal"&gt;HTTP/1.1 200 OK&lt;/tt&gt; 包括了 HTTP 版本，HTTP 状态码 以及 HTTP 状态码原因词组 OK。
当浏览器获取到响应时，它将显示响应的 body 部分，这就是为什么你能在你的浏览器中看到 “Hello, World!” 的原因。&lt;/p&gt;
&lt;p&gt;这就是一个 Web server 如何工作的基本模型了。总结一下： Web server 创建一个 socket 监听并开始在一个循环里接受新的连接。客户端启动一个 TCP 连接，成功建立连接之后客户端发送一个 HTTP 请求到 server ，然后 server 响应一个展示给用户的 HTTP response 。客户端和服务器都使用 socket 来建立 TCP 连接。&lt;/p&gt;
&lt;p&gt;现在你已经有一个非常基础的 Web server 了，你可以用你的浏览器或其他的 HTTP 客户端来测试它。
正如你见过的，如果想尝试的话你也可以通过使用 telent 手动输入 HTTP 请求的方式成为一个人肉 HTTP 客户端。&lt;/p&gt;
&lt;p&gt;有个问题要问你：“如何在你这个新鲜出炉的 Web server 上运行一个 Django 应用，
Flask 应用，以及 Pyramid 应用，并且不需要做任何的改动就可以适应这些不同的 Web 框架？”&lt;/p&gt;
&lt;p&gt;我将在 &lt;a class="reference external" href="http://mozillazg.com/2015/06/let-us-build-a-web-server-part-2-zh-cn.html"&gt;第二篇文章&lt;/a&gt; 中向你详细的讲解。敬请期待。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;灵感来自 &lt;a class="reference external" href="http://www.amazon.com/gp/product/0814420303/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0814420303&amp;amp;linkCode=as2&amp;amp;tag=russblo0b-20&amp;amp;linkId=HY2LNXTSGPPFZ2EV"&gt;Lead with a Story: A Guide to Crafting Business Narratives That Captivate, Convince, and Inspire&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 03 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-03:2015/06/let-us-build-a-web-server-part-1-zh-cn.html</guid><category>let-us-build</category><category>server</category><category>http</category><category>lsbaws</category><category>让我们一起来构建一个 Web 服务器</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3103：丑</title><link>https://mozillazg.com/2015/06/3103.ugly.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3103/"&gt;Cyanide &amp;amp; Happiness #3103 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3103.ugly.zh-cn.png" src="/static/images/comics/3103.ugly.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;your face is ugly!    &lt;br /&gt;
你的脸好丑！&lt;/p&gt;
&lt;p&gt;your face is uglier!      &lt;br /&gt;
你的脸更丑！&lt;/p&gt;
&lt;p&gt;oh yeah?      &lt;br /&gt;
哦，是吗？&lt;/p&gt;
&lt;p&gt;yeah!     &lt;br /&gt;
是的！&lt;/p&gt;
&lt;p&gt;mom?  &lt;br /&gt;
妈咪？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 02 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-02:2015/06/3103.ugly.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3943：害怕</title><link>https://mozillazg.com/2015/06/3943.fear.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3943/"&gt;Cyanide &amp;amp; Happiness #3943 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3943.fear.zh-cn.png" src="/static/images/comics/3943.fear.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what is your biggest
fear?     &lt;br /&gt;
你最害怕什么？&lt;/p&gt;
&lt;p&gt;hmm... i don't know.
how about you?    &lt;br /&gt;
唔... 我不知道。
你怎样？&lt;/p&gt;
&lt;p&gt;sure, i can be yours
if you want me to.    &lt;br /&gt;
当然可以，
我可以成为你最害怕的事物，
如果你想让我这么做的话。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-06-01:2015/06/3943.fear.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2325：五</title><link>https://mozillazg.com/2015/05/2325.Oh-damn,-that-was-AM,-too...-My-bad..zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2325/"&gt;Cyanide &amp;amp; Happiness #2325 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2325.Oh-damn,-that-was-AM,-too...-My-bad..zh-cn.png" src="/static/images/comics/2325.Oh-damn,-that-was-AM,-too...-My-bad..zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;mr. and mrs. jefferson,
we ran some tests and
there's something you need
to know.          &lt;br /&gt;
杰斐逊先生和太太，
我们做了一些测验，有些事情
你们需要知道。&lt;/p&gt;
&lt;p&gt;it appears as if your
son has a rare genetic disorder.
he probably won't live past five.     &lt;br /&gt;
看起来似乎你们的儿子得了一种罕见的遗传疾病。
他可能活不过五。&lt;/p&gt;
&lt;p&gt;he'll only live to be five
years old!? oh no!!   &lt;br /&gt;
他只能再活五年？哦，不！！&lt;/p&gt;
&lt;p&gt;no, no, no. he won't
live past five o'clock.   &lt;br /&gt;
不，不，不。他活不到五点钟。&lt;/p&gt;
&lt;p&gt;but... it's already 5:15.     &lt;br /&gt;
可是。。。现在已经五点十五分了。&lt;/p&gt;
&lt;p&gt;poke        &lt;/p&gt;
&lt;p&gt;hmm, guesss you're right.     &lt;br /&gt;
唔，我想你是对的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 31 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-31:2015/05/2325.Oh-damn,-that-was-AM,-too...-My-bad..zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1476：大力水手</title><link>https://mozillazg.com/2015/05/1476.sailorman.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1476/"&gt;Cyanide &amp;amp; Happiness #1476 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1476.sailorman.zh-cn.png" src="/static/images/comics/1476.sailorman.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey!! that
guy stole my wallet!!     &lt;br /&gt;
嘿！！那个家伙偷了我的钱包！！&lt;/p&gt;
&lt;p&gt;don't worry, i'll
eats me spinach!      &lt;br /&gt;
别担心，我将吃点吃菠菜！&lt;/p&gt;
&lt;p&gt;aren't you gonna
get him!?         &lt;br /&gt;
你不去追他！？&lt;/p&gt;
&lt;p&gt;i don't believes in
violence      &lt;br /&gt;
我不崇信暴力&lt;/p&gt;
&lt;p&gt;fucking vegetarians!      &lt;br /&gt;
该死的素食主义者！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-30:2015/05/1476.sailorman.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1342：没有你我没法活</title><link>https://mozillazg.com/2015/05/1342.cantlivewithoutyou.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1342/"&gt;Cyanide &amp;amp; Happiness #1342 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1342.cantlivewithoutyou.zh-cn.png" src="/static/images/comics/1342.cantlivewithoutyou.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;baby, i've been doing
a lot of thinking,
and i just realized
i can't survive without you.          &lt;br /&gt;
宝贝，经过深思熟虑后，我已经
意识到没有你我就没法活下去。&lt;/p&gt;
&lt;p&gt;is it because you love me?    &lt;br /&gt;
是因为你爱我吗？&lt;/p&gt;
&lt;p&gt;it's because you're
an organ donor.   &lt;br /&gt;
因为你是个器官捐赠者。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-29:2015/05/1342.cantlivewithoutyou.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3635：胡子</title><link>https://mozillazg.com/2015/05/3635.beard2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3635/"&gt;Cyanide &amp;amp; Happiness #3635 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3635.beard2.zh-cn.png" src="/static/images/comics/3635.beard2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-28:2015/05/3635.beard2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3937：坏男孩</title><link>https://mozillazg.com/2015/05/3937.badboys.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3937/"&gt;Cyanide &amp;amp; Happiness #3937 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3937.badboys.zh-cn.png" src="/static/images/comics/3937.badboys.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-26:2015/05/3937.badboys.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3938：我会救他</title><link>https://mozillazg.com/2015/05/3938.illsavehim.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3938/"&gt;Cyanide &amp;amp; Happiness #3938 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3938.illsavehim.zh-cn.png" src="/static/images/comics/3938.illsavehim.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;help, my son is
trapped in there!     &lt;br /&gt;
救命，我的儿子被困在里面了！&lt;/p&gt;
&lt;p&gt;i'll save him!
what's his favourite band?    &lt;br /&gt;
我会救他的！他最喜欢的乐队是哪个？&lt;/p&gt;
&lt;p&gt;uh, insane clown posse?   &lt;br /&gt;
呃， Insane Clown Posse 乐队？&lt;/p&gt;
&lt;p&gt;what are you doing?!      &lt;br /&gt;
你在做什么？！&lt;/p&gt;
&lt;p&gt;i'm saving him        &lt;br /&gt;
我正在救他&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-26:2015/05/3938.illsavehim.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3872：一团糟</title><link>https://mozillazg.com/2015/05/3872.shambles.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3872/"&gt;Cyanide &amp;amp; Happiness #3872 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3872.shambles.zh-cn.png" src="/static/images/comics/3872.shambles.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;that's it!        &lt;br /&gt;
够了！&lt;/p&gt;
&lt;p&gt;this economy is in shambles,
and i'm going to take
a stand!      &lt;br /&gt;
经济真是一团糟，我要去表明立场！&lt;/p&gt;
&lt;p&gt;lemonade      &lt;br /&gt;
柠檬水&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-24:2015/05/3872.shambles.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1559：最糟糕的一天</title><link>https://mozillazg.com/2015/05/1559.worstday.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1559/"&gt;Cyanide &amp;amp; Happiness #1559 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1559.worstday.zh-cn.png" src="/static/images/comics/1559.worstday.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 23 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-23:2015/05/1559.worstday.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3165：木材</title><link>https://mozillazg.com/2015/05/3165.lumber.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3165/"&gt;Cyanide &amp;amp; Happiness #3165 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3165.lumber.zh-cn.png" src="/static/images/comics/3165.lumber.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 23 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-23:2015/05/3165.lumber.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2082：尸体</title><link>https://mozillazg.com/2015/05/2082.deadbody.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2082/"&gt;Cyanide &amp;amp; Happiness #2082 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2082.deadbody.zh-cn.png" src="/static/images/comics/2082.deadbody.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;wanna see a dead body?    &lt;br /&gt;
想看一具尸体吗？&lt;/p&gt;
&lt;p&gt;sure!         &lt;br /&gt;
想啊！&lt;/p&gt;
&lt;p&gt;wait, isn't that your
girlfriend?   &lt;br /&gt;
等一下，那不是你的女朋友吗？&lt;/p&gt;
&lt;p&gt;wanna see some dead bodies?      &lt;br /&gt;
想看一些尸体吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 22 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-22:2015/05/2082.deadbody.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2175：进去</title><link>https://mozillazg.com/2015/05/2175.comeinside.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2175/"&gt;Cyanide &amp;amp; Happiness #2175 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2175.comeinside.zh-cn.png" src="/static/images/comics/2175.comeinside.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;son, it's time to come inside     &lt;br /&gt;
儿子，是时候进去了&lt;/p&gt;
&lt;p&gt;why don't you come inside yourself!?          &lt;br /&gt;
为什么你不自己进去！？&lt;/p&gt;
&lt;p&gt;if only i could, we wouldn't
be having this conversation       &lt;br /&gt;
要是我能进去的话，
我们就不会有这次谈话了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-21:2015/05/2175.comeinside.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1113：美好</title><link>https://mozillazg.com/2015/05/1113.good.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1113/"&gt;Cyanide &amp;amp; Happiness #1113 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1113.good.zh-cn.png" src="/static/images/comics/1113.good.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 20 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-20:2015/05/1113.good.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3379：那个</title><link>https://mozillazg.com/2015/05/3379.that.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3379/"&gt;Cyanide &amp;amp; Happiness #3379 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3379.that.zh-cn.png" src="/static/images/comics/3379.that.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-19:2015/05/3379.that.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3384：眼睛</title><link>https://mozillazg.com/2015/05/3384.eyes.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3384/"&gt;Cyanide &amp;amp; Happiness #3384 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3384.eyes.zh-cn.png" src="/static/images/comics/3384.eyes.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;have you met my kid?      &lt;br /&gt;
你见过我的孩子吗？&lt;/p&gt;
&lt;p&gt;he has my eyes！       &lt;br /&gt;
他有我的眼睛！&lt;/p&gt;
&lt;p&gt;i need them back        &lt;br /&gt;
我要把它们要回来&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-18:2015/05/3384.eyes.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3923：飞蛾</title><link>https://mozillazg.com/2015/05/3923.moth.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3923/"&gt;Cyanide &amp;amp; Happiness #3923 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3923.moth.zh-cn.png" src="/static/images/comics/3923.moth.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;why are moths
so mindlessly
attracted to something
that kills them?      &lt;br /&gt;
为什么飞蛾总是盲目的被
会杀死它们的事物所吸引？      &lt;br /&gt;
为什么飞蛾总是盲目的扑向那些会杀死它们的事物？&lt;/p&gt;
&lt;p&gt;they are so dumb.     &lt;br /&gt;
它们实在是太笨了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-17:2015/05/3923.moth.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3928：泰迪熊</title><link>https://mozillazg.com/2015/05/3928.teddybear.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3928/"&gt;Cyanide &amp;amp; Happiness #3928 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3928.teddybear.zh-cn.png" src="/static/images/comics/3928.teddybear.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;everyone's free,
is there anything else in
there, ma'am?     &lt;br /&gt;
所有人都得救了，女士，还有其他
东西在里面吗？&lt;/p&gt;
&lt;p&gt;i just want my teddy bear,
i've had him for 30 years     &lt;br /&gt;
我只想要我的泰迪熊，
它陪伴我有30年了&lt;/p&gt;
&lt;p&gt;i didn't know you
had a teedy bear      &lt;br /&gt;
我怎么不知道你有一个泰迪熊&lt;/p&gt;
&lt;p&gt;i lost it years ago,
i hope he finds it    &lt;br /&gt;
我在很多年前把它给弄丢了，
我希望他能帮我找到它&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 16 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-16:2015/05/3928.teddybear.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3915：出卖</title><link>https://mozillazg.com/2015/05/3915.crossed.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3915/"&gt;Cyanide &amp;amp; Happiness #3915 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3915.crossed.zh-cn.png" src="/static/images/comics/3915.crossed.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;judas! you double crossed me!         &lt;br /&gt;
犹大！你出卖了我！&lt;/p&gt;
&lt;p&gt;actually, that's this guy's job.   &lt;br /&gt;
事实上，这是这个家伙的工作。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-14:2015/05/3915.crossed.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2863：哈欠</title><link>https://mozillazg.com/2015/05/2863.yawn2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2863/"&gt;Cyanide &amp;amp; Happiness #2863 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2863.yawn2.zh-cn.png" src="/static/images/comics/2863.yawn2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-13:2015/05/2863.yawn2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #992：等一下</title><link>https://mozillazg.com/2015/05/992.wait.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/992/"&gt;Cyanide &amp;amp; Happiness #992 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="992.wait.zh-cn.png" src="/static/images/comics/992.wait.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;wait!
say grace, first!     &lt;br /&gt;
等一下！先做饭前祷告！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-13:2015/05/992.wait.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1462：手术</title><link>https://mozillazg.com/2015/05/1462.section.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1462/"&gt;Cyanide &amp;amp; Happiness #1462 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1462.section.zh-cn.png" src="/static/images/comics/1462.section.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;nurse! this one is
pregnant too!
we need to perform
another c section!        &lt;br /&gt;
护士！这位也怀孕了！
我们需要进行另一场破腹产手术！&lt;/p&gt;
&lt;p&gt;c section:
Cesarean section
破腹产术&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-12:2015/05/1462.section.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3922：我希望</title><link>https://mozillazg.com/2015/05/3922.i-wish.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3922/"&gt;Cyanide &amp;amp; Happiness #3922 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3922.i-wish.zh-cn.png" src="/static/images/comics/3922.i-wish.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i wish i were little cooler...        &lt;br /&gt;
我希望我是个小冰箱。。。&lt;/p&gt;
&lt;p&gt;maybe this beer can help...       &lt;br /&gt;
也许这些啤酒能帮。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-11:2015/05/3922.i-wish.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1315：皮带</title><link>https://mozillazg.com/2015/05/1315.leash.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1315/"&gt;Cyanide &amp;amp; Happiness #1315 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1315.leash.zh-cn.png" src="/static/images/comics/1315.leash.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what's wrong with you?
children don't belong on leashes.         &lt;br /&gt;
你发什么疯？不能用皮带拴着孩子。&lt;/p&gt;
&lt;p&gt;that's the worst parenting i've
ever seen!!
你是我见过的最差劲的父母！！&lt;/p&gt;
&lt;p&gt;worse than a father hanging his own son?      &lt;br /&gt;
比一个父亲绞死他的儿子更差劲？&lt;/p&gt;
&lt;p&gt;urk!  &lt;br /&gt;
呃！&lt;/p&gt;
&lt;p&gt;stop!! what are you doing?!?
停下来！！你在做什么！？&lt;/p&gt;
&lt;p&gt;yeah? worse than this?    &lt;br /&gt;
yeah？比这个更差劲？&lt;/p&gt;
&lt;p&gt;let him go!!  &lt;br /&gt;
让他下来！！&lt;/p&gt;
&lt;p&gt;leashes aren't so bad now, are they?      &lt;br /&gt;
现在皮带也不是那么差劲了是吧？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-10:2015/05/1315.leash.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>使用 wireshark 查看 tcpdump 的抓包结果</title><link>https://mozillazg.com/2015/05/open-tcpdump-result-with-wireshark-gui.html</link><description>&lt;p&gt;本文将讲解如何使用 wireshark 查看 tcpdump 的抓包结果&lt;/p&gt;
&lt;h2&gt;保存 tcpdump 抓包结果&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump -i eth0 -w dump.pcap
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; 指定要抓取的网卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; 指定结果保存位置&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -i eth0 -w dump.pcap -v
tcpdump: listening on eth0, link-type EN10MB &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;, capture size &lt;span class="m"&gt;65535&lt;/span&gt; bytes
Got 15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; 主要是为了得到 &lt;code&gt;Got 15&lt;/code&gt; 这个数，当想要停止的时候，按下 &lt;code&gt;ctrl + c&lt;/code&gt; 就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -i eth0 -w dump.pcap -v
tcpdump: listening on eth0, link-type EN10MB &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;, capture size &lt;span class="m"&gt;65535&lt;/span&gt; bytes
^C71 packets captured
&lt;span class="m"&gt;71&lt;/span&gt; packets received by filter
&lt;span class="m"&gt;0&lt;/span&gt; packets dropped by kernel
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后用 &lt;code&gt;sz&lt;/code&gt; 命令或其他方式把 dump.pcap 文件下载到本地：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sz dump.pcap
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在 wireshark 中打开&lt;/h2&gt;
&lt;p&gt;【file】—【open】选中 dump.pcap 文件就可以查看抓包结果了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="open.png" src="/static/images/tcpdump-wireshark/open.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="open2.png" src="/static/images/tcpdump-wireshark/open2.png" /&gt;&lt;/p&gt;
&lt;p&gt;顺便说一个查看 http 请求和响应的方法:&lt;/p&gt;
&lt;p&gt;&lt;img alt="view-http.png" src="/static/images/tcpdump-wireshark/view-http.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="http.png" src="/static/images/tcpdump-wireshark/http.png" /&gt;&lt;/p&gt;
&lt;h2&gt;其他 tcpdump 技巧&lt;/h2&gt;
&lt;p&gt;抓取本机进程发往指定端口的请求:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump dst port 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过滤 http 请求和响应:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 3sd.me and port 80 -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过滤 GET 请求:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 3sd.me and port 80 and &amp;#39;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过滤 POST 请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 3sd.me and port 80 and &amp;#39;tcp dst port 80 and (tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x504f5354)&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;-A&lt;/code&gt; 参数使返回值人类可读&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -A host 3sd.me and port &lt;span class="m"&gt;80&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420&amp;#39;&lt;/span&gt;
tcpdump: verbose output suppressed, use -v or -vv &lt;span class="k"&gt;for&lt;/span&gt; full protocol decode
listening on eth0, link-type EN10MB &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;, capture size &lt;span class="m"&gt;65535&lt;/span&gt; bytes
18:41:59.219052 IP xxx.xxx.xxx.xxxx &amp;gt; 3sd.me.http: Flags &lt;span class="o"&gt;[&lt;/span&gt;P.&lt;span class="o"&gt;]&lt;/span&gt;, seq 2875869606:2875869979, ack 2796606839, win 64240, length 373
E.....@.r..Gh..j..P....P.jI....wP....7..GET /JbVGP HTTP/1.1
Host: 3sd.me
Connection: Keep-Alive
User-Agent: Mozilla/5.0 &lt;span class="o"&gt;(&lt;/span&gt;Macintosh&lt;span class="p"&gt;;&lt;/span&gt; Intel Mac OS X 10.9&lt;span class="p"&gt;;&lt;/span&gt; rv:35.0&lt;span class="o"&gt;)&lt;/span&gt; Gecko/20100101 Firefox/35.0
Accept: text/html, application/xml&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.1
Accept-Language: en
Accept-Encoding: gzip, deflate
Referer: http://3sd.me/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多过滤规则请参考 https://wiki.wireshark.org/CaptureFilters&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.wireshark.org/CaptureFilters"&gt;https://wiki.wireshark.org/CaptureFilters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wireshark.org/docs/wsug_html_chunked/AppToolstcpdump.html"&gt;https://www.wireshark.org/docs/wsug_html_chunked/AppToolstcpdump.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wireshark.org/tools/string-cf.html"&gt;https://www.wireshark.org/tools/string-cf.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/site/jimmyxu101/testing/use-tcpdump-to-monitor-http-traffic"&gt;https://sites.google.com/site/jimmyxu101/testing/use-tcpdump-to-monitor-http-traffic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4777042/can-i-use-tcpdump-to-get-http-requests-response-header-and-response-body"&gt;http://stackoverflow.com/questions/4777042/can-i-use-tcpdump-to-get-http-requests-response-header-and-response-body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/252179/how-to-inspect-outgoing-http-requests-of-a-single-application"&gt;http://askubuntu.com/questions/252179/how-to-inspect-outgoing-http-requests-of-a-single-application&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-10:2015/05/open-tcpdump-result-with-wireshark-gui.html</guid><category>tcpdump</category><category>wireshark</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3919：为什么打他</title><link>https://mozillazg.com/2015/05/3919.woahwhy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3919/"&gt;Cyanide &amp;amp; Happiness #3919 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3919.woahwhy.zh-cn.png" src="/static/images/comics/3919.woahwhy.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;woah! why are you beating that guy?   &lt;br /&gt;
哇哦！你为什么打他？&lt;/p&gt;
&lt;p&gt;because i'm an undercover criminal.       &lt;br /&gt;
因为我是个卧底罪犯&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-09:2015/05/3919.woahwhy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]buttersafe：一直奔跑，永不停息</title><link>https://mozillazg.com/2015/05/2008-07-15-theguywhosalwaysrunningandneverstops.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2008/07/15/the-guy-whos-always-running-and-never-stops/"&gt;http://buttersafe.com/2008/07/15/the-guy-whos-always-running-and-never-stops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2008-07-15-theguywhosalwaysrunningandneverstops.zh-cn.png" src="/static/images/comics/2008-07-15-theguywhosalwaysrunningandneverstops.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-08:2015/05/2008-07-15-theguywhosalwaysrunningandneverstops.zh-cn.html</guid><category>buttersafe</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1373：汤</title><link>https://mozillazg.com/2015/05/1373.you-have-no-idea-how-tempted-i-was-to-draw-a-happy-face-on-the-poo.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1373/"&gt;Cyanide &amp;amp; Happiness #1373 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1373.you-have-no-idea-how-tempted-i-was-to-draw-a-happy-face-on-the-poo.zh-cn.png" src="/static/images/comics/1373.you-have-no-idea-how-tempted-i-was-to-draw-a-happy-face-on-the-poo.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-06:2015/05/1373.you-have-no-idea-how-tempted-i-was-to-draw-a-happy-face-on-the-poo.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]buttersafe：水坑</title><link>https://mozillazg.com/2015/05/2015-05-05-thepuddle.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/05/05/the-puddle/"&gt;http://buttersafe.com/2015/05/05/the-puddle/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-05-05-thepuddle.zh-cn.png" src="/static/images/comics/2015-05-05-thepuddle.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-06:2015/05/2015-05-05-thepuddle.zh-cn.html</guid><category>buttersafe</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3334：酒鬼</title><link>https://mozillazg.com/2015/05/3334.The-smoke-monster-was-just-an-overwhelming-desire-for-weed.-Say-no-to-drugs,-kids.-LOST..zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3334/"&gt;Cyanide &amp;amp; Happiness #3334 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3334.The-smoke-monster-was-just-an-overwhelming-desire-for-weed.-Say-no-to-drugs,-kids.-LOST..zh-cn.png" src="/static/images/comics/3334.The-smoke-monster-was-just-an-overwhelming-desire-for-weed.-Say-no-to-drugs,-kids.-LOST..zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-05:2015/05/3334.The-smoke-monster-was-just-an-overwhelming-desire-for-weed.-Say-no-to-drugs,-kids.-LOST..zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2024：主意</title><link>https://mozillazg.com/2015/05/2024.idea.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2024/"&gt;Cyanide &amp;amp; Happiness #2024 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2024.idea.zh-cn.png" src="/static/images/comics/2024.idea.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-03:2015/05/2024.idea.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2170：午饭</title><link>https://mozillazg.com/2015/05/2170.lunch.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2170/"&gt;Cyanide &amp;amp; Happiness #2170 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2170.lunch.zh-cn.png" src="/static/images/comics/2170.lunch.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;that does it!
if you won't give me
your lunch money...         &lt;br /&gt;
够了！如果你不把你的午饭钱给我的话。。。&lt;/p&gt;
&lt;p&gt;i'll feed you a knuckle sandwich   &lt;br /&gt;
我将饱你一顿老拳&lt;/p&gt;
&lt;p&gt;ahhhhhhhhhh!              &lt;br /&gt;
啊啊啊啊啊啊！&lt;/p&gt;
&lt;p&gt;ahhh-                     &lt;br /&gt;
啊啊啊——&lt;/p&gt;
&lt;p&gt;mmm!          &lt;br /&gt;
唔唔唔！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-03:2015/05/2170.lunch.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3912：什么时间</title><link>https://mozillazg.com/2015/05/3912.whattime.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3912/"&gt;Cyanide &amp;amp; Happiness #3912 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3912.whattime.zh-cn.png" src="/static/images/comics/3912.whattime.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what time is it?      &lt;br /&gt;
现在是什么时间？&lt;/p&gt;
&lt;p&gt;pizz time!    &lt;br /&gt;
披萨时间！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-02:2015/05/3912.whattime.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3335：单身</title><link>https://mozillazg.com/2015/05/3335.singles.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3335/"&gt;Cyanide &amp;amp; Happiness #3335 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3335.singles.zh-cn.png" src="/static/images/comics/3335.singles.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-01:2015/05/3335.singles.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3908：你应该</title><link>https://mozillazg.com/2015/05/3908.you-should.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3908/"&gt;Cyanide &amp;amp; Happiness #3908 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3908.you-should.zh-cn.png" src="/static/images/comics/3908.you-should.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i can't solve this
magic eye.    &lt;br /&gt;
我应付不了这个魔幻眼睛。&lt;/p&gt;
&lt;p&gt;you should see a doctor.      &lt;br /&gt;
你应该去看医生。&lt;/p&gt;
&lt;p&gt;i wish i could date someone
with lots of money.   &lt;br /&gt;
我希望我能跟高富帅约会。&lt;/p&gt;
&lt;p&gt;you should see a doctor.          &lt;br /&gt;
你应该去看医生。&lt;/p&gt;
&lt;p&gt;i think there's a lump on
my testicle   &lt;br /&gt;
我觉得我的睾丸上有个肿块&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-01:2015/05/3908.you-should.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>解决通过 ifttt 把 Feed 中的图片转发到 twritter 时，总是出现 "image not found" 的问题</title><link>https://mozillazg.com/2015/05/fix-ifttt-feed-image-not-found.html</link><description>&lt;p&gt;之前使用 ifttt 把 Feed 中的图片转发到 twritter 时，总是出现 "image not found"。然后就不再使用 ifttt 转发图片了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image not found" src="/static/images/ifttt-image-not-found.png" /&gt;&lt;/p&gt;
&lt;p&gt;趁着今天给 &lt;a href="http://comic.mozillazg.com"&gt;comic.mozillazg.com&lt;/a&gt; 增加 Atom Feed 的功能的时候，研究了一下 ifttt 获取图片的规则。通过搜索后得知，ifttt 只会从文章内容的开头位置获取图片地址，如果获取不到的话，就 "image not found":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- bad: &amp;quot;image not found&amp;quot;  --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;content&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;译自：http://explosm.net/comics/3908/&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; AT 2015-05-01 &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://tmp-images.qiniudn.com/comics/3908.you-should.zh-cn.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cyanide &amp;amp; Happiness #3908：你应该&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- good --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;content&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://tmp-images.qiniudn.com/comics/3908.you-should.zh-cn.png&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cyanide &amp;amp; Happiness #3908：你应该&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;译自：http://explosm.net/comics/3908/&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; AT 2015-05-01 &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ifttt/status/372166382172925952"&gt;https://twitter.com/ifttt/status/372166382172925952&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="Excerpthttps://winwar.co.uk/2015/02/include-wordpress-posts-featured-image-rss-feed-excerpt/"&gt;How To Include Your WordPress Post’s Featured Image in a RSS Feed Excerpt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-05-01:2015/05/fix-ifttt-feed-image-not-found.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #2731：吵醒</title><link>https://mozillazg.com/2015/04/2731.wake.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2731/"&gt;Cyanide &amp;amp; Happiness #2731 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2731.wake.zh-cn.png" src="/static/images/comics/2731.wake.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;aaaaaaaaaaaaaaaaaaa
GGGGGGGGGGGGGGGG
HHHHHHHHHHHHHHHHHHHHH!!!          &lt;br /&gt;
啊啊啊啊啊啊啊啊啊啊啊啊！！！&lt;/p&gt;
&lt;p&gt;sorry to wake you.
i had a bad dream.
go back to sleep.         &lt;br /&gt;
抱歉吵醒了你。
我做恶梦了。
继续睡吧。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-30:2015/04/2731.wake.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3911：电锯</title><link>https://mozillazg.com/2015/04/3911.trapped.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3911/"&gt;Cyanide &amp;amp; Happiness #3911 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3911.trapped.zh-cn.png" src="/static/images/comics/3911.trapped.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;oh no! my legs are trapped under
a tree, and all i have is my chainsaw!        &lt;br /&gt;
哦，不！我的腿被压在树下了，但是，我身边只有一把电锯！&lt;/p&gt;
&lt;p&gt;i guess the solution here is pretty obvious.      &lt;br /&gt;
我想解决办法已经非常明显了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-29:2015/04/3911.trapped.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1288：流浪汉</title><link>https://mozillazg.com/2015/04/1288.reunion.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1288/"&gt;Cyanide &amp;amp; Happiness #1288 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1288.reunion.zh-cn.png" src="/static/images/comics/1288.reunion.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-28:2015/04/1288.reunion.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3050：感冒</title><link>https://mozillazg.com/2015/04/3050.cold.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3050/"&gt;Cyanide &amp;amp; Happiness #3050 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3050.cold.zh-cn.png" src="/static/images/comics/3050.cold.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you look like hell!
are you okay?     &lt;br /&gt;
你看起来很糟糕！
你还好吧？&lt;/p&gt;
&lt;p&gt;i have a cold         &lt;br /&gt;
我感冒了&lt;/p&gt;
&lt;p&gt;really? well, don't
get me sick! hahaha!      &lt;br /&gt;
真的吗？不要传染给我！哈哈哈！&lt;/p&gt;
&lt;p&gt;heh heh...
嘿，嘿。。。&lt;/p&gt;
&lt;p&gt;get away!     &lt;br /&gt;
走开！&lt;/p&gt;
&lt;p&gt;cure me!      &lt;br /&gt;
救我！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-28:2015/04/3050.cold.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3909：10个月</title><link>https://mozillazg.com/2015/04/3909.10months.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3909/"&gt;Cyanide &amp;amp; Happiness #3909 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3909.10months.zh-cn.png" src="/static/images/comics/3909.10months.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;is that your little girl?     &lt;br /&gt;
这是你的小女孩？&lt;/p&gt;
&lt;p&gt;she sure is!
she just turned 10 months old!    &lt;br /&gt;
当然是啦！
她刚满10个月！&lt;/p&gt;
&lt;p&gt;she's so cute!        &lt;br /&gt;
她实在是太可爱了！&lt;/p&gt;
&lt;p&gt;she means the world to me...          &lt;br /&gt;
她是我的整个世界。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-28:2015/04/3909.10months.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1275：睡觉</title><link>https://mozillazg.com/2015/04/1275.comicjason2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1275/"&gt;Cyanide &amp;amp; Happiness #1275 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1275.comicjason2.zh-cn.png" src="/static/images/comics/1275.comicjason2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-26:2015/04/1275.comicjason2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2449：梦</title><link>https://mozillazg.com/2015/04/2449.dream.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2449/"&gt;Cyanide &amp;amp; Happiness #2449 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2449.dream.zh-cn.png" src="/static/images/comics/2449.dream.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;ew... i pissed the bed?       &lt;br /&gt;
呃。。。我尿床了？&lt;/p&gt;
&lt;p&gt;thank god! it was all just a dream        &lt;br /&gt;
谢天谢地！这只是个梦&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 24 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-24:2015/04/2449.dream.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #814：风筝</title><link>https://mozillazg.com/2015/04/814.kite2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/814/"&gt;Cyanide &amp;amp; Happiness #814 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="814.kite2.zh-cn.png" src="/static/images/comics/814.kite2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 23 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-23:2015/04/814.kite2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2808：大脚怪</title><link>https://mozillazg.com/2015/04/2808.comicsasquatch1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2808/"&gt;Cyanide &amp;amp; Happiness #2808 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2808.comicsasquatch1.zh-cn.png" src="/static/images/comics/2808.comicsasquatch1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;is that a sasquatch?      &lt;br /&gt;
那是个大脚怪吗？&lt;/p&gt;
&lt;p&gt;nope, it's a sass-quatch          &lt;br /&gt;
不是，那是个粗鲁怪&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-22:2015/04/2808.comicsasquatch1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3273：最胖的人</title><link>https://mozillazg.com/2015/04/3273.fattestperson.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3273/"&gt;Cyanide &amp;amp; Happiness #3273 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3273.fattestperson.zh-cn.png" src="/static/images/comics/3273.fattestperson.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i wonder who the fattest person in the world is.          &lt;br /&gt;
我想知道谁是世界上最胖的人。&lt;/p&gt;
&lt;p&gt;your mom.     &lt;br /&gt;
你妈妈。&lt;/p&gt;
&lt;p&gt;i mean outside of my mom.     &lt;br /&gt;
我的意思是除我妈妈外。&lt;/p&gt;
&lt;p&gt;no one is outside of your mom.        &lt;br /&gt;
除了你妈妈就没别人了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-21:2015/04/3273.fattestperson.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[python]修复 python-gearman 出现 Received non-binary arguments 错误</title><link>https://mozillazg.com/2015/04/fix-python-gearman-raise-received-non-binary-arguments-errors.html</link><description>&lt;p&gt;今天第一次使用 python-gearman 就出现了 &lt;tt class="docutils literal"&gt;Received &lt;span class="pre"&gt;non-binary&lt;/span&gt; arguments&lt;/tt&gt; 错误。&lt;/p&gt;
&lt;p&gt;下面重现一下错误，当传入的 task_name 参数类型是 unicode 时就会报错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
client.submit_job(u&amp;quot;task1&amp;quot;)  # error: Received non-binary arguments
&lt;/pre&gt;
&lt;p&gt;查看源码后发现，是因为 gearman client submit_job 的 task name 不支持 unicode, 把参数类型改成 str 或 bytes 就可以了：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
client.submit_job(b&amp;quot;task1&amp;quot;)  # ok
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Yelp/python-gearman/blob/740a23f20f39f0f0d557e25afe998e56cc72a9bf/gearman/protocol.py#L246"&gt;python-gearman/protocol.py at 740a23f20f39f0f0d557e25afe998e56cc72a9bf · Yelp/python-gearman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-20:2015/04/fix-python-gearman-raise-received-non-binary-arguments-errors.html</guid></item><item><title>[postgreqsql] 处理 date_trunc 函数的时区问题</title><link>https://mozillazg.com/2015/04/postgresql-dealing-date_trunc-function-with-timezone.html</link><description>&lt;p&gt;前几天使用 &lt;code&gt;date&lt;/code&gt; 函数计算天数的时候遇到了时区问题。&lt;/p&gt;
&lt;p&gt;默认情况下如果数据库里存的是 UTC 时间的话，计算的是 UTC 时间的 &lt;code&gt;day&lt;/code&gt;。
由于我们需要的最终结果是北京时间，所以需要在计算 &lt;code&gt;day&lt;/code&gt; 的时候指定时区：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# before
date_trunc(&amp;#39;day&amp;#39;, posted_at)
# after
date_trunc(&amp;#39;day&amp;#39;, posted_at::TIMESTAMPTZ AT TIME ZONE &amp;#39;+08:00&amp;#39;::INTERVAL)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;http://www.postgresql.org/docs/9.4/static/functions-datetime.html&lt;/li&gt;
&lt;li&gt;http://brendankemp.com/essays/dealing-with-time-zones-using-rails-and-postgres/&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-20:2015/04/postgresql-dealing-date_trunc-function-with-timezone.html</guid><category>postgresql</category></item><item><title>[译][漫]Buttersafe：黑暗骑士归来</title><link>https://mozillazg.com/2015/04/2015-04-14-thedimknightreturns.zh-cn.html</link><description>&lt;p&gt;译自： &lt;a href="http://buttersafe.com/2015/04/14/the-dim-knight-returns/"&gt;http://buttersafe.com/2015/04/14/the-dim-knight-returns/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-04-14-thedimknightreturns.zh-cn.png" src="/static/images/comics/2015-04-14-thedimknightreturns.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;everybody, run!!
it's the batman!!     &lt;br /&gt;
大家快跑！！是蝙蝠侠！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-19:2015/04/2015-04-14-thedimknightreturns.zh-cn.html</guid><category>Buttersafe</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2776：尴尬</title><link>https://mozillazg.com/2015/04/2776.well.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2776/"&gt;Cyanide &amp;amp; Happiness #2776 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2776.well.zh-cn.png" src="/static/images/comics/2776.well.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-18:2015/04/2776.well.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3240：把水变成酒</title><link>https://mozillazg.com/2015/04/3240.waterintowine.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3240/"&gt;Cyanide &amp;amp; Happiness #3240 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3240.waterintowine.zh-cn.png" src="/static/images/comics/3240.waterintowine.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;behold, i have turned water into wine.    &lt;br /&gt;
看好了，我已经把水变成酒了。&lt;/p&gt;
&lt;p&gt;yeah? well i can turn wine into urine.    &lt;br /&gt;
是吗？我能把酒变成尿。&lt;/p&gt;
&lt;p&gt;that was really fast!     &lt;br /&gt;
这可真是快啊！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-18:2015/04/3240.waterintowine.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2898：上班族</title><link>https://mozillazg.com/2015/04/2898.office-worker.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2898/"&gt;Cyanide &amp;amp; Happiness #2898 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2898.office-worker.zh-cn.png" src="/static/images/comics/2898.office-worker.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-17:2015/04/2898.office-worker.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3896：MOD</title><link>https://mozillazg.com/2015/04/3896.mods.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3896/"&gt;Cyanide &amp;amp; Happiness #3896 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3896.mods.zh-cn.png" src="/static/images/comics/3896.mods.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i finally did it! i got
those body mods i told you about!     &lt;br /&gt;
我终于做到了！我得到了之前告诉过你的那些人体 MOD！&lt;/p&gt;
&lt;p&gt;i dont't see them     &lt;br /&gt;
我没看见&lt;/p&gt;
&lt;p&gt;are you blind?    &lt;br /&gt;
你眼瞎了吗？&lt;/p&gt;
&lt;p&gt;yes   &lt;br /&gt;
是的&lt;/p&gt;
&lt;p&gt;i modded my body so i don't
have to look at them      &lt;br /&gt;
我改造了我的身体这样我就不需要看到它们了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-14:2015/04/3896.mods.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1555：肿瘤</title><link>https://mozillazg.com/2015/04/1555.tumor.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1555/"&gt;Cyanide &amp;amp; Happiness #1555 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1555.tumor.zh-cn.png" src="/static/images/comics/1555.tumor.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;the bad news is: the tumor will kill you.      &lt;br /&gt;
坏消息是：这个肿瘤会要了你的命。&lt;/p&gt;
&lt;p&gt;the good news is: it's filled with chocolates.     &lt;br /&gt;
好消息是：它里面满满的都是巧克力。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-12:2015/04/1555.tumor.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1934：航天飞机</title><link>https://mozillazg.com/2015/04/1934.spaceshuttle.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1934/"&gt;Cyanide &amp;amp; Happiness #1934 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1934.spaceshuttle.zh-cn.png" src="/static/images/comics/1934.spaceshuttle.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i see london, i see france!   &lt;br /&gt;
我看到伦敦了，我看到法国了！&lt;/p&gt;
&lt;p&gt;well that's easy when you're in a
space shuttle!    &lt;br /&gt;
当你在航天飞机上时，这是非常容易的事情！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-12:2015/04/1934.spaceshuttle.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Buttersafe：黑暗骑士</title><link>https://mozillazg.com/2015/04/2015-04-07-thedimknight.zh-cn.html</link><description>&lt;p&gt;译自： &lt;a href="http://buttersafe.com/2015/04/07/the-dim-knight/"&gt;http://buttersafe.com/2015/04/07/the-dim-knight/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-04-07-thedimknight.zh-cn.png" src="/static/images/comics/2015-04-07-thedimknight.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;everybody, run!!
it's the batman!!     &lt;br /&gt;
大家快跑！！是蝙蝠侠！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-12:2015/04/2015-04-07-thedimknight.zh-cn.html</guid><category>Buttersafe</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2186：被困</title><link>https://mozillazg.com/2015/04/2186.trapped.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2186/"&gt;Cyanide &amp;amp; Happiness #2186 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2186.trapped.zh-cn.png" src="/static/images/comics/2186.trapped.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;are we trapped inside here?   &lt;br /&gt;
我们被困在这里面了吗？&lt;/p&gt;
&lt;p&gt;i can't be stuck here forever!
i'm claustrophobic!   &lt;br /&gt;
我不能永远被困在这里！我有幽闭恐怖症！&lt;/p&gt;
&lt;p&gt;calm yourself, you worrypuss!         &lt;br /&gt;
冷静下来，你这个担惊受怕的小猫咪！&lt;/p&gt;
&lt;p&gt;i know this place like
the back of my pimps hand     &lt;br /&gt;
我对这个地方就像对妓院老板的手背一样熟&lt;/p&gt;
&lt;p&gt;我对这个地方非常的熟&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-12:2015/04/2186.trapped.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3892：防卫</title><link>https://mozillazg.com/2015/04/3892.defense.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3892/"&gt;Cyanide &amp;amp; Happiness #3892 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3892.defense.zh-cn.png" src="/static/images/comics/3892.defense.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hahaha, you use both straps
on your schoolbag?    &lt;br /&gt;
哈哈哈，你把所有的带子都用在你的书包上了？&lt;/p&gt;
&lt;p&gt;actually, it's defense mechanism      &lt;br /&gt;
事实上，它是个防卫武器&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-12:2015/04/3892.defense.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3796：全家福</title><link>https://mozillazg.com/2015/04/3796.drew.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3796/"&gt;Cyanide &amp;amp; Happiness #3796 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3796.drew.zh-cn.png" src="/static/images/comics/3796.drew.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;mommy! i drew a picture
of our family!    &lt;br /&gt;
妈咪！我画了一张全家福！&lt;/p&gt;
&lt;p&gt;oh wow! good job!     &lt;br /&gt;
噢，哇！非常棒！&lt;/p&gt;
&lt;p&gt;i'll hang it on the
fridge for daddy to see
when he's home from work!     &lt;br /&gt;
我会把它挂在冰箱上以便爹地下班回来后能够看到它！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-11:2015/04/3796.drew.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3884：两步舞</title><link>https://mozillazg.com/2015/04/3884.doggin.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3884/"&gt;Cyanide &amp;amp; Happiness #3884 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3884.twostep.zh-cn.gif" src="/static/images/comics/3884.twostep.zh-cn.gif" /&gt;&lt;/p&gt;
&lt;p&gt;you gotta help me, man.
i think i'm addicted to
doing the two-step.           &lt;br /&gt;
哥们，你必须帮帮我。我觉得我对两步舞上瘾了。&lt;/p&gt;
&lt;p&gt;don't worry. i signed you up for a twelve step program.         &lt;br /&gt;
别担心，我给你报的是十二步舞。&lt;/p&gt;
&lt;p&gt;that sounds amazing.      &lt;br /&gt;
听起来很棒的样子。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-09:2015/04/3884.doggin.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3777：小狗</title><link>https://mozillazg.com/2015/04/3777.doggin.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3777/"&gt;Cyanide &amp;amp; Happiness #3777 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3777.doggin.zh-cn.png" src="/static/images/comics/3777.doggin.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;who's a good boy!?
who's my lil baby?    &lt;br /&gt;
谁是好男孩！？谁是我的小宝贝？&lt;/p&gt;
&lt;p&gt;i feel like that dog gets more attention
than i do, and you just give me stuff
to do to keep me occupied         &lt;br /&gt;
我觉得那个狗比我获得了更多的关注，你应该给点事情给我做让我不会闲着&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-08:2015/04/3777.doggin.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>comic.mozillazg.com 上线</title><link>https://mozillazg.com/2015/04/comic.mozillazg.com-is-online.html</link><description>&lt;p&gt;&lt;a href="http://comic.mozillazg.com"&gt;http://comic.mozillazg.com&lt;/a&gt;  已于昨日正式上线。&lt;/p&gt;
&lt;p&gt;这个网站将用于展示我翻译的一些漫画。&lt;/p&gt;
&lt;p&gt;下面说一下这个网站所使用的技术：&lt;/p&gt;
&lt;p&gt;前端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go：编程语言&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bmizerany/pat"&gt;pat&lt;/a&gt;： Go HTTP Router 包&lt;/li&gt;
&lt;li&gt;PostgreSQL：数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部署：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervisor：进程管理/监控&lt;/li&gt;
&lt;li&gt;nginx：反向代理/负载均衡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源代码： &lt;a href="https://github.com/mozillazg/comic"&gt;https://github.com/mozillazg/comic&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 07 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-07:2015/04/comic.mozillazg.com-is-online.html</guid></item><item><title>[go] 如何为 HTTP Server 增加 HTTP Basic Auth</title><link>https://mozillazg.com/2015/04/go-add-http-basic-auth-for-http-server.html</link><description>&lt;p&gt;一句话总结就是：增加一个装饰器函数 &lt;tt class="docutils literal"&gt;BasicAuth&lt;/tt&gt; 装饰需要被保护的函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;bytes&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;encoding/base64&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;io&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ViewFunc&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;BasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;ViewFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwd&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ViewFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;basicAuthPrefix&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Basic &amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;// 获取 request header&lt;/span&gt;
        &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// 如果是 http basic auth&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HasPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;basicAuthPrefix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 解码认证信息&lt;/span&gt;
            &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StdEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DecodeString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;basicAuthPrefix&lt;/span&gt;&lt;span class="p"&gt;):],&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SplitN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class="nx"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// 执行被装饰的函数&lt;/span&gt;
                    &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 认证失败，提示 401 Unauthorized&lt;/span&gt;
        &lt;span class="c1"&gt;// Restricted 可以改成其他的值&lt;/span&gt;
        &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WWW-Authenticate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;`Basic realm=&amp;quot;Restricted&amp;quot;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// 401 状态码&lt;/span&gt;
        &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 需要被保护的内容&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;HelloServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello, world!\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// 装饰需要保护的 handler&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BasicAuth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HelloServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Listen :8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ListenAndServe: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;效果&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;未输入用户名和密码的情况下，提示未认证：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; ~$ curl -i http://127.0.0.1:8000/hello&lt;/span&gt;
&lt;span class="go"&gt;HTTP/1.1 401 Unauthorized&lt;/span&gt;
&lt;span class="go"&gt;Www-Authenticate: Basic realm=&amp;quot;Restricted&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;Date: Mon, 06 Apr 2015 11:56:10 GMT&lt;/span&gt;
&lt;span class="go"&gt;Content-Length: 0&lt;/span&gt;
&lt;span class="go"&gt;Content-Type: text/plain; charset=utf-8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入用户名和密码，显示被保护的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt; ~$ curl -i --user &amp;quot;foo:bar&amp;quot; http://127.0.0.1:8000/hello&lt;/span&gt;
&lt;span class="go"&gt;HTTP/1.1 200 OK&lt;/span&gt;
&lt;span class="go"&gt;Date: Mon, 06 Apr 2015 11:56:23 GMT&lt;/span&gt;
&lt;span class="go"&gt;Content-Length: 14&lt;/span&gt;
&lt;span class="go"&gt;Content-Type: text/plain; charset=utf-8&lt;/span&gt;

&lt;span class="go"&gt;hello, world!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;参考资料&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://godoc.org/net/http"&gt;https://godoc.org/net/http&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/rfc2617#section-2"&gt;http://tools.ietf.org/html/rfc2617#section-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/12701085/what-is-the-realm-in-basic-authentication"&gt;http://stackoverflow.com/questions/12701085/what-is-the-realm-in-basic-authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 27 Aug 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-07:2015/04/go-add-http-basic-auth-for-http-server.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1782：怀孕</title><link>https://mozillazg.com/2015/04/1782.depressing-week3pt3.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1782/"&gt;Cyanide &amp;amp; Happiness #1782 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1782.depressing-week3pt3.zh-cn.png" src="/static/images/comics/1782.depressing-week3pt3.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you poor woman!
let's get you to someplace warm...        &lt;br /&gt;
可怜的女人！让我带你去温暖的地方吧。。。&lt;/p&gt;
&lt;p&gt;good news, honey!
i am pregnant!    &lt;br /&gt;
好消息，亲爱的！我怀孕了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-06:2015/04/1782.depressing-week3pt3.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1783</title><link>https://mozillazg.com/2015/04/1783.im-a-texan-myself-so-its-okay-please-dont-kill-me.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1783/"&gt;Cyanide &amp;amp; Happiness #1783 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1783.im-a-texan-myself-so-its-okay-please-dont-kill-me.zh-cn.png" src="/static/images/comics/1783.im-a-texan-myself-so-its-okay-please-dont-kill-me.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;dad, who won the mexican-american
war? america or mexico?       &lt;br /&gt;
爹地，那一方赢了美墨战争？美国还是墨西哥？&lt;/p&gt;
&lt;p&gt;well, who ended up with texas?    &lt;br /&gt;
嗯，谁最后用德克萨斯州结束了战争？&lt;/p&gt;
&lt;p&gt;so mexico won?    &lt;br /&gt;
这么说来是墨西哥赢了？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-06:2015/04/1783.im-a-texan-myself-so-its-okay-please-dont-kill-me.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1853</title><link>https://mozillazg.com/2015/04/1853.hardcore.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1853/"&gt;Cyanide &amp;amp; Happiness #1853 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1853.hardcore.zh-cn.png" src="/static/images/comics/1853.hardcore.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;too hardcore for this world.
这个世界实在是太重口了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-06:2015/04/1853.hardcore.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3887：好人</title><link>https://mozillazg.com/2015/04/3887.good2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3887/"&gt;Cyanide &amp;amp; Happiness #3887 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3887.good2.zh-cn.png" src="/static/images/comics/3887.good2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what's got you down, little guy?      &lt;br /&gt;
小伙子，什么事情让你这么低落？&lt;/p&gt;
&lt;p&gt;my friend died the other day...   &lt;br /&gt;
我的朋友几天前去世了。。。&lt;/p&gt;
&lt;p&gt;oh no... i'm sorry to hear that.      &lt;br /&gt;
噢，不。。。对于这件事我感到非常的遗憾。&lt;/p&gt;
&lt;p&gt;you know, only the good die young.    &lt;br /&gt;
你知道的，只有好人才会不长命。&lt;/p&gt;
&lt;p&gt;yeah, you're right!   &lt;br /&gt;
是啊，你说的没错！&lt;/p&gt;
&lt;p&gt;now give me all of your money!    &lt;br /&gt;
现在，把你身上所有的钱都交给我！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-04:2015/04/3887.good2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1473：小丑</title><link>https://mozillazg.com/2015/04/1473.clown.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1473/"&gt;Cyanide &amp;amp; Happiness #1473 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1473.clown.zh-cn.png" src="/static/images/comics/1473.clown.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, strobel wants to know if we wanna-       &lt;br /&gt;
嘿，斯特罗贝尔想知道我们是否想——&lt;/p&gt;
&lt;p&gt;hahahaha!!!       &lt;br /&gt;
哈哈哈哈哈哈哈！！！&lt;/p&gt;
&lt;p&gt;dude... he has clown syndrome.    &lt;br /&gt;
哥们。。。他有小丑综合症。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-03:2015/04/1473.clown.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1998：结果</title><link>https://mozillazg.com/2015/04/1998.comicconclusions3.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1998/"&gt;Cyanide &amp;amp; Happiness #1998 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1998.comicconclusions3.zh-cn.png" src="/static/images/comics/1998.comicconclusions3.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;check out my magical pencil!      &lt;br /&gt;
快来看我的魔法笔！&lt;/p&gt;
&lt;p&gt;wow! what can you draw with it?   &lt;br /&gt;
哇！你能用它画什么呢？&lt;/p&gt;
&lt;p&gt;conclusions!          &lt;br /&gt;
结局！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-03:2015/04/1998.comicconclusions3.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1347：掩护我</title><link>https://mozillazg.com/2015/04/1347.soldier.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1347/"&gt;Cyanide &amp;amp; Happiness #1347 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1347.soldier.zh-cn.png" src="/static/images/comics/1347.soldier.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;cover me!!    &lt;br /&gt;
掩护我！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-01:2015/04/1347.soldier.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1350：彩虹</title><link>https://mozillazg.com/2015/04/1350.rainbow.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1350/"&gt;Cyanide &amp;amp; Happiness #1350 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1350.rainbow.zh-cn.png" src="/static/images/comics/1350.rainbow.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i wonder what's at
the end of the rainbow.   &lt;br /&gt;
我很好奇彩虹的末端有什么？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-01:2015/04/1350.rainbow.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3031：太特殊了</title><link>https://mozillazg.com/2015/04/3031.Too-specific.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3031/"&gt;Cyanide &amp;amp; Happiness #3031 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3031.Too-specific.zh-cn.png" src="/static/images/comics/3031.Too-specific.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i dont konw how to say
this, but... i can't see you anymore.     &lt;br /&gt;
我不知道该怎么说这件事。。。我再也看不见你了。&lt;/p&gt;
&lt;p&gt;are you still there?      &lt;br /&gt;
你还在那里吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-01:2015/04/3031.Too-specific.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[django]通过自定义 aggregate 的方式让 Count 支持 SQL 函数</title><link>https://mozillazg.com/2015/04/django-let-count-support-sql-expression-through-custom-aggregates-on-django-1.8.html</link><description>&lt;p&gt;本文的代码是基于 Django 1.8 的，可能并不适用于其他版本的 Django 。&lt;/p&gt;
&lt;p&gt;默认情况下 &lt;tt class="docutils literal"&gt;Count&lt;/tt&gt; 并不支持 SQL 函数，比如 &lt;cite&gt;count(date(field_name))&lt;/cite&gt; 。
下面将讲述通过自定义 aggregate 的方式让 count 支持 SQL 函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.aggregates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IntegerField&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CountWithFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(function)s&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="si"&gt;%(distinct)s%(expression)s&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;expression&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;pk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DISTINCT &amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;output_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CountWithFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date(created_at)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# == SELECT name, COUNT(DISTINCT date(created_at)) AS count FROM event GROUP BY name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/django/django/blob/1.8c1/django/db/models/aggregates.py"&gt;django/aggregates.py at 1.8c1 · django/django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://coder.cl/2011/09/custom-aggregates-on-django/"&gt;custom aggregates on django | coder . cl（其他版本可以参考这个）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-04-01:2015/04/django-let-count-support-sql-expression-through-custom-aggregates-on-django-1.8.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #2233：棍棒</title><link>https://mozillazg.com/2015/03/2233.sticks.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2233/"&gt;Cyanide &amp;amp; Happiness #2233 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2233.sticks.zh-cn.png" src="/static/images/comics/2233.sticks.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you're ugly!      &lt;br /&gt;
你是个丑八怪！&lt;/p&gt;
&lt;p&gt;sticks and stones will
break my bones...       &lt;br /&gt;
棍棒和石头能够伤害我的骨头。。。&lt;/p&gt;
&lt;p&gt;but words will never hurt me      &lt;br /&gt;
但是，言语永远也无法伤害我&lt;/p&gt;
&lt;p&gt;you're also stupid    &lt;br /&gt;
你还是个蠢蛋&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-30:2015/03/2233.sticks.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2979：应该</title><link>https://mozillazg.com/2015/03/2979.should.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2979/"&gt;Cyanide &amp;amp; Happiness #2979 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2979.should.zh-cn.png" src="/static/images/comics/2979.should.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hello, there!     &lt;br /&gt;
嗨，这里！&lt;/p&gt;
&lt;p&gt;you should vote for me!   &lt;br /&gt;
你应该把票投给我！&lt;/p&gt;
&lt;p&gt;no! you should vote for me!!!     &lt;br /&gt;
不！你应该把票投给我！！！&lt;/p&gt;
&lt;p&gt;i will improve your quality of life   &lt;br /&gt;
我会提高你的生活质量！&lt;/p&gt;
&lt;p&gt;i'll eat your kids to death!!     &lt;br /&gt;
我会吃掉你的孩子！！&lt;/p&gt;
&lt;p&gt;hmmm...   &lt;br /&gt;
唔唔唔。。。&lt;/p&gt;
&lt;p&gt;hmmm...   &lt;br /&gt;
唔唔唔。。。&lt;/p&gt;
&lt;p&gt;hmmmmmmmmmmm      &lt;br /&gt;
唔唔唔唔唔唔唔唔唔&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-29:2015/03/2979.should.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2983：飞镖</title><link>https://mozillazg.com/2015/03/2983.comicdarts1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2983/"&gt;Cyanide &amp;amp; Happiness #2983 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2983.comicdarts1.zh-cn.png" src="/static/images/comics/2983.comicdarts1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you need a 180 to win     &lt;br /&gt;
你需要一个 180 分才能赢&lt;/p&gt;
&lt;p&gt;a 180?    &lt;br /&gt;
180 分？&lt;/p&gt;
&lt;p&gt;yup   &lt;br /&gt;
是的&lt;/p&gt;
&lt;p&gt;thunk!!   &lt;br /&gt;
锵！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-29:2015/03/2983.comicdarts1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[windows]修复 ShrewSoft VPN 客户端连接时出现 negotiation timout occurred 错误</title><link>https://mozillazg.com/2015/03/fix-shrewsoft-vpn-client-connect-error-negotiation-timout-occurred.html</link><description>&lt;p&gt;错误信息如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;client configured
local id configured
remote id configured
pre-shared key configured
bringing up tunnel ...
negotiation timout occurred   &amp;lt;---- here
tunnel disabled
detached from key daemon
attached to key daemon ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法：使用管理员身份运行 cmd ，输入 &lt;code&gt;netsh wlan set hostednetwork mode=disallow&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:\WINDOWS\system32&amp;gt;netsh wlan set hostednetwork mode=disallow
The hosted network mode has been set to disallow.
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-29:2015/03/fix-shrewsoft-vpn-client-connect-error-negotiation-timout-occurred.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3016：邮箱</title><link>https://mozillazg.com/2015/03/3016.mailbox.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3016/"&gt;Cyanide &amp;amp; Happiness #3016 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3016.mailbox.zh-cn.png" src="/static/images/comics/3016.mailbox.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;see that mailbox way over there?      &lt;br /&gt;
看到那边那个邮箱了吗？&lt;/p&gt;
&lt;p&gt;yeah.     &lt;br /&gt;
嗯。&lt;/p&gt;
&lt;p&gt;i bet i could beat you over there!    &lt;br /&gt;
我打赌我能在那边打败你！&lt;/p&gt;
&lt;p&gt;you're on!    &lt;br /&gt;
一言为定！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-27:2015/03/3016.mailbox.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3877：标准键盘</title><link>https://mozillazg.com/2015/03/3877.qwertyiop-2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3877/"&gt;Cyanide &amp;amp; Happiness #3877 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3877.qwertyiop-2.zh-cn.png" src="/static/images/comics/3877.qwertyiop-2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;did you bring the ouija board
so we can contact my dad?     &lt;br /&gt;
你有带来通灵板吗？这样我们就能联系到我爹地了。&lt;/p&gt;
&lt;p&gt;even better, i brought a qwerty board     &lt;br /&gt;
这里有更好的，我带来了一块标准键盘板&lt;/p&gt;
&lt;p&gt;dad? are you here?    &lt;br /&gt;
爹地？你在吗？&lt;/p&gt;
&lt;p&gt;"4 -0- 4."&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-27:2015/03/3877.qwertyiop-2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[python]如何在生产环境下更新 tornado 项目代码</title><link>https://mozillazg.com/2015/03/how-to-restart-or-update-tornado-code-on-fly-in-production.html</link><description>&lt;p&gt;本文将讲述一种在线上环境下更新 tornado 项目代码的方法。&lt;/p&gt;
&lt;p&gt;一般 tornado HTTP 服务都类似下面这样的：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;用 nginx 做反向代理、负载均衡和静态文件服务器&lt;/li&gt;
&lt;li&gt;同时起多个 tornado 进程服务多个端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设配置文件如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
upstream tornado_server {
    server 127.0.0.1:5001;
}
&lt;/pre&gt;
&lt;p&gt;线上重启 tornado 服务的思路如下：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;更新代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;使用不同的端口启动新的 tornado 服务: &lt;cite&gt;start tornado_5002&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;更改 nginx 配置，将新端口加入到配置中，降低旧服务端口的权重:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
upstream tornado_server {
    server 127.0.0.1:5001;   # old
    server 127.0.0.1:5002 weight=9;   # add new
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;应用新的 nginx 配置（注意看是否有错误提示）: &lt;cite&gt;nginx -t &amp;amp;&amp;amp; nginx -s reload&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;一段时间后，更新 nginx 配置，删除/注释掉旧服务的端口配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
upstream tornado_server {
    # server 127.0.0.1:5001;      # remove old
    server 127.0.0.1:5002;             # new
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;应用新的 nginx 配置（注意看是否有错误提示）: &lt;cite&gt;nginx -t &amp;amp;&amp;amp; nginx -s reload&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;一段时间后，停止旧的 tornado 服务: &lt;cite&gt;stop tornado_5001&lt;/cite&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tornadoweb.org/en/stable/guide/running.html"&gt;Running and deploying —— Tornado documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html"&gt;Module ngx_http_upstream_module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nginx.org/en/docs/switches.html"&gt;nginx command-line parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/8086885/is-there-a-way-to-deploy-new-code-with-tornado-python-without-restarting-the-ser"&gt;Is there a way to deploy new code with Tornado/Python without restarting the server? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-27:2015/03/how-to-restart-or-update-tornado-code-on-fly-in-production.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3008：心脏病发作</title><link>https://mozillazg.com/2015/03/3008.heartattack.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3008/"&gt;Cyanide &amp;amp; Happiness #3008 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3008.heartattack.zh-cn.png" src="/static/images/comics/3008.heartattack.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what's wrong?     &lt;br /&gt;
怎么了？&lt;/p&gt;
&lt;p&gt;my uncle died of a heart attack.      &lt;br /&gt;
我叔叔因为心脏病发作去世了。&lt;/p&gt;
&lt;p&gt;jeez, i'm sorry. my heart goes out
to your family.   &lt;br /&gt;
天哪，真是遗憾。对你们家的遭遇我感同身受。&lt;/p&gt;
&lt;p&gt;really coulda used that yesterday.    &lt;br /&gt;
这句话昨天已经用过了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-26:2015/03/3008.heartattack.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译] Peewee 快速上手</title><link>https://mozillazg.com/2015/03/peewee-quickstart-zh-cn.html</link><description>&lt;p&gt;本文译自：&lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/quickstart.html"&gt;http://docs.peewee-orm.com/en/latest/peewee/quickstart.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下为译文：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: 如果你需要一个更详实的例子的话，可以参考使用 peewee 和 Flask 框架的一个教程： &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/example.html#example-app"&gt;创建一个 twitter 风格的 web app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我 &lt;strong&gt;强烈&lt;/strong&gt; 推荐你打开一个解释器 shell 会话并运行本文的代码。这种方式可以让你直观的感受到查询操作的效果。&lt;/p&gt;
&lt;div class="section" id="model"&gt;
&lt;h2 id="hidmodel"&gt;定义 Model&lt;a class="headerlink" href="#hidmodel" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Model 类，Field 以及 model 实例与数据库的对应关系如下：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="40%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Thing&lt;/th&gt;
&lt;th class="head"&gt;Corresponds to...&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Model 类&lt;/td&gt;
&lt;td&gt;数据库表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Field 实例&lt;/td&gt;
&lt;td&gt;数据库表字段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Model 实例&lt;/td&gt;
&lt;td&gt;数据库表一行数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一般在项目中使用 peewee 的时候都会需要定义一个或多个 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model"&gt;Model&lt;/a&gt; 类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;peewee&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SqliteDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;people.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;is_relative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;  &lt;span class="c1"&gt;# 此 model 使用 &amp;quot;people.db&amp;quot; 数据库。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: 你可能注意到了我们使用 &lt;tt class="docutils literal"&gt;Person&lt;/tt&gt; 而不是 &lt;tt class="docutils literal"&gt;People&lt;/tt&gt; 命名我们的 model。
这里有一个你应该遵守的约定——尽管这个表将会包含多个 people，但是我们总是使用 &lt;strong&gt;单数名词&lt;/strong&gt; 来命名类名。&lt;/p&gt;
&lt;p&gt;这里有一些用来指定数据存储类型的 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/models.html#fields"&gt;field types&lt;/a&gt; . Peewee 会知道将 pythonic 结果转换为数据库识别的数据，所以你可以放心的在你的代码中使用 Python 类型。&lt;/p&gt;
&lt;p&gt;在 peewee 中定义 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Foreign_key"&gt;外键关系&lt;/a&gt; 也是非常的容易的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ForeignKeyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;animal_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;  &lt;span class="c1"&gt;# 此 model 使用 &amp;quot;people.db&amp;quot; 数据库。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们已经定义了一下 model 了，下面可以连接数据库了。
虽然没必要显示的打开连接，但是这是一个好的习惯，因为它能立即暴露数据库库连接相关的各种错误，而不是在其他某个时候执行第一次查询操作的时候才被发现。
同样的在你处理完以后显示的关闭连接也是一个好的习惯——比如，一个 web app 可能会在接收到一个请求时打开连接，然后再它发送响应的时候关闭连接。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面我们将创建用于存储数据的表结构。下面的操作将创建相关的列，索引，sequences 以及外键约束：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_tables&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;存储数据&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;让我们在数据库里存一些 people 数据。可以使用 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model.save"&gt;save&lt;/a&gt; 和 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model.create"&gt;create&lt;/a&gt; 方法来添加和更新 people 记录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uncle_bob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;birthday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1960&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;is_relative&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uncle_bob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# bob 现在已经存到数据库里了&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: 当你调用 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model.save"&gt;save&lt;/a&gt; 方法时，将返回生效的记录行数。&lt;/p&gt;
&lt;p&gt;你也可以通过调用 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model.create"&gt;create&lt;/a&gt; 方法来添加一个 person, 它将返回一个 model 实例。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;grandma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Grandma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;birthday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1935&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;is_relative&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;herb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Herb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;birthday&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1950&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;is_relative&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了更新一行数据，只需修改 model 实例然后调用 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model.save"&gt;save&lt;/a&gt; 方法保存变更就可以了。下面我们将更改 Grandma 的名字然后把变更保存到数据中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;grandma&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Grandma L.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;grandma&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 更新数据库中 grandma 的名字&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们现在在数据库里已经有 3 个人了。让我们给他们一些 pet. grandma 不喜欢在房间里有动物，因此她一点也不想要， 但是 Herb 非常喜欢动物：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bob_kitty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;uncle_bob&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Kitty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;herb_fido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;herb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;herb_mittens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;herb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mittens&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;herb_mittens_jr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;herb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mittens Jr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;animal_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;过了很长一段时间后， Mittens 生病去世了。 我们需要把他从数据库中移除掉：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;herb_mittens&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 他有个非常棒的人生&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model.delete_instance"&gt;delete_instance()&lt;/a&gt; 的返回值是被从数据库中移除的数据的总行数。&lt;/p&gt;
&lt;p&gt;Uncle Bob 觉得太多的动物会弄脏 Herb 的屋子，因此他收养了 Fido：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;herb_fido&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uncle_bob&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;herb_fido&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bob_fido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;herb_fido&lt;/span&gt;  &lt;span class="c1"&gt;# 为了更明确，我们重命名了变量&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;检索数据&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面讲解如何通过查询的方式检索数据。关系型数据库非常适合进行特定的查询操作。&lt;/p&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;获取单条记录&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;让我们从数据库中检索 Grandma 的数据。使用 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#SelectQuery.get"&gt;SelectQuery.get()&lt;/a&gt; 从数据库中获取单条记录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;grandma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Grandma L.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们也可以使用简便的 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#Model.get"&gt;Model.get()&lt;/a&gt; 来实现相同的功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;grandma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Grandma L.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3 id="hidid11"&gt;罗列记录&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;列出数据库中所有的 people 记录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_relative&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;Grandma&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;Herb&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让我们列出所有的猫以及他们主人的名字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animal_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Kitty&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;
&lt;span class="n"&gt;Mittens&lt;/span&gt; &lt;span class="n"&gt;Jr&lt;/span&gt; &lt;span class="n"&gt;Herb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上一个查询里有一个问题：因为我们访问了 &lt;tt class="docutils literal"&gt;pet.owner.name&lt;/tt&gt; 但是我们并没有在我们原始的查询中包含这个值，
为了获取该 pet 的所有者，peewee 将执行一次额外的查询。这种行为将导致名为 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/querying.html#nplusone"&gt;N + 1&lt;/a&gt; 的问题，并且通常情况下应该避免这种问题。&lt;/p&gt;
&lt;p&gt;我们可以通过同时查询 Pet 和 Person 以及增加一个 join 的方式来避免这个额外的查询。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animal_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Kitty&lt;/span&gt; &lt;span class="n"&gt;Bob&lt;/span&gt;
&lt;span class="n"&gt;Mittens&lt;/span&gt; &lt;span class="n"&gt;Jr&lt;/span&gt; &lt;span class="n"&gt;Herb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让我们列出所有者是 Bob 的 pet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Kitty&lt;/span&gt;
&lt;span class="n"&gt;Fido&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们能做的另一个非常酷的事情是获取 bob 所拥有的 pet. 因为我们已经有了一个表示 Bob 的对象，所以我们可以用下面的代码来实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;uncle_bob&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以通过增加一个 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#SelectQuery.order_by"&gt;order_by()&lt;/a&gt; 语句的方式来确保它们是按字母顺序排序的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;uncle_bob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Fido&lt;/span&gt;
&lt;span class="n"&gt;Kitty&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让我们按从年幼到年长的顺序列出所有的 people:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="mi"&gt;1960&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;Herb&lt;/span&gt; &lt;span class="mi"&gt;1950&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;
&lt;span class="n"&gt;Grandma&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;1935&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在让我们列出所有的 people 以及他们各自的 pet 的一些信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pets&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;    &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animal_type&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
    &lt;span class="n"&gt;Kitty&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
    &lt;span class="n"&gt;Fido&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;
&lt;span class="n"&gt;Grandma&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
&lt;span class="n"&gt;Herb&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
    &lt;span class="n"&gt;Mittens&lt;/span&gt; &lt;span class="n"&gt;Jr&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们又一次遇到了 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/querying.html#nplusone"&gt;N + 1&lt;/a&gt; 查询的问题。我们可以通过执行 一个 JOIN 以及聚合记录的方式来避免这个问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subquery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subquery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pet_count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JOIN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LEFT_OUTER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aggregate_rows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   &lt;span class="c1"&gt;#  注意是调用的 `aggregate_rows()` 方法。&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pet_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pets&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;    &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animal_type&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
     &lt;span class="n"&gt;Kitty&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
     &lt;span class="n"&gt;Fido&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;
&lt;span class="n"&gt;Grandma&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
&lt;span class="n"&gt;Herb&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
     &lt;span class="n"&gt;Mittens&lt;/span&gt; &lt;span class="n"&gt;Jr&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尽管我们单独创建了一个子查询，但是实际上 &lt;strong&gt;只执行了一条&lt;/strong&gt; 查询语句。&lt;/p&gt;
&lt;p&gt;最后，让我们再做一个复杂的查询。让我们列出所有生日满足如下条件的 people:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1940 之前(grandma)&lt;/li&gt;
&lt;li&gt;1959 之后(bob)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d1940&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1940&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d1960&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1960&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d1940&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;d1960&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Bob&lt;/span&gt; &lt;span class="mi"&gt;1960&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;Grandma&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;1935&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面让我们找出生日在 1940 到 1960 之间的 people:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d1940&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;d1960&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;birthday&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Herb&lt;/span&gt; &lt;span class="mi"&gt;1950&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一个查询。这次将使用 SQL 函数的方式找出名称以大写或小写 G 开头的所有 people:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Grandma&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们以及处理完数据库了，让我们关闭连接吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所有其他的 SQL 子句也都是可用的，比如：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#SelectQuery.group_by"&gt;group_by()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#SelectQuery.having"&gt;having()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#SelectQuery.limit"&gt;limit()&lt;/a&gt; 和 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/api.html#SelectQuery.offset"&gt;offset()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看文档中的 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/querying.html#querying"&gt;Querying&lt;/a&gt; 获取更多的信息。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h2 id="hidid20"&gt;作用于已存在的数据库&lt;a class="headerlink" href="#hidid20" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果你已经拥有了一个数据库，你可以使用 &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/playhouse.html#pwiz"&gt;pwiz, a model generator.&lt;/a&gt; 自动生成 peewee models。
比如，我有一个名字叫 charles_blog 的 postgresql 数据库，我就可以这样运行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python -m pwiz -e postgresql charles_blog &amp;gt; blog_models.py
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;h2 id="hidid22"&gt;下一步？&lt;a class="headerlink" href="#hidid22" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这里的内容只是用于快速上手。 如果你想找一个更完整的 web app 的示例的话，可以看一下  &lt;a class="reference external" href="http://docs.peewee-orm.com/en/latest/peewee/example.html#example-app"&gt;Example app&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-26:2015/03/peewee-quickstart-zh-cn.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3010：所有</title><link>https://mozillazg.com/2015/03/3010.all.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3010/"&gt;Cyanide &amp;amp; Happiness #3010 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3010.all.zh-cn.png" src="/static/images/comics/3010.all.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;die! die! all of you die!     &lt;br /&gt;
死!死！你们都去死吧！&lt;/p&gt;
&lt;p&gt;this is what you get for making
fun of me at school for years!    &lt;br /&gt;
这就是你们这些年在学校里拿我开玩笑的后果！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-25:2015/03/3010.all.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2999：忧桑漫画周——海滩</title><link>https://mozillazg.com/2015/03/2999.dcw-thebeach.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2999/"&gt;Cyanide &amp;amp; Happiness #2999 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2999.dcw-thebeach.zh-cn.png" src="/static/images/comics/2999.dcw-thebeach.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;dad! i'm ready to
go to the beach!      &lt;br /&gt;
爹地！我准备好去海滩了！&lt;/p&gt;
&lt;p&gt;dad?      &lt;br /&gt;
爹地？&lt;/p&gt;
&lt;p&gt;dad, c'mon!   &lt;br /&gt;
爹地，快点啦！&lt;/p&gt;
&lt;p&gt;hrrngh.       &lt;br /&gt;
唔。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-24:2015/03/2999.dcw-thebeach.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1827：谋杀</title><link>https://mozillazg.com/2015/03/1827.murder.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1827/"&gt;Cyanide &amp;amp; Happiness #1827 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1827.murder.zh-cn.png" src="/static/images/comics/1827.murder.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;fur is murder!    &lt;br /&gt;
毛皮就是谋杀！&lt;/p&gt;
&lt;p&gt;that's not a coat.
that's his fur.   &lt;br /&gt;
那不是外套，那就是它的毛。&lt;/p&gt;
&lt;p&gt;oh dang. i'm sorry   &lt;br /&gt;
哦，该死。我很抱歉&lt;/p&gt;
&lt;p&gt;what color is that?
candy apple red?  &lt;br /&gt;
那是什么颜色？靓丽的苹果红？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-22:2015/03/1827.murder.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1847：瞪眼</title><link>https://mozillazg.com/2015/03/1847.contest.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1847/"&gt;Cyanide &amp;amp; Happiness #1847 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1847.contest.zh-cn.gif" src="/static/images/comics/1847.contest.zh-cn.gif" /&gt;&lt;/p&gt;
&lt;p&gt;you blinked! i
win the staring contest!      &lt;br /&gt;
你眨眼了！我赢得了瞪眼比赛！&lt;/p&gt;
&lt;p&gt;you're damn right i blinked!      &lt;br /&gt;
你说的没错我确实眨眼了！&lt;/p&gt;
&lt;p&gt;i'd beat you in a
blinking contest any day!     &lt;br /&gt;
我会在其他时候的眨眼比赛中打败你！&lt;/p&gt;
&lt;p&gt;you're on!    &lt;br /&gt;
一言为定！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-22:2015/03/1847.contest.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3058：噢，不</title><link>https://mozillazg.com/2015/03/3058.Oh-no.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3058/"&gt;Cyanide &amp;amp; Happiness #3058 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3058.Oh-no.zh-cn.png" src="/static/images/comics/3058.Oh-no.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-22:2015/03/3058.Oh-no.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1242</title><link>https://mozillazg.com/2015/03/1242.depressingweek2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1242/"&gt;Cyanide &amp;amp; Happiness #1242 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1242.depressingweek2.zh-cn.png" src="/static/images/comics/1242.depressingweek2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;when i grow up i'm going to
be a doctor, or an astronaut,
or maybe even the president!      &lt;br /&gt;
当我长大后，我要成为一名医生，或者宇航员，甚至有可能是总统！&lt;/p&gt;
&lt;p&gt;hello, welcome to walmart...          &lt;br /&gt;
您好，欢迎来到沃尔玛。。。&lt;/p&gt;
&lt;p&gt;god doesn't exist     &lt;br /&gt;
上帝并不存在&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-21:2015/03/1242.depressingweek2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1239</title><link>https://mozillazg.com/2015/03/1239.dcw2_icecream.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1239/"&gt;Cyanide &amp;amp; Happiness #1239 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1239.dcw2_icecream.zh-cn.png" src="/static/images/comics/1239.dcw2_icecream.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-19:2015/03/1239.dcw2_icecream.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3717</title><link>https://mozillazg.com/2015/03/3717.friendship.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3717/"&gt;Cyanide &amp;amp; Happiness #3717 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3717.friendship.zh-cn.png" src="/static/images/comics/3717.friendship.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;wait, stop... i'm sorry...
i'm just worried about
our friendship.   &lt;br /&gt;
等一下，快停下来。。。我很抱歉。。。我只是担心我们的友谊。&lt;/p&gt;
&lt;p&gt;this isn't going to make things
weird... is it?   &lt;br /&gt;
这样不会让事情变得很奇怪。。。是吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-19:2015/03/3717.friendship.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1244</title><link>https://mozillazg.com/2015/03/1244.dcw_phonecall.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1244/"&gt;Cyanide &amp;amp; Happiness #1244 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1244.dcw_phonecall.zh-cn.png" src="/static/images/comics/1244.dcw_phonecall.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey this is ricky. leave a message. &lt;em&gt;BEEEEP&lt;/em&gt;      &lt;br /&gt;
嘿，我是里基。请留言。&lt;em&gt;嘟嘟嘟&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;hey rick... it's me. it's your father. you there?     &lt;br /&gt;
嘿，里基。。。是我。你爸爸。你在那里吗？&lt;/p&gt;
&lt;p&gt;we haven't talked in a long time. i just
wanted to say i'm sorry for all the wasted years.     &lt;br /&gt;
我们有一段时间没说话了。我只想告诉你对于之前浪费的那些年我感到非常的抱歉。&lt;/p&gt;
&lt;p&gt;i... i just got back from the 
doctor and... i don't have
much time left. please answer.    &lt;br /&gt;
我。。。我刚从医生那里回来。。。我没多少时间可活了。请回应。&lt;/p&gt;
&lt;p&gt;i don't... i don't expect
you to forgive me. i just
want to hear your voice.
please...     &lt;br /&gt;
我不。。。我不奢望你能原谅我。我只是想听到你的声音。请。。。&lt;/p&gt;
&lt;p&gt;i guess you're not there.
please call me back. i love
you, son. please call me. &lt;br /&gt;
我猜你应该不在那里。请给我回电话。我爱你，儿子。请给我打电话。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;click&lt;/em&gt;
&lt;em&gt;咔哒&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-18:2015/03/1244.dcw_phonecall.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1259</title><link>https://mozillazg.com/2015/03/1259.inspace.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1259/"&gt;Cyanide &amp;amp; Happiness #1259 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1259.inspace.zh-cn.png" src="/static/images/comics/1259.inspace.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 18 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-18:2015/03/1259.inspace.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[django]修复使用 QueryDict 时出现 “UnicodeEncodeError” 错误的问题</title><link>https://mozillazg.com/2015/03/django-fix-QueryDict-raise-UnicodeEncodeError.html</link><description>&lt;p&gt;当给 QueryDict 传入一个 unicode 字符串的时候会出现 “UnicodeEncoderError” 错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http.request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QueryDict&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;a=&lt;/span&gt;&lt;span class="si"&gt;%E&lt;/span&gt;&lt;span class="s1"&gt;4%BD%A0&lt;/span&gt;&lt;span class="si"&gt;%E&lt;/span&gt;&lt;span class="s1"&gt;5%A5%BD&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;QueryDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;UnicodeEncodeError&lt;/span&gt;                        &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e865795305d5&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;QueryDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;/.../&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;328&lt;/span&gt;                                         &lt;span class="n"&gt;keep_blank_values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="mi"&gt;329&lt;/span&gt;                 &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt;                     &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;331&lt;/span&gt;                 &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;UnicodeDecodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="mi"&gt;332&lt;/span&gt;                     &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iso-8859-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;/.../&lt;/span&gt;&lt;span class="n"&gt;encodings&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;utf_8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;14&lt;/span&gt; 
     &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utf_8_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;17&lt;/span&gt; 
     &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IncrementalEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IncrementalEncoder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

&lt;span class="ne"&gt;UnicodeEncodeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;codec&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t encode characters in position 0-5: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从异常信息中我们可以发现，出现异常时因为 request.py 中尝试执行 &lt;code&gt;decode&lt;/code&gt; 操作，
但是我们传递的是一个 unicode 编码的字符串所以就报错了。传递一个 str 字符串就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [4]: s
Out[4]: u&amp;#39;a=%E4%BD%A0%E5%A5%BD&amp;#39;

In [5]: QueryDict(s.encode(&amp;#39;utf8&amp;#39;))
Out[5]: &amp;lt;QueryDict: {u&amp;#39;a&amp;#39;: [u&amp;#39;\u4f60\u597d&amp;#39;]}&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-17:2015/03/django-fix-QueryDict-raise-UnicodeEncodeError.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3862</title><link>https://mozillazg.com/2015/03/3862.kid-dog.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3862/"&gt;Cyanide &amp;amp; Happiness #3862 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3862.kid-dog.zh-cn.png" src="/static/images/comics/3862.kid-dog.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-15:2015/03/3862.kid-dog.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3864</title><link>https://mozillazg.com/2015/03/3864.doc.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3864/"&gt;Cyanide &amp;amp; Happiness #3864 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3864.doc.zh-cn.png" src="/static/images/comics/3864.doc.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;you're not well, sir,
you should stay with us
at the hospital for a little
while.        &lt;br /&gt;
你有点不大好，先生，
你需要在医院跟我们多呆一段时间。&lt;/p&gt;
&lt;p&gt;you're wrong, DOC!
i'm not sick! i know i'm
not sick! ...what is that
needle for?   &lt;br /&gt;
你搞错了，医生！
我没病！我知道我没病！。。。
那个针是干吗用的？&lt;/p&gt;
&lt;p&gt;it calms the nerves and helps
with anxiety.     &lt;br /&gt;
它用于安神和缓解焦虑。&lt;/p&gt;
&lt;p&gt;you're not giving me that!
get it away from me!  &lt;br /&gt;
你不能给我打那个！让它远离我！&lt;/p&gt;
&lt;p&gt;it's not for you.     &lt;br /&gt;
它不是给你的。&lt;/p&gt;
&lt;p&gt;you stress me out, man.   &lt;br /&gt;
你让我承受了很大的压力，先生。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-15:2015/03/3864.doc.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>修复安装 psycopg2 时出现“pg_config executable not found”错误</title><link>https://mozillazg.com/2015/03/fix-install-psycopg2-raise-pg_config-excutable-not-found.html</link><description>&lt;p&gt;错误详情：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Running setup.py egg_info for package psycopg2

    Error: pg_config executable not found.

    Please add the directory containing pg_config to the PATH
    or specify the full executable path with the option:

        python setup.py build_ext --pg-config /path/to/pg_config build ...

    or with the pg_config option in &amp;#39;setup.cfg&amp;#39;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;出错的原因是因为找不到 &lt;code&gt;pg_config&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;在我的机器上 &lt;code&gt;pg_config&lt;/code&gt; 程序在 &lt;code&gt;/usr/pgsql-9.4/bin/&lt;/code&gt; 目录下，只需让 &lt;code&gt;pg_config&lt;/code&gt; 命令可以被找到就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /usr/pgsql-9.4/bin/pg_config /usr/bin/pg_config
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 15 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-15:2015/03/fix-install-psycopg2-raise-pg_config-excutable-not-found.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3863</title><link>https://mozillazg.com/2015/03/3863.whatsinhere1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3863/"&gt;Cyanide &amp;amp; Happiness #3863 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3863.whatsinhere1.zh-cn.png" src="/static/images/comics/3863.whatsinhere1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;yes, you are techically
considered morbidly obese...      &lt;br /&gt;
是的，你在技术上被认定为病态肥胖。。。&lt;/p&gt;
&lt;p&gt;...but what really matters is
in here.      &lt;br /&gt;
。。。但是，真正重要的是这里有什么。&lt;/p&gt;
&lt;p&gt;what i'm saying is, you have
heart disease.    &lt;br /&gt;
我的意思是，你有心脏病。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-14:2015/03/3863.whatsinhere1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Buttersafe: 诱饵</title><link>https://mozillazg.com/2015/03/2015-03-10-bait.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://buttersafe.com/2015/03/10/bait/"&gt;http://buttersafe.com/2015/03/10/bait/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015-03-10-bait.zh-cn.png" src="/static/images/comics/2015-03-10-bait.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-12:2015/03/2015-03-10-bait.zh-cn.html</guid><category>Buttersafe</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2504</title><link>https://mozillazg.com/2015/03/2504.clowncar.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2504/"&gt;Cyanide &amp;amp; Happiness #2504 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2504.clowncar.zh-cn.png" src="/static/images/comics/2504.clowncar.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-11:2015/03/2504.clowncar.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2062</title><link>https://mozillazg.com/2015/03/2062.comicskatetrick1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2062/"&gt;Cyanide &amp;amp; Happiness #2062 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2062.comicskatetrick1.zh-cn.png" src="/static/images/comics/2062.comicskatetrick1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;sup, bro dawg.
do you know any ganarly skateboard tricks?    &lt;br /&gt;
嘿，伙计。你会一些特别棒的滑板技巧吗？&lt;/p&gt;
&lt;p&gt;i sure do, brodo! watch this!     &lt;br /&gt;
我当然会，布罗德！瞧好了！&lt;/p&gt;
&lt;p&gt;ta-da!    &lt;br /&gt;
嗒——哒！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-10:2015/03/2062.comicskatetrick1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3589</title><link>https://mozillazg.com/2015/03/3589.allyoudoooo.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3589/"&gt;Cyanide &amp;amp; Happiness #3589 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3589.allyoudoooo.zh-cn.png" src="/static/images/comics/3589.allyoudoooo.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i just finished my own autobiography.
it details my entire life!        &lt;br /&gt;
我刚完成了我的自传。它详细描述了我的整个人生！&lt;/p&gt;
&lt;p&gt;but all you do is play wow
and eat cheese puffs      &lt;br /&gt;
但是，你所做的只是玩魔兽世界和吃奶酪泡芙&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-09:2015/03/3589.allyoudoooo.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1457</title><link>https://mozillazg.com/2015/03/1457.water.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1457/"&gt;Cyanide &amp;amp; Happiness #1457 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1457.water.zh-cn.png" src="/static/images/comics/1457.water.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-08:2015/03/1457.water.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[linx]解决编译 hping 时出现 "undefined reference to `hping_script'" 错误</title><link>https://mozillazg.com/2015/03/linux-centos5-build-hping-error-undefined-reference-to-hping_script.html</link><description>&lt;p&gt;错误信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo make
...
pd.o -L/usr/local/lib -lpcap  -ltcl8.4.threads -lm -lpthread
main.o: In &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;main&lt;span class="s1"&gt;&amp;#39;:&lt;/span&gt;
&lt;span class="s1"&gt;/xxx/main.c:186: undefined reference to `hping_script&amp;#39;&lt;/span&gt;
collect2: ld returned &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; status
make: *** &lt;span class="o"&gt;[&lt;/span&gt;hping3&lt;span class="o"&gt;]&lt;/span&gt; Error 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决: 执行 &lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo make clean
rm -rf hping3 *.o libars.a
$ sudo make
...
This binary is TCL scripting capable
use &lt;span class="sb"&gt;`&lt;/span&gt;make strip&lt;span class="s1"&gt;&amp;#39; to strip hping3 binary&lt;/span&gt;
&lt;span class="s1"&gt;use `make install&amp;#39;&lt;/span&gt; to install hping3
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.hping.org/20"&gt;http://wiki.hping.org/20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-08:2015/03/linux-centos5-build-hping-error-undefined-reference-to-hping_script.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3857</title><link>https://mozillazg.com/2015/03/3857.argue2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3857/"&gt;Cyanide &amp;amp; Happiness #3857 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3857.argue2.zh-cn.png" src="/static/images/comics/3857.argue2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;they were only fighting each other!   &lt;br /&gt;
他们只是在打架！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 07 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-07:2015/03/3857.argue2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[django]解决 django 模板中无法正常输入 {{ 或 {%</title><link>https://mozillazg.com/2015/03/django-how-to-both-use-javascript-template-and-django-template.html</link><description>&lt;p&gt;默认情况下，模板中的 &lt;tt class="docutils literal"&gt;{{&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;{%&lt;/tt&gt; 会被当作是 django 模板引擎标签和过滤器的关键字。
如果我们所用的 javascript 模板引擎的关键字也是 &lt;tt class="docutils literal"&gt;{{&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;{%&lt;/tt&gt; 的话，会出现无法正常输入 &lt;tt class="docutils literal"&gt;{{&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;{%&lt;/tt&gt; 的情况。&lt;/p&gt;
&lt;p&gt;比如，下面的模板代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;template&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x-tmpl-mustache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;stooges&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;stooges&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会报如下错误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
TemplateSyntaxError at /foo/bar/
Could not parse the remainder: '#stooges' from '#stooges'
&lt;/pre&gt;
&lt;p&gt;有下面四种解决办法：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;临时关掉模板引擎 &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#verbatim"&gt;[ref]&lt;/a&gt; :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;verbatim&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;template&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x-tmpl-mustache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;stooges&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;stooges&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;test&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endverbatim&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;修改 javascript 模板引擎的关键字&lt;/li&gt;
&lt;li&gt;使用 &lt;tt class="docutils literal"&gt;templatetag&lt;/tt&gt; 标签 &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.7/ref/templates/builtins/#templatetag"&gt;[ref]&lt;/a&gt; :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;template&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x-tmpl-mustache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;openvariable&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;stooges&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;closevariable&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;openvariable&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;closevariable&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;openvariable&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="err"&gt;/stooges&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;closevariable&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;openblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;templatetag&lt;/span&gt; &lt;span class="nv"&gt;closeblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;自定义几个标签，用于输入包含关键字的字符串:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;@register.simple_tag()&lt;/span&gt;
&lt;span class="x"&gt;def brace(str):&lt;/span&gt;
&lt;span class="x"&gt;    return &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt;&lt;span class="k"&gt;s&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; % str&lt;/span&gt;


&lt;span class="s2"&gt;@register.simple_tag()&lt;/span&gt;
&lt;span class="s2"&gt;def double_brace(str):&lt;/span&gt;
&lt;span class="s2"&gt;    return &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;{{&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;template&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x-tmpl-mustache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;double_brace&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#stooges&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;double_brace&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;double_brace&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/stooges&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;brace&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;% test %&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/7985594/django-and-mustache-use-the-same-syntax-for-template"&gt;http://stackoverflow.com/questions/7985594/django-and-mustache-use-the-same-syntax-for-template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.7/ref/templates/builtins/"&gt;https://docs.djangoproject.com/en/1.7/ref/templates/builtins/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.7/howto/custom-template-tags/"&gt;https://docs.djangoproject.com/en/1.7/howto/custom-template-tags/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 07 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-07:2015/03/django-how-to-both-use-javascript-template-and-django-template.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1267</title><link>https://mozillazg.com/2015/03/1267.comicwtc1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1267/"&gt;Cyanide &amp;amp; Happiness #1267 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1267.comicwtc1.zh-cn.png" src="/static/images/comics/1267.comicwtc1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-06:2015/03/1267.comicwtc1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2030</title><link>https://mozillazg.com/2015/03/2030.sbTotal.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2030/"&gt;Cyanide &amp;amp; Happiness #2030 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2030.sbTotal.zh-cn.png" src="/static/images/comics/2030.sbTotal.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-05:2015/03/2030.sbTotal.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3855</title><link>https://mozillazg.com/2015/03/3855.tv.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3855/"&gt;Cyanide &amp;amp; Happiness #3855 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3855.tv.zh-cn.png" src="/static/images/comics/3855.tv.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-04:2015/03/3855.tv.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[go]regexp 包所支持的正则表达式语法</title><link>https://mozillazg.com/2015/03/go-regexp-supported-regular-expression-syntax.html</link><description>&lt;p&gt;本文内容整理自: &lt;a class="reference external" href="http://code.google.com/p/re2/wiki/Syntax"&gt;http://code.google.com/p/re2/wiki/Syntax&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="single-characters"&gt;
&lt;h2 id="hidsingle-characters"&gt;Single characters&lt;a class="headerlink" href="#hidsingle-characters" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="75%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;.&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;any character, possibly including newline (s=true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;[xyz]&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;[^xyz]&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;negated character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\d&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Perl character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\D&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;negated Perl character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:alpha:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;ASCII character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:^alpha:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;negated ASCII character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\pN&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Unicode character class (one-letter name)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\p{Greek}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Unicode character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\PN&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;negated Unicode character class (one-letter name)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\P{Greek}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;negated Unicode character class&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="composites"&gt;
&lt;h2 id="hidcomposites"&gt;Composites&lt;a class="headerlink" href="#hidcomposites" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="29%" /&gt;
&lt;col width="71%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;xy&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;x followed by y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x|y&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;x or y (prefer x)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="repetitions"&gt;
&lt;h2 id="hidrepetitions"&gt;Repetitions&lt;a class="headerlink" href="#hidrepetitions" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="29%" /&gt;
&lt;col width="71%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x*&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;zero or more x, prefer more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x+&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;one or more x, prefer more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x?&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;zero or one x, prefer one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{n,m}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;n or n+1 or ... or m x, prefer more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{n,}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;n or more x, prefer more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{n}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;exactly n x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x*?&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;zero or more x, prefer fewer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x+?&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;one or more x, prefer fewer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x??&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;zero or one x, prefer zero&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{n,m}?&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;n or n+1 or ... or m x, prefer fewer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x{n,}?&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;n or more x, prefer fewer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{n}?&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;exactly n x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(≡ &lt;tt class="docutils literal"&gt;x*&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x{-}&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(≡ &lt;tt class="docutils literal"&gt;x*?&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x{-n}&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(≡ &lt;tt class="docutils literal"&gt;x{n}?&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x=&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(≡ &lt;tt class="docutils literal"&gt;x?&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Implementation restriction: The counting forms &lt;tt class="docutils literal"&gt;x{n,m}&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;x{n,}&lt;/tt&gt; , and &lt;tt class="docutils literal"&gt;x{n}&lt;/tt&gt;
reject forms that create a minimum or maximum repetition count above 1000.
Unlimited repetitions are not subject to this restriction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="possessive-repetitions"&gt;
&lt;h2 id="hidpossessive-repetitions"&gt;Possessive repetitions&lt;a class="headerlink" href="#hidpossessive-repetitions" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x*+&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;zero or more x, possessive (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x++&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;one or more x, possessive (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x?+&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;zero or one x, possessive (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{n,m}+&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;n or ... or m x, possessive (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x{n,}+&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;n or more x, possessive (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x{n}+&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;exactly n x, possessive (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="grouping"&gt;
&lt;h2 id="hidgrouping"&gt;Grouping&lt;a class="headerlink" href="#hidgrouping" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="24%" /&gt;
&lt;col width="76%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(re)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;numbered capturing group (submatch)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?P&amp;lt;name&amp;gt;re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named &amp;amp; numbered capturing group (submatch)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?&amp;lt;name&amp;gt;re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named &amp;amp; numbered capturing group (submatch) (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?'name're)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named &amp;amp; numbered capturing group (submatch) (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?:re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;non-capturing group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?flags)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;set flags within current group; non-capturing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?flags:re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;set flags during re; non-capturing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?#text)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;comment (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?|x|y|z)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;branch numbering reset (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?&amp;gt;re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;possessive match of re (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;re&amp;#64;&amp;gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;possessive match of re (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;%(re)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;non-capturing group (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="flags"&gt;
&lt;h2 id="hidflags"&gt;Flags&lt;a class="headerlink" href="#hidflags" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="11%" /&gt;
&lt;col width="89%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;i&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;case-insensitive (default false)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;m&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;multi-line mode: &lt;tt class="docutils literal"&gt;^&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;$&lt;/tt&gt; match begin/end line in addition to begin/end text (default false)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;s&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;let &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; match &lt;tt class="docutils literal"&gt;\n&lt;/tt&gt; (default false)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;U&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;ungreedy: swap meaning of &lt;tt class="docutils literal"&gt;x*&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;x*?&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;x+&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;x+?&lt;/tt&gt;, etc (default false)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Flag syntax is &lt;tt class="docutils literal"&gt;xyz&lt;/tt&gt; (set) or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-xyz&lt;/span&gt;&lt;/tt&gt; (clear) or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;xy-z&lt;/span&gt;&lt;/tt&gt; (set xy, clear z).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="empty-strings"&gt;
&lt;h2 id="hidempty-strings"&gt;Empty strings&lt;a class="headerlink" href="#hidempty-strings" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="88%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;^&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at beginning of text or line (m=true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;$&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at end of text (like &lt;tt class="docutils literal"&gt;\z&lt;/tt&gt; not &lt;tt class="docutils literal"&gt;\Z&lt;/tt&gt;) or line (m=true)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\A&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at beginning of text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\b&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at ASCII word boundary (&lt;tt class="docutils literal"&gt;\w&lt;/tt&gt; on one side and &lt;tt class="docutils literal"&gt;\W&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;\A&lt;/tt&gt; , or &lt;tt class="docutils literal"&gt;\z&lt;/tt&gt; on the other)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\B&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not at ASCII word boundary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\G&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at beginning of subtext being searched (NOT SUPPORTED) PCRE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\G&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at end of last match (NOT SUPPORTED) PERL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\Z&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at end of text, or before newline at end of text (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\z&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;at end of text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?=re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;before text matching re (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?!re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;before text not matching re (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?&amp;lt;=re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;after text matching re (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?&amp;lt;!re)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;after text not matching re (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;re&amp;amp;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;before text matching re (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;re&amp;#64;=&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;before text matching re (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;re&amp;#64;!&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;before text not matching re (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;re&amp;#64;&amp;lt;=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;after text matching re (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;re&amp;#64;&amp;lt;!&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;after text not matching re (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\zs&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;sets start of match (= &lt;tt class="docutils literal"&gt;\K&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\ze&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;sets end of match (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%^&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;beginning of file (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%$&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;end of file (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%V&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;on screen (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%#&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;cursor position (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\%'m&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;mark m position (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%23l&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;in line 23 (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%23c&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;in column 23 (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%23v&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;in virtual column 23 (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="escape-sequences"&gt;
&lt;h2 id="hidescape-sequences"&gt;Escape sequences&lt;a class="headerlink" href="#hidescape-sequences" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="82%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\a&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;bell (≡ &lt;tt class="docutils literal"&gt;\007&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\f&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;form feed (≡ &lt;tt class="docutils literal"&gt;\014&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\t&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;horizontal tab (≡ &lt;tt class="docutils literal"&gt;\011&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\n&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;newline (≡ &lt;tt class="docutils literal"&gt;\012&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\r&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;carriage return (≡ &lt;tt class="docutils literal"&gt;\015&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\v&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;vertical tab character (≡ &lt;tt class="docutils literal"&gt;\013&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\*&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;literal &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; , for any punctuation character &lt;tt class="docutils literal"&gt;*&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\123&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;octal character code (up to three digits)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\x7F&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;hex character code (exactly two digits)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\x{10FFFF}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;hex character code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\C&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;match a single byte even in UTF-8 mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\Q...\E&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;literal text ... even if ... has punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\1&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\b&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;backspace (NOT SUPPORTED) (use &lt;tt class="docutils literal"&gt;\010&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\cK&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;control char &lt;tt class="docutils literal"&gt;^K&lt;/tt&gt; (NOT SUPPORTED) (use &lt;tt class="docutils literal"&gt;\001&lt;/tt&gt; etc)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\e&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;escape (NOT SUPPORTED) (use &lt;tt class="docutils literal"&gt;\033&lt;/tt&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\g1&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\g{1}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\g{+1}&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\g{-1}&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\g{name}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\g&amp;lt;name&amp;gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;subroutine call (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\g'name'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;subroutine call (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\k&amp;lt;name&amp;gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\k'name'&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\lX&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;lowercase X (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\ux&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;uppercase x (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\L...\E&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;lowercase text ... (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\K&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;reset beginning of &lt;tt class="docutils literal"&gt;$0&lt;/tt&gt; (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\N{name}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named Unicode character (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\R&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;line break (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\U...\E&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;upper case text ... (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\X&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;extended Unicode sequence (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%d123&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;decimal character 123 (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%xFF&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;hex character FF (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%o123&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;octal character 123 (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%u1234&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Unicode character &lt;tt class="docutils literal"&gt;0x1234&lt;/tt&gt; (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\%U12345678&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Unicode character &lt;tt class="docutils literal"&gt;0x12345678&lt;/tt&gt; (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="character-class-elements"&gt;
&lt;h2 id="hidcharacter-class-elements"&gt;Character class elements&lt;a class="headerlink" href="#hidcharacter-class-elements" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="75%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;x&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;single character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;A-Z&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;character range (inclusive)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\d&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Perl character class&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;[:foo:]&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;ASCII character class foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\p{Foo}&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Unicode character class Foo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\pF&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Unicode character class F (one-letter name)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="named-character-classes-as-character-class-elements"&gt;
&lt;h2 id="hidnamed-character-classes-as-character-class-elements"&gt;Named character classes as character class elements&lt;a class="headerlink" href="#hidnamed-character-classes-as-character-class-elements" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="18%" /&gt;
&lt;col width="82%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;[\d]&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;digits (≡ &lt;tt class="docutils literal"&gt;\d&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[^\d]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not digits (≡ &lt;tt class="docutils literal"&gt;\D&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;[\D]&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not digits (≡ &lt;tt class="docutils literal"&gt;\D&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[^\D]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not not digits (≡ &lt;tt class="docutils literal"&gt;\d&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:name:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named ASCII class inside character class (≡ &lt;tt class="docutils literal"&gt;[:name:]&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[^[:name:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named ASCII class inside negated character class (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[:^name:]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;[\p{Name}]&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named Unicode property inside character class (≡ &lt;tt class="docutils literal"&gt;\p{Name}&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[^\p{Name}]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named Unicode property inside negated character class (≡ &lt;tt class="docutils literal"&gt;\P{Name}&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="perl-character-classes-all-ascii-only"&gt;
&lt;h2 id="hidperl-character-classes-all-ascii-only"&gt;Perl character classes (all ASCII-only)&lt;a class="headerlink" href="#hidperl-character-classes-all-ascii-only" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="85%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\d&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;digits (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[0-9]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\D&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not digits (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[^0-9]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\s&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;whitespace (≡ &lt;tt class="docutils literal"&gt;[\t\n\f\r ]&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\S&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not whitespace (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[^\t\n\f\r&lt;/span&gt; ]&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\w&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;word characters (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[0-9A-Za-z_]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\W&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not word characters (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[^0-9A-Za-z_]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\h&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;horizontal space (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\H&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not horizontal space (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\v&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;vertical space (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\V&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not vertical space (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="ascii-character-classes"&gt;
&lt;h2 id="hidascii-character-classes"&gt;ASCII character classes&lt;a class="headerlink" href="#hidascii-character-classes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:alnum:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;alphanumeric (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[0-9A-Za-z]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:alpha:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;alphabetic (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[A-Za-z]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:ascii:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;ASCII (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[\x00-\x7F]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:blank:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;blank (≡ &lt;tt class="docutils literal"&gt;[\t ]&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:cntrl:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;control (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[\x00-\x1F\x7F]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:digit:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;digits (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[0-9]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:graph:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;graphical (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[!-~]&lt;/span&gt; == &lt;span class="pre"&gt;[A-Za-z0-9!&amp;quot;#$%&amp;amp;'()*+,\-./:;&amp;lt;=&amp;gt;?&amp;#64;[\\\]^_`{|}~]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:lower:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;lower case (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[a-z]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:print:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;printable (≡ &lt;tt class="docutils literal"&gt;[ &lt;span class="pre"&gt;-~]&lt;/span&gt;&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;[ &lt;span class="pre"&gt;[:graph:]]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:punct:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;punctuation (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[!-/:-&amp;#64;[-`{-~]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:space:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;whitespace (≡ &lt;tt class="docutils literal"&gt;[\t\n\v\f\r ]&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:upper:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;upper case (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[A-Z]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:word:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;word characters (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[0-9A-Za-z_]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[[:xdigit:]]&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;hex digit (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[0-9A-Fa-f]&lt;/span&gt;&lt;/tt&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="unicode-character-class-names-general-category"&gt;
&lt;h2 id="hidunicode-character-class-names-general-category"&gt;Unicode character class names--general category&lt;a class="headerlink" href="#hidunicode-character-class-names-general-category" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="84%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;C&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;other&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cc&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;control&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cf&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cn&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;unassigned code points (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Co&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;private use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cs&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;surrogate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;L&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;letter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;LC&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;cased letter (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;L&amp;amp;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;cased letter (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Ll&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;lowercase letter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lm&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;modifier letter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lo&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;other letter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lt&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;titlecase letter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lu&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;uppercase letter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;M&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;mark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Mc&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;spacing mark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Me&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;enclosing mark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Mn&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;non-spacing mark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;N&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Nd&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;decimal number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Nl&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;letter number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;No&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;other number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;P&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Pc&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;connector punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Pd&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;dash punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Pe&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;close punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Pf&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;final punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Pi&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;initial punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Po&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;other punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Ps&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;open punctuation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;S&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Sc&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;currency symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Sk&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;modifier symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Sm&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;math symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;So&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;other symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Z&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;separator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Zl&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;line separator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Zp&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;paragraph separator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Zs&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;space separator&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="unicode-character-class-names-scripts"&gt;
&lt;h2 id="hidunicode-character-class-names-scripts"&gt;Unicode character class names--scripts&lt;a class="headerlink" href="#hidunicode-character-class-names-scripts" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="41%" /&gt;
&lt;col width="59%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Arabic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Arabic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Armenian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Armenian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Balinese&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Balinese&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Bamum&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Bamum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Batak&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Batak&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Bengali&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Bengali&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Bopomofo&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Bopomofo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Brahmi&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Brahmi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Braille&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Braille&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Buginese&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Buginese&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Buhid&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Buhid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Canadian_Aboriginal&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Canadian Aboriginal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Carian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Carian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Chakma&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Chakma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cham&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Cham&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cherokee&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Cherokee&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Common&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;characters not specific to one script&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Coptic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Coptic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cuneiform&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Cuneiform&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cypriot&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Cypriot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Cyrillic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Cyrillic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Deseret&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Deseret&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Devanagari&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Devanagari&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Egyptian_Hieroglyphs&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Egyptian Hieroglyphs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Ethiopic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ethiopic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Georgian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Georgian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Glagolitic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Glagolitic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Gothic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Gothic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Greek&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Greek&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Gujarati&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Gujarati&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Gurmukhi&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Gurmukhi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Han&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Han&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Hangul&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Hangul&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Hanunoo&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Hanunoo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Hebrew&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Hebrew&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Hiragana&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Hiragana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Imperial_Aramaic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Imperial Aramaic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Inherited&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;inherit script from previous character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Inscriptional_Pahlavi&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Inscriptional Pahlavi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Inscriptional_Parthian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Inscriptional Parthian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Javanese&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Javanese&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Kaithi&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Kaithi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Kannada&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Kannada&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Katakana&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Katakana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Kayah_Li&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Kayah Li&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Kharoshthi&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Kharoshthi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Khmer&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Khmer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lao&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Lao&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Latin&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Latin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lepcha&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Lepcha&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Limbu&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Limbu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Linear_B&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Linear B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lycian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Lycian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Lydian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Lydian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Malayalam&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Malayalam&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Mandaic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Mandaic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Meetei_Mayek&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Meetei Mayek&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Meroitic_Cursive&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Meroitic Cursive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Meroitic_Hieroglyphs&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Meroitic Hieroglyphs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Miao&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Miao&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Mongolian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Mongolian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Myanmar&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Myanmar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;New_Tai_Lue&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;New Tai Lue (aka Simplified Tai Lue)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Nko&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Nko&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Ogham&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ogham&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Ol_Chiki&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ol Chiki&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Old_Italic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Old Italic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Old_Persian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Old Persian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Old_South_Arabian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Old South Arabian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Old_Turkic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Old Turkic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Oriya&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Oriya&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Osmanya&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Osmanya&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Phags_Pa&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Phags Pa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Phoenician&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Phoenician&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Rejang&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Rejang&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Runic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Runic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Saurashtra&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Saurashtra&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Sharada&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Sharada&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Shavian&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Shavian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Sinhala&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Sinhala&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Sora_Sompeng&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Sora Sompeng&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Sundanese&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Sundanese&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Syloti_Nagri&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Syloti Nagri&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Syriac&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Syriac&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tagalog&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tagalog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tagbanwa&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tagbanwa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tai_Le&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tai Le&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tai_Tham&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tai Tham&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tai_Viet&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tai Viet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Takri&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Takri&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tamil&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tamil&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Telugu&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Telugu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Thaana&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Thaana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Thai&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Thai&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tibetan&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tibetan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Tifinagh&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tifinagh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Ugaritic&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ugaritic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Vai&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vai&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Yi&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Yi&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-character-classes"&gt;
&lt;h2 id="hidvim-character-classes"&gt;Vim character classes&lt;a class="headerlink" href="#hidvim-character-classes" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="11%" /&gt;
&lt;col width="89%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\i&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;identifier character (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\I&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;\i&lt;/tt&gt; except digits (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\k&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;keyword character (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\K&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;\k&lt;/tt&gt; except digits (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\f&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;file name character (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\F&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;\f&lt;/tt&gt; except digits (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\p&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;printable character (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\P&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;\p&lt;/tt&gt; except digits (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\s&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;whitespace character ( &lt;tt class="docutils literal"&gt;≡ [ \t]&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\S&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;non-white space character ( &lt;tt class="docutils literal"&gt;≡ [^ \t]&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\d&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;digits ( &lt;tt class="docutils literal"&gt;≡ &lt;span class="pre"&gt;[0-9]&lt;/span&gt;&lt;/tt&gt; ) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\D&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not &lt;tt class="docutils literal"&gt;\d&lt;/tt&gt; VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\x&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;hex digits ( &lt;tt class="docutils literal"&gt;≡ &lt;span class="pre"&gt;[0-9A-Fa-f]&lt;/span&gt;&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\X&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not &lt;tt class="docutils literal"&gt;\x&lt;/tt&gt; (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\o&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;octal digits ( &lt;tt class="docutils literal"&gt;≡ &lt;span class="pre"&gt;[0-7]&lt;/span&gt;&lt;/tt&gt; ) (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\O&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not &lt;tt class="docutils literal"&gt;\o&lt;/tt&gt; (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\w&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;word character VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\W&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not &lt;tt class="docutils literal"&gt;\w&lt;/tt&gt; VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\h&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;head of word character (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\H&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not &lt;tt class="docutils literal"&gt;\h&lt;/tt&gt; (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\a&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;alphabetic (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\A&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not &lt;tt class="docutils literal"&gt;\a&lt;/tt&gt; (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\l&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;lowercase (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\L&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not lowercase (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\u&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;uppercase (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\U&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;not uppercase (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\_x&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;\x&lt;/tt&gt; plus newline, for any &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-flags"&gt;
&lt;h2 id="hidvim-flags"&gt;Vim flags&lt;a class="headerlink" href="#hidvim-flags" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="90%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\c&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;ignore case (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\C&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;match case (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\m&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;magic (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\M&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;nomagic (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\v&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;verymagic (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\V&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;verynomagic (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;\Z&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;ignore differences in Unicode combining characters (NOT SUPPORTED) VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="magic"&gt;
&lt;h2 id="hidmagic"&gt;Magic&lt;a class="headerlink" href="#hidmagic" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="29%" /&gt;
&lt;col width="71%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?{code})&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;arbitrary Perl code (NOT SUPPORTED) PERL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(??{code})&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;postponed arbitrary Perl code (NOT SUPPORTED) PERL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?n)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;recursive call to regexp capturing group n (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?+n)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;recursive call to relative group +n (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?-n)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;recursive call to relative group -n (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?C)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;PCRE callout (NOT SUPPORTED) PCRE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?R)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;recursive call to entire regexp (≡ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?0)&lt;/span&gt;&lt;/tt&gt; ) (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?&amp;amp;name)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;recursive call to named group (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?P=name)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;named backreference (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?P&amp;gt;name)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;recursive call to named group (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?(cond)true|false)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;conditional branch (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?(cond)true)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;conditional branch (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*ACCEPT)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;make regexps more like Prolog (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*COMMIT)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*F)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*FAIL)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*MARK)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*PRUNE)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*SKIP)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*THEN)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*ANY)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;set newline convention (NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*ANYCRLF)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*CR)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*CRLF)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*LF)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*BSR_ANYCRLF)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;set &lt;tt class="docutils literal"&gt;\R&lt;/tt&gt; convention (NOT SUPPORTED) PCRE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;(*BSR_UNICODE)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;(NOT SUPPORTED) PCRE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 04 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-04:2015/03/go-regexp-supported-regular-expression-syntax.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #2332</title><link>https://mozillazg.com/2015/03/2332.eulogy2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2332/"&gt;Cyanide &amp;amp; Happiness #2332 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2332.eulogy2.zh-cn.png" src="/static/images/comics/2332.eulogy2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;nothing's more difficult than giving
the eulogy at your best friend's funeral.     &lt;br /&gt;
世界上最难的事情莫过于在你最好的朋友的葬礼上致悼词。&lt;/p&gt;
&lt;p&gt;i dunno. pooping out of a moving car is pretty difficult.    &lt;br /&gt;
我不知道。在一辆正在移动的汽车上向外便便是非常困难的。&lt;/p&gt;
&lt;p&gt;that's how he died.      &lt;br /&gt;
那就是他去世的原因。&lt;/p&gt;
&lt;p&gt;your friend was a hero.   &lt;br /&gt;
你的朋友是个英雄。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-02:2015/03/2332.eulogy2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3850</title><link>https://mozillazg.com/2015/03/3850.everyday2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3850/"&gt;Cyanide &amp;amp; Happiness #3850 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3850.everyday2.zh-cn.png" src="/static/images/comics/3850.everyday2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;wow! a turtle!
哇！一只乌龟！&lt;/p&gt;
&lt;p&gt;now there's something
you don't see every day!  &lt;br /&gt;
这里有你每天都没注意到的一些事物！&lt;/p&gt;
&lt;p&gt;wow! a flower!
there's something you
don't see ev-     &lt;br /&gt;
哇！一朵花！这里有你每天都没注意到——&lt;/p&gt;
&lt;p&gt;you're a jerk!
你是个混蛋！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-03-02:2015/03/3850.everyday2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[go]使用 goxc 方便的进行交叉编译</title><link>https://mozillazg.com/2015/02/go-use-goxc-to-cross-compile.html</link><description>&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;go get github.com/laher/goxc&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;所有命令皆在 main 包所在目录下执行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;goxc -d=build -pv=0.1.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面命令的意思是：将编译好的文件保存到 &lt;code&gt;./build&lt;/code&gt; 目录下，指定文件名包含的版本号为 &lt;code&gt;0.1.0&lt;/code&gt;     &lt;br /&gt;
最后生成的文件如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; (master) ccuser$ tree build/
build/
└── 0.1.0
    ├── ccuser_0.1.0_amd64.deb
    ├── ccuser_0.1.0_armhf.deb
    ├── ccuser_0.1.0_darwin_386.zip
    ├── ccuser_0.1.0_darwin_amd64.zip
    ├── ccuser_0.1.0_dragonfly_386.zip
    ├── ccuser_0.1.0_dragonfly_amd64.zip
    ├── ccuser_0.1.0_freebsd_386.zip
    ├── ccuser_0.1.0_freebsd_amd64.zip
    ├── ccuser_0.1.0_freebsd_arm.zip
    ├── ccuser_0.1.0_i386.deb
    ├── ccuser_0.1.0_linux_386.tar.gz
    ├── ccuser_0.1.0_linux_amd64.tar.gz
    ├── ccuser_0.1.0_linux_arm.tar.gz
    ├── ccuser_0.1.0_nacl_386.zip
    ├── ccuser_0.1.0_nacl_amd64p32.zip
    ├── ccuser_0.1.0_nacl_arm.zip
    ├── ccuser_0.1.0_netbsd_386.zip
    ├── ccuser_0.1.0_netbsd_amd64.zip
    ├── ccuser_0.1.0_netbsd_arm.zip
    ├── ccuser_0.1.0_openbsd_386.zip
    ├── ccuser_0.1.0_openbsd_amd64.zip
    ├── ccuser_0.1.0_plan9_386.zip
    ├── ccuser_0.1.0_solaris_amd64.zip
    ├── ccuser_0.1.0_windows_386.zip
    ├── ccuser_0.1.0_windows_amd64.zip
    ├── downloads.md
    ├── LICENSE
    └── README.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;指定操作系统平台&lt;/strong&gt;
默认全平台。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;goxc -d=build -pv=0.1.0 -bc='linux,windows,darwin'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;指定只生成适用于 &lt;code&gt;linxu, windows, 苹果系统&lt;/code&gt; 的文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;指定 CPU 架构&lt;/strong&gt;
默认所有 CPU 架构&lt;/p&gt;
&lt;p&gt;&lt;code&gt;goxc -d=build -pv=0.1.0 -arch='386 amd64'&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/laher/goxc"&gt;https://github.com/laher/goxc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-28:2015/02/go-use-goxc-to-cross-compile.html</guid></item><item><title>[linux]查看通过 yum 安装的包的文件安装位置</title><link>https://mozillazg.com/2015/02/linux-find-files-from-installed-yum-package.html</link><description>&lt;p&gt;可以通过 &lt;code&gt;yum-utils&lt;/code&gt; 工具查看所安装的包的文件位置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install yum-utils
$ sudo repoquery --list python27
/usr/bin/pydoc27
/usr/bin/python2.7
/usr/share/doc/python27-2.7.9
/usr/share/doc/python27-2.7.9/LICENSE
/usr/share/doc/python27-2.7.9/README
/usr/share/man/man1/python2.1.gz
/usr/share/man/man1/python2.7.1.gz
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 28 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-28:2015/02/linux-find-files-from-installed-yum-package.html</guid><category>yum</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3839</title><link>https://mozillazg.com/2015/02/3839.noises.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3839/"&gt;Cyanide &amp;amp; Happiness #3839 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3839.noises.zh-cn.png" src="/static/images/comics/3839.noises.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-27:2015/02/3839.noises.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2858</title><link>https://mozillazg.com/2015/02/2858.Optimism-vs.-Pessimism.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2858/"&gt;Cyanide &amp;amp; Happiness #2858 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2858.Optimism-vs.-Pessimism.zh-cn.png" src="/static/images/comics/2858.Optimism-vs.-Pessimism.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;the optimist says:    &lt;br /&gt;
乐观主义者这样说：&lt;/p&gt;
&lt;p&gt;the glass is half full!   &lt;br /&gt;
杯子满了一半了！&lt;/p&gt;
&lt;p&gt;the pessimist says:   &lt;br /&gt;
悲观主义者这样说：&lt;/p&gt;
&lt;p&gt;the glass is half empty.      &lt;br /&gt;
杯子空了一半。&lt;/p&gt;
&lt;p&gt;the opportunist says:     &lt;br /&gt;
机会主义者这样说：&lt;/p&gt;
&lt;p&gt;hey what's that over there!   &lt;br /&gt;
嘿，那边那个是什么？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-26:2015/02/2858.Optimism-vs.-Pessimism.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2013</title><link>https://mozillazg.com/2015/02/2013.DEPRESSING-COMIC-WEEK-4-Price-Check.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2013/"&gt;Cyanide &amp;amp; Happiness #2013 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2013.DEPRESSING-COMIC-WEEK-4!-Price-Check!.zh-cn.png" src="/static/images/comics/2013.DEPRESSING-COMIC-WEEK-4!-Price-Check!.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;excuse me?    &lt;br /&gt;
对不起，打扰一下？&lt;/p&gt;
&lt;p&gt;excuse me?    &lt;br /&gt;
对不起，打扰一下？&lt;/p&gt;
&lt;p&gt;Huh? Oh, can i help you?  &lt;br /&gt;
呃？哦，您要点什么？&lt;/p&gt;
&lt;p&gt;Could you tell me
how much these are?   &lt;br /&gt;
请问这些怎么卖？&lt;/p&gt;
&lt;p&gt;Hmm...    &lt;br /&gt;
唔。。。&lt;/p&gt;
&lt;p&gt;hey, lenny! price check
on these coffins!     &lt;br /&gt;
嘿，伦尼！麻烦查一下这些棺材的价格！&lt;/p&gt;
&lt;p&gt;the regular ones?     &lt;br /&gt;
普通的？&lt;/p&gt;
&lt;p&gt;no, this lady needs
a baby coffin.    &lt;br /&gt;
不是，这位女士需要一口婴儿棺材。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-24:2015/02/2013.DEPRESSING-COMIC-WEEK-4-Price-Check.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2011</title><link>https://mozillazg.com/2015/02/2011.DCW4_firetruck.zh-cnn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2011/"&gt;Cyanide &amp;amp; Happiness #2011 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2011.DCW4_firetruck.zh-cn.png" src="/static/images/comics/2011.DCW4_firetruck.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 22 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-22:2015/02/2011.DCW4_firetruck.zh-cnn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2344</title><link>https://mozillazg.com/2015/02/2344.comicsuggestionbox1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2344/"&gt;Cyanide &amp;amp; Happiness #2344 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2344.comicsuggestionbox1.zh-cn.png" src="/static/images/comics/2344.comicsuggestionbox1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 21 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-21:2015/02/2344.comicsuggestionbox1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2853</title><link>https://mozillazg.com/2015/02/2853.garbage.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2853/"&gt;Cyanide &amp;amp; Happiness #2853 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2853.garbage.zh-cn.png" src="/static/images/comics/2853.garbage.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;ew! what is that smell? did you
forget to take the garbage out?   &lt;br /&gt;
呕！什么味道！你忘记扔垃圾了？&lt;/p&gt;
&lt;p&gt;will you marry me?    &lt;br /&gt;
你愿意嫁给我吗？&lt;/p&gt;
&lt;p&gt;no! why do you always propose at
the most unromantic times? do you
think it's funny?     &lt;br /&gt;
不！为什么你总在最不浪漫的时候求婚？
你觉得这很有趣？&lt;/p&gt;
&lt;p&gt;i won't believe you when
you actually propose to me    &lt;br /&gt;
当你真的向我求婚的时候，我不会再相信你了&lt;/p&gt;
&lt;p&gt;oh my god...
my cat died!      &lt;br /&gt;
哦天哪。。。我的猫死了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-20:2015/02/2853.garbage.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2954</title><link>https://mozillazg.com/2015/02/2954.premarital.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2954/"&gt;Cyanide &amp;amp; Happiness #2954 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2954.premarital.zh-cn.png" src="/static/images/comics/2954.premarital.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;baby, we've been dating a while, and i
think i want to have sex.     &lt;br /&gt;
宝贝，我们相处有一段时间了，
我想跟你做爱做的事情。&lt;/p&gt;
&lt;p&gt;i want to, it's just...   &lt;br /&gt;
我也想，只是。。。&lt;/p&gt;
&lt;p&gt;god is watching us.   &lt;br /&gt;
上帝正在看着我们。&lt;/p&gt;
&lt;p&gt;no i'm not.   &lt;br /&gt;
不，我没有。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-20:2015/02/2954.premarital.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3191</title><link>https://mozillazg.com/2015/02/3191.hate2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3191/"&gt;Cyanide &amp;amp; Happiness #3191 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3191.hate2.zh-cn.png" src="/static/images/comics/3191.hate2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-17:2015/02/3191.hate2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2866</title><link>https://mozillazg.com/2015/02/2866.imgay.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2866/"&gt;Cyanide &amp;amp; Happiness #2866 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2866.imgay.zh-cn.png" src="/static/images/comics/2866.imgay.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;mom? dad? i'm gay.    &lt;br /&gt;
妈咪？爹地？我是个 gay。&lt;/p&gt;
&lt;p&gt;i am so glad you mentioned that.
i'm actually gay too.     &lt;br /&gt;
很高兴你提到这个，我其实也是个 gay。&lt;/p&gt;
&lt;p&gt;ha! i thought i was the only one!
now we can finally drop this charade.   &lt;br /&gt;
哈！我还以为就我一个人！现在我们终于可以
卸下伪装了。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-12:2015/02/2866.imgay.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3831</title><link>https://mozillazg.com/2015/02/3831.treatment.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3831/"&gt;Cyanide &amp;amp; Happiness #3831 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3831.treatment.zh-cn.png" src="/static/images/comics/3831.treatment.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;we've tried every other
treatment for cancer,
but nothing is working.       &lt;br /&gt;
我们已经尝试了各种治疗癌症方法，但是都没有效果。&lt;/p&gt;
&lt;p&gt;there is only one treatment
left to try:      &lt;br /&gt;
只剩下最后一种疗法还没尝试了：&lt;/p&gt;
&lt;p&gt;"the silent treatment"    &lt;br /&gt;
“沉默疗法”&lt;/p&gt;
&lt;p&gt;how does it help battle my cancer?    &lt;br /&gt;
这个对我战胜癌症有什么帮助吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-11:2015/02/3831.treatment.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3830</title><link>https://mozillazg.com/2015/02/3830.coldcakes.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3830/"&gt;Cyanide &amp;amp; Happiness #3830 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3830.coldcakes.zh-cn.png" src="/static/images/comics/3830.coldcakes.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-09:2015/02/3830.coldcakes.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2517</title><link>https://mozillazg.com/2015/02/2517.Saved-By-The-Belgian-Mastiff.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2517/"&gt;Cyanide &amp;amp; Happiness #2517 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2517.Saved-By-The-Belgian-Mastiff.zh-cn.png" src="/static/images/comics/2517.Saved-By-The-Belgian-Mastiff.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i'm s-s-so  h-h-hungry.   &lt;br /&gt;
我好-好-好-好饿。&lt;/p&gt;
&lt;p&gt;m-my dog is still o-o-out
here. m-m-maybe he can s-save use.    &lt;br /&gt;
我-我的狗还在外-外面。
或-或-或许他能用来救-救命。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bark&lt;/em&gt; &lt;em&gt;bark&lt;/em&gt;     &lt;br /&gt;
&lt;em&gt;汪&lt;/em&gt; &lt;em&gt;汪&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;bark&lt;/em&gt;    &lt;br /&gt;
&lt;em&gt;汪&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;s-s-scruffy! we're s-saved!   &lt;br /&gt;
太-太-太好了！我们得-得救了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-08:2015/02/2517.Saved-By-The-Belgian-Mastiff.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2522</title><link>https://mozillazg.com/2015/02/2522.candy-bar.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2522/"&gt;Cyanide &amp;amp; Happiness #2522 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2522.candy-bar.zh-cn.png" src="/static/images/comics/2522.candy-bar.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;that candy bar has your name on it!   &lt;br /&gt;
那根糖棒上有你的名字！&lt;/p&gt;
&lt;p&gt;i wish you hadn't named me butterfinger, dad.     &lt;br /&gt;
爹地，我希望你没给我取名叫笨手笨脚。&lt;/p&gt;
&lt;p&gt;i wish you hadn't been born.      &lt;br /&gt;
我希望你没被生出来。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-08:2015/02/2522.candy-bar.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3230</title><link>https://mozillazg.com/2015/02/3230.privateb.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3230/"&gt;Cyanide &amp;amp; Happiness #3230 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3230.privateb.zh-cn.gif" src="/static/images/comics/3230.privateb.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 08 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-08:2015/02/3230.privateb.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2521</title><link>https://mozillazg.com/2015/02/2521.nothing.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2521/"&gt;Cyanide &amp;amp; Happiness #2521 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2521.nothing.zh-cn.png" src="/static/images/comics/2521.nothing.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 07 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-07:2015/02/2521.nothing.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2852</title><link>https://mozillazg.com/2015/02/2852.personalrecord.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2852/"&gt;Cyanide &amp;amp; Happiness #2852 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2852.personalrecord.zh-cn.png" src="/static/images/comics/2852.personalrecord.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;yes!! i just set a new personal record!!      &lt;br /&gt;
太棒了！！我刚刚创造了一项新的个人记录！！&lt;/p&gt;
&lt;p&gt;what is it?!
什么记录？！&lt;/p&gt;
&lt;p&gt;i let down forty three people in one day!     &lt;br /&gt;
我在一天内让43个人失望了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-06:2015/02/2852.personalrecord.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1284</title><link>https://mozillazg.com/2015/02/1284.scarf.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1284/"&gt;Cyanide &amp;amp; Happiness #1284 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1284.scarf.zh-cn.png" src="/static/images/comics/1284.scarf.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;in this magic trick, i'll
need you to grab
this scarf from my pocket     &lt;br /&gt;
在这个魔术中，我需要你帮忙从我的口袋里
拉取这个围巾&lt;/p&gt;
&lt;p&gt;keep going!       &lt;br /&gt;
继续！&lt;/p&gt;
&lt;p&gt;golly! that's amazing!    &lt;br /&gt;
天哪！太令人惊叹了！&lt;/p&gt;
&lt;p&gt;no! stop! too far!    &lt;br /&gt;
不！停下来！拉过头了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-03:2015/02/1284.scarf.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2780</title><link>https://mozillazg.com/2015/02/2780.luckypenny.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2780/"&gt;Cyanide &amp;amp; Happiness #2780 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2780.luckypenny.zh-cn.png" src="/static/images/comics/2780.luckypenny.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;a lucky penny!
i wonder what good fortunes
it will bring me!     &lt;br /&gt;
一枚幸运便士！我很期待他能给我带来什么好运！&lt;/p&gt;
&lt;p&gt;are you jim wilkens?      &lt;br /&gt;
你是吉姆·威尔肯斯吗？&lt;/p&gt;
&lt;p&gt;yeah...?
是的。。。？&lt;/p&gt;
&lt;p&gt;your father is dead.      &lt;br /&gt;
你父亲去世了。&lt;/p&gt;
&lt;p&gt;wow! thanks lucky penny!  &lt;br /&gt;
哇！谢谢你幸运便士！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-03:2015/02/2780.luckypenny.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3822</title><link>https://mozillazg.com/2015/02/3822.umbrella.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3822/"&gt;Cyanide &amp;amp; Happiness #3822 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3822.umbrella.zh-cn.png" src="/static/images/comics/3822.umbrella.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;we can share my
umbrella if you would like...     &lt;br /&gt;
如果你不介意的话，我们可以共用一把伞。。。&lt;/p&gt;
&lt;p&gt;that's so nice of you!
every inch of me is soaking wet.      &lt;br /&gt;
你真是个大好人！
我身上每一寸都湿透了。&lt;/p&gt;
&lt;p&gt;don't get an erection.    &lt;br /&gt;
don't get an erection.    &lt;br /&gt;
don't get an erection.    &lt;br /&gt;
don't get an erection.    &lt;br /&gt;
don't get an erection.    &lt;br /&gt;
don't get an erection.    &lt;br /&gt;
不要勃起。     &lt;br /&gt;
不要勃起。     &lt;br /&gt;
不要勃起。     &lt;br /&gt;
不要勃起。     &lt;br /&gt;
不要勃起。     &lt;br /&gt;
不要勃起。       &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-03:2015/02/3822.umbrella.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3825</title><link>https://mozillazg.com/2015/02/3825.gump.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3825/"&gt;Cyanide &amp;amp; Happiness #3825 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3825.gump.zh-cn.png" src="/static/images/comics/3825.gump.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;my momma always said,
life is like a box of crickets        &lt;br /&gt;
我妈妈总说，
生活就像一盒蟋蟀&lt;/p&gt;
&lt;p&gt;you mean chocolates?      &lt;br /&gt;
你是指巧克力吧？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 03 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-03:2015/02/3825.gump.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2786</title><link>https://mozillazg.com/2015/02/2786.How-many-more-times-can-I-use-those-last-two-panels-as-a-punch-line.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2786/"&gt;Cyanide &amp;amp; Happiness #2786 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2786.How-many-more-times-can-I-use-those-last-two-panels-as-a-punch-line.zh-cn.png" src="/static/images/comics/2786.How-many-more-times-can-I-use-those-last-two-panels-as-a-punch-line.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, baby. gimme some sugar!      &lt;br /&gt;
嘿，宝贝。给我一些糖！&lt;/p&gt;
&lt;p&gt;but i'm diabetic!     &lt;br /&gt;
可是我有糖尿病！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-02:2015/02/2786.How-many-more-times-can-I-use-those-last-two-panels-as-a-punch-line.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2836</title><link>https://mozillazg.com/2015/02/2836.crazy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2836/"&gt;Cyanide &amp;amp; Happiness #2836 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2836.crazy.zh-cn.png" src="/static/images/comics/2836.crazy.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;so you think i'm crazy, huh?!     &lt;br /&gt;
你认为我是疯子，嗯哼?!&lt;/p&gt;
&lt;p&gt;well i just made a necklace out
of my own toenails.
who's crzay now?!         &lt;br /&gt;
我只是用我自己的趾甲做了一根项链。
现在谁是疯子？！&lt;/p&gt;
&lt;p&gt;still you.    &lt;br /&gt;
还是你。&lt;/p&gt;
&lt;p&gt;what am i doing wrong?!   &lt;br /&gt;
我到底做错了什么？！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-02-01:2015/02/2836.crazy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1146</title><link>https://mozillazg.com/2015/01/1146.open.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1146/"&gt;Cyanide &amp;amp; Happiness #1146 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1146.open.zh-cn.png" src="/static/images/comics/1146.open.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hello! i have no arms...          &lt;br /&gt;
你好！我没有手臂。。。&lt;/p&gt;
&lt;p&gt;do you think you could open
this jar of jam for me?   &lt;br /&gt;
你能帮我打开这罐果酱吗？&lt;/p&gt;
&lt;p&gt;sure! no problem!     &lt;br /&gt;
可以！没问题！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-31:2015/01/1146.open.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1322</title><link>https://mozillazg.com/2015/01/1322.oopsie-daisie.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1322/"&gt;Cyanide &amp;amp; Happiness #1322 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1322.oopsie-daisie.zh-cn.png" src="/static/images/comics/1322.oopsie-daisie.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-28:2015/01/1322.oopsie-daisie.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2491</title><link>https://mozillazg.com/2015/01/2491.gotyouagift.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2491/"&gt;Cyanide &amp;amp; Happiness #2491 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2491.gotyouagift.zh-cn.png" src="/static/images/comics/2491.gotyouagift.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, i heard everyone
forgot your birthday
so i got you this.    &lt;br /&gt;
嘿，我听说所有人都忘记了你的
生日，因此我给你带来了这个。&lt;/p&gt;
&lt;p&gt;aw, you didn't have to do that!   &lt;br /&gt;
啊，你没必要这么做！&lt;/p&gt;
&lt;p&gt;i didn't?!    &lt;br /&gt;
我没必要？！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-28:2015/01/2491.gotyouagift.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2500</title><link>https://mozillazg.com/2015/01/2500.underwearBackwards.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2500/"&gt;Cyanide &amp;amp; Happiness #2500 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2500.underwearBackwards.zh-cn.png" src="/static/images/comics/2500.underwearBackwards.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey, i put my underwear
on backwards. can you
make sure nobody walks
over here while i fix it?         &lt;br /&gt;
嘿，我把内衣穿反了。你能确保在我换衣服期间
没人路过这里吗？&lt;/p&gt;
&lt;p&gt;sure thing, buddy.        &lt;br /&gt;
当然可以，伙计。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-28:2015/01/2500.underwearBackwards.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2878</title><link>https://mozillazg.com/2015/01/2878.A-day-in-the-life-of-Cameron.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2878/"&gt;Cyanide &amp;amp; Happiness #2878 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2878.A-day-in-the-life-of-Cameron.zh-cn.png" src="/static/images/comics/2878.A-day-in-the-life-of-Cameron.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-27:2015/01/2878.A-day-in-the-life-of-Cameron.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1179</title><link>https://mozillazg.com/2015/01/1179.boyanddog.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1179/"&gt;Cyanide &amp;amp; Happiness #1179 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1179.boyanddog.zh-cn.png" src="/static/images/comics/1179.boyanddog.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-26:2015/01/1179.boyanddog.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2594</title><link>https://mozillazg.com/2015/01/2594.black.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2594/"&gt;Cyanide &amp;amp; Happiness #2594 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2594.black.zh-cn.png" src="/static/images/comics/2594.black.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-25:2015/01/2594.black.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3812</title><link>https://mozillazg.com/2015/01/3812.shameonyou.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3812/"&gt;Cyanide &amp;amp; Happiness #3812 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3812.shameonyou.zh-cn.png" src="/static/images/comics/3812.shameonyou.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;shame on you,
wasting good food!    &lt;br /&gt;
真是可耻，浪费这么好的食物！&lt;/p&gt;
&lt;p&gt;don't you know
there are starving
kids in africa?!      &lt;br /&gt;
你不知道在非洲还有很多儿童
正在挨饿吗？！&lt;/p&gt;
&lt;p&gt;don't you know
there are starving
parents in africa?    &lt;br /&gt;
你不知道在非洲还有很多父母
正在挨饿吗？&lt;/p&gt;
&lt;p&gt;you eat it    &lt;br /&gt;
你吃了它&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-24:2015/01/3812.shameonyou.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1066</title><link>https://mozillazg.com/2015/01/1066.cruel.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1066/"&gt;Cyanide &amp;amp; Happiness #1066 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1066.cruel.zh-cn.png" src="/static/images/comics/1066.cruel.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-22:2015/01/1066.cruel.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1801</title><link>https://mozillazg.com/2015/01/1801.iwin.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1801/"&gt;Cyanide &amp;amp; Happiness #1801 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1801.iwin.zh-cn.png" src="/static/images/comics/1801.iwin.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i did it!! i won!!    &lt;br /&gt;
我做到了！！我赢了！！&lt;/p&gt;
&lt;p&gt;and it was all thanks to those
steroids you sold me!     &lt;br /&gt;
非常感谢你卖给我那些类固醇！&lt;/p&gt;
&lt;p&gt;those weren't steroids.
they were ordinary sugar pills.   &lt;br /&gt;
没有类固醇。那些只是普通的糖丸。&lt;/p&gt;
&lt;p&gt;you won that race all by
yourself!     &lt;br /&gt;
你靠自己赢得了所有的比赛！&lt;/p&gt;
&lt;p&gt;can i have my money back?     &lt;br /&gt;
我能要回我的钱吗？&lt;/p&gt;
&lt;p&gt;no!   &lt;br /&gt;
不能！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-22:2015/01/1801.iwin.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2633</title><link>https://mozillazg.com/2015/01/2633.waking.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2633/"&gt;Cyanide &amp;amp; Happiness #2633 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2633.waking.zh-cn.png" src="/static/images/comics/2633.waking.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 20 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-20:2015/01/2633.waking.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2526</title><link>https://mozillazg.com/2015/01/2526.treeCarving.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2526/"&gt;Cyanide &amp;amp; Happiness #2526 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2526.treeCarving.zh-cn.png" src="/static/images/comics/2526.treeCarving.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-19:2015/01/2526.treeCarving.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3809</title><link>https://mozillazg.com/2015/01/3809.babyyouandi.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3809/"&gt;Cyanide &amp;amp; Happiness #3809 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3809.babyyouandi.zh-cn.png" src="/static/images/comics/3809.babyyouandi.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;baby, i just don't work
when we're not together       &lt;br /&gt;
宝贝，我们不在一起的这段时间里，我都没法运转了&lt;/p&gt;
&lt;p&gt;i've tried to quit you, i
really have, but i just
can't do it. let's try it
one last time, and nothing
will go wrong this time, i swear.         &lt;br /&gt;
我真的有尝试过忘记你，但是我做不到。
让我们最后再尝试一次，我发誓，这次一定
不会再搞砸了。&lt;/p&gt;
&lt;p&gt;are you talking to a liquor bottle?       &lt;br /&gt;
你在跟一个酒瓶说话？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-19:2015/01/3809.babyyouandi.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2515</title><link>https://mozillazg.com/2015/01/2515.jinkies.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2515/"&gt;Cyanide &amp;amp; Happiness #2515 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2515.jinkies.zh-cn.png" src="/static/images/comics/2515.jinkies.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-17:2015/01/2515.jinkies.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3807</title><link>https://mozillazg.com/2015/01/3807.note.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3807/"&gt;Cyanide &amp;amp; Happiness #3807 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3807.note.zh-cn.png" src="/static/images/comics/3807.note.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;my glasses!   &lt;br /&gt;
我的眼镜！&lt;/p&gt;
&lt;p&gt;i can't see without my glasses!   &lt;br /&gt;
没眼镜我看不清！&lt;/p&gt;
&lt;p&gt;...guys?      &lt;br /&gt;
。。。伙计？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 17 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-17:2015/01/3807.note.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1422</title><link>https://mozillazg.com/2015/01/1422.conga1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1422/"&gt;Cyanide &amp;amp; Happiness #1422 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1422.conga1.zh-cn.png" src="/static/images/comics/1422.conga1.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;heeelp!!
somebody help me!!    &lt;br /&gt;
救命！！谁来救救我！！&lt;/p&gt;
&lt;p&gt;hey!! leave him alone!!   &lt;br /&gt;
嘿！！放开他！！&lt;/p&gt;
&lt;p&gt;stop, you're gonna kill him!!     &lt;br /&gt;
停下来，你那样会杀了他！！&lt;/p&gt;
&lt;p&gt;urk!      &lt;br /&gt;
呃！ &lt;/p&gt;
&lt;p&gt;break it up, you guys!!   &lt;br /&gt;
住手，你们这些家伙！！&lt;/p&gt;
&lt;p&gt;joe, don't get involved!!     &lt;br /&gt;
乔，别卷进去（别多管闲事）！！&lt;/p&gt;
&lt;p&gt;conga!!!     &lt;br /&gt;
康茄舞！！！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-15:2015/01/1422.conga1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3187</title><link>https://mozillazg.com/2015/01/3187.True-love.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3187/"&gt;Cyanide &amp;amp; Happiness #3187 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3187.True-love.zh-cn.png" src="/static/images/comics/3187.True-love.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-15:2015/01/3187.True-love.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1779</title><link>https://mozillazg.com/2015/01/1779.dcw_badnews.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1779/"&gt;Cyanide &amp;amp; Happiness #1779 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1779.dcw_badnews.zh-cn.png" src="/static/images/comics/1779.dcw_badnews.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;daddy where's mommy?
i thought my little brother
was coming today...       &lt;br /&gt;
爹地，妈咪在哪里？
我以为弟弟今天要来。。。&lt;/p&gt;
&lt;p&gt;joey...there was a problem
at the hospital and...
your mother passed away.      &lt;br /&gt;
乔伊。。。医院那边出了点问题。。。
你妈妈她去世了。&lt;/p&gt;
&lt;p&gt;what about my brother?    &lt;br /&gt;
我弟弟呢？&lt;/p&gt;
&lt;p&gt;he's gone too.
they're both in a better
place now.
他也走了。他们现在都在一个更美好的地方。&lt;/p&gt;
&lt;p&gt;promise?  &lt;br /&gt;
你保证？&lt;/p&gt;
&lt;p&gt;i promise.    &lt;br /&gt;
我保证。&lt;/p&gt;
&lt;p&gt;later     &lt;br /&gt;
后来&lt;/p&gt;
&lt;p&gt;dady - i went
to the beter plase to
find mommy.   &lt;br /&gt;
爹地——我去那个更美好的地方找妈咪去了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-11:2015/01/1779.dcw_badnews.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1846</title><link>https://mozillazg.com/2015/01/1846.goodnews.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1846/"&gt;Cyanide &amp;amp; Happiness #1846 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1846.goodnews.zh-cn.png" src="/static/images/comics/1846.goodnews.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i have great news, honey!     &lt;br /&gt;
亲爱的，我有个好消息！&lt;/p&gt;
&lt;p&gt;so do i!      &lt;br /&gt;
我也是！&lt;/p&gt;
&lt;p&gt;i wont the lottery!!      &lt;br /&gt;
我买彩票中奖了！!&lt;/p&gt;
&lt;p&gt;i'm pregnant!     &lt;br /&gt;
我怀孕了！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-11:2015/01/1846.goodnews.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3800</title><link>https://mozillazg.com/2015/01/3800.kale.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3800/"&gt;Cyanide &amp;amp; Happiness #3800 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3800.kale.zh-cn.png" src="/static/images/comics/3800.kale.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i dunno what it is,
i've just never enjoyed kale.     &lt;br /&gt;
我不知道它是什么，我只是从没享受过羽衣甘蓝（一种蔬菜）。&lt;/p&gt;
&lt;p&gt;have you tried it baked?      &lt;br /&gt;
你有试过把它烘烤一下吗？&lt;/p&gt;
&lt;p&gt;no.   &lt;br /&gt;
没有。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-11:2015/01/3800.kale.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3801</title><link>https://mozillazg.com/2015/01/3801.brian.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3801/"&gt;Cyanide &amp;amp; Happiness #3801 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3801.brian.zh-cn.png" src="/static/images/comics/3801.brian.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;look! it's brian the bastard!     &lt;br /&gt;
快看！是布莱恩那个混蛋！&lt;/p&gt;
&lt;p&gt;why are you always such a bastard?    &lt;br /&gt;
你为什么总是这么混蛋？&lt;/p&gt;
&lt;p&gt;because i don't want anybody to
be sad after i die.   &lt;br /&gt;
因为我不想有人在我死后伤心。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-11:2015/01/3801.brian.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2016</title><link>https://mozillazg.com/2015/01/2016.comicdepressingcomicweek42.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2016/"&gt;Cyanide &amp;amp; Happiness #2016 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2016.comicdepressingcomicweek42.zh-cn.png" src="/static/images/comics/2016.comicdepressingcomicweek42.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-10:2015/01/2016.comicdepressingcomicweek42.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1428</title><link>https://mozillazg.com/2015/01/1428.schoolcrossing.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1428/"&gt;Cyanide &amp;amp; Happiness #1428 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1428.schoolcrossing.zh-cn.png" src="/static/images/comics/1428.schoolcrossing.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;School X-ing
= School Xing
= School Crossing     &lt;br /&gt;
是一个路标，类似国内的“学校路段，减速慢行”。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-03:2015/01/1428.schoolcrossing.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2381</title><link>https://mozillazg.com/2015/01/2381.depressingcomicweek5.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2381/"&gt;Cyanide &amp;amp; Happiness #2381 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2381.depressingcomicweek5.zh-cn.png" src="/static/images/comics/2381.depressingcomicweek5.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;please take care of me    &lt;br /&gt;
请照顾我&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-03:2015/01/2381.depressingcomicweek5.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3793</title><link>https://mozillazg.com/2015/01/3793.dcw8part2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3793/"&gt;Cyanide &amp;amp; Happiness #3793 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3793.dcw8part2.zh-cn.png" src="/static/images/comics/3793.dcw8part2.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;i'm stuck, girl...
you have to go on without me...   &lt;br /&gt;
伙计，我被夹住了。。。
你必须离开我独自前行。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-03:2015/01/3793.dcw8part2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3794</title><link>https://mozillazg.com/2015/01/3794.dcw_milk.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3794/"&gt;Cyanide &amp;amp; Happiness #3794 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3794.dcw_milk.zh-cn.png" src="/static/images/comics/3794.dcw_milk.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-03:2015/01/3794.dcw_milk.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3368</title><link>https://mozillazg.com/2015/01/3368.dcw_game.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3368/"&gt;Cyanide &amp;amp; Happiness #3368 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3368.dcw_game.zh-cn.png" src="/static/images/comics/3368.dcw_game.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-02:2015/01/3368.dcw_game.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3782</title><link>https://mozillazg.com/2015/01/3782.dcw20141.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3782/"&gt;Cyanide &amp;amp; Happiness #3782 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3782.dcw20141.zh-cn.png" src="/static/images/comics/3782.dcw20141.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-02:2015/01/3782.dcw20141.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3783</title><link>https://mozillazg.com/2015/01/3783.depressingcomicweek20141.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3783/"&gt;Cyanide &amp;amp; Happiness #3783 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3783.depressingcomicweek20141.zh-cn.png" src="/static/images/comics/3783.depressingcomicweek20141.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-02:2015/01/3783.depressingcomicweek20141.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3790</title><link>https://mozillazg.com/2015/01/3790.dcw8pt1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3790/"&gt;Cyanide &amp;amp; Happiness #3790 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3790.dcw8pt1.zh-cn.png" src="/static/images/comics/3790.dcw8pt1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-02:2015/01/3790.dcw8pt1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[windows]如何同时查看多个 excel 文件</title><link>https://mozillazg.com/2015/01/windows-excel-2010-view-multi-files.html</link><description>&lt;p&gt;默认情况下，excel 一次只能查看一个 excel 文件，如果我们要对比查看多个 excel 文件的话，必须来回的切换窗口，非常不方便。&lt;/p&gt;
&lt;p&gt;通过下面的步骤，可以一次查看多个 excel 文件（Excel 2010）：&lt;/p&gt;
&lt;p&gt;点击 【视图】-【全部重排】-【垂直并排】&lt;/p&gt;
&lt;p&gt;&lt;img alt="windows-excel-multi-view-01.png" src="/static/images/windows-excel-multi-view-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="windows-excel-multi-view-02.png" src="/static/images/windows-excel-multi-view-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="windows-excel-multi-view-03.png" src="/static/images/windows-excel-multi-view-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大化某个窗口&lt;/strong&gt; 即可恢复单窗口查看。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-02:2015/01/windows-excel-2010-view-multi-files.html</guid><category>excel</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2182</title><link>https://mozillazg.com/2015/01/2182.Open-my-window-and-a-breeze-rolls-in.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2182/"&gt;Cyanide &amp;amp; Happiness #2182 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2182.Open-my-window-and-a-breeze-rolls-in.zh-cn.png" src="/static/images/comics/2182.Open-my-window-and-a-breeze-rolls-in.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;I saw...      &lt;br /&gt;
我见过。。。&lt;/p&gt;
&lt;p&gt;I conquered...
我征服过。。。&lt;/p&gt;
&lt;p&gt;I came.
我来过。&lt;/p&gt;
&lt;p&gt;My hero!
我的英雄！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2015-01-01:2015/01/2182.Open-my-window-and-a-breeze-rolls-in.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1412</title><link>https://mozillazg.com/2014/12/1412.up.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1412/"&gt;Cyanide &amp;amp; Happiness #1412 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1412.up.zh-cn.png" src="/static/images/comics/1412.up.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;what are you doing up there?   &lt;br /&gt;
你在那上面做什么？&lt;/p&gt;
&lt;p&gt;what?   &lt;br /&gt;
什么？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-29:2014/12/1412.up.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2236</title><link>https://mozillazg.com/2014/12/2236.building.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2236/"&gt;Cyanide &amp;amp; Happiness #2236 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2236.building.zh-cn.png" src="/static/images/comics/2236.building.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;goodbye, cruel world   &lt;br /&gt;
再见了，残酷的世界&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-29:2014/12/2236.building.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3588</title><link>https://mozillazg.com/2014/12/3588.dementia.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3588/"&gt;Cyanide &amp;amp; Happiness #3588 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3588.dementia.zh-cn.png" src="/static/images/comics/3588.dementia.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;it looks like the reason you're always forgetting things is you have early onset ementia.     &lt;br /&gt;
你总是健忘的原因看起来似乎是因为你有早发性痴呆症。&lt;/p&gt;
&lt;p&gt;what do you mean "forgetting things"? i'm here because my knee hurts.   &lt;br /&gt;
你说的“健忘”是什么意思？我到这里来是因为我的膝盖受伤了。&lt;/p&gt;
&lt;p&gt;this is worse than i thought.   &lt;br /&gt;
这比我想的要更糟。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 28 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-28:2014/12/3588.dementia.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2445</title><link>https://mozillazg.com/2014/12/2445.comicwrestling1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2445/"&gt;Cyanide &amp;amp; Happiness #2445 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2445.comicwrestling1.zh-cn.png" src="/static/images/comics/2445.comicwrestling1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 27 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-27:2014/12/2445.comicwrestling1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3789</title><link>https://mozillazg.com/2014/12/3789.othercheek.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3789/"&gt;Cyanide &amp;amp; Happiness #3789 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3789.othercheek.zh-cn.gif" src="/static/images/comics/3789.othercheek.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 27 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-27:2014/12/3789.othercheek.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #916</title><link>https://mozillazg.com/2014/12/916.paper-plastic-babies.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/916/"&gt;Cyanide &amp;amp; Happiness #916 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="916.paper-plastic-babies.zh-cn.png" src="/static/images/comics/916.paper-plastic-babies.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-26:2014/12/916.paper-plastic-babies.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3254</title><link>https://mozillazg.com/2014/12/3254.theory.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3254/"&gt;Cyanide &amp;amp; Happiness #3254 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3254.theory.zh-cn.png" src="/static/images/comics/3254.theory.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 25 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-25:2014/12/3254.theory.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2103</title><link>https://mozillazg.com/2014/12/2103.pillow.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2103/"&gt;Cyanide &amp;amp; Happiness #2103 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2103.pillow.zh-cn.png" src="/static/images/comics/2103.pillow.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-24:2014/12/2103.pillow.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[flask]出错时发送异常信息邮件（包含异常堆栈，request 信息，发生异常时的局部变量）</title><link>https://mozillazg.com/2014/12/flask-mail-error-exception-message-with-request-and-locals-variables-like-django.html</link><description>&lt;p&gt;最终效果（邮件内容）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Message type:       ERROR
Location:           /home/xxx/site-packages/flask_restful/__init__.py:292
Module:             __init__
Function:           handle_error
Time:               2014-12-24 17:59:47,876

Message:

Internal Error


Traceback (most recent call last):
  File &amp;quot;/home/xxx/site-packages/flask/app.py&amp;quot;, line 1475, in full_dispatch_request
    rv = self.dispatch_request()
  ....
  File &amp;quot;/home/xx/foo.py&amp;quot;, line 81, in get
    raise Exception(u'a')
Exception: a


Locals:

{
    'self': &amp;lt;Bar object at 0x2ab4ed05d710&amp;gt;,
    'data': &amp;lt;Foo 10, bar&amp;gt;,
    'id': 10,
}

Request:

{
    'view_args': {
        'id': 10,
    },
    'url_rule': &amp;lt;Rule '/api/foos/&amp;lt;id&amp;gt;' (HEAD, GET, PATCH, POST, OPTIONS, DELETE) -&amp;gt; foo.xapi&amp;gt;,
    'cookies': {
    },
    'shallow': False,
    'environ': {
        'wsgi.multiprocess': True,
        'SERVER_SOFTWARE': 'Werkzeug/0.9.6',
        'SCRIPT_NAME': '',
        'REQUEST_METHOD': 'GET',
        'PATH_INFO': '/api/foos/10',
        'SERVER_PROTOCOL': 'HTTP/1.1',
        'QUERY_STRING': '',
        'werkzeug.server.shutdown': &amp;lt;function shutdown_server at 0x2ab4ed05ea28&amp;gt;,
        'CONTENT_LENGTH': '',
        'HTTP_USER_AGENT': 'foo/0.8.0',
        'HTTP_CONNECTION': 'keep-alive',
        'SERVER_NAME': '0.0.0.0',
        'REMOTE_PORT': 56413,
        'wsgi.url_scheme': 'http',
        'SERVER_PORT': '8900',
        'werkzeug.request': &amp;lt;Request 'http://localhost:8000/api/foos/10' [GET]&amp;gt;,
        'wsgi.input': &amp;lt;socket._fileobject object at 0x2ab4ed066050&amp;gt;,
        'HTTP_HOST': 'localhost:8900',
        'wsgi.multithread': False,
        'HTTP_ACCEPT': '*/*',
        'wsgi.version': (1, 0),
        'wsgi.run_once': False,
        'wsgi.errors': &amp;lt;open file '&amp;lt;stderr&amp;gt;', mode 'w' at 0x2ab4e6b811e0&amp;gt;,
        'REMOTE_ADDR': '127.0.0.1',
        'CONTENT_TYPE': '',
        'HTTP_ACCEPT_ENCODING': 'gzip, deflate',
    },
}
&lt;/pre&gt;
&lt;p&gt;主要通过配置 logging SMTPHandler 来实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging.handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SMTPHandler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

&lt;span class="n"&gt;mail_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SMTPHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;dev@bar.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;App exception&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mail_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NewFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;Message type:       &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;
&lt;span class="s1"&gt;Location:           &lt;/span&gt;&lt;span class="si"&gt;%(pathname)s&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%(lineno)d&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;
&lt;span class="s1"&gt;Module:             &lt;/span&gt;&lt;span class="si"&gt;%(module)s&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;
&lt;span class="s1"&gt;Function:           &lt;/span&gt;&lt;span class="si"&gt;%(funcName)s&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;
&lt;span class="s1"&gt;Time:               &lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;

&lt;span class="s1"&gt;Message:&lt;/span&gt;

&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;

&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mail_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NewFormatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="s1"&gt;Locals:&lt;/span&gt;

&lt;span class="si"&gt;%(locals)s&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;

&lt;span class="s1"&gt;Request:&lt;/span&gt;

&lt;span class="si"&gt;%(request)s&lt;/span&gt;&lt;span class="s1"&gt;&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;locals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pretty_dict_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pretty_dict_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pertty_dict_to_string 函数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pretty_dict_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pretty_dict_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s%r&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;    &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://flask.pocoo.org/docs/0.10/errorhandling/"&gt;Logging Application Errors — Flask Documentation (0.10)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/logging.html"&gt;15.7. logging — Logging facility for Python — Python 2.7.9 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python/cpython/tree/2.7/Lib/logging"&gt;cpython/Lib/logging at 2.7 · python/cpython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-24:2014/12/flask-mail-error-exception-message-with-request-and-locals-variables-like-django.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3786</title><link>https://mozillazg.com/2014/12/3786.selfie-stick.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3786/"&gt;Cyanide &amp;amp; Happiness #3786 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3786.selfie-stick.zh-cn.gif" src="/static/images/comics/3786.selfie-stick.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-23:2014/12/3786.selfie-stick.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[python] 解决 SQLAlchemy 提示 Instance is not bound to a Session 错误的问题</title><link>https://mozillazg.com/2014/12/python-sqlalchemy-fix-Instance-is-not-bound-to-a-Session-error.html</link><description>&lt;p&gt;在使用 SQLAlchemy 的过程中，有时会出现下列错误:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Parent instance '&amp;lt;User at 0x2b45b53509d0&amp;gt;' is not bound to a Session; lazy load operation of attribute  cannot proceed&lt;/li&gt;
&lt;li&gt;Instance '&amp;lt;User at 0x2b45b53509d0&amp;gt;' is not bound to a Session; attribute refresh operation cannot proceed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出现以上错误的原因是因为：session 已经被提交，导致操作的 model 对象已经不在当前 session 中了。
解决的办法就是：把对象重新加入到当前 session 中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something...&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;  &lt;span class="c1"&gt;# False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;  &lt;span class="c1"&gt;# DetachedInstanceError: Instance &amp;lt;User at 0x2b45b53509d0&amp;gt; is not bound to a Session&lt;/span&gt;

&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;  &lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;  &lt;span class="c1"&gt;# Jim&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;  &lt;span class="c1"&gt;# Eric&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://flask-webtest.readthedocs.org/en/latest/#using-flask-webtest-with-flask-sqlalchemy"&gt;https://flask-webtest.readthedocs.org/en/latest/#using-flask-webtest-with-flask-sqlalchemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 22 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-22:2014/12/python-sqlalchemy-fix-Instance-is-not-bound-to-a-Session-error.html</guid></item><item><title>[python] redis-py 模块使用时需要注意的一些事情</title><link>https://mozillazg.com/2014/12/python-redis-py-notes.html</link><description>&lt;div class="section" id="redis-strictredis"&gt;
&lt;h2 id="hidredis-strictredis"&gt;Redis 类 与 StrictRedis 类&lt;a class="headerlink" href="#hidredis-strictredis" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Redis&lt;/tt&gt; 类 与 &lt;tt class="docutils literal"&gt;StrictRedis&lt;/tt&gt; 类方法的一些差异（&lt;tt class="docutils literal"&gt;StrictRedis&lt;/tt&gt; 实现的是标准 redis 命令）：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%" /&gt;
&lt;col width="45%" /&gt;
&lt;col width="48%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;命令&lt;/th&gt;
&lt;th class="head"&gt;Redis&lt;/th&gt;
&lt;th class="head"&gt;StrictRedis&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;SETEX&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;setex(name, value, time)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;setex(name, time, value)&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ZADD&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;zadd(name, *args, **kwargs)&lt;/tt&gt;&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;args&lt;/tt&gt;: name1, score1, name2, score2,...&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt;: name1=score1, name2=score2,...&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;zadd(name, *args, **kwargs)&lt;/tt&gt;&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;args&lt;/tt&gt;: score1, name1, score2, name2,...&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt;: score1=name1, score2=name2,...&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LREM&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;lrem(name, value, num=0)&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;lrem(name, count, value)&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="responseerror-wrong-number-of-arguments-for-xxx-command"&gt;
&lt;h2 id="hidresponseerror-wrong-number-of-arguments-for-xxx-command"&gt;ResponseError: wrong number of arguments for 'xxx' command&lt;a class="headerlink" href="#hidresponseerror-wrong-number-of-arguments-for-xxx-command" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当使用 &lt;tt class="docutils literal"&gt;*args&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;**kwargs&lt;/tt&gt; 参数时容易出现这个 &lt;tt class="docutils literal"&gt;ResponseError&lt;/tt&gt; 错误。
使用前需要先检查 &lt;tt class="docutils literal"&gt;args&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt; 是否为空:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if keys:
    r.hdel('name', *keys)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/andymccurdy/redis-py"&gt;https://github.com/andymccurdy/redis-py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://redis-py.readthedocs.org/en/latest/"&gt;http://redis-py.readthedocs.org/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-21:2014/12/python-redis-py-notes.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #3776</title><link>https://mozillazg.com/2014/12/3776.kids-eat-free.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3776/"&gt;Cyanide &amp;amp; Happiness #3776 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3776.kids-eat-free.zh-cn.png" src="/static/images/comics/3776.kids-eat-free.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 16 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-16:2014/12/3776.kids-eat-free.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1561</title><link>https://mozillazg.com/2014/12/1561.you-can-pick-your-friends-and-you-can-pick-other-peoples-noses...zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1561/"&gt;Cyanide &amp;amp; Happiness #1561 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1561.you-can-pick-your-friends-and-you-can-pick-other-peoples-noses...zh-cn.png" src="/static/images/comics/1561.you-can-pick-your-friends-and-you-can-pick-other-peoples-noses...zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-14:2014/12/1561.you-can-pick-your-friends-and-you-can-pick-other-peoples-noses...zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2378</title><link>https://mozillazg.com/2014/12/2378.DCW_iwish.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2378/"&gt;Cyanide &amp;amp; Happiness #2378 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2378.DCW_iwish.zh-cn.png" src="/static/images/comics/2378.DCW_iwish.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-14:2014/12/2378.DCW_iwish.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2711</title><link>https://mozillazg.com/2014/12/2711.CRW_osama_a_burritos.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2711/"&gt;Cyanide &amp;amp; Happiness #2711 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2711.CRW_osama_a_burritos.zh-cn.png" src="/static/images/comics/2711.CRW_osama_a_burritos.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-14:2014/12/2711.CRW_osama_a_burritos.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3098</title><link>https://mozillazg.com/2014/12/3098.penis2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3098/"&gt;Cyanide &amp;amp; Happiness #3098 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3098.penis2.zh-cn.png" src="/static/images/comics/3098.penis2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-14:2014/12/3098.penis2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3298</title><link>https://mozillazg.com/2014/12/3298.mynewphone.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3298/"&gt;Cyanide &amp;amp; Happiness #3298 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3298.mynewphone.zh-cn.png" src="/static/images/comics/3298.mynewphone.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-14:2014/12/3298.mynewphone.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3773</title><link>https://mozillazg.com/2014/12/3773.dirty.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3773/"&gt;Cyanide &amp;amp; Happiness #3773 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3773.dirty.zh-cn.png" src="/static/images/comics/3773.dirty.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-14:2014/12/3773.dirty.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3774</title><link>https://mozillazg.com/2014/12/3774.googleplus.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3774/"&gt;Cyanide &amp;amp; Happiness #3774 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3774.googleplus.zh-cn.png" src="/static/images/comics/3774.googleplus.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-14:2014/12/3774.googleplus.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #206</title><link>https://mozillazg.com/2014/12/206.death.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/206/"&gt;Cyanide &amp;amp; Happiness #206 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="206.death.zh-cn.png" src="/static/images/comics/206.death.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-13:2014/12/206.death.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2516</title><link>https://mozillazg.com/2014/12/2516.comicexist1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2516/"&gt;Cyanide &amp;amp; Happiness #2516 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2516.comicexist1.zh-cn.png" src="/static/images/comics/2516.comicexist1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-13:2014/12/2516.comicexist1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3306</title><link>https://mozillazg.com/2014/12/3306.sky.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3306/"&gt;Cyanide &amp;amp; Happiness #3306 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3306.sky.zh-cn.png" src="/static/images/comics/3306.sky.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 12 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-12:2014/12/3306.sky.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[linux] centos 下安装 snmpwalk 命令</title><link>https://mozillazg.com/2014/12/linux-install-snmpwalk-command-on-centos.html</link><description>&lt;p&gt;&lt;code&gt;snmpwalk&lt;/code&gt; 命令可以用来探测交换机端口的实时带宽情况。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# yum provides */snmpwalk
yum install net-snmp-utils
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-11:2014/12/linux-install-snmpwalk-command-on-centos.html</guid></item><item><title>[linux]退出码 127 含义</title><link>https://mozillazg.com/2014/12/linux-what-is-mean-exit-code-127.html</link><description>&lt;p&gt;在 bash 下退出码 &lt;code&gt;127&lt;/code&gt; 的含义是 &lt;strong&gt;命令不存在&lt;/strong&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ foo
未找到 &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; 命令，您要输入的是否是：
 命令 &lt;span class="s1"&gt;&amp;#39;fog&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;ruby-fog&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;universe&lt;span class="o"&gt;)&lt;/span&gt;
 命令 &lt;span class="s1"&gt;&amp;#39;fox&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;objcryst-fox&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;universe&lt;span class="o"&gt;)&lt;/span&gt;
 命令 &lt;span class="s1"&gt;&amp;#39;xoo&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;xoo&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;universe&lt;span class="o"&gt;)&lt;/span&gt;
 命令 &lt;span class="s1"&gt;&amp;#39;fgo&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;fgo&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;universe&lt;span class="o"&gt;)&lt;/span&gt;
 命令 &lt;span class="s1"&gt;&amp;#39;fio&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;fio&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;universe&lt;span class="o"&gt;)&lt;/span&gt;
 命令 &lt;span class="s1"&gt;&amp;#39;fop&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;fop&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;
 命令 &lt;span class="s1"&gt;&amp;#39;goo&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;goo&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;universe&lt;span class="o"&gt;)&lt;/span&gt;
 命令 &lt;span class="s1"&gt;&amp;#39;zoo&amp;#39;&lt;/span&gt; 来自于包 &lt;span class="s1"&gt;&amp;#39;zoo&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;universe&lt;span class="o"&gt;)&lt;/span&gt;
foo：未找到命令
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
127
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-11:2014/12/linux-what-is-mean-exit-code-127.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1869</title><link>https://mozillazg.com/2014/12/1869.treasure.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1869/"&gt;Cyanide &amp;amp; Happiness #1869 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1869.treasure.zh-cn.png" src="/static/images/comics/1869.treasure.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-10:2014/12/1869.treasure.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3768</title><link>https://mozillazg.com/2014/12/3768.meat.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3768/"&gt;Cyanide &amp;amp; Happiness #3768 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3768.meat.zh-cn.png" src="/static/images/comics/3768.meat.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-10:2014/12/3768.meat.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1641</title><link>https://mozillazg.com/2014/12/1641.The-difference-between-being-handy-and-handsy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1641/"&gt;Cyanide &amp;amp; Happiness #1641 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1641.The-difference-between-being-handy-and-handsy.zh-cn.png" src="/static/images/comics/1641.The-difference-between-being-handy-and-handsy.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-08:2014/12/1641.The-difference-between-being-handy-and-handsy.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2572</title><link>https://mozillazg.com/2014/12/2572.greatday.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2572/"&gt;Cyanide &amp;amp; Happiness #2572 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2572.greatday.zh-cn.png" src="/static/images/comics/2572.greatday.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-08:2014/12/2572.greatday.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3493</title><link>https://mozillazg.com/2014/12/3493.whatusp.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3493/"&gt;Cyanide &amp;amp; Happiness #3493 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3493.whatusp.zh-cn.png" src="/static/images/comics/3493.whatusp.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-08:2014/12/3493.whatusp.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3765</title><link>https://mozillazg.com/2014/12/3765.happy-birthday-dave.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3765/"&gt;Cyanide &amp;amp; Happiness #3765 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3765.happy-birthday-dave.zh-cn.png" src="/static/images/comics/3765.happy-birthday-dave.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-07:2014/12/3765.happy-birthday-dave.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2930</title><link>https://mozillazg.com/2014/12/2930.He-refers-to-clothes-that-arent-from-thift-stores-as-Future-Vintage.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2930/"&gt;Cyanide &amp;amp; Happiness #2930 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2930.He-refers-to-clothes-that-arent-from-thift-stores-as-Future-Vintage.zh-cn.png" src="/static/images/comics/2930.He-refers-to-clothes-that-arent-from-thift-stores-as-Future-Vintage.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-06:2014/12/2930.He-refers-to-clothes-that-arent-from-thift-stores-as-Future-Vintage.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[go] 使用 gvm 管理 go 版本</title><link>https://mozillazg.com/2014/12/go-use-gvm-to-manage-go-version.html</link><description>&lt;p&gt;&lt;a href="https://github.com/moovweb/gvm"&gt;gvm&lt;/a&gt; 是个 go 版本管理工具。
可以让多个版本的 go 编译器在同一台机器上共存，并可以方便的切换要使用的 go 版本。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;安装依赖：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install curl git mercurial make binutils bison gcc build-essential
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装 gvm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bash &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果上面的脚本提示 &lt;code&gt;git clone&lt;/code&gt; 错误的话，可以通过下面的方式解决：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;wget&lt;/span&gt; &lt;span class="nn"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s s-Atom"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;githubusercontent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;moovweb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;master&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;binscripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;installer&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;vim&lt;/span&gt; &lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;installer&lt;/span&gt;   &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;修改&lt;/span&gt; &lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;installer&lt;/span&gt; &lt;span class="s s-Atom"&gt;文件&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;将&lt;/span&gt; &lt;span class="nv"&gt;SRC_REPO&lt;/span&gt;&lt;span class="s s-Atom"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;SRC_REPO&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="nn"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s s-Atom"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;moovweb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;git&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;改为&lt;/span&gt; &lt;span class="nv"&gt;SRC_REPO&lt;/span&gt;&lt;span class="s s-Atom"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;SRC_REPO&lt;/span&gt;&lt;span class="p"&gt;:-&lt;/span&gt;&lt;span class="nn"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s s-Atom"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;moovweb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;git&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="s s-Atom"&gt;bash&lt;/span&gt; &lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;installer&lt;/span&gt;
&lt;span class="nv"&gt;Cloning&lt;/span&gt; &lt;span class="s s-Atom"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="s s-Atom"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;moovweb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;git&lt;/span&gt; &lt;span class="s s-Atom"&gt;to&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;xx/.gvm&lt;/span&gt;
&lt;span class="nv"&gt;Created&lt;/span&gt; &lt;span class="s s-Atom"&gt;profile&lt;/span&gt; &lt;span class="s s-Atom"&gt;for&lt;/span&gt; &lt;span class="s s-Atom"&gt;existing&lt;/span&gt; &lt;span class="s s-Atom"&gt;install&lt;/span&gt; &lt;span class="s s-Atom"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;Go&lt;/span&gt; &lt;span class="s s-Atom"&gt;at&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/go&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;Installed&lt;/span&gt; &lt;span class="nv"&gt;GVM&lt;/span&gt; &lt;span class="s s-Atom"&gt;v1&lt;/span&gt;&lt;span class="mf"&gt;.0.22&lt;/span&gt;

&lt;span class="nv"&gt;Please&lt;/span&gt; &lt;span class="s s-Atom"&gt;restart&lt;/span&gt; &lt;span class="s s-Atom"&gt;your&lt;/span&gt; &lt;span class="s s-Atom"&gt;terminal&lt;/span&gt; &lt;span class="s s-Atom"&gt;session&lt;/span&gt; &lt;span class="s s-Atom"&gt;or&lt;/span&gt; &lt;span class="s s-Atom"&gt;to&lt;/span&gt; &lt;span class="s s-Atom"&gt;get&lt;/span&gt; &lt;span class="s s-Atom"&gt;started&lt;/span&gt; &lt;span class="s s-Atom"&gt;right&lt;/span&gt; &lt;span class="s s-Atom"&gt;away&lt;/span&gt; &lt;span class="s s-Atom"&gt;run&lt;/span&gt;
 &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="s s-Atom"&gt;source&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;xx/.gvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="s s-Atom"&gt;gvm&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;激活 gvm 脚本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; /home/xx/.gvm/scripts/gvm
$ gvm version
Go Version Manager v1.0.22 installed at /home/xx/.gvm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;安装不同版本的 go，比如安装 1.3 版本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm install go1.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果提示如下错误，是因为当前网络无法访问 go 源码仓储地址:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm install go1.3
Downloading Go source...
ERROR: Couldn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t download Go source. Check the logs /home/xx/.gvm/logs/go-download.log
$ tail ~/.gvm/logs/go-download.log
中止: 失败: Network is unreachable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以使用我在 bitbucket 上创建的镜像库(通过 -s/--source 指定 go 源码 hg 仓库的地址）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm install go1.3 --source&lt;span class="o"&gt;=&lt;/span&gt;https://mozillazg@bitbucket.org/mozillazg/go
Downloading Go source...
Installing go1.3...
 * Compiling...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看系统中安装的 go 版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm list

gvm gos &lt;span class="o"&gt;(&lt;/span&gt;installed&lt;span class="o"&gt;)&lt;/span&gt;

   go1.3
   system
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;切换当前使用的 go 版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go version
go version go1.2.1 linux/amd64
$
$ gvm use go1.3
Now using version go1.3
$ go version
go version go1.3 linux/amd64
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/moovweb/gvm"&gt;https://github.com/moovweb/gvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/mozillazg/go"&gt;https://bitbucket.org/mozillazg/go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-06:2014/12/go-use-gvm-to-manage-go-version.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1986</title><link>https://mozillazg.com/2014/12/1986.food.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1986/"&gt;Cyanide &amp;amp; Happiness #1986 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1986.food.zh-cn.png" src="/static/images/comics/1986.food.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 05 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-05:2014/12/1986.food.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3533</title><link>https://mozillazg.com/2014/12/3533.starvingkids.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3533/"&gt;Cyanide &amp;amp; Happiness #3533 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3533.starvingkids.zh-cn.png" src="/static/images/comics/3533.starvingkids.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-04:2014/12/3533.starvingkids.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3603</title><link>https://mozillazg.com/2014/12/3603.club2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3603/"&gt;Cyanide &amp;amp; Happiness #3603 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3603.club2.zh-cn.png" src="/static/images/comics/3603.club2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-03:2014/12/3603.club2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3430</title><link>https://mozillazg.com/2014/12/3430.cheap.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3430/"&gt;Cyanide &amp;amp; Happiness #3430 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3430.cheap.zh-cn.png" src="/static/images/comics/3430.cheap.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-12-02:2014/12/3430.cheap.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3454</title><link>https://mozillazg.com/2014/11/3454.pinching.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3454/"&gt;Cyanide &amp;amp; Happiness #3454 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3454.pinching.zh-cn.png" src="/static/images/comics/3454.pinching.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-30:2014/11/3454.pinching.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3431</title><link>https://mozillazg.com/2014/11/3431.hunting.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3431/"&gt;Cyanide &amp;amp; Happiness #3431 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3431.hunting.zh-cn.png" src="/static/images/comics/3431.hunting.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 29 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-29:2014/11/3431.hunting.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3758</title><link>https://mozillazg.com/2014/11/3758.your-water.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3758/"&gt;Cyanide &amp;amp; Happiness #3758 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3758.your-water.zh-cn.png" src="/static/images/comics/3758.your-water.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 29 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-29:2014/11/3758.your-water.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3757</title><link>https://mozillazg.com/2014/11/3757.shower.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3757/"&gt;Cyanide &amp;amp; Happiness #3757 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3757.shower.zh-cn.png" src="/static/images/comics/3757.shower.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-28:2014/11/3757.shower.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3051</title><link>https://mozillazg.com/2014/11/3051.youmakemefeelyoung.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3051/"&gt;Cyanide &amp;amp; Happiness #3051 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3051.youmakemefeelyoung.zh-cn.png" src="/static/images/comics/3051.youmakemefeelyoung.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-27:2014/11/3051.youmakemefeelyoung.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[python]通过 alembic 更改外键相关的属性</title><link>https://mozillazg.com/2014/11/python-alembic-change-foreignkey-attribute.html</link><description>&lt;p&gt;当我们想修改已有的外键字段属性值时， &lt;tt class="docutils literal"&gt;alembic reversion &lt;span class="pre"&gt;--autogenerate&lt;/span&gt;&lt;/tt&gt; 无法检查外键属性修改，
需要我们手动写相关的操作语句。&lt;/p&gt;
&lt;p&gt;下面以修改外键的 &lt;tt class="docutils literal"&gt;ondelete&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;onupdate&lt;/tt&gt; 属性为例，讲解如何修改外键属性。&lt;/p&gt;
&lt;p&gt;假设有如下 Model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;child&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parent_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent.id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在想要修改 &lt;tt class="docutils literal"&gt;Child&lt;/tt&gt; 中 &lt;tt class="docutils literal"&gt;parent_id&lt;/tt&gt; 的外键属性:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;parent.id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;onupdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CASCADE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ondelete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CASCADE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首先，需要从数据中查看 `` child`` 的建表语句，找到外键名称:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mysql&amp;gt;show create table child;
| child | CREATE TABLE `child` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `parent_id` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `child_ibfk_1` FOREIGN KEY (`parent_id`) REFERENCES `parent` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8 |
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;child_ibfk_1&lt;/tt&gt; 即为外键名称&lt;/p&gt;
&lt;p&gt;然后通过 &lt;tt class="docutils literal"&gt;alembic reversion&lt;/tt&gt; 生成一个 version 文件，打开生成的文件编辑内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;### commands auto generated by Alembic - please adjust! ###&lt;/span&gt;
    &lt;span class="c1"&gt;# 删除已有外键         外键名称        表名&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;child_ibfk_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foreignkey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 重新添加外键&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_foreign_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;child_ibfk_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;# 外键名称&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="c1"&gt;# 当前表的表名&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;parent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c1"&gt;# 外键指向的目标表的表名&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;parent_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;     &lt;span class="c1"&gt;# 外键列名（字段名）&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;            &lt;span class="c1"&gt;# 与目标表的某一列（字段）建立外键关系&lt;/span&gt;
        &lt;span class="n"&gt;onupdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CASCADE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ondelete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CASCADE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 新增的属性&lt;/span&gt;
    &lt;span class="c1"&gt;### end Alembic commands ###&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;downgrade&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;### commands auto generated by Alembic - please adjust! ###&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;child_ibfk_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foreignkey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_foreign_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;child_ibfk_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;child&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;parent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;parent_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;### end Alembic commands ###&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://alembic.readthedocs.org/en/latest/ops.html#alembic.operations.Operations.drop_constraint"&gt;drop_constraint&lt;/a&gt; 和 &lt;a class="reference external" href="http://alembic.readthedocs.org/en/latest/ops.html#alembic.operations.Operations.create_foreign_key"&gt;create_foreign_key&lt;/a&gt; 的基本用法已经在上面的注释中有说明了，
想要更详细的用法，请阅读相应的官方文档。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://alembic.readthedocs.org/en/latest/ops.html#alembic.operations.Operations.create_foreign_key"&gt;create_foreign_key Operation Reference — Alembic 0.7.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://alembic.readthedocs.org/en/latest/ops.html#alembic.operations.Operations.drop_constraint"&gt;drop_constraint Operation Reference — Alembic 0.7.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/forum/?_escaped_fragment_=topic/sqlalchemy-alembic/wHk9ZAtzmcw#!topic/sqlalchemy-alembic/wHk9ZAtzmcw"&gt;Add ondelete='CASCADE' to existing foreignkey - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/urschrei/CDP/blob/master/db/versions/25b06dd4bab6_add_sign_orphan_deletion_to_cdp.py"&gt;CDP/25b06dd4bab6_add_sign_orphan_deletion_to_cdp.py at master · urschrei/CDP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/zzzeek/alembic/issue/44/"&gt;zzzeek / alembic / issues / #44 - need operation to drop foreign key — Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/orm/session.html#cascades"&gt;Cascades - Using the Session — SQLAlchemy 0.9 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-25:2014/11/python-alembic-change-foreignkey-attribute.html</guid><category>sqlalchemy</category><category>alembic</category></item><item><title>[python]通过 alembic 重命名表列名（Model字段名）</title><link>https://mozillazg.com/2014/11/python-alembic-rename-column-name-field-name.html</link><description>&lt;p&gt;为什么要特意讲一下这个，是因为 alembic 无法自动检测是否对字段名进行了重命名操作，需要我们手动添加相关语句。&lt;/p&gt;
&lt;p&gt;假设有下面这样一个 Model&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们现在想要把 &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; 字段改名为 &lt;tt class="docutils literal"&gt;username&lt;/tt&gt;, 通过 &lt;tt class="docutils literal"&gt;alembic revision &lt;span class="pre"&gt;--autogenerate&lt;/span&gt;&lt;/tt&gt; 无法实现我们的目的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
INFO  [alembic.migration] Context impl MySQLImpl.
INFO  [alembic.migration] Will assume non-transactional DDL.
INFO  [alembic.autogenerate.compare] Detected added column 'user.username'
INFO  [alembic.autogenerate.compare] Detected removed column 'user.name'
  Generating /home/xx/alembic/versions/4475103466d3_rename_user_name_to_username.py .
.. done
&lt;/pre&gt;
&lt;p&gt;上面的检测结果明显不是我们想要的，需要手动更改生成的 version 文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.dialects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upgrade&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;### commands auto generated by Alembic - please adjust! ###&lt;/span&gt;
    &lt;span class="c1"&gt;# 把 user 表里的 name 列重命名为 username&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alter_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;existing_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;### end Alembic commands ###&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;downgrade&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;### commands auto generated by Alembic - please adjust! ###&lt;/span&gt;
    &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alter_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;existing_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;### end Alembic commands ###&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;alemblic upgrade&lt;/tt&gt; 命令结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ alembic upgrade 549c504fe1b5:4475103466d3 --sql
INFO  [alembic.migration] Context impl MySQLImpl.
INFO  [alembic.migration] Generating static SQL
INFO  [alembic.migration] Will assume non-transactional DDL.
INFO  [alembic.migration] Running upgrade 549c504fe1b5 -&amp;gt; 4475103466d3, rename User.name to username
-- Running upgrade 549c504fe1b5 -&amp;gt; 4475103466d3

ALTER TABLE user CHANGE name username VARCHAR(20) NULL;

UPDATE alembic_version SET version_num='4475103466d3';
&lt;/pre&gt;
&lt;p&gt;可以看到生成的 sql 语句就是我们想要的结果。&lt;/p&gt;
&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;alter_column&lt;/tt&gt; 方法进行重命名的基本用法就是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;alter_column('表名',&lt;/span&gt; '先有的列名', &lt;span class="pre"&gt;new_column_name='重命名后的列名',&lt;/span&gt; existring_type=字段类型)&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;alter_column&lt;/tt&gt; 方法可以更多的 &lt;tt class="docutils literal"&gt;ALTER TABLE&lt;/tt&gt; 操作，详见 &lt;a class="reference external" href="http://alembic.readthedocs.org/en/latest/ops.html#alembic.operations.Operations.alter_column"&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;参考&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://alembic.readthedocs.org/en/latest/ops.html#alembic.operations.Operations.alter_column"&gt;Operation Reference — Alembic 0.7.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-25:2014/11/python-alembic-rename-column-name-field-name.html</guid><category>alembic</category><category>sqlalchemy</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1204</title><link>https://mozillazg.com/2014/11/1204.life-imitates-art.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1204/"&gt;Cyanide &amp;amp; Happiness #1204 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1204.life-imitates-art.zh-cn.png" src="/static/images/comics/1204.life-imitates-art.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-23:2014/11/1204.life-imitates-art.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2637</title><link>https://mozillazg.com/2014/11/2637.gamesatwork2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2637/"&gt;Cyanide &amp;amp; Happiness #2637 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2637.gamesatwork2.zh-cn.png" src="/static/images/comics/2637.gamesatwork2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-23:2014/11/2637.gamesatwork2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3752</title><link>https://mozillazg.com/2014/11/3752.prison1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3752/"&gt;Cyanide &amp;amp; Happiness #3752 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3752.prison1.zh-cn.png" src="/static/images/comics/3752.prison1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-23:2014/11/3752.prison1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[linux]常用的 CentOS 5/6/7 yum 源</title><link>https://mozillazg.com/2014/11/linux-recommended-centos-5-6-7-yum-source.html</link><description>&lt;p&gt;下面是一些常用的 CentOS yum 源。&lt;/p&gt;
&lt;h2&gt;rpmforge&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# centos 5 i386
rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.i386.rpm
# centos 5 x86_64
rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el5.rf.x86_64.rpm

# centos 6 i686
rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.i686.
# centos 6 x86_64
rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm

# centos 7
rpm -Uvh http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el7.rf.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;epel&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# centos 5 i386
rpm -Uvh http://download.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
# centos 5 x86_64
rpm -Uvh http://download.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm

# centos 6 i386
rpm -Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
# centos 6 x86_64
rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

# centos 7
rpm -Uvh http://download.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-10.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;remi&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# centos 5
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm
# centos 6
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
# centos 7
rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;vim /etc/yum.repos.d/remi.repo&lt;/code&gt; 更改 &lt;code&gt;enabled=1&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;ius&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# centos 5 i386
rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/CentOS/5/i386/ius-release-1.0-13.ius.centos5.noarch.rpm
# centos 5 x86_64
rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/CentOS/5/x86_64/epel-release-5-4.noarch.rpm

# centos 6 i386
rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/i386/ius-release-1.0-13.ius.centos6.noarch.rpm
# centos 6 x86_64
rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-13.ius.centos6.noarch.rpm

# centos 7
rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-14.ius.centos7.noarch.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- yum install centos-release-SCL --&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-23:2014/11/linux-recommended-centos-5-6-7-yum-source.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1330</title><link>https://mozillazg.com/2014/11/1330.pool.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1330/"&gt;Cyanide &amp;amp; Happiness #1330 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1330.pool.zh-cn.png" src="/static/images/comics/1330.pool.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-21:2014/11/1330.pool.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[go]比较两个 slice/struct/map 是否相等</title><link>https://mozillazg.com/2014/11/go-compare-struct-slice-map-is-equal.html</link><description>&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;reflect.DeepEqual&lt;/tt&gt; 比较两个 slice/struct/map 是否相等:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;reflect&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;c1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;c2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DeepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在线演示地址： &lt;a class="reference external" href="http://play.golang.org/p/SB8LeLNdA8"&gt;http://play.golang.org/p/SB8LeLNdA8&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/24534072/golang-how-to-compare-struct-slice-map-is-equal"&gt;go - golang - how to compare struct, slice, map is equal? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-20:2014/11/go-compare-struct-slice-map-is-equal.html</guid></item><item><title>[linux]修复执行 make 命令时，提示：warning: Clock skew detected，导致无法执行 make 命令的问题</title><link>https://mozillazg.com/2014/11/linux-fix-make-warning-Clock-skew-detected.html</link><description>&lt;p&gt;有时，执行 &lt;code&gt;make&lt;/code&gt; 命令时会出现如下提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Clock&lt;/span&gt; &lt;span class="n"&gt;skew&lt;/span&gt; &lt;span class="n"&gt;detected&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;incomplete&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导致无法执行 &lt;code&gt;make&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;出现这个提示的原因是因为 Makefile 的修改时间大于系统的当前时间。
比如把本机的 Makefile 文件上传到服务器上时，而服务器上的时间比本机时间要慢，就会出现这种情况。&lt;/p&gt;
&lt;p&gt;有两种解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步本地时间和服务器时间。&lt;/li&gt;
&lt;li&gt;在服务器上通过 touch 命令修改 Makefile 文件的修改时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3824500/compling-c-on-remote-linux-machine-clock-skew-detected-warning"&gt;Compling C++ on remote Linux machine - "clock skew detected" warning - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-20:2014/11/linux-fix-make-warning-Clock-skew-detected.html</guid></item><item><title>[python]如何复制一个 class</title><link>https://mozillazg.com/2014/11/python-copy-a-class.html</link><description>&lt;p&gt;通过下面两种方法可以复制一个 &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class B(A): pass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B = type("B", (A,), {})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9541025/how-to-copy-a-python-class"&gt;How to copy a python class? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 20 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-20:2014/11/python-copy-a-class.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1117</title><link>https://mozillazg.com/2014/11/1117.redlightgreenlight.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1117/"&gt;Cyanide &amp;amp; Happiness #1117 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1117.redlightgreenlight.zh-cn.png" src="/static/images/comics/1117.redlightgreenlight.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-16:2014/11/1117.redlightgreenlight.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1974</title><link>https://mozillazg.com/2014/11/1974.neverwalk2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1974/"&gt;Cyanide &amp;amp; Happiness #1974 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1974.neverwalk2.zh-cn.png" src="/static/images/comics/1974.neverwalk2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-16:2014/11/1974.neverwalk2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3139</title><link>https://mozillazg.com/2014/11/3139.aswinterapproachesthemajesticbreadedshrimpmakesitslongandlonelytrekbacktoitsbirthplacetostartafamilywowyum.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3139/"&gt;Cyanide &amp;amp; Happiness #3139 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3139.aswinterapproachesthemajesticbreadedshrimpmakesitslongandlonelytrekbacktoitsbirthplacetostartafamilywowyum.zh-cn.png" src="/static/images/comics/3139.aswinterapproachesthemajesticbreadedshrimpmakesitslongandlonelytrekbacktoitsbirthplacetostartafamilywowyum.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-16:2014/11/3139.aswinterapproachesthemajesticbreadedshrimpmakesitslongandlonelytrekbacktoitsbirthplacetostartafamilywowyum.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3741</title><link>https://mozillazg.com/2014/11/3741.cake1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3741/"&gt;Cyanide &amp;amp; Happiness #3741 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3741.cake1.zh-cn.png" src="/static/images/comics/3741.cake1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-16:2014/11/3741.cake1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3747</title><link>https://mozillazg.com/2014/11/3747.sad-brains.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3747/"&gt;Cyanide &amp;amp; Happiness #3747 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3747.sad-brains.zh-cn.png" src="/static/images/comics/3747.sad-brains.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-16:2014/11/3747.sad-brains.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1442</title><link>https://mozillazg.com/2014/11/1442.hmmmm.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1442/"&gt;Cyanide &amp;amp; Happiness #1442 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1442.hmmmm.zh-cn.png" src="/static/images/comics/1442.hmmmm.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-15:2014/11/1442.hmmmm.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3088</title><link>https://mozillazg.com/2014/11/3088.youtube.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3088/"&gt;Cyanide &amp;amp; Happiness #3088 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3088.youtube.zh-cn.png" src="/static/images/comics/3088.youtube.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-14:2014/11/3088.youtube.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3737</title><link>https://mozillazg.com/2014/11/3737.vax.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3737/"&gt;Cyanide &amp;amp; Happiness #3737 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3737.vax.zh-cn.png" src="/static/images/comics/3737.vax.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-13:2014/11/3737.vax.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2539</title><link>https://mozillazg.com/2014/11/2539.family2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2539/"&gt;Cyanide &amp;amp; Happiness #2539 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2539.family2.zh-cn.png" src="/static/images/comics/2539.family2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-12:2014/11/2539.family2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2850</title><link>https://mozillazg.com/2014/11/2850.comicsawhowto1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2850/"&gt;Cyanide &amp;amp; Happiness #2850 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2850.comicsawhowto1.zh-cn.png" src="/static/images/comics/2850.comicsawhowto1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-09:2014/11/2850.comicsawhowto1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3731</title><link>https://mozillazg.com/2014/11/3731.bully2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3731/"&gt;Cyanide &amp;amp; Happiness #3731 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3731.bully2.zh-cn.png" src="/static/images/comics/3731.bully2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-09:2014/11/3731.bully2.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>解决 SQLAlchemy 中使用 sqlite 时 BigInteger 不支持 AUTOINCREMENT 的问题</title><link>https://mozillazg.com/2014/11/sqlalchemy-fix-BigInteger-AUTOINCREMENT-don't-work-when-use-sqlite.html</link><description>&lt;p&gt;默认情况下，在 SQLAlchemy 中使用 sqlite 作为数据库时， &lt;tt class="docutils literal"&gt;BigInteger&lt;/tt&gt; 不支持自动增长（AUTOINCREMENT），插入数据时会报如下错误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Query Error: AUTOINCREMENT is only allowed on an INTEGER PRIMARY KEY Unable to execute statement
&lt;/pre&gt;
&lt;p&gt;可以通过使用 &lt;tt class="docutils literal"&gt;compiles&lt;/tt&gt; 对 &lt;tt class="docutils literal"&gt;sqlite&lt;/tt&gt; 下的 &lt;tt class="docutils literal"&gt;BigInteger&lt;/tt&gt; 做特殊处理，让它实际上执行的是 &lt;tt class="docutils literal"&gt;Integer&lt;/tt&gt; 相关操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BigInteger&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.compiler&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;compiles&lt;/span&gt;


&lt;span class="nd"&gt;@compiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sqlite&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bi_c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INTEGER&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/zzzeek/sqlalchemy/issue/2074/map-biginteger-type-to-integer-to-allow"&gt;zzzeek / sqlalchemy / issues / #2074 - Map BigInteger type to INTEGER to allow AUTOINCREMENT to work —— Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/core/compiler.html?highlight=ext.compiler#sqlalchemy.ext.compiler.compiles"&gt;Custom SQL Constructs and Compilation Extension —— SQLAlchemy 0.9 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-05:2014/11/sqlalchemy-fix-BigInteger-AUTOINCREMENT-don't-work-when-use-sqlite.html</guid><category>SQLAlchemy</category></item><item><title>[flask]调整 Flask-RESTful 中 reqparse.RequestParser 对 None 值的处理</title><link>https://mozillazg.com/2014/11/flask-restful-reqparse-handle-none-value.html</link><description>&lt;p&gt;默认情况下，&lt;tt class="docutils literal"&gt;reqparse.RequestParser&lt;/tt&gt; 对 &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; 的处理结果是：
就算你定义了 &lt;tt class="docutils literal"&gt;required=True&lt;/tt&gt;，它仍旧会接受客户端提交的 &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; 不会返回 400 错误码。&lt;/p&gt;
&lt;p&gt;这往往违背了我们的初衷：一般对于 &lt;tt class="docutils literal"&gt;required=True&lt;/tt&gt; 的字段，我们希望在它的值为 &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; 的时候能够返回 400 错误码，提示该字段不能为 &lt;tt class="docutils literal"&gt;None&lt;/tt&gt;，
因为 &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; 值可能会在保存数据的时候引起数据库抛出 &lt;tt class="docutils literal"&gt;NOT NULL&lt;/tt&gt; 错误。&lt;/p&gt;
&lt;p&gt;可以通过定义一个 &lt;tt class="docutils literal"&gt;argument_class&lt;/tt&gt; 来改变 &lt;tt class="docutils literal"&gt;reqparse.RequestParser&lt;/tt&gt; 的默认行为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask.ext.restful&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reqparse&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reqparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Argument&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    继承自 reqparse.Argument, 增加 nullable 关键字参数，&lt;/span&gt;
&lt;span class="sd"&gt;    对于值为 None 并且 nullable=False 的字段 raise TypeError&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reqparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;values&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                 &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;store&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
                 &lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;operators&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; can&amp;#39;t be null&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;reqparse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reqparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Argument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reqparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reqparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/twilio/flask-restful/blob/master/flask_restful/reqparse.py"&gt;flask-restful/reqparse.py at master · twilio/flask-restful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 04 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-04:2014/11/flask-restful-reqparse-handle-none-value.html</guid><category>Flask-RESTful</category></item><item><title>《An Introduction to Programming in Go》学习笔记——安装 Go</title><link>https://mozillazg.com/2014/11/go-an-introduction-to-programming-in-go-notes-installation.html</link><description>&lt;p&gt;本文介绍在 Ubuntu 下用包管理器的安装过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 go: &lt;code&gt;sudo apt-get install golang&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量：&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mkdir ~/go  ~/go/src ~/go/pkg ~/go/bin          # go 工作目录&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 ~/.bashrc 中加入 &lt;code&gt;export GOPATH=/home/your-user-name/go&lt;/code&gt; （注意要把 your-user-name 替换为你本机的用户名，这里 &lt;strong&gt;不能使用 &lt;code&gt;~&lt;/code&gt; 代替 &lt;code&gt;/home/your-user-name&lt;/code&gt;&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;验证：直接在终端下输入 &lt;code&gt;go&lt;/code&gt; 命令就可以了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他安装方式以及在其他操作系统下的安装，请参考：&lt;a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/01.0.md"&gt;https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/01.0.md&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-03:2014/11/go-an-introduction-to-programming-in-go-notes-installation.html</guid></item><item><title>《An Introduction to Programming in Go》学习笔记——介绍</title><link>https://mozillazg.com/2014/11/go-an-introduction-to-programming-in-go-notes-introduction.html</link><description>&lt;p&gt;《An Introduction to Programming in Go》是一本 &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt;  语言入门书籍，
在线阅读地址：&lt;a href="http://www.golang-book.com/"&gt;http://www.golang-book.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://golang.org/"&gt;Go&lt;/a&gt;  语言是一种开源的、静态类型的编译型编程语言。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 03 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-03:2014/11/go-an-introduction-to-programming-in-go-notes-introduction.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1996</title><link>https://mozillazg.com/2014/11/1996.dinosaurs.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1996/"&gt;Cyanide &amp;amp; Happiness #1996 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1996.dinosaurs.zh-cn.png" src="/static/images/comics/1996.dinosaurs.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-02:2014/11/1996.dinosaurs.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2210</title><link>https://mozillazg.com/2014/11/2210.comicb1b1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2210/"&gt;Cyanide &amp;amp; Happiness #2210 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2210.comicb1b1.zh-cn.png" src="/static/images/comics/2210.comicb1b1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-02:2014/11/2210.comicb1b1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2559</title><link>https://mozillazg.com/2014/11/2559.comicsantassack1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2559/"&gt;Cyanide &amp;amp; Happiness #2559 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2559.comicsantassack1.zh-cn.png" src="/static/images/comics/2559.comicsantassack1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-02:2014/11/2559.comicsantassack1.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2659</title><link>https://mozillazg.com/2014/11/2659.date.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2659/"&gt;Cyanide &amp;amp; Happiness #2659 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2659.date.zh-cn.png" src="/static/images/comics/2659.date.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-02:2014/11/2659.date.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2698</title><link>https://mozillazg.com/2014/11/2698.interested.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2698/"&gt;Cyanide &amp;amp; Happiness #2698 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2698.interested.zh-cn.png" src="/static/images/comics/2698.interested.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-02:2014/11/2698.interested.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2841</title><link>https://mozillazg.com/2014/11/2841.movies.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2841/"&gt;Cyanide &amp;amp; Happiness #2841 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2841.movies.zh-cn.png" src="/static/images/comics/2841.movies.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-02:2014/11/2841.movies.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>修复无法启动 Oracle SQL Developer，提示：could not install some modules</title><link>https://mozillazg.com/2014/11/fix-could-not-install-some-modules-when-start-Oracle-SQL-Developer.html</link><description>&lt;p&gt;今天启动 Oracle SQL Developer时，提示如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Warning - could not install some modules:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;导致不能成功启动 Oracle SQL Developer。&lt;/p&gt;
&lt;p&gt;最后的解决办法是（ &lt;strong&gt;注意，这个办法会导致丢失所有之前定义的数据库连接配置&lt;/strong&gt; ）：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除 c:\Users\yourusername\AppData\Roaming\SQL Developer\ 目录下的 system4.0.0.12.84 文件夹&lt;/strong&gt; 。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.oracle.com/thread/2560920?start=0&amp;amp;tstart=0"&gt;Sql Developer 4.0 EA Winsdows 7 Could not insta... | Oracle Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-11-02:2014/11/fix-could-not-install-some-modules-when-start-Oracle-SQL-Developer.html</guid></item><item><title>[windows] 解决无法切换窗口</title><link>https://mozillazg.com/2014/10/windows-fix-can't-switch-window.html</link><description>&lt;p&gt;今天系统出现了无法切换窗口的情况，鼠标选择窗口没有效果，
必须最小化所有窗口（Win+d) 才能通过鼠标选择窗口。&lt;/p&gt;
&lt;p&gt;后来的解决办法是：
 &lt;strong&gt;重启 explorer.exe 进程&lt;/strong&gt; 。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-29:2014/10/windows-fix-can't-switch-window.html</guid></item><item><title>[go]等待 goroutine 结束</title><link>https://mozillazg.com/2014/10/go-wait-all-goroutines-end.html</link><description>&lt;p&gt;默认情况下，程序不会等待 goroutine 结束就退出了。
下面将讲解一种等待所有 goroutine 结束的方法：使用 &lt;tt class="docutils literal"&gt;sync.WaitGroup&lt;/tt&gt; 。&lt;/p&gt;
&lt;div class="section" id="sync-waitgroup"&gt;
&lt;h2 id="hidsync-waitgroup"&gt;使用 sync.WaitGroup&lt;a class="headerlink" href="#hidsync-waitgroup" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wg&lt;/span&gt; &lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WaitGroup&lt;/span&gt; &lt;span class="c1"&gt;// 定义 WaitGroup&lt;/span&gt;
    &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 增加一个 wait 任务&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 函数结束时，通知此 wait 任务已经完成&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 等待所有任务完成&lt;/span&gt;
    &lt;span class="nx"&gt;wg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在线演示地址：&lt;a class="reference external" href="http://play.golang.org/p/fECMMK8Rja"&gt;http://play.golang.org/p/fECMMK8Rja&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chan"&gt;
&lt;h2 id="hidchan"&gt;使用 chan&lt;a class="headerlink" href="#hidchan" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;评论区 remones 大佬提到了另一种方法，那就是使用 &lt;tt class="docutils literal"&gt;chan&lt;/tt&gt; 来实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}{}&lt;/span&gt;
        &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者 remones 大佬的版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;workFn&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doneC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;routine %d was finished.\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;doneC&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}{}&lt;/span&gt;
        &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;doneC&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;chs&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="kd"&gt;chan&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;workFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;chs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;chs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/18207772/how-to-wait-for-all-goroutines-to-finish-without-using-time-sleep"&gt;http://stackoverflow.com/questions/18207772/how-to-wait-for-all-goroutines-to-finish-without-using-time-sleep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing/"&gt;http://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.golang.org/share-memory-by-communicating"&gt;Share Memory By Communicating - The Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://dave.cheney.net/2014/03/25/the-empty-struct"&gt;The empty struct | Dave Cheney&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-27:2014/10/go-wait-all-goroutines-end.html</guid><category>goroutine</category></item><item><title>[mongodb]复制文档（document）</title><link>https://mozillazg.com/2014/10/mongodb-copy-document.html</link><description>&lt;p&gt;可以通过下列命令复制文档&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; use db1
&amp;gt; var docs=db.doc1.find();

&amp;gt; use db2;
&amp;gt; docs.forEach(function(doc){
    db.doc2.insert(doc); 
} );
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-27:2014/10/mongodb-copy-document.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness #1449</title><link>https://mozillazg.com/2014/10/1449.all-the-more-reason-to-continue-drinking.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1449/"&gt;Cyanide &amp;amp; Happiness #1449 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1449.all-the-more-reason-to-continue-drinking.zh-cn.png" src="/static/images/comics/1449.all-the-more-reason-to-continue-drinking.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-26:2014/10/1449.all-the-more-reason-to-continue-drinking.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1511：问题</title><link>https://mozillazg.com/2014/10/1511.problem.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1511/"&gt;Cyanide &amp;amp; Happiness #1511 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1511.problem.zh-cn.gif" src="/static/images/comics/1511.problem.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-26:2014/10/1511.problem.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2641：捐献给物理学事业</title><link>https://mozillazg.com/2014/10/2641.donatephysics3.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2641/"&gt;Cyanide &amp;amp; Happiness #2641 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2641.donatephysics3.zh-cn.gif" src="/static/images/comics/2641.donatephysics3.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-26:2014/10/2641.donatephysics3.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2812：幼鸟</title><link>https://mozillazg.com/2014/10/2812.His-name-is-Bird.-Baby-Bird.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2812/"&gt;Cyanide &amp;amp; Happiness #2812 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2812.His-name-is-Bird.-Baby-Bird.zh-cn.png" src="/static/images/comics/2812.His-name-is-Bird.-Baby-Bird.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-26:2014/10/2812.His-name-is-Bird.-Baby-Bird.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2924</title><link>https://mozillazg.com/2014/10/2924.asked.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2924/"&gt;Cyanide &amp;amp; Happiness #2924 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2924.asked.zh-cn.gif" src="/static/images/comics/2924.asked.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-26:2014/10/2924.asked.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3169</title><link>https://mozillazg.com/2014/10/3169.Nyet.zh-cn.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3169/"&gt;Cyanide &amp;amp; Happiness #3169 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3169.Nyet.zh-cn.gif" src="/static/images/comics/3169.Nyet.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-26:2014/10/3169.Nyet.zh-cn.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3289：律师</title><link>https://mozillazg.com/2014/10/3289.lawyer.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3289/"&gt;Cyanide &amp;amp; Happiness #3289 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3289.lawyer.zh-cn.gif" src="/static/images/comics/3289.lawyer.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-26:2014/10/3289.lawyer.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3720</title><link>https://mozillazg.com/2014/10/3720.apple.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3720/"&gt;Cyanide &amp;amp; Happiness #3720 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3720.apple.zh-cn.png" src="/static/images/comics/3720.apple.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-23:2014/10/3720.apple.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1287</title><link>https://mozillazg.com/2014/10/1287.hold.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1287/"&gt;Cyanide &amp;amp; Happiness #1287 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1287.hold.zh-cn.png" src="/static/images/comics/1287.hold.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-19:2014/10/1287.hold.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1415</title><link>https://mozillazg.com/2014/10/1415.roulette.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1415/"&gt;Cyanide &amp;amp; Happiness #1415 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1415.roulette.zh-cn.png" src="/static/images/comics/1415.roulette.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-19:2014/10/1415.roulette.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2580</title><link>https://mozillazg.com/2014/10/2580.morning.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2580/"&gt;Cyanide &amp;amp; Happiness #2580 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2580.morning.zh-cn.png" src="/static/images/comics/2580.morning.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-19:2014/10/2580.morning.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2870</title><link>https://mozillazg.com/2014/10/2870.nameit.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2870/"&gt;Cyanide &amp;amp; Happiness #2870 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2870.nameit.zh-cn.png" src="/static/images/comics/2870.nameit.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-19:2014/10/2870.nameit.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3101</title><link>https://mozillazg.com/2014/10/3101.saloon.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3101/"&gt;Cyanide &amp;amp; Happiness #3101 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3101.saloon.zh-cn.png" src="/static/images/comics/3101.saloon.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-19:2014/10/3101.saloon.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3346</title><link>https://mozillazg.com/2014/10/3346.blobbyohmrblobbyifonlyyoucouldmakeusunderstandblobbymrblobbyyourinfluencewillspreadacrosstheland.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3346/"&gt;Cyanide &amp;amp; Happiness #3346 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3346.blobbyohmrblobbyifonlyyoucouldmakeusunderstandblobbymrblobbyyourinfluencewillspreadacrosstheland.zh-cn.png" src="/static/images/comics/3346.blobbyohmrblobbyifonlyyoucouldmakeusunderstandblobbymrblobbyyourinfluencewillspreadacrosstheland.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-19:2014/10/3346.blobbyohmrblobbyifonlyyoucouldmakeusunderstandblobbymrblobbyyourinfluencewillspreadacrosstheland.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2463</title><link>https://mozillazg.com/2014/10/2463.pulled.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2463/"&gt;Cyanide &amp;amp; Happiness #2463 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2463.pulled.zh-cn.png" src="/static/images/comics/2463.pulled.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-18:2014/10/2463.pulled.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2466</title><link>https://mozillazg.com/2014/10/2466.I-have-always-wanted-to-end-a-comic-with-that-sentence.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2466/"&gt;Cyanide &amp;amp; Happiness #2466 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2466.I-have-always-wanted-to-end-a-comic-with-that-sentence.zh-cn.png" src="/static/images/comics/2466.I-have-always-wanted-to-end-a-comic-with-that-sentence.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-18:2014/10/2466.I-have-always-wanted-to-end-a-comic-with-that-sentence.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2833</title><link>https://mozillazg.com/2014/10/2833.jump.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2833/"&gt;Cyanide &amp;amp; Happiness #2833 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2833.jump.zh-cn.png" src="/static/images/comics/2833.jump.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-18:2014/10/2833.jump.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3716</title><link>https://mozillazg.com/2014/10/3716.mydad.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3716/"&gt;Cyanide &amp;amp; Happiness #3716 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3716.mydad.zh-cn.png" src="/static/images/comics/3716.mydad.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-18:2014/10/3716.mydad.zh-cn.html</guid><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3712</title><link>https://mozillazg.com/2014/10/3712.circus.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3712/"&gt;Cyanide &amp;amp; Happiness #3712 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3712.circus.zh-cn.png" src="/static/images/comics/3712.circus.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-17:2014/10/3712.circus.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1812</title><link>https://mozillazg.com/2014/10/1812.vet2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1812/"&gt;Cyanide &amp;amp; Happiness #1812 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1812.vet2.zh-cn.png" src="/static/images/comics/1812.vet2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 16 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-16:2014/10/1812.vet2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2015</title><link>https://mozillazg.com/2014/10/2015.DCWflowers.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2015/"&gt;Cyanide &amp;amp; Happiness #2015 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2015.DCWflowers.zh-cn.png" src="/static/images/comics/2015.DCWflowers.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-15:2014/10/2015.DCWflowers.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3547</title><link>https://mozillazg.com/2014/10/3547.honey2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3547/"&gt;Cyanide &amp;amp; Happiness #3547 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3547.honey2.zh-cn.png" src="/static/images/comics/3547.honey2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-14:2014/10/3547.honey2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3550</title><link>https://mozillazg.com/2014/10/3550.five.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3550/"&gt;Cyanide &amp;amp; Happiness #3550 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3550.five.zh-cn.png" src="/static/images/comics/3550.five.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-13:2014/10/3550.five.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3548</title><link>https://mozillazg.com/2014/10/3548.videogames2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3548/"&gt;Cyanide &amp;amp; Happiness #3548 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3548.videogames2.zh-cn.png" src="/static/images/comics/3548.videogames2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-12:2014/10/3548.videogames2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3555</title><link>https://mozillazg.com/2014/10/3555.If-only-we-had-noses.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3555/"&gt;Cyanide &amp;amp; Happiness #3555 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3555.If-only-we-had-noses.zh-cn.png" src="/static/images/comics/3555.If-only-we-had-noses.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 11 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-11:2014/10/3555.If-only-we-had-noses.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3152</title><link>https://mozillazg.com/2014/10/3152.keys.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3152/"&gt;Cyanide &amp;amp; Happiness #3152 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3152.keys.zh-cn.png" src="/static/images/comics/3152.keys.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-10:2014/10/3152.keys.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>Flask-SQLAlchemy 执行 exclude 查询</title><link>https://mozillazg.com/2014/10/flask-sqlalchemy-exclude-query.html</link><description>&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;filter&lt;/tt&gt; 间接实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# exclude name = &amp;#39;jim&amp;#39;&lt;/span&gt;
 &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_8/orm/query.html#sqlalchemy.orm.query.Query.filte"&gt;Querying — SQLAlchemy 0.8 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/16093475/flask-sqlalchemy-querying-a-column-with-not-equals"&gt;python - flask sqlalchemy querying a column with not equals - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-10:2014/10/flask-sqlalchemy-exclude-query.html</guid><category>python</category><category>flask</category><category>flask-sqlalchemy</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2412</title><link>https://mozillazg.com/2014/10/2412.sanwich5.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2412/"&gt;Cyanide &amp;amp; Happiness #2412 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2412.sanwich5.zh-cn.png" src="/static/images/comics/2412.sanwich5.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-10-09:2014/10/2412.sanwich5.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2991</title><link>https://mozillazg.com/2014/09/2991.freakout.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2991/"&gt;Cyanide &amp;amp; Happiness #2991 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2991.freakout.zh-cn.gif" src="/static/images/comics/2991.freakout.zh-cn.gif" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 27 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-27:2014/09/2991.freakout.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3692</title><link>https://mozillazg.com/2014/09/3692.after-you-die.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3692/"&gt;Cyanide &amp;amp; Happiness #3692 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3692.after-you-die.zh-cn.png" src="/static/images/comics/3692.after-you-die.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 26 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-26:2014/09/3692.after-you-die.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2962</title><link>https://mozillazg.com/2014/09/2962.keepaway.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2962/"&gt;Cyanide &amp;amp; Happiness #2962 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2962.keepaway.zh-cn.png" src="/static/images/comics/2962.keepaway.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-25:2014/09/2962.keepaway.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2120</title><link>https://mozillazg.com/2014/09/2120.clamChowder.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2120/"&gt;Cyanide &amp;amp; Happiness #2120 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2120.clamChowder.zh-cn.png" src="/static/images/comics/2120.clamChowder.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 24 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-24:2014/09/2120.clamChowder.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2413</title><link>https://mozillazg.com/2014/09/2413.guybar.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2413/"&gt;Cyanide &amp;amp; Happiness #2413 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2413.guybar.zh-cn.png" src="/static/images/comics/2413.guybar.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-23:2014/09/2413.guybar.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3689</title><link>https://mozillazg.com/2014/09/3689.turkey.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3689/"&gt;Cyanide &amp;amp; Happiness #3689 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3689.turkey.zh-cn.png" src="/static/images/comics/3689.turkey.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-22:2014/09/3689.turkey.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3683</title><link>https://mozillazg.com/2014/09/3683.well2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3683/"&gt;Cyanide &amp;amp; Happiness #3683 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3683.well2.zh-cn.png" src="/static/images/comics/3683.well2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 21 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-21:2014/09/3683.well2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3688</title><link>https://mozillazg.com/2014/09/3688.grind.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3688/"&gt;Cyanide &amp;amp; Happiness #3688 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3688.grind.zh-cn.png" src="/static/images/comics/3688.grind.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 20 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-20:2014/09/3688.grind.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3687</title><link>https://mozillazg.com/2014/09/3687.breast2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3687/"&gt;Cyanide &amp;amp; Happiness #3687 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3687.breast2.zh-cn.png" src="/static/images/comics/3687.breast2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 19 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-19:2014/09/3687.breast2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2560</title><link>https://mozillazg.com/2014/09/2560.imadoctor.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2560/"&gt;Cyanide &amp;amp; Happiness #2560 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2560.imadoctor.zh-cn.png" src="/static/images/comics/2560.imadoctor.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-18:2014/09/2560.imadoctor.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3682</title><link>https://mozillazg.com/2014/09/3682.cured.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3682/"&gt;Cyanide &amp;amp; Happiness #3682 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3682.cured.zh-cn.png" src="/static/images/comics/3682.cured.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-17:2014/09/3682.cured.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3681</title><link>https://mozillazg.com/2014/09/3681.woofywoofmeowmeowthedoggoeswoofthecatgoesmeowifthedogwantstoimpressthecathesaysmeowthecatgoesmeowbecausehegivesnoshits.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3681/"&gt;Cyanide &amp;amp; Happiness #3681 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3681.woofywoofmeowmeowthedoggoeswoofthecatgoesmeowifthedogwantstoimpressthecathesaysmeowthecatgoesmeowbecausehegivesnoshits.zh-cn.png" src="/static/images/comics/3681.woofywoofmeowmeowthedoggoeswoofthecatgoesmeowifthedogwantstoimpressthecathesaysmeowthecatgoesmeowbecausehegivesnoshits.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-16:2014/09/3681.woofywoofmeowmeowthedoggoeswoofthecatgoesmeowifthedogwantstoimpressthecathesaysmeowthecatgoesmeowbecausehegivesnoshits.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2193</title><link>https://mozillazg.com/2014/09/2193.drinking.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2193/"&gt;Cyanide &amp;amp; Happiness #2193 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2193.drinking.zh-cn.png" src="/static/images/comics/2193.drinking.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 15 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-15:2014/09/2193.drinking.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2493</title><link>https://mozillazg.com/2014/09/2493.comiconfirenew2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2493/"&gt;Cyanide &amp;amp; Happiness #2493 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2493.comiconfirenew2.zh-cn.png" src="/static/images/comics/2493.comiconfirenew2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 14 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-14:2014/09/2493.comiconfirenew2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2056</title><link>https://mozillazg.com/2014/09/2056.werewolf.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2056/"&gt;Cyanide &amp;amp; Happiness #2056 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2056.werewolf.zh-cn.png" src="/static/images/comics/2056.werewolf.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 13 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-13:2014/09/2056.werewolf.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3673</title><link>https://mozillazg.com/2014/09/3673.thousand.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3673/"&gt;Cyanide &amp;amp; Happiness #3673 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3673.thousand.zh-cn.png" src="/static/images/comics/3673.thousand.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-12:2014/09/3673.thousand.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3108</title><link>https://mozillazg.com/2014/09/3108.whosagoodboy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3108/"&gt;Cyanide &amp;amp; Happiness #3108 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3108.whosagoodboy.zh-cn.png" src="/static/images/comics/3108.whosagoodboy.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-11:2014/09/3108.whosagoodboy.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2064</title><link>https://mozillazg.com/2014/09/2064.They-never-mention-how-easily-mace-spreads-in-the-air.-I-learned-that-lesson-the-hard-way.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2064/"&gt;Cyanide &amp;amp; Happiness #2064 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2064.They-never-mention-how-easily-mace-spreads-in-the-air.-I-learned-that-lesson-the-hard-way.zh-cn.png" src="/static/images/comics/2064.They-never-mention-how-easily-mace-spreads-in-the-air.-I-learned-that-lesson-the-hard-way.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-03:2014/09/2064.They-never-mention-how-easily-mace-spreads-in-the-air.-I-learned-that-lesson-the-hard-way.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3399</title><link>https://mozillazg.com/2014/09/3399.whatanidiotheevenspeltfredwrong.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3399/"&gt;Cyanide &amp;amp; Happiness #3399 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3399.whatanidiotheevenspeltfredwrong.zh-cn.png" src="/static/images/comics/3399.whatanidiotheevenspeltfredwrong.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 03 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-03:2014/09/3399.whatanidiotheevenspeltfredwrong.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2079</title><link>https://mozillazg.com/2014/09/2079.seconds.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2079/"&gt;Cyanide &amp;amp; Happiness #2079 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2079.seconds.zh-cn.png" src="/static/images/comics/2079.seconds.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 02 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-02:2014/09/2079.seconds.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2076</title><link>https://mozillazg.com/2014/09/2076.comicicecreamgnomenew.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2076/"&gt;Cyanide &amp;amp; Happiness #2076 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2076.comicicecreamgnomenew.zh-cn.png" src="/static/images/comics/2076.comicicecreamgnomenew.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;the origins of the gnome hat      &lt;br /&gt;
地精帽的起源&lt;/p&gt;
&lt;p&gt;mommy mommy, look, i got
a jumbo ice cream!     &lt;br /&gt;
妈咪，快看，我得到了一个超大号
的冰淇淋！&lt;/p&gt;
&lt;p&gt;yowp!      &lt;br /&gt;
哎呦！&lt;/p&gt;
&lt;p&gt;wow, would you look at that...     &lt;br /&gt;
哇，瞧瞧这个。。。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-09-01:2014/09/2076.comicicecreamgnomenew.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness 14083101</title><link>https://mozillazg.com/2014/08/i-have-an-iphone.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/504393101675225088"&gt;https://twitter.com/Explosm/status/504393101675225088&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="i-have-an-iphone.zh-cn.png" src="/static/images/comics/i-have-an-iphone.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 31 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-31:2014/08/i-have-an-iphone.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness 14083001</title><link>https://mozillazg.com/2014/08/jewish.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/505179901708992514"&gt;https://twitter.com/Explosm/status/505179901708992514&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="jewish.zh-cn.png" src="/static/images/comics/jewish.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-30:2014/08/jewish.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3664</title><link>https://mozillazg.com/2014/08/3664.straight.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3664/"&gt;Cyanide &amp;amp; Happiness #3664 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3664.straight.zh-cn.png" src="/static/images/comics/3664.straight.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 29 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-29:2014/08/3664.straight.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2601</title><link>https://mozillazg.com/2014/08/2601.Peanut-butter-and-teeth.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2601/"&gt;Cyanide &amp;amp; Happiness #2601 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2601.Peanut-butter-and-teeth.zh-cn.png" src="/static/images/comics/2601.Peanut-butter-and-teeth.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-28:2014/08/2601.Peanut-butter-and-teeth.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2068</title><link>https://mozillazg.com/2014/08/2068.stay.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2068/"&gt;Cyanide &amp;amp; Happiness #2068 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2068.stay.zh-cn.png" src="/static/images/comics/2068.stay.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-27:2014/08/2068.stay.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2052</title><link>https://mozillazg.com/2014/08/2052.sleep.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2052/"&gt;Cyanide &amp;amp; Happiness #2052 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2052.sleep.zh-cn.png" src="/static/images/comics/2052.sleep.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-26:2014/08/2052.sleep.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2272</title><link>https://mozillazg.com/2014/08/2272.comickissonthelips1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2272/"&gt;Cyanide &amp;amp; Happiness #2272 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2272.comickissonthelips1.zh-cn.png" src="/static/images/comics/2272.comickissonthelips1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 24 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-24:2014/08/2272.comickissonthelips1.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness 14082301</title><link>https://mozillazg.com/2014/08/new-smartphone.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/502195080976171008"&gt;https://twitter.com/Explosm/status/502195080976171008&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="new-smartphone.zh-cn.png" src="/static/images/comics/new-smartphone.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 23 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-23:2014/08/new-smartphone.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness 14082101</title><link>https://mozillazg.com/2014/08/dont-step-on-my-coat.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/501514322061717505"&gt;https://twitter.com/Explosm/status/501514322061717505&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="dont-step-on-my-coat.zh-cn.png" src="/static/images/comics/dont-step-on-my-coat.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-21:2014/08/dont-step-on-my-coat.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2270</title><link>https://mozillazg.com/2014/08/2270.iloveyou.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2270/"&gt;Cyanide &amp;amp; Happiness #2270 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2270.iloveyou.zh-cn.png" src="/static/images/comics/2270.iloveyou.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 20 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-20:2014/08/2270.iloveyou.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3239</title><link>https://mozillazg.com/2014/08/3239.look.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3239/"&gt;Cyanide &amp;amp; Happiness #3239 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3239.look.zh-cn.png" src="/static/images/comics/3239.look.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 19 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-19:2014/08/3239.look.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3221</title><link>https://mozillazg.com/2014/08/3221.machine.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3221/"&gt;Cyanide &amp;amp; Happiness #3221 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3221.machine.zh-cn.png" src="/static/images/comics/3221.machine.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 18 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-18:2014/08/3221.machine.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3654</title><link>https://mozillazg.com/2014/08/3654.go-long.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3654/"&gt;Cyanide &amp;amp; Happiness #3654 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3654.go-long.zh-cn.png" src="/static/images/comics/3654.go-long.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 17 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-17:2014/08/3654.go-long.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3652</title><link>https://mozillazg.com/2014/08/3652.freak.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3652/"&gt;Cyanide &amp;amp; Happiness #3652 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3652.freak.zh-cn.png" src="/static/images/comics/3652.freak.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 16 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-16:2014/08/3652.freak.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness - 14081501</title><link>https://mozillazg.com/2014/08/who's-going.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/499728512484257792"&gt;https://twitter.com/Explosm/status/499728512484257792&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="who's-going.zh-cn.png" src="/static/images/comics/who's-going.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-15:2014/08/who's-going.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3039</title><link>https://mozillazg.com/2014/08/3039.aw.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3039/"&gt;Cyanide &amp;amp; Happiness #3039 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3039.aw.zh-cn.png" src="/static/images/comics/3039.aw.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-14:2014/08/3039.aw.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[windows] 修复无法启用网络连接共享，提示 “0x80004005” 错误</title><link>https://mozillazg.com/2014/08/windows-fix-cant-enable-network-connection-share-access-0x80004005-error.html</link><description>&lt;p&gt;今天在配置笔记本网络连接共享时，提示如下错误信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;---------------------------
Network Connections
---------------------------
Cannot enable shared access.

Error 0x80004005: Unspecified error
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后来通过 &lt;strong&gt;启用 Windows 防火墙服务&lt;/strong&gt; 的方式解决了。&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://answers.microsoft.com/en-us/windows/forum/windows_7-networking/error-cannot-enable-shared-access0x80004005-when/43da0b01-ab0d-49de-8fba-7b8edad5cde0"&gt;Error "Cannot enable shared access.0x80004005" when sharing - Microsoft Community &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 14 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-14:2014/08/windows-fix-cant-enable-network-connection-share-access-0x80004005-error.html</guid><category>windows</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3045</title><link>https://mozillazg.com/2014/08/3045.comictickfeckarse1.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3045/"&gt;Cyanide &amp;amp; Happiness #3045 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3045.comictickfeckarse1.zh-cn.png" src="/static/images/comics/3045.comictickfeckarse1.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-13:2014/08/3045.comictickfeckarse1.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3517</title><link>https://mozillazg.com/2014/08/3517.drink.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3517/"&gt;Cyanide &amp;amp; Happiness #3517 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3517.drink.zh-cn.png" src="/static/images/comics/3517.drink.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-12:2014/08/3517.drink.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3469</title><link>https://mozillazg.com/2014/08/3469.helloyesthisisthebottomyourbottomyouknowthatthingyoukeepjammingstuffintoifyoucallmeagainiwillbecallingtheproperauthoritiesthankyougoodbyexxx.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3469/"&gt;Cyanide &amp;amp; Happiness #3469 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3469.helloyesthisisthebottomyourbottomyouknowthatthingyoukeepjammingstuffintoifyoucallmeagainiwillbecallingtheproperauthoritiesthankyougoodbyexxx.zh-cn.png" src="/static/images/comics/3469.helloyesthisisthebottomyourbottomyouknowthatthingyoukeepjammingstuffintoifyoucallmeagainiwillbecallingtheproperauthoritiesthankyougoodbyexxx.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-11:2014/08/3469.helloyesthisisthebottomyourbottomyouknowthatthingyoukeepjammingstuffintoifyoucallmeagainiwillbecallingtheproperauthoritiesthankyougoodbyexxx.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3473</title><link>https://mozillazg.com/2014/08/3473.itsthehumanCENTIPEDEeveryonesfavouritecentipedehecanpoopandsingandscreaminyourbuttitstheHUMANCENTIPEDE.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3473/"&gt;Cyanide &amp;amp; Happiness #3473 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3473.itsthehumanCENTIPEDEeveryonesfavouritecentipedehecanpoopandsingandscreaminyourbuttitstheHUMANCENTIPEDE.zh-cn.png" src="/static/images/comics/3473.itsthehumanCENTIPEDEeveryonesfavouritecentipedehecanpoopandsingandscreaminyourbuttitstheHUMANCENTIPEDE.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-11:2014/08/3473.itsthehumanCENTIPEDEeveryonesfavouritecentipedehecanpoopandsingandscreaminyourbuttitstheHUMANCENTIPEDE.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3486</title><link>https://mozillazg.com/2014/08/3486.dungeon.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3486/"&gt;Cyanide &amp;amp; Happiness #3486 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3486.dungeon.zh-cn.png" src="/static/images/comics/3486.dungeon.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-11:2014/08/3486.dungeon.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3472</title><link>https://mozillazg.com/2014/08/3472.driving2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3472/"&gt;Cyanide &amp;amp; Happiness #3472 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3472.driving2.zh-cn.png" src="/static/images/comics/3472.driving2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-10:2014/08/3472.driving2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3462</title><link>https://mozillazg.com/2014/08/3462.theyllmakeamovieaboutthiscalledsonofthemask2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3462/"&gt;Cyanide &amp;amp; Happiness #3462 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3462.theyllmakeamovieaboutthiscalledsonofthemask2.zh-cn.png" src="/static/images/comics/3462.theyllmakeamovieaboutthiscalledsonofthemask2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 09 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-09:2014/08/3462.theyllmakeamovieaboutthiscalledsonofthemask2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3463</title><link>https://mozillazg.com/2014/08/3463.blond.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3463/"&gt;Cyanide &amp;amp; Happiness #3463 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3463.blond.zh-cn.png" src="/static/images/comics/3463.blond.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-08:2014/08/3463.blond.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3642</title><link>https://mozillazg.com/2014/08/3642.where-were-you.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3642/"&gt;Cyanide &amp;amp; Happiness #3642 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3642.where-were-you.zh-cn.png" src="/static/images/comics/3642.where-were-you.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-07:2014/08/3642.where-were-you.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3460</title><link>https://mozillazg.com/2014/08/3460.That-was-actually-kinda-uplifting-for-a-second-there.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3460/"&gt;Cyanide &amp;amp; Happiness #3460 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3460.That-was-actually-kinda-uplifting-for-a-second-there.zh-cn.png" src="/static/images/comics/3460.That-was-actually-kinda-uplifting-for-a-second-there.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-06:2014/08/3460.That-was-actually-kinda-uplifting-for-a-second-there.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3453</title><link>https://mozillazg.com/2014/08/3453.dothebouncydothebouncydothebouncy.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3453/"&gt;Cyanide &amp;amp; Happiness #3453 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3453.dothebouncydothebouncydothebouncy.zh-cn.png" src="/static/images/comics/3453.dothebouncydothebouncydothebouncy.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-05:2014/08/3453.dothebouncydothebouncydothebouncy.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1536</title><link>https://mozillazg.com/2014/08/jerky.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1536/"&gt;http://explosm.net/comics/1536/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="jerky.zh-cn.png" src="/static/images/comics/jerky.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-03:2014/08/jerky.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3100</title><link>https://mozillazg.com/2014/08/rude.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3100/"&gt;http://explosm.net/comics/3100/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rude.zh-cn.png" src="/static/images/comics/rude.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-03:2014/08/rude.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness - 14080201</title><link>https://mozillazg.com/2014/08/free-box.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/495462608091488256"&gt;https://twitter.com/Explosm/status/495462608091488256&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="free-box.zh-cn.png" src="/static/images/comics/free-box.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-02:2014/08/free-box.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness - 14080101</title><link>https://mozillazg.com/2014/08/compliment.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/493643781543952384"&gt;https://twitter.com/Explosm/status/493643781543952384&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="compliment.zh-cn.png" src="/static/images/comics/compliment.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-08-01:2014/08/compliment.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3634</title><link>https://mozillazg.com/2014/07/3634.Ryan-Hudson-Guest.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3634/"&gt;Cyanide &amp;amp; Happiness #3634 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3634.Ryan-Hudson-Guest.zh-cn.png" src="/static/images/comics/3634.Ryan-Hudson-Guest.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-28:2014/07/3634.Ryan-Hudson-Guest.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3629</title><link>https://mozillazg.com/2014/07/3629.thetruthishedidhavequackquackiswhenyousnortaduck.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3629/"&gt;Cyanide &amp;amp; Happiness #3629 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3629.thetruthishedidhavequackquackiswhenyousnortaduck.zh-cn.png" src="/static/images/comics/3629.thetruthishedidhavequackquackiswhenyousnortaduck.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-27:2014/07/3629.thetruthishedidhavequackquackiswhenyousnortaduck.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2429</title><link>https://mozillazg.com/2014/07/head.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2429/"&gt;http://explosm.net/comics/2429/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="head.zh-cn.png" src="/static/images/comics/head.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-27:2014/07/head.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness - 14072703</title><link>https://mozillazg.com/2014/07/ididit.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/491123359044755456"&gt;https://twitter.com/Explosm/status/491123359044755456&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ididit.zh-cn.png" src="/static/images/comics/ididit.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-27:2014/07/ididit.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness - 14072701</title><link>https://mozillazg.com/2014/07/jonestown.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/491995743142424576"&gt;https://twitter.com/Explosm/status/491995743142424576&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="jonestown.zh-cn.png" src="/static/images/comics/jonestown.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-27:2014/07/jonestown.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness - 140726</title><link>https://mozillazg.com/2014/07/genie.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/492214110214311936/"&gt;https://twitter.com/Explosm/status/492214110214311936/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="genie.zh-cn.png" src="/static/images/comics/genie.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-26:2014/07/genie.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3631</title><link>https://mozillazg.com/2014/07/3632.peed.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3631/"&gt;Cyanide &amp;amp; Happiness #3631 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3631.peed.zh-cn.png" src="/static/images/comics/3631.peed.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-25:2014/07/3632.peed.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3630</title><link>https://mozillazg.com/2014/07/3630.quitdrinking.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3630/"&gt;Cyanide &amp;amp; Happiness #3630 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3630.quitdrinking.zh-cn.png" src="/static/images/comics/3630.quitdrinking.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-24:2014/07/3630.quitdrinking.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3512</title><link>https://mozillazg.com/2014/07/make-a-wish.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3512/"&gt;http://explosm.net/comics/3512/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="make-a-wish.zh-cn.png" src="/static/images/comics/make-a-wish.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-24:2014/07/make-a-wish.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3429</title><link>https://mozillazg.com/2014/07/3429.youknowwhatkevinnashwasalwaysmyfavouritewrestlermotherfuckerwastallandhedidntdomuchbuthewasbigandgoodonthemicsothatwascool.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3429/"&gt;Cyanide &amp;amp; Happiness #3429 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3429.youknowwhatkevinnashwasalwaysmyfavouritewrestlermotherfuckerwastallandhedidntdomuchbuthewasbigandgoodonthemicsothatwascool.zh-cn.png" src="/static/images/comics/3429.youknowwhatkevinnashwasalwaysmyfavouritewrestlermotherfuckerwastallandhedidntdomuchbuthewasbigandgoodonthemicsothatwascool.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-23:2014/07/3429.youknowwhatkevinnashwasalwaysmyfavouritewrestlermotherfuckerwastallandhedidntdomuchbuthewasbigandgoodonthemicsothatwascool.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3628</title><link>https://mozillazg.com/2014/07/3628.thisonesdumb.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3628/"&gt;Cyanide &amp;amp; Happiness #3628 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3628.thisonesdumb.zh-cn.png" src="/static/images/comics/3628.thisonesdumb.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-23:2014/07/3628.thisonesdumb.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2481</title><link>https://mozillazg.com/2014/07/good-thing-you-knew-the-heimlich-maneuver.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2481/"&gt;http://explosm.net/comics/2481/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="good-thing-you-knew-the-heimlich-maneuver.zh-cn.png" src="/static/images/comics/good-thing-you-knew-the-heimlich-maneuver.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-23:2014/07/good-thing-you-knew-the-heimlich-maneuver.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3425</title><link>https://mozillazg.com/2014/07/3425.whichwaydidhegobosswhichwaydidhego.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3425/"&gt;Cyanide &amp;amp; Happiness #3425 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3425.whichwaydidhegobosswhichwaydidhego.zh-cn.png" src="/static/images/comics/3425.whichwaydidhegobosswhichwaydidhego.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-22:2014/07/3425.whichwaydidhegobosswhichwaydidhego.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3427</title><link>https://mozillazg.com/2014/07/3427.drugsa.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3427/"&gt;Cyanide &amp;amp; Happiness #3427 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3427.drugsa.zh-cn.png" src="/static/images/comics/3427.drugsa.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-22:2014/07/3427.drugsa.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1518</title><link>https://mozillazg.com/2014/07/i-dont-get-a-chance-to-tell-him.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1518/"&gt;http://explosm.net/comics/1518/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="i-dont-get-a-chance-to-tell-him.zh-cn.png" src="/static/images/comics/i-dont-get-a-chance-to-tell-him.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-22:2014/07/i-dont-get-a-chance-to-tell-him.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3625</title><link>https://mozillazg.com/2014/07/3625.wheredobabies.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3625/"&gt;Cyanide &amp;amp; Happiness #3625 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3625.wheredobabies.zh-cn.png" src="/static/images/comics/3625.wheredobabies.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-21:2014/07/3625.wheredobabies.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3626</title><link>https://mozillazg.com/2014/07/3626.addiction.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3626/"&gt;Cyanide &amp;amp; Happiness #3626 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3626.addiction.zh-cn.png" src="/static/images/comics/3626.addiction.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-20:2014/07/3626.addiction.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #2134</title><link>https://mozillazg.com/2014/07/happy-birthday.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/2134/"&gt;http://explosm.net/comics/2134/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="happy-birthday.zh-cn.png" src="/static/images/comics/happy-birthday.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 19 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-19:2014/07/happy-birthday.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness - farted</title><link>https://mozillazg.com/2014/07/farted.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/RobDenBleyker/status/489187427014033408/"&gt;https://twitter.com/RobDenBleyker/status/489187427014033408/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="farted.zh-cn.png" src="/static/images/comics/farted.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 18 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-18:2014/07/farted.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>修复启动 sqldeveloper 时出现“Unable to create an instance of the Java Virtual Machine Located at path”错误</title><link>https://mozillazg.com/2014/07/fix-Unable-to-create-an-instance-of-the-Java-Virtual-Machine-Located-at-path-error-for-oracle-sqldeveloper.html</link><description>&lt;p&gt;刚才打开 sqldeveloper 时提示如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Unable to create an instance of the Java Virtual Machine
Located at path:
x:\xxxx\jre\bin\client\jvm.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后的解决办法是：编辑 &lt;code&gt;sqldeveloper.exe&lt;/code&gt; 所在目录下的 &lt;code&gt;ide\bin\ide.conf&lt;/code&gt; 文件，
将 38 行左右的 &lt;code&gt;AddVMOption  -Xmx800M&lt;/code&gt; 改为 &lt;code&gt;AddVMOption -Xmx512M&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# AddVMOption  -Xmx800M
AddVMOption -Xmx512M
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pisceansheart.wordpress.com/2009/08/06/solution-to-unable-to-create-an-instance-of-the-java-virtual-machine-for-jdeveloper/"&gt;Solution to ‘Unable to Create an Instance of the Java Virtual Machine’ for JDeveloper | In Piscean's Heart &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-17:2014/07/fix-Unable-to-create-an-instance-of-the-Java-Virtual-Machine-Located-at-path-error-for-oracle-sqldeveloper.html</guid><category>sqldeveloper</category></item><item><title>[译][漫]Cyanide &amp; Happiness #1954</title><link>https://mozillazg.com/2014/07/what's-he-saying.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/1954/"&gt;http://explosm.net/comics/1954/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="what's-he-saying.zh-cn.png" src="/static/images/comics/what's-he-saying.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-17:2014/07/what's-he-saying.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3621</title><link>https://mozillazg.com/2014/07/3621.friends2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3621/"&gt;Cyanide &amp;amp; Happiness #3621 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3621.friends2.zh-cn.png" src="/static/images/comics/3621.friends2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 16 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-16:2014/07/3621.friends2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[python]使用 tox 测试代码在不同环境下的兼容性</title><link>https://mozillazg.com/2014/07/python-use-tox-test-code.html</link><description>&lt;div class="section" id="tox"&gt;
&lt;h2 id="hidtox"&gt;Tox 是什么？&lt;a class="headerlink" href="#hidtox" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tox 是个标准的 &lt;a class="reference external" href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; 管理器和命令行测试工具。你可以用于:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;检查你的软件包能否在不同的 Python 版本或解释器下正常安装&lt;/li&gt;
&lt;li&gt;在不同的环境中运行运行你的测试代码&lt;/li&gt;
&lt;li&gt;作为持续集成服务器的前端，大大减少测试工作所需时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;安装&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pip install tox&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;简单使用&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;使用前，请确保系统中已经安装了不同版本的 Python 解释器&lt;/strong&gt; :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 ~$ python -V
Python 2.7.6
 ~$ python2.6 -V
Python 2.6.9
 ~$ python3.3 -V
Python 3.3.2+
 ~$ python3.4 -V
Python 3.4.0
 ~$ pypy -V
Python 2.7.3 (2.2.1+dfsg-1, Nov 28 2013, 05:13:10)
[PyPy 2.2.1 with GCC 4.8.2]
&lt;/pre&gt;
&lt;p&gt;假设有个项目叫 hello_tox, 包含 test_hello.py 和 setup.py 两个文件。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;test_hello.py&lt;/tt&gt; 内容如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def test_hell():
    print 'hello'
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; 内容如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from setuptools import setup

setup(
    name=&amp;quot;test_tox&amp;quot;,
    script=['test_hello'],
)
&lt;/pre&gt;
&lt;p&gt;下面将演示如何使用 tox 测试这个程序。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;建立配置文件&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tox-quickstart&lt;/span&gt;&lt;/tt&gt; 命令或文本编辑器在 &lt;strong&gt;项目根目录/setup.py 所在目录&lt;/strong&gt; 建立配置文件 tox.ini :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# content of: tox.ini , put in same dir as setup.py
[tox]
# 要测试的 Python 版本
envlist = py27,py34
[testenv]
# 安装依赖
deps=pytest
# 测试时要执行的命令
commands=py.test
&lt;/pre&gt;
&lt;p&gt;现在目录结构如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 ~/hello_tox$ tree
.
├── setup.py
├── test_hello.py
└── tox.ini

0 directories, 3 files
&lt;/pre&gt;
&lt;p&gt;执行 &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; 命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 ~/hello_tox$ tox
GLOB sdist-make: /home/xxx/hello_tox/setup.py
py27 create: /home/xxx/hello_tox/.tox/py27
py27 installdeps: pytest
py27 inst: /home/xxx/hello_tox/.tox/dist/test_tox-0.0.0.zip
py27 runtests: PYTHONHASHSEED='2501568866'
py27 runtests: commands[0] | py.test
================================================================ test session starts ================================================================
platform linux2 -- Python 2.7.6 -- py-1.4.21 -- pytest-2.5.2
collected 1 items

test_hello.py .

============================================================= 1 passed in 0.01 seconds ==============================================================
py34 create: /home/xxx/hello_tox/.tox/py34
py34 installdeps: pytest
py34 inst: /home/xxx/hello_tox/.tox/dist/test_tox-0.0.0.zip
py34 runtests: PYTHONHASHSEED='2501568866'
py34 runtests: commands[0] | py.test
================================================================ test session starts ================================================================
platform linux -- Python 3.4.0 -- py-1.4.21 -- pytest-2.5.2
collected 0 items / 1 errors

====================================================================== ERRORS =======================================================================
__________________________________________________________ ERROR collecting test_hello.py ___________________________________________________________
.tox/py34/lib/python3.4/site-packages/_pytest/python.py:451: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=True)
.tox/py34/lib/python3.4/site-packages/py/_path/local.py:620: in pyimport
    __import__(modname)
E     File &amp;quot;/home/xxx/hello_tox/test_hello.py&amp;quot;, line 2
E       print 'hello'
E                   ^
E   SyntaxError: invalid syntax
============================================================== 1 error in 0.05 seconds ==============================================================
ERROR: InvocationError: '/home/xxx/hello_tox/.tox/py34/bin/py.test'
______________________________________________________________________ summary ______________________________________________________________________
  py27: commands succeeded
ERROR:   py34: commands failed
 ~/hello_tox$
&lt;/pre&gt;
&lt;p&gt;上面就是测试的结果了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;高级使用&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;自定义环境&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认支持如下环境名称：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;py24  (python 2.4)&lt;/li&gt;
&lt;li&gt;py25  (python 2.5)&lt;/li&gt;
&lt;li&gt;py26  (python 2.6)&lt;/li&gt;
&lt;li&gt;py27  (python 2.7)&lt;/li&gt;
&lt;li&gt;py30  (python 3.0)&lt;/li&gt;
&lt;li&gt;py31  (python 3.1)&lt;/li&gt;
&lt;li&gt;py32  (python 3.2)&lt;/li&gt;
&lt;li&gt;py33  (python 3.3)&lt;/li&gt;
&lt;li&gt;py34  (python 3.4)&lt;/li&gt;
&lt;li&gt;jython (jpython)&lt;/li&gt;
&lt;li&gt;pypy   (pypy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自定义不同的环境，比如说&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;py26-webpy  (python 2.6 + web.py)&lt;/li&gt;
&lt;li&gt;py33-bottle (python 3.3 + bottle)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改上面的 tox.ini 文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# content of: tox.ini , put in same dir as setup.py
[tox]
# 环境列表
envlist = py26-webpy,py33-bottle

[testenv]
# 测试时要执行的命令
commands = py.test

# 定义名为 base 的环境
[base]
deps = pytest

# 定义名为 py26-webpy 的环境
[testenv:py26-webpy]
# Python 解释器
basepython = python2.6
# 依赖
# 同时应用 base 中定义的 deps 变量
deps =
  {[base]deps}
  web.py

# 定义名为 py33-bottle 的环境
[testenv:py33-bottle]
basepython = python3.3
deps =
  {[base]deps}
  bottle
&lt;/pre&gt;
&lt;p&gt;更改 test_hello.py 文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import web
import bottle


def test_hell():
    print 'hello'
&lt;/pre&gt;
&lt;p&gt;执行 &lt;cite&gt;tox&lt;/cite&gt; 命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 ~/hello_tox$ tox
GLOB sdist-make: /home/xxx/hello_tox/setup.py
py26-webpy create: /home/xxx/hello_tox/.tox/py26-webpy
py26-webpy installdeps: pytest, web.py
py26-webpy inst: /home/xxx/hello_tox/.tox/dist/test_tox-0.0.0.zip
py26-webpy runtests: PYTHONHASHSEED='4132868947'
py26-webpy runtests: commands[0] | py.test
=================================================== test session starts ====================================================
platform linux2 -- Python 2.6.9 -- py-1.4.21 -- pytest-2.5.2
collected 0 items / 1 errors

========================================================== ERRORS ==========================================================
______________________________________________ ERROR collecting test_hello.py ______________________________________________
test_hello.py:2: in &amp;lt;module&amp;gt;
    import bottle
E   ImportError: No module named bottle
================================================= 1 error in 0.05 seconds ==================================================
ERROR: InvocationError: '/home/xxx/hello_tox/.tox/py26-webpy/bin/py.test'
py33-bottle create: /home/xxx/hello_tox/.tox/py33-bottle
py33-bottle installdeps: pytest, bottle
py33-bottle inst: /home/xxx/hello_tox/.tox/dist/test_tox-0.0.0.zip
py33-bottle runtests: PYTHONHASHSEED='4132868947'
py33-bottle runtests: commands[0] | py.test
=================================================== test session starts ====================================================
platform linux -- Python 3.3.2 -- py-1.4.21 -- pytest-2.5.2
collected 0 items / 1 errors

========================================================== ERRORS ==========================================================
______________________________________________ ERROR collecting test_hello.py ______________________________________________
.tox/py33-bottle/lib/python3.3/site-packages/_pytest/python.py:451: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=True)
.tox/py33-bottle/lib/python3.3/site-packages/py/_path/local.py:620: in pyimport
    __import__(modname)
E     File &amp;quot;/home/xxx/hello_tox/test_hello.py&amp;quot;, line 6
E       print 'hello'
E                   ^
E   SyntaxError: invalid syntax
================================================= 1 error in 0.04 seconds ==================================================
ERROR: InvocationError: '/home/xxx/hello_tox/.tox/py33-bottle/bin/py.test'
_________________________________________________________ summary __________________________________________________________
ERROR:   py26-webpy: commands failed
ERROR:   py33-bottle: commands failed
 ~/hello_tox$
&lt;/pre&gt;
&lt;p&gt;其他用法请阅读 &lt;a class="reference external" href="http://tox.readthedocs.org/en/latest/"&gt;Tox 官方文档&lt;/a&gt; 或后续更新。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 16 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-16:2014/07/python-use-tox-test-code.html</guid></item><item><title>[译][漫]Cyanide &amp; Happiness - Facebook</title><link>https://mozillazg.com/2014/07/explosm.facebook.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="https://twitter.com/Explosm/status/488049842480893952/photo/1"&gt;Cyanide &amp;amp; Happiness - Facebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="explosm.facebook.zh-cn.png" src="/static/images/comics/explosm.facebook.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 15 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-15:2014/07/explosm.facebook.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3618</title><link>https://mozillazg.com/2014/07/3618.mad.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3618/"&gt;Cyanide &amp;amp; Happiness #3618 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3618.mad.zh-cn.png" src="/static/images/comics/3618.mad.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-14:2014/07/3618.mad.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3617</title><link>https://mozillazg.com/2014/07/3617.job.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3617/"&gt;Cyanide &amp;amp; Happiness #3617 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3617.job.zh-cn.png" src="/static/images/comics/3617.job.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-13:2014/07/3617.job.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3447</title><link>https://mozillazg.com/2014/07/3447.talkaboutsex2.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3447/"&gt;Cyanide &amp;amp; Happiness #3447 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3447.talkaboutsex2.zh-cn.png" src="/static/images/comics/3447.talkaboutsex2.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-09:2014/07/3447.talkaboutsex2.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3613</title><link>https://mozillazg.com/2014/07/3613.smoke.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3613/"&gt;Cyanide &amp;amp; Happiness #3613 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3613.smoke.zh-cn.png" src="/static/images/comics/3613.smoke.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-09:2014/07/3613.smoke.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3610</title><link>https://mozillazg.com/2014/07/3610.baby.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3610/"&gt;Cyanide &amp;amp; Happiness #3610 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3610.baby.zh-cn.png" src="/static/images/comics/3610.baby.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 06 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-06:2014/07/3610.baby.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3607</title><link>https://mozillazg.com/2014/07/3607.gin.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3607/"&gt;Cyanide &amp;amp; Happiness #3607 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3607.gin.zh-cn.png" src="/static/images/comics/3607.gin.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-03:2014/07/3607.gin.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3445</title><link>https://mozillazg.com/2014/07/3445.dontplaygameswithgrandmashelldieonyourass.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3445/"&gt;Cyanide &amp;amp; Happiness #3445 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3445.dontplaygameswithgrandmashelldieonyourass.zh-cn.png" src="/static/images/comics/3445.dontplaygameswithgrandmashelldieonyourass.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-07-02:2014/07/3445.dontplaygameswithgrandmashelldieonyourass.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3476</title><link>https://mozillazg.com/2014/06/3476.ihavetwobigballs.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3476/"&gt;Cyanide &amp;amp; Happiness #3476 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3476.ihavetwobigballs.zh-cn.png" src="/static/images/comics/3476.ihavetwobigballs.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-30:2014/06/3476.ihavetwobigballs.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3467</title><link>https://mozillazg.com/2014/06/3467.join3.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3467/"&gt;Cyanide &amp;amp; Happiness #3467 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3467.join3.zh-cn.png" src="/static/images/comics/3467.join3.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-29:2014/06/3467.join3.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3480</title><link>https://mozillazg.com/2014/06/3480.sunrise.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3480/"&gt;Cyanide &amp;amp; Happiness #3480 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3480.sunrise.zh-cn.png" src="/static/images/comics/3480.sunrise.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-28:2014/06/3480.sunrise.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3601</title><link>https://mozillazg.com/2014/06/3601.dammitjohnsondammit.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3601/"&gt;Cyanide &amp;amp; Happiness #3601 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3601.dammitjohnsondammit.zh-cn.png" src="/static/images/comics/3601.dammitjohnsondammit.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 27 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-27:2014/06/3601.dammitjohnsondammit.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3599</title><link>https://mozillazg.com/2014/06/3599.drugs.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3599/"&gt;Cyanide &amp;amp; Happiness #3599 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3599.drugs.zh-cn.png" src="/static/images/comics/3599.drugs.zh-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;hey man, want some drugs?&lt;/p&gt;
&lt;p&gt;no way! i don't think
you understand how dangerous
drugs are!&lt;/p&gt;
&lt;p&gt;here's an example:
this is your brain.&lt;/p&gt;
&lt;p&gt;and this is your brain on drugs.&lt;/p&gt;
&lt;p&gt;and this is your brain on my head.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 26 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-26:2014/06/3599.drugs.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3598</title><link>https://mozillazg.com/2014/06/3598.plasticbags.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3598/"&gt;Cyanide &amp;amp; Happiness #3598 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3598.plasticbags.zh-cn" src="/static/images/comics/3598.plasticbags.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-24:2014/06/3598.plasticbags.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3538</title><link>https://mozillazg.com/2014/06/3538.eatdatkiduprealgoodyummmmmmboilimmashimstickiminastew.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3538/"&gt;Cyanide &amp;amp; Happiness #3538 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3538.eatdatkiduprealgoodyummmmmmboilimmashimstickiminastew.zh-cn.png" src="/static/images/comics/3538.eatdatkiduprealgoodyummmmmmboilimmashimstickiminastew.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 23 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-23:2014/06/3538.eatdatkiduprealgoodyummmmmmboilimmashimstickiminastew.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3594</title><link>https://mozillazg.com/2014/06/3594.laundryoppositeday.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3594/"&gt;Cyanide &amp;amp; Happiness #3594 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3594.laundryoppositeday.zh-cn.png" src="/static/images/comics/3594.laundryoppositeday.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-21:2014/06/3594.laundryoppositeday.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3595</title><link>https://mozillazg.com/2014/06/3595.batman.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3595/"&gt;Cyanide &amp;amp; Happiness #3595 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3595.batman.zh-cn.png" src="/static/images/comics/3595.batman.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-21:2014/06/3595.batman.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[linux] 修复 Redmine 无法发送通知邮件，提示 550 5.7.1 Unable to relay 的问题</title><link>https://mozillazg.com/2014/06/linux-fix-redmine-send-mail-error-550-5.7.1-Unable-to-relay.html</link><description>&lt;p&gt;前两天接手了公司 Redmine 系统的维护工作，需要写一个安装维护文档。
所以我就在本地虚拟机上尝试进行了一下安装。
安装后，测试使用的过程中遇到了无法发送通知邮件的问题， 日志信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The following error occured while sending email notification:
&amp;quot;550 5.7.1 Unable to relay&amp;quot;.
Check your configuration in config/configuration.yml.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Redmine 版本： 1.2.1&lt;/p&gt;
&lt;p&gt;最终的解决办法是，修改 config/configuration.yml ，添加 &lt;code&gt;authentication: :none&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;default:
  # Outgoing emails configuration (see examples above)
  email_delivery:
    delivery_method: :smtp
    smtp_settings:
      address: domain.com
      port: 25
      domain: domain.com
      authentication: :none    # 修改项
      # authentication: :login
      # user_name: &amp;quot;redmine@example.net&amp;quot;
      # password: &amp;quot;redmine&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.redmine.org/boards/2/topics/19732"&gt;Test e-mail works but notifications aren't send - Redmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://community.bitnami.com/t/notification-emails-not-sent-but-test-emails-do-work/2186/2"&gt;Notification Emails not sent, but test emails do work - Bitnami Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.redmine.org/boards/2/topics/30851"&gt;Redmine 2.0: error sending email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-09:2014/06/linux-fix-redmine-send-mail-error-550-5.7.1-Unable-to-relay.html</guid><category>linux</category><category>redmine</category></item><item><title>[python] 定义抽象基类(Abstract Base Classes)</title><link>https://mozillazg.com/2014/06/python-define-abstract-base-classes.html</link><description>&lt;p&gt;抽象基类一般用于规定子类必须重新定义某些方法。比如 web 框架中的 cache 部分的基类一般类似下面这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseCache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subclasses of BaseCache must provide a get() method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subclasses of BaseCache must provide a set() method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MemcachedCache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseCache&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在插件、cache、session 等支持功能扩展的系统中，常用抽象基类来统一接口。&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Why use Abstract Base Classes?&lt;/p&gt;
&lt;p&gt;Abstract base classes are a form of interface checking more strict than individual hasattr() checks for particular methods. By defining an abstract base class, you can define a common API for a set of subclasses. This capability is especially useful in situations where a third-party is going to provide implementations, such as with plugins to an application, but can also aid you when working on a large team or with a large code-base where keeping all classes in your head at the same time is difficult or not possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面介绍三种定义抽象基类的方法。&lt;/p&gt;
&lt;div class="section" id="assert"&gt;
&lt;h2 id="hidassert"&gt;使用 assert 语句&lt;a class="headerlink" href="#hidassert" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subclasses of BaseClass must provide an action() method&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AssertionError&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="n"&gt;f195c0ee1f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="n"&gt;c84a2cb72e&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;         &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subclasses of BaseClass must provide an action() method&amp;#39;&lt;/span&gt;

&lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subclasses&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;provide&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notimplementederror"&gt;
&lt;h2 id="hidnotimplementederror"&gt;使用 NotImplementedError 异常&lt;a class="headerlink" href="#hidnotimplementederror" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subclasses of BaseClass must provide an action() method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;                       &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="n"&gt;f195c0ee1f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;81782&lt;/span&gt;&lt;span class="n"&gt;a1e8377&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subclasses of BaseClass must provide an action() method&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="ne"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;subclasses&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;provide&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abc"&gt;
&lt;h2 id="hidabc"&gt;使用 abc 模块&lt;a class="headerlink" href="#hidabc" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;python 2.6, 2.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;

    &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;                                 &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="n"&gt;f195c0ee1f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t instantiate abstract class BaseClass with abstract methods action&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;python 3.x:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ABCMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;推荐使用 &lt;tt class="docutils literal"&gt;abc&lt;/tt&gt; 模块，&lt;tt class="docutils literal"&gt;NotImplementedError&lt;/tt&gt; 也比较常用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/6049132/"&gt;《Python 学习手册第4版》第 695 ~ 697 页&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pymotw.com/2/abc/"&gt;abc – Abstract Base Classes - Python Module of the Week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/django/django/tree/master/django/core/cache/backends"&gt;django/django/core/cache/backends at master · django/django · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/abc.html"&gt;27.8. abc — Abstract Base Classes — Python v2.7.7 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/abc.html"&gt;29.7. abc — Abstract Base Classes — Python 3.4.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 07 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-07:2014/06/python-define-abstract-base-classes.html</guid></item><item><title>[database] postgresql 常用操作</title><link>https://mozillazg.com/2014/06/hello-postgresql.html</link><description>&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install postgresql-client
sudo apt-get install postgresql
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;启动&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service postgresql start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;进入控制台&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u postgres psql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;退出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# \q
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建用户&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u postgres createuser dbuser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u postgres psql
postgres=# CREATE USER dbuser WITH PASSWORD &amp;#39;password&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看所有用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# \du
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# \password dbuser
postgres=# \q
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;删除用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# drop user dbuser;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;创建数据库&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# CREATE DATABASE exampledb OWNER dbuser;
postgres=# GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser;
postgres=# \c exampledb;
postgres=# ALTER SCHEMA public OWNER to dbuser;
postgres=# GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO dbuser;
postgres=# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO dbuser;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -u postgres createdb -O dbuser exampledb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看所有数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# \l
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;切换数据库&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# \c exampledb
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;查看表&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# \d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看表结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;postgres=# \d user_tab1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;常用控制台命令&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\password           设置密码。
\q                  退出。
\h                  查看SQL命令的解释，比如\h select。
\?                  查看psql命令列表。
\l                  列出所有数据库。
\c [database_name]  连接其他数据库。
\d                  列出当前数据库的所有表格。
\d [table_name]     列出某一张表格的结构。
\du                 列出所有用户。
\e                  打开文本编辑器。
\conninfo           列出当前数据库和连接的信息。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;基本的 SQL 语句&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# 创建新表
CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);

# 插入数据
INSERT INTO user_tbl(name, signup_date) VALUES(&amp;#39;张三&amp;#39;, &amp;#39;2013-12-22&amp;#39;);

# 查询记录
SELECT * FROM user_tbl;

# 更新数据
UPDATE user_tbl set name = &amp;#39;李四&amp;#39; WHERE name = &amp;#39;张三&amp;#39;;

# 删除记录
DELETE FROM user_tbl WHERE name = &amp;#39;李四&amp;#39; ;

# 添加字段
ALTER TABLE user_tbl ADD email VARCHAR(40);

# 更改字段类型
ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;

# 设置字段默认值（注意字符串使用单引号）
ALTER TABLE user_tbl ALTER COLUMN email SET DEFAULT &amp;#39;example@example.com&amp;#39;;

# 去除字段默认值
ALTER TABLE user_tbl ALTER email DROP DEFAULT;

# 重命名字段
ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;

# 删除字段
ALTER TABLE user_tbl DROP COLUMN email;

# 表重命名
ALTER TABLE user_tbl RENAME TO backup_tbl;

# 删除表
DROP TABLE IF EXISTS backup_tbl;

# 删除库
\c hello2;
DROP DATABASE IF EXISTS hello;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面的命令可以看出基本的 SQL 语句跟 MySQL 是一样的。&lt;/p&gt;
&lt;h2&gt;备份、恢复&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pg_dump 备份&lt;/li&gt;
&lt;li&gt;pg_dumpall 备份所有数据库&lt;/li&gt;
&lt;li&gt;pg_restore 恢复&lt;/li&gt;
&lt;li&gt;psql exampledb &amp;lt; exampledb.sql  导入数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump --format=t -d db_name -U user_name -W -h 127.0.0.1 &amp;gt; dump.sql
pg_restore -d db_name -h 127.0.0.1 -U user_name &amp;lt; dump.sql
# 注意要加 -U 并且一定要是 db_name 的 owner
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Peer authentication failed for user "user_name"&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pg_dump --format&lt;span class="o"&gt;=&lt;/span&gt;t -d db_name -U user_name 
pg_dump: &lt;span class="o"&gt;[&lt;/span&gt;archiver &lt;span class="o"&gt;(&lt;/span&gt;db&lt;span class="o"&gt;)]&lt;/span&gt; connection to database &lt;span class="s2"&gt;&amp;quot;db_name&amp;quot;&lt;/span&gt; failed: FATAL:  Peer authentication failed &lt;span class="k"&gt;for&lt;/span&gt; user &lt;span class="s2"&gt;&amp;quot;user_name&amp;quot;&lt;/span&gt;
$ &lt;span class="c1"&gt;# 指定 hostname 即可&lt;/span&gt;
$ pg_dump --format&lt;span class="o"&gt;=&lt;/span&gt;t -d db_name -U user_name -h 127.0.0.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者修改 /var/lib/pgsql/xxx/data/pg_hba.conf, 将 &lt;code&gt;ident&lt;/code&gt; 替换为 &lt;code&gt;md5&lt;/code&gt;,
然后重启服务：&lt;code&gt;systemctl restart postgresql-9.6.service&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html"&gt;PostgreSQL新手入门 - 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/docs"&gt;http://www.postgresql.org/docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-05:2014/06/hello-postgresql.html</guid><category>postpresql</category><category>psql</category><category>postgresql</category></item><item><title>[python] 模块间互相导入的问题</title><link>https://mozillazg.com/2014/06/python-import-xy.html</link><description>&lt;p&gt;两个模块间互相导入时，可能会出现如下的问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# a.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="c1"&gt;# b.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;b&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;name&lt;/span&gt; &lt;span class="nn"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为在 b 中， &lt;tt class="docutils literal"&gt;from a import x&lt;/tt&gt; 此时的 x 还不存在。&lt;/p&gt;
&lt;p&gt;有三种办法可以解决这个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;模块间不要互相导入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;使用 import&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# a.py
import b
x = 5
# print b.y  不能立即访问 b 内的变量

# b.py
import a
y = 10
# print a.x  不能立即访问 a 内的变量
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在函数中执行导入操作&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# a.py
def abc():
    from b import y
    print y
x = 5
abc()

# b.py
def efg():
    from a import x
    print x
y = 10
efg()
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在文件末尾执行导入操作&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# a.py
x = 5
from b import y
print y

# b.py
y = 10
from a import x
print x
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/6049132/"&gt;《Python 学习手册第4版》第 612 ~ 613 页&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-06-02:2014/06/python-import-xy.html</guid></item><item><title>[python] 函数陷阱</title><link>https://mozillazg.com/2014/05/python-function-xyz.html</link><description>&lt;p&gt;本文说的这几个问题适用于 &lt;tt class="docutils literal"&gt;python 2.6+&lt;/tt&gt;  。&lt;/p&gt;
&lt;div class="section" id="unboundlocalerror"&gt;
&lt;h2 id="hidunboundlocalerror"&gt;UnboundLocalError&lt;a class="headerlink" href="#hidunboundlocalerror" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;UnboundLocalError&lt;/span&gt;                         &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="n"&gt;a2da4138f6&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;9e6&lt;/span&gt;&lt;span class="n"&gt;cf545bc05&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="ne"&gt;UnboundLocalError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;referenced&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;assignment&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;产生这种问题的原因在于被赋值的变量名在函数内部是被当作局部变量来对待的，而不是仅仅在赋值以后的语句中才被当作是局部变量。&lt;/p&gt;
&lt;p&gt;可以使用 global 关键字实现在函数中对全局变量进行重新赋值:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你真的既要调用全局变量，又要定义一个同名的局部变量的话，可以通过下面的方式间接访问全局变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcb&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;__main__&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;funcb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;__main__ 交互模式下的命名空间，可以通过 __main__.a 取得全局变量 a 。
如果是在模块中的话，请将 __main__ 替换为函数所在的模块名称即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# xyz.py&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcb&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xyz&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ipython&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xyz&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funcb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;使用可变类型作为默认参数&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;将可变类型设为函数的默认参数会导致出现背离我们初衷的情况：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，上面的代码中，每次调用 func() 的返回值都不一样，这显然不是我们想要的结果。&lt;/p&gt;
&lt;p&gt;这是因为默认参数是在 def 语句定义时评估并保存的，而不是在这个函数调用时。
从内部来讲，Python 会将每一个默认参数保存成一个对象，附加在这个函数本身,
如果默认参数是个可变类型的话，该对象会在调用过程中保留状态，而不是每次调用时都重新设定初始值。&lt;/p&gt;
&lt;p&gt;修改可变的默认参数就类似于修改函数的一个可变类型的属性。跟下面类似：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两种解决办法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;不要使用可变类型作为函数默认参数的值（推荐）:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在函数内部对默认参数进行简单的拷贝:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;copy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;嵌套作用域的循环变量&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在进行嵌套函数作用域查找时，&lt;strong&gt;处理在循环中被改变的嵌套变量时要小心，所有的引用都将会使用在最后的循环迭代中对应的值&lt;/strong&gt; 。作为替代，请使用默认参数来保存循环变量的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之所以会出现这种情况是因为：嵌套作用域的变量在嵌套的函数被调用时才进行查找，
所以它们实际上记住的是同样的值（在最后一次循环迭代中循环变量的值）。
因此，对于上面的 ab 列表, lambda 中 x 的值永远都是 4。&lt;/p&gt;
&lt;p&gt;为了让这类代码能够工作，必须使用默认参数把当前的值传递给嵌套的作用域的变量，因为默认参数使之嵌套函数创建是评估的（而不是在其稍后调用时）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://book.douban.com/subject/6049132/"&gt;《Python 学习手册第4版》第 16 ~ 20 章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-05-28:2014/05/python-function-xyz.html</guid></item><item><title>[linux]配置 vsftp 启用被动模式（passive mode）解决客户端"no route to host"错误</title><link>https://mozillazg.com/2014/05/linux-configure-vsftp-enable-passive-mode.html</link><description>&lt;p&gt;系统: CentOS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改 vsftpd.conf，启用被动模式，指定端口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pasv_min_port=12000
pasv_max_port=12199
pasv_enable=YES
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置防火墙 iptables，允许端口访问:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;iptables -I INPUT -p tcp --dport 12000:12199 -j ACCEPT
service iptables save
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/421161/how-to-configure-vsftpd-to-work-with-passive-mode"&gt;centos - How to configure vsftpd to work with passive mode - Server Fault &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/58291/how-to-check-the-passive-and-active-ftp"&gt;How to check the Passive and Active FTP - Unix &amp;amp; Linux Stack Exchange &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-05-20:2014/05/linux-configure-vsftp-enable-passive-mode.html</guid><category>linux</category><category>vsftp</category></item><item><title>[linux]修复 gcc 编译时的出现的 "CPU you selected does not support x86-64 instruction set" 错误</title><link>https://mozillazg.com/2014/05/linux-fix-gcc-error-CPU-you-selected-does-not-support-x86-64-instruction-set.html</link><description>&lt;p&gt;前两天在服务器上安装 &lt;code&gt;gevent&lt;/code&gt; 时出现了 &lt;code&gt;gevent/gevent.core.c:1: error: CPU you selected does not support x86-64 instruction set&lt;/code&gt; 错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install gevent
Downloading/unpacking gevent
  Running setup.py egg_info &lt;span class="k"&gt;for&lt;/span&gt; package gevent
    ....

    building &lt;span class="s1"&gt;&amp;#39;gevent.core&amp;#39;&lt;/span&gt; extension
    gcc -pthread -DNDEBUG -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; -fexceptions -fstack-protector --param&lt;span class="o"&gt;=&lt;/span&gt;ssp-buffer-size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; -m64 -mtune&lt;span class="o"&gt;=&lt;/span&gt;generic -D_GNU_SOURCE -fPIC -fwrapv -O2 -mcpu&lt;span class="o"&gt;=&lt;/span&gt;i686 -march&lt;span class="o"&gt;=&lt;/span&gt;i686 -fPIC -DLIBEV_EMBED&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; -DEV_COMMON&lt;span class="o"&gt;=&lt;/span&gt; -DEV_CLEANUP_ENABLE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; -DEV_EMBED_ENABLE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; -DEV_PERIODIC_ENABLE&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; -Ibuild/temp.linux-x86_64-2.6/libev -Ilibev -I/usr/include/python2.6 -c gevent/gevent.core.c -o build/temp.linux-x86_64-2.6/gevent/gevent.core.o

    gevent/gevent.core.c:1: error: CPU you selected does not support x86-64 instruction &lt;span class="nb"&gt;set&lt;/span&gt;

    error: &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gcc&amp;#39;&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; status 1

    ....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后使用的解决方法是设置一下环境变量 &lt;code&gt;CFLAGS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-march=x86-64&amp;#39;&lt;/span&gt;
$ pip install gevent
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/82089/pip-install-cpu-you-selected-does-not-support-x86-64-instruction-set"&gt;Pip install - CPU you selected does not support x86-64 instruction set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-05-20:2014/05/linux-fix-gcc-error-CPU-you-selected-does-not-support-x86-64-instruction-set.html</guid><category>linux</category></item><item><title>[英语]other、others 以及 another 三者的区别</title><link>https://mozillazg.com/2014/04/english-other-others-another.html</link><description>&lt;p&gt;看一下下面三个例句就知道它们之间的区别了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are three books on my table, One is here. Where are &lt;strong&gt;other&lt;/strong&gt; books?&lt;/li&gt;
&lt;li&gt;There are three books on my table, One is here. Where are the &lt;strong&gt;others&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;There are three books on my table, Two is here. Where are &lt;strong&gt;another&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://english4youonline.blogspot.jp/2011/03/whats-difference-between-other-others.html"&gt;What's the difference between OTHER, OTHERS and ANOTHER?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-04-24:2014/04/english-other-others-another.html</guid><category>english</category><category>英语</category></item><item><title>[译][漫]Cyanide &amp; Happiness #3508</title><link>https://mozillazg.com/2014/03/3508.adopted.zh-cn.html</link><description>&lt;p&gt;译自：&lt;a href="http://explosm.net/comics/3508/"&gt;Cyanide &amp;amp; Happiness #3508 - Explosm.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3508.adopted.zh-cn.png" src="/static/images/comics/3508.adopted.zh-cn.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-03-31:2014/03/3508.adopted.zh-cn.html</guid><category>comics</category><category>Cyanide and Happiness</category><category>Explosm.net</category><category>漫画</category><category>中文翻译</category><category>汉化</category></item><item><title>[linux] CentOS 下安装 percona-toolkit</title><link>https://mozillazg.com/2014/03/centos-how-to-install-percona-toolkit.html</link><description>&lt;p&gt;&lt;a href="http://www.percona.com/doc/percona-toolkit/"&gt;percona-toolkit&lt;/a&gt; 是一组高级命令行工具的集合，
用来执行各种复杂和麻烦的 MySQL 操作。&lt;/p&gt;
&lt;p&gt;下面记录一下在 CentOS 下如何通过 rpm 安装 percona-toolkit:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装依赖           &lt;br /&gt;
&lt;code&gt;yum install perl perl-IO-Socket-SSL perl-Time-HiRes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 rpm 包           &lt;br /&gt;
&lt;code&gt;wget percona.com/get/percona-toolkit.rpm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 rpm 包       &lt;br /&gt;
&lt;code&gt;rpm -ivh percona-toolkit-*.rpm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;---EOF---&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-03-24:2014/03/centos-how-to-install-percona-toolkit.html</guid><category>centos</category><category>mysql</category></item><item><title>[django]通过自定义 Model Field 的方式将上传的文本文件按 UTF-8 编码保存</title><link>https://mozillazg.com/2014/03/django-save-uploaded-file-with-utf8-encoding-by-custom-model-field.html</link><description>&lt;p&gt;默认情况下上传的文件都是按原始编码进行保存的，用户上传什么编码的文件就保存什么编码的文件。&lt;/p&gt;
&lt;p&gt;下面将举例说明如何通过自定义 Model Field 的方式将文件的编码改为 UTF-8。&lt;/p&gt;
&lt;p&gt;假设有个文件: app/fields.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;chardet&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;south.modelsinspector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_introspection_rules&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UTF8TextFileField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;上传的文本文件将按 utf8 编码保存&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;uploaded_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UTF8TextFileField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;content_raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uploaded_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;# 猜测原始文件编码&lt;/span&gt;
        &lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chardet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_raw&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;encoding&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# 解码并按 utf8 编码，忽略不能编/解码的字符&lt;/span&gt;
        &lt;span class="n"&gt;content_utf8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content_raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;
                                          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# 将编码后的内容写回文件&lt;/span&gt;
        &lt;span class="n"&gt;uploaded_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;uploaded_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;uploaded_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_utf8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;uploaded_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;uploaded_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uploaded_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;uploaded_file&lt;/span&gt;

&lt;span class="c1"&gt;# 告诉 South 我们定义了一个 Model Field&lt;/span&gt;
&lt;span class="c1"&gt;# 如果不用 South 可以去掉这句&lt;/span&gt;
&lt;span class="n"&gt;add_introspection_rules&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^app\.fields\.UTF8TextFileField&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参照这个 &lt;tt class="docutils literal"&gt;UTF8TextFileField&lt;/tt&gt; ，也可以自定义一个可以按指定编码保存文件的 &lt;tt class="docutils literal"&gt;TextFileField&lt;/tt&gt; ，这个可以随便发挥，我只是举个简单的例子。&lt;/p&gt;
&lt;p&gt;如何使用这个 &lt;tt class="docutils literal"&gt;UTF8TextFileField&lt;/tt&gt; 呢，与 &lt;tt class="docutils literal"&gt;FileField&lt;/tt&gt; 的使用方式是一样的&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from django.db import models

from app.fields import UTF8TextFileField


class Foo(models.Model):
    txt = UTF8TextFileField(u'文本文件')
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/django/django/blob/master/django/core/files/base.py"&gt;django/django/core/files/base.py at master · django/django · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://south.readthedocs.org/en/latest/tutorial/part4.html#part-4-custom-fields"&gt;Part 4: Custom Fields — South 0.8.4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/http/file-uploads/"&gt;File Uploads | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/models/fields/#filefield"&gt;Model field reference | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 04 Mar 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-03-04:2014/03/django-save-uploaded-file-with-utf8-encoding-by-custom-model-field.html</guid><category>python</category><category>django</category></item><item><title>[python]如何生成一个 Unicode 编码的文件</title><link>https://mozillazg.com/2014/03/python-save-an-Unicode-encoding-file.html</link><description>&lt;p&gt;平时我们用记事本保存文件时，可以看到文件编码可以选择 Unicode 编码。
那么如何用 python 生成一个 Unicode 编码的文件呢？&lt;/p&gt;
&lt;p&gt;只需知道 python 中哪个编码代表 Unicode 编码，我们就可以生成一个 Unicode 编码的文件：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="14%" /&gt;
&lt;col width="16%" /&gt;
&lt;col width="38%" /&gt;
&lt;col width="32%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Codec&lt;/td&gt;
&lt;td&gt;Aliases&lt;/td&gt;
&lt;td&gt;Languages&lt;/td&gt;
&lt;td&gt;Note&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;utf_16&lt;/td&gt;
&lt;td&gt;U16, utf16&lt;/td&gt;
&lt;td&gt;all languages&lt;/td&gt;
&lt;td&gt;Unicode(UTF-16 LE BOM)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;utf_16_be&lt;/td&gt;
&lt;td&gt;UTF-16BE&lt;/td&gt;
&lt;td&gt;all languages (BMP only)&lt;/td&gt;
&lt;td&gt;Unicode(UTF-16 BE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;utf_16_le&lt;/td&gt;
&lt;td&gt;UTF-16LE&lt;/td&gt;
&lt;td&gt;all languages (BMP only)&lt;/td&gt;
&lt;td&gt;Unicode(UTF-16 LE)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上面表格中，LE 是 Little Endian 的缩写, BE 是 Big Endian 的缩写。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;codecs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf_16&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/8466460/how-to-read-a-file-that-can-be-saved-as-either-ansi-or-unicode-in-python"&gt;how to read a file that can be saved as either ansi or unicode in python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/2/library/codecs.html#standard-encodings"&gt;7.8. codecs — Codec registry and base classes — Python v2.7.6 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/2/howto/unicode.html#reading-and-writing-unicode-data"&gt;Unicode HOWTO — Python v2.7.6 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 03 Mar 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-03-03:2014/03/python-save-an-Unicode-encoding-file.html</guid><category>python</category></item><item><title>[git]如何删除在远程已被删除的本地分支（清理本地分支）</title><link>https://mozillazg.com/2014/02/git-delete-all-local-branches-which-are-remotely-deleted.html</link><description>&lt;p&gt;通过 &lt;tt class="docutils literal"&gt;git fetch &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; 命令可以实现清理本地分支的功能:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git fetch -p
 x [deleted]         (none)     -&amp;gt; origin/feature-xxx
 x [deleted]         (none)     -&amp;gt; origin/feature-xxxx
 x [deleted]         (none)     -&amp;gt; origin/feature-xxxxx
 x [deleted]         (none)     -&amp;gt; origin/hotfix-xx

# 然后再执行
$ git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 &amp;lt;(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d
 已删除分支 feature-xxx（曾为 328b639）。
 已删除分支 feature-xxxx（曾为 5e77d10）。
 已删除分支 hotfix-xx（曾为 5c13813）。
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/1072171/how-do-you-remove-an-invalid-remote-branch-reference-from-git"&gt;How do you remove an invalid remote branch reference from Git? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/13064613/git-how-to-prune-local-tracking-branches-that-do-not-exist-on-remote-anymore"&gt;Git: How to prune local tracking branches that do not exist on remote anymore - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-02-12:2014/02/git-delete-all-local-branches-which-are-remotely-deleted.html</guid><category>git</category></item><item><title>[python]如何创建一个不可变的类</title><link>https://mozillazg.com/2014/01/python-create-immutable-class.html</link><description>&lt;p&gt;所谓的不可变的类就是类的实例不可修改。&lt;/p&gt;
&lt;p&gt;下面我们先看一下普通的类:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;pass&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普通的类的实例可以在运行时添加新的属性。&lt;/p&gt;
&lt;p&gt;那么如何定义一个不可变的类呢？
下面就来看一个不可变类的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;__slots__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; has no attribute &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fecd1642a038&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;030&lt;/span&gt;&lt;span class="n"&gt;c2c96393c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;4&lt;/span&gt;         &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; has no attribute &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25106575&lt;/span&gt;&lt;span class="n"&gt;ab93&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;

&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;                            &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;0205&lt;/span&gt;&lt;span class="n"&gt;c051c209&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;030&lt;/span&gt;&lt;span class="n"&gt;c2c96393c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;4&lt;/span&gt;         &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;         &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; has no attribute &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有两个要点：一个是 &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; 另一个是 &lt;tt class="docutils literal"&gt;__setattr__&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;通过定义 &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; 替换掉了类的实例的 &lt;tt class="docutils literal"&gt;__dict__&lt;/tt&gt; 属性，阻止新增属性。
通过覆盖 &lt;tt class="docutils literal"&gt;__setattr__&lt;/tt&gt; 方法，阻止修改现有属性的值。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2014/01/17/how-to-create-immutable-classes-in-python/"&gt;How to Create “Immutable” Classes in Python « The Mouse Vs. The Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/472000/python-slots"&gt;Python __slots__ - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.elfsternberg.com/2009/07/06/python-what-the-hell-is-a-slot/"&gt;Python: What the Hell is a Slot?&amp;nbsp;by&amp;nbsp;Elf Sternberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/2/reference/datamodel.html?highlight=__slots__#slots"&gt;3. Data model — Python v2.7.6 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 25 Jan 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-01-25:2014/01/python-create-immutable-class.html</guid><category>python</category></item><item><title>[python]解决将 python 程序输出结果重定向到文件时，出现 UnicodeDecodeError 错误</title><link>https://mozillazg.com/2014/01/python-fix-shell-python-program-redirect-to-file-raise-UnicodeDecodeError.html</link><description>&lt;p&gt;比如：有一个 python 程序 hello.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;你好&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将输出结果重定向到文件，就会出现 UnicodeEncodeError:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python hello.py &amp;gt; hello.txt
&lt;span class="go"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;hello.py&amp;quot;, line 4, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    print u&amp;#39;你好&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;UnicodeEncodeError: &amp;#39;ascii&amp;#39; codec can&amp;#39;t encode characters in position 0-1: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之所以会出现编码错误，是因为：
输出到控制台时，print 使用的是控制台的默认编码，
而重定向到文件时，print 就不知道使用什么编码了，于是就使用了默认编码 ascii 导致出现编码错误。&lt;/p&gt;
&lt;p&gt;可以通过设置环境变量 &lt;tt class="docutils literal"&gt;PYTHONIOENCODING&lt;/tt&gt; 告诉 python 使用哪种编码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONIOENCODING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf8
&lt;span class="gp"&gt;$&lt;/span&gt; python hello.py  &amp;gt; hello.txt
&lt;span class="gp"&gt;$&lt;/span&gt; cat hello.txt
&lt;span class="go"&gt;你好&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cnblogs.com/bamanzi/archive/2012/08/16/python-encoding-when-redirection.html"&gt;Python脚本重定向其输出时的编码问题 - 巴蛮子 - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.python.org/moin/PrintFails"&gt;PrintFails - Python Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/4545661/unicodedecodeerror-when-redirecting-to-file"&gt;python - UnicodeDecodeError when redirecting to file - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/4374455/how-to-set-sys-stdout-encoding-in-python-3"&gt;unicode - How to set sys.stdout encoding in Python 3? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-01-19:2014/01/python-fix-shell-python-program-redirect-to-file-raise-UnicodeDecodeError.html</guid><category>python</category></item><item><title>[python]使用 multiprocessing.dummy 执行多线程任务</title><link>https://mozillazg.com/2014/01/python-use-multiprocessing-dummy-run-theading-task.html</link><description>&lt;p&gt;本文将简单讲述一种使用 &lt;tt class="docutils literal"&gt;multiprocessing.dummy&lt;/tt&gt; 模块执行多线程任务的方法。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;multiprocessing.dummy&lt;/tt&gt; 模块与 &lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; 模块的区别： &lt;tt class="docutils literal"&gt;dummy&lt;/tt&gt;
模块是多线程，而 &lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; 是多进程， api 都是通用的。
所有可以很方便将代码在多线程和多进程之间切换。&lt;/p&gt;
&lt;p&gt;下面是一个示例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# from multiprocessing import Pool&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing.dummy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ThreadPool&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;

&lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://www.baidu.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://home.baidu.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://tieba.baidu.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://zhidao.baidu.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://music.baidu.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://image.baidu.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://python-china.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://python-china.org/node/about&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://python-china.org/node/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://python-china.org/account/signin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://python-china.org/account/signup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://www.qq.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://www.youku.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;http://www.tudou.com&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Normal:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;

&lt;span class="n"&gt;start2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 开8个 worker，没有参数时默认是 cpu 的核心数&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThreadPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;processes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 在线程中执行 urllib2.urlopen(url) 并返回执行结果&lt;/span&gt;
&lt;span class="n"&gt;results2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Thread Pool:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Normal: 12.5460000038&lt;/span&gt;
&lt;span class="go"&gt;Thread Pool: 2.0680000782&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以后遇到要加速 for 循环的时候，可以试试 &lt;tt class="docutils literal"&gt;multiprocessing.dummy&lt;/tt&gt; 。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/p/40e9b2b36148"&gt;A Better Model for Day to Day Threading Tasks — Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/2/library/multiprocessing.html"&gt;16.6. multiprocessing — Process-based “threading” interface — Python v2.7.6 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pymotw.com/2/multiprocessing/"&gt;multiprocessing – Manage processes like threads - Python Module of the Week&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-01-19:2014/01/python-use-multiprocessing-dummy-run-theading-task.html</guid><category>python</category><category>multiprocessing</category><category>thread</category><category>threading</category></item><item><title>[python]输出一个简单的进度条</title><link>https://mozillazg.com/2014/01/python-make-a-simple-progress-bar.html</link><description>&lt;p&gt;使用 &lt;tt class="docutils literal"&gt;sys.stdout&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;sys.stderr&lt;/tt&gt; 就可以输出一个简单的进度条：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ljust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2014-01-13:2014/01/python-make-a-simple-progress-bar.html</guid><category>python</category></item><item><title>[python]配置 fabric 穿越跳板机</title><link>https://mozillazg.com/2013/12/python-fabric-gateway.html</link><description>&lt;p&gt;说实话，跳板机给研发的日常工作添加了些许麻烦。
幸好 fabric 提供了穿越跳板机的功能，使跳板机不再影响我们的工作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; fab --version
&lt;span class="go"&gt;Fabric 1.8.1&lt;/span&gt;
&lt;span class="go"&gt;Paramiko 1.12.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 跳板机&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gateway&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lisi@192.168.100.123&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 目标服务器&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo@111.111.111.111&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;bar@111.111.111.112&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;bar2@122.123.124.139&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;passwords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;lisi@192.168.100.123:22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pssword3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 跳板机密码&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;foo@111.111.111.111:22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pssword4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# 目标服务器密码&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;bar@111.111.111.112:22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pssword5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# 目标服务器密码&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;bar2@122.123.124.139:22&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pssword6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c1"&gt;# 目标服务器密码&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="nd"&gt;@hosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;穿越跳板机的原理是： &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Tunneling_protocol"&gt;SSH 隧道技术&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.fabfile.org/en/latest/usage/env.html#gateway"&gt;The environment dictionary, env — Fabric 1.8.1 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/fabric/fabric/issues/976"&gt;Pre-filling env.passwords no longer works in 1.7 · Issue #976 · fabric/fabric · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Tunneling_protocol"&gt;Tunneling protocol - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 27 Dec 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-12-27:2013/12/python-fabric-gateway.html</guid><category>python</category><category>fabric</category><category>fab</category><category>gateway</category><category>跳板机</category></item><item><title>[python]去掉 unicode 字符串前面的 u</title><link>https://mozillazg.com/2013/12/python-raw-unicode.html</link><description>&lt;p&gt;有时我们会碰到类似下面这样的 unicode 字符串:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这明显不是一个正确的 unicode 字符串，可能是在哪个地方转码转错了。&lt;/p&gt;
&lt;p&gt;我们要想得到正确的 unicode 字符串首先就必须先将这个字符串转成非 unicode 字符串，
然后再进行解码。按照普通的办法进行 &lt;tt class="docutils literal"&gt;encode&lt;/tt&gt; 肯定是不行的，因为这不是一个正确的 unicode 字符串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xc3\xa4\xc2\xbd\xc2\xa0\xc3\xa5\xc2\xa5\xc2\xbd&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;盲陆聽氓楼陆&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那如何才能得到我们想要的 &lt;tt class="docutils literal"&gt;\xe4\xbd\xa0\xe5\xa5\xbd&lt;/tt&gt; 呢？&lt;/p&gt;
&lt;p&gt;python 提供了一个特殊的编码（ &lt;tt class="docutils literal"&gt;raw_unicode_escape&lt;/tt&gt; ）用来处理这种情况：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_unicode_escape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe4\xbd\xa0\xe5\xa5\xbd&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;raw_unicode_escape&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;你好&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/2/library/codecs.html#python-specific-encodings"&gt;7.8. codecs — Codec registry and base classes — Python v2.7.6 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 26 Dec 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-12-26:2013/12/python-raw-unicode.html</guid><category>python</category><category>unicode</category></item><item><title>[JavaScript] 使用 flotr2 绘制包含子项的饼图</title><link>https://mozillazg.com/2013/12/flotr2-pie-chart-with-broken-down-slices.html</link><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.humblesoftware.com/flotr2/"&gt;Flotr2&lt;/a&gt; 是一个用于绘制 HTML5 图形和图表的开源 JS 库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 flotr2 不支持环形饼图，所以对于包含子项的饼图只能通过其他办法来实现。&lt;/p&gt;
&lt;p&gt;我的实现方法是，首先显示最外层的饼图，再通过点击某一个项显示它包含的子项的饼图。
具体代码请见：&lt;/p&gt;
&lt;iframe width="100%" height="350" src="http://jsfiddle.net/M8rT7/embedded/" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;当然，由于 flotr2 的局限性，这个图并不完美。如果想要更好的效果，
可以试试其他的 JS 图表插件实现的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.highcharts.com/demo/pie-donut"&gt;Highcharts - Donut chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amcharts.com/javascript-charts/pie-chart-with-broken-down-slice/"&gt;Pie chart with broken down slices | amCharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bl.ocks.org/kerryrodden/7090426"&gt;Sequences sunburst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 05 Dec 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-12-05:2013/12/flotr2-pie-chart-with-broken-down-slices.html</guid><category>javascript</category><category>flotr2</category></item><item><title>[python]指定 Socket connect 方法的超时时间</title><link>https://mozillazg.com/2013/11/python-socket-connect-set-timeout.html</link><description>&lt;p&gt;通过设置 &lt;code&gt;socket.settimeout&lt;/code&gt; 来实现超时功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="c1"&gt;# 1 分钟&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 设置连接超时&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# 恢复默认超时设置&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3432102/python-socket-connection-timeout"&gt;Python socket connection timeout - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-11-18:2013/11/python-socket-connect-set-timeout.html</guid><category>python</category><category>socket</category></item><item><title>[python]指定 Socket recv 方法的超时时间</title><link>https://mozillazg.com/2013/11/python-socket-recv-set-timeout.html</link><description>&lt;p&gt;使用 &lt;code&gt;select&lt;/code&gt; 来变相实现超时功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="c1"&gt;# 1 分钟&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 设置 recv 超时时间&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ready&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="c1"&gt;# 接收结果&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2719017/how-to-set-timeout-on-pythons-socket-recv-method"&gt;How to set timeout on python's socket recv method? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-11-18:2013/11/python-socket-recv-set-timeout.html</guid><category>python</category><category>socket</category></item><item><title>[python] 修复读取 utf-8 BOM 编码的配置文件时出现的 ConfigParser.MissingSectionHeaderError: File contains no section headers 错误</title><link>https://mozillazg.com/2013/11/python-utf8-bom-MissingSectionHeaderError.html</link><description>&lt;p&gt;当使用 ConfigParser 读取 utf-8 BOM 编码的配置文件时,会出现如下类似错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MissingSectionHeaderError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ini&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xef\xbb\xbf&lt;/span&gt;&lt;span class="s1"&gt;[General]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决办法就是先将文件内容读出来，然后转码，然后再读取转码后的配置信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ConfigParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;

&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;settings.ini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readfp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bugs.python.org/issue7519"&gt;Issue 7519: ConfigParser can't read files with BOM markers - Python tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/2/library/configparser.html"&gt;13.2. ConfigParser — Configuration file parser — Python v2.7.5 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 10 Nov 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-11-10:2013/11/python-utf8-bom-MissingSectionHeaderError.html</guid><category>python</category><category>unicode</category></item><item><title>socket 错误码含义列表</title><link>https://mozillazg.com/2013/10/socket-errno-list.html</link><description>&lt;p&gt;为了防止源链接失效，存档一下。&lt;/p&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2 id="hidlinux"&gt;linux&lt;a class="headerlink" href="#hidlinux" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;来源：&lt;a class="reference external" href="https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/errno.h"&gt;https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/errno.h&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef _ASM_GENERIC_ERRNO_H&lt;/span&gt;
&lt;span class="cp"&gt;#define _ASM_GENERIC_ERRNO_H&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;asm-generic/errno-base.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define     EDEADLK         35      &lt;/span&gt;&lt;span class="cm"&gt;/* Resource deadlock would occur */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENAMETOOLONG    36      &lt;/span&gt;&lt;span class="cm"&gt;/* File name too long */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOLCK          37      &lt;/span&gt;&lt;span class="cm"&gt;/* No record locks available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * This error code is special: arch syscall entry code will return&lt;/span&gt;
&lt;span class="cm"&gt; * -ENOSYS if users try to call a syscall that doesn&amp;#39;t exist.  To keep&lt;/span&gt;
&lt;span class="cm"&gt; * failures of syscalls that really do exist distinguishable from&lt;/span&gt;
&lt;span class="cm"&gt; * failures due to attempts to use a nonexistent syscall, syscall&lt;/span&gt;
&lt;span class="cm"&gt; * implementations should refrain from returning -ENOSYS.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOSYS          38      &lt;/span&gt;&lt;span class="cm"&gt;/* Invalid system call number */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define     ENOTEMPTY       39      &lt;/span&gt;&lt;span class="cm"&gt;/* Directory not empty */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELOOP           40      &lt;/span&gt;&lt;span class="cm"&gt;/* Too many symbolic links encountered */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EWOULDBLOCK     EAGAIN  &lt;/span&gt;&lt;span class="cm"&gt;/* Operation would block */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOMSG          42      &lt;/span&gt;&lt;span class="cm"&gt;/* No message of desired type */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EIDRM           43      &lt;/span&gt;&lt;span class="cm"&gt;/* Identifier removed */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECHRNG          44      &lt;/span&gt;&lt;span class="cm"&gt;/* Channel number out of range */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EL2NSYNC        45      &lt;/span&gt;&lt;span class="cm"&gt;/* Level 2 not synchronized */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EL3HLT          46      &lt;/span&gt;&lt;span class="cm"&gt;/* Level 3 halted */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EL3RST          47      &lt;/span&gt;&lt;span class="cm"&gt;/* Level 3 reset */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELNRNG          48      &lt;/span&gt;&lt;span class="cm"&gt;/* Link number out of range */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EUNATCH         49      &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol driver not attached */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOCSI          50      &lt;/span&gt;&lt;span class="cm"&gt;/* No CSI structure available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EL2HLT          51      &lt;/span&gt;&lt;span class="cm"&gt;/* Level 2 halted */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADE           52      &lt;/span&gt;&lt;span class="cm"&gt;/* Invalid exchange */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADR           53      &lt;/span&gt;&lt;span class="cm"&gt;/* Invalid request descriptor */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EXFULL          54      &lt;/span&gt;&lt;span class="cm"&gt;/* Exchange full */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOANO          55      &lt;/span&gt;&lt;span class="cm"&gt;/* No anode */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADRQC         56      &lt;/span&gt;&lt;span class="cm"&gt;/* Invalid request code */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADSLT         57      &lt;/span&gt;&lt;span class="cm"&gt;/* Invalid slot */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define     EDEADLOCK       EDEADLK&lt;/span&gt;

&lt;span class="cp"&gt;#define     EBFONT          59      &lt;/span&gt;&lt;span class="cm"&gt;/* Bad font file format */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOSTR          60      &lt;/span&gt;&lt;span class="cm"&gt;/* Device not a stream */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENODATA         61      &lt;/span&gt;&lt;span class="cm"&gt;/* No data available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ETIME           62      &lt;/span&gt;&lt;span class="cm"&gt;/* Timer expired */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOSR           63      &lt;/span&gt;&lt;span class="cm"&gt;/* Out of streams resources */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENONET          64      &lt;/span&gt;&lt;span class="cm"&gt;/* Machine is not on the network */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOPKG          65      &lt;/span&gt;&lt;span class="cm"&gt;/* Package not installed */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EREMOTE         66      &lt;/span&gt;&lt;span class="cm"&gt;/* Object is remote */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOLINK         67      &lt;/span&gt;&lt;span class="cm"&gt;/* Link has been severed */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EADV            68      &lt;/span&gt;&lt;span class="cm"&gt;/* Advertise error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESRMNT          69      &lt;/span&gt;&lt;span class="cm"&gt;/* Srmount error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECOMM           70      &lt;/span&gt;&lt;span class="cm"&gt;/* Communication error on send */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROTO          71      &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EMULTIHOP       72      &lt;/span&gt;&lt;span class="cm"&gt;/* Multihop attempted */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDOTDOT         73      &lt;/span&gt;&lt;span class="cm"&gt;/* RFS specific error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADMSG         74      &lt;/span&gt;&lt;span class="cm"&gt;/* Not a data message */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EOVERFLOW       75      &lt;/span&gt;&lt;span class="cm"&gt;/* Value too large for defined data type */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTUNIQ        76      &lt;/span&gt;&lt;span class="cm"&gt;/* Name not unique on network */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADFD          77      &lt;/span&gt;&lt;span class="cm"&gt;/* File descriptor in bad state */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EREMCHG         78      &lt;/span&gt;&lt;span class="cm"&gt;/* Remote address changed */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELIBACC         79      &lt;/span&gt;&lt;span class="cm"&gt;/* Can not access a needed shared library */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELIBBAD         80      &lt;/span&gt;&lt;span class="cm"&gt;/* Accessing a corrupted shared library */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELIBSCN         81      &lt;/span&gt;&lt;span class="cm"&gt;/* .lib section in a.out corrupted */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELIBMAX         82      &lt;/span&gt;&lt;span class="cm"&gt;/* Attempting to link in too many shared libraries */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELIBEXEC        83      &lt;/span&gt;&lt;span class="cm"&gt;/* Cannot exec a shared library directly */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EILSEQ          84      &lt;/span&gt;&lt;span class="cm"&gt;/* Illegal byte sequence */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ERESTART        85      &lt;/span&gt;&lt;span class="cm"&gt;/* Interrupted system call should be restarted */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESTRPIPE        86      &lt;/span&gt;&lt;span class="cm"&gt;/* Streams pipe error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EUSERS          87      &lt;/span&gt;&lt;span class="cm"&gt;/* Too many users */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTSOCK        88      &lt;/span&gt;&lt;span class="cm"&gt;/* Socket operation on non-socket */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDESTADDRREQ    89      &lt;/span&gt;&lt;span class="cm"&gt;/* Destination address required */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EMSGSIZE        90      &lt;/span&gt;&lt;span class="cm"&gt;/* Message too long */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROTOTYPE      91      &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol wrong type for socket */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOPROTOOPT     92      &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol not available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROTONOSUPPORT 93      &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol not supported */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESOCKTNOSUPPORT 94      &lt;/span&gt;&lt;span class="cm"&gt;/* Socket type not supported */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EOPNOTSUPP      95      &lt;/span&gt;&lt;span class="cm"&gt;/* Operation not supported on transport endpoint */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPFNOSUPPORT    96      &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol family not supported */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EAFNOSUPPORT    97      &lt;/span&gt;&lt;span class="cm"&gt;/* Address family not supported by protocol */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EADDRINUSE      98      &lt;/span&gt;&lt;span class="cm"&gt;/* Address already in use */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EADDRNOTAVAIL   99      &lt;/span&gt;&lt;span class="cm"&gt;/* Cannot assign requested address */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENETDOWN        100     &lt;/span&gt;&lt;span class="cm"&gt;/* Network is down */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENETUNREACH     101     &lt;/span&gt;&lt;span class="cm"&gt;/* Network is unreachable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENETRESET       102     &lt;/span&gt;&lt;span class="cm"&gt;/* Network dropped connection because of reset */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECONNABORTED    103     &lt;/span&gt;&lt;span class="cm"&gt;/* Software caused connection abort */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECONNRESET      104     &lt;/span&gt;&lt;span class="cm"&gt;/* Connection reset by peer */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOBUFS         105     &lt;/span&gt;&lt;span class="cm"&gt;/* No buffer space available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EISCONN         106     &lt;/span&gt;&lt;span class="cm"&gt;/* Transport endpoint is already connected */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTCONN        107     &lt;/span&gt;&lt;span class="cm"&gt;/* Transport endpoint is not connected */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESHUTDOWN       108     &lt;/span&gt;&lt;span class="cm"&gt;/* Cannot send after transport endpoint shutdown */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ETOOMANYREFS    109     &lt;/span&gt;&lt;span class="cm"&gt;/* Too many references: cannot splice */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ETIMEDOUT       110     &lt;/span&gt;&lt;span class="cm"&gt;/* Connection timed out */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECONNREFUSED    111     &lt;/span&gt;&lt;span class="cm"&gt;/* Connection refused */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EHOSTDOWN       112     &lt;/span&gt;&lt;span class="cm"&gt;/* Host is down */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EHOSTUNREACH    113     &lt;/span&gt;&lt;span class="cm"&gt;/* No route to host */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EALREADY        114     &lt;/span&gt;&lt;span class="cm"&gt;/* Operation already in progress */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EINPROGRESS     115     &lt;/span&gt;&lt;span class="cm"&gt;/* Operation now in progress */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESTALE          116     &lt;/span&gt;&lt;span class="cm"&gt;/* Stale file handle */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EUCLEAN         117     &lt;/span&gt;&lt;span class="cm"&gt;/* Structure needs cleaning */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTNAM         118     &lt;/span&gt;&lt;span class="cm"&gt;/* Not a XENIX named type file */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENAVAIL         119     &lt;/span&gt;&lt;span class="cm"&gt;/* No XENIX semaphores available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EISNAM          120     &lt;/span&gt;&lt;span class="cm"&gt;/* Is a named type file */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EREMOTEIO       121     &lt;/span&gt;&lt;span class="cm"&gt;/* Remote I/O error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDQUOT          122     &lt;/span&gt;&lt;span class="cm"&gt;/* Quota exceeded */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define     ENOMEDIUM       123     &lt;/span&gt;&lt;span class="cm"&gt;/* No medium found */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EMEDIUMTYPE     124     &lt;/span&gt;&lt;span class="cm"&gt;/* Wrong medium type */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECANCELED       125     &lt;/span&gt;&lt;span class="cm"&gt;/* Operation Canceled */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOKEY          126     &lt;/span&gt;&lt;span class="cm"&gt;/* Required key not available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EKEYEXPIRED     127     &lt;/span&gt;&lt;span class="cm"&gt;/* Key has expired */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EKEYREVOKED     128     &lt;/span&gt;&lt;span class="cm"&gt;/* Key has been revoked */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EKEYREJECTED    129     &lt;/span&gt;&lt;span class="cm"&gt;/* Key was rejected by service */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* for robust mutexes */&lt;/span&gt;
&lt;span class="cp"&gt;#define     EOWNERDEAD      130     &lt;/span&gt;&lt;span class="cm"&gt;/* Owner died */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTRECOVERABLE 131     &lt;/span&gt;&lt;span class="cm"&gt;/* State not recoverable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define ERFKILL             132     &lt;/span&gt;&lt;span class="cm"&gt;/* Operation not possible due to RF-kill */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define EHWPOISON   133     &lt;/span&gt;&lt;span class="cm"&gt;/* Memory page has hardware error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mac"&gt;
&lt;h2 id="hidmac"&gt;mac&lt;a class="headerlink" href="#hidmac" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;来源：&lt;a class="reference external" href="https://opensource.apple.com/source/xnu/xnu-3248.60.10/bsd/sys/errno.h"&gt;https://opensource.apple.com/source/xnu/xnu-3248.60.10/bsd/sys/errno.h&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Copyright (c) 2000-2012 Apple, Inc. All rights reserved.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @APPLE_OSREFERENCE_LICENSE_HEADER_START@&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * This file contains Original Code and/or Modifications of Original Code&lt;/span&gt;
&lt;span class="cm"&gt; * as defined in and that are subject to the Apple Public Source License&lt;/span&gt;
&lt;span class="cm"&gt; * Version 2.0 (the &amp;#39;License&amp;#39;). You may not use this file except in&lt;/span&gt;
&lt;span class="cm"&gt; * compliance with the License. The rights granted to you under the License&lt;/span&gt;
&lt;span class="cm"&gt; * may not be used to create, or enable the creation or redistribution of,&lt;/span&gt;
&lt;span class="cm"&gt; * unlawful or unlicensed copies of an Apple operating system, or to&lt;/span&gt;
&lt;span class="cm"&gt; * circumvent, violate, or enable the circumvention or violation of, any&lt;/span&gt;
&lt;span class="cm"&gt; * terms of an Apple operating system software license agreement.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Please obtain a copy of the License at&lt;/span&gt;
&lt;span class="cm"&gt; * http://www.opensource.apple.com/apsl/ and read it before using this file.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * The Original Code and all software distributed under the License are&lt;/span&gt;
&lt;span class="cm"&gt; * distributed on an &amp;#39;AS IS&amp;#39; basis, WITHOUT WARRANTY OF ANY KIND, EITHER&lt;/span&gt;
&lt;span class="cm"&gt; * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,&lt;/span&gt;
&lt;span class="cm"&gt; * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,&lt;/span&gt;
&lt;span class="cm"&gt; * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.&lt;/span&gt;
&lt;span class="cm"&gt; * Please see the License for the specific language governing rights and&lt;/span&gt;
&lt;span class="cm"&gt; * limitations under the License.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @APPLE_OSREFERENCE_LICENSE_HEADER_END@&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cm"&gt;/* Copyright (c) 1995 NeXT Computer, Inc. All Rights Reserved */&lt;/span&gt;
&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Copyright (c) 1982, 1986, 1989, 1993&lt;/span&gt;
&lt;span class="cm"&gt; *  The Regents of the University of California.  All rights reserved.&lt;/span&gt;
&lt;span class="cm"&gt; * (c) UNIX System Laboratories, Inc.&lt;/span&gt;
&lt;span class="cm"&gt; * All or some portions of this file are derived from material licensed&lt;/span&gt;
&lt;span class="cm"&gt; * to the University of California by American Telephone and Telegraph&lt;/span&gt;
&lt;span class="cm"&gt; * Co. or Unix System Laboratories, Inc. and are reproduced herein with&lt;/span&gt;
&lt;span class="cm"&gt; * the permission of UNIX System Laboratories, Inc.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Redistribution and use in source and binary forms, with or without&lt;/span&gt;
&lt;span class="cm"&gt; * modification, are permitted provided that the following conditions&lt;/span&gt;
&lt;span class="cm"&gt; * are met:&lt;/span&gt;
&lt;span class="cm"&gt; * 1. Redistributions of source code must retain the above copyright&lt;/span&gt;
&lt;span class="cm"&gt; *    notice, this list of conditions and the following disclaimer.&lt;/span&gt;
&lt;span class="cm"&gt; * 2. Redistributions in binary form must reproduce the above copyright&lt;/span&gt;
&lt;span class="cm"&gt; *    notice, this list of conditions and the following disclaimer in the&lt;/span&gt;
&lt;span class="cm"&gt; *    documentation and/or other materials provided with the distribution.&lt;/span&gt;
&lt;span class="cm"&gt; * 3. All advertising materials mentioning features or use of this software&lt;/span&gt;
&lt;span class="cm"&gt; *    must display the following acknowledgement:&lt;/span&gt;
&lt;span class="cm"&gt; *  This product includes software developed by the University of&lt;/span&gt;
&lt;span class="cm"&gt; *  California, Berkeley and its contributors.&lt;/span&gt;
&lt;span class="cm"&gt; * 4. Neither the name of the University nor the names of its contributors&lt;/span&gt;
&lt;span class="cm"&gt; *    may be used to endorse or promote products derived from this software&lt;/span&gt;
&lt;span class="cm"&gt; *    without specific prior written permission.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS&amp;#39;&amp;#39; AND&lt;/span&gt;
&lt;span class="cm"&gt; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE&lt;/span&gt;
&lt;span class="cm"&gt; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE&lt;/span&gt;
&lt;span class="cm"&gt; * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE&lt;/span&gt;
&lt;span class="cm"&gt; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL&lt;/span&gt;
&lt;span class="cm"&gt; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS&lt;/span&gt;
&lt;span class="cm"&gt; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&lt;/span&gt;
&lt;span class="cm"&gt; * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT&lt;/span&gt;
&lt;span class="cm"&gt; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY&lt;/span&gt;
&lt;span class="cm"&gt; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF&lt;/span&gt;
&lt;span class="cm"&gt; * SUCH DAMAGE.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; *  @(#)errno.h     8.5 (Berkeley) 1/21/94&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="cp"&gt;#ifndef     _SYS_ERRNO_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define     _SYS_ERRNO_H_&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/cdefs.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#if !defined(KERNEL) &amp;amp;&amp;amp; !defined(KERNEL_PRIVATE)&lt;/span&gt;

&lt;span class="cp"&gt;#if defined(__STDC_WANT_LIB_EXT1__) &amp;amp;&amp;amp; __STDC_WANT_LIB_EXT1__ &amp;gt;= 1&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/_types/_errno_t.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="n"&gt;__BEGIN_DECLS&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;__error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#define errno (*__error())&lt;/span&gt;
&lt;span class="n"&gt;__END_DECLS&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Error codes&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="cp"&gt;#define     EPERM           1               &lt;/span&gt;&lt;span class="cm"&gt;/* Operation not permitted */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOENT          2               &lt;/span&gt;&lt;span class="cm"&gt;/* No such file or directory */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESRCH           3               &lt;/span&gt;&lt;span class="cm"&gt;/* No such process */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EINTR           4               &lt;/span&gt;&lt;span class="cm"&gt;/* Interrupted system call */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EIO             5               &lt;/span&gt;&lt;span class="cm"&gt;/* Input/output error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENXIO           6               &lt;/span&gt;&lt;span class="cm"&gt;/* Device not configured */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     E2BIG           7               &lt;/span&gt;&lt;span class="cm"&gt;/* Argument list too long */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOEXEC         8               &lt;/span&gt;&lt;span class="cm"&gt;/* Exec format error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADF           9               &lt;/span&gt;&lt;span class="cm"&gt;/* Bad file descriptor */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECHILD          10              &lt;/span&gt;&lt;span class="cm"&gt;/* No child processes */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDEADLK         11              &lt;/span&gt;&lt;span class="cm"&gt;/* Resource deadlock avoided */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
                    &lt;span class="cm"&gt;/* 11 was EAGAIN */&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOMEM          12              &lt;/span&gt;&lt;span class="cm"&gt;/* Cannot allocate memory */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EACCES          13              &lt;/span&gt;&lt;span class="cm"&gt;/* Permission denied */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EFAULT          14              &lt;/span&gt;&lt;span class="cm"&gt;/* Bad address */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTBLK         15              &lt;/span&gt;&lt;span class="cm"&gt;/* Block device required */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBUSY           16              &lt;/span&gt;&lt;span class="cm"&gt;/* Device / Resource busy */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EEXIST          17              &lt;/span&gt;&lt;span class="cm"&gt;/* File exists */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EXDEV           18              &lt;/span&gt;&lt;span class="cm"&gt;/* Cross-device link */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENODEV          19              &lt;/span&gt;&lt;span class="cm"&gt;/* Operation not supported by device */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTDIR         20              &lt;/span&gt;&lt;span class="cm"&gt;/* Not a directory */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EISDIR          21              &lt;/span&gt;&lt;span class="cm"&gt;/* Is a directory */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EINVAL          22              &lt;/span&gt;&lt;span class="cm"&gt;/* Invalid argument */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENFILE          23              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many open files in system */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EMFILE          24              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many open files */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTTY          25              &lt;/span&gt;&lt;span class="cm"&gt;/* Inappropriate ioctl for device */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ETXTBSY         26              &lt;/span&gt;&lt;span class="cm"&gt;/* Text file busy */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EFBIG           27              &lt;/span&gt;&lt;span class="cm"&gt;/* File too large */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOSPC          28              &lt;/span&gt;&lt;span class="cm"&gt;/* No space left on device */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESPIPE          29              &lt;/span&gt;&lt;span class="cm"&gt;/* Illegal seek */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EROFS           30              &lt;/span&gt;&lt;span class="cm"&gt;/* Read-only file system */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EMLINK          31              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many links */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPIPE           32              &lt;/span&gt;&lt;span class="cm"&gt;/* Broken pipe */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* math software */&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDOM            33              &lt;/span&gt;&lt;span class="cm"&gt;/* Numerical argument out of domain */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ERANGE          34              &lt;/span&gt;&lt;span class="cm"&gt;/* Result too large */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* non-blocking and interrupt i/o */&lt;/span&gt;
&lt;span class="cp"&gt;#define     EAGAIN          35              &lt;/span&gt;&lt;span class="cm"&gt;/* Resource temporarily unavailable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EWOULDBLOCK     EAGAIN          &lt;/span&gt;&lt;span class="cm"&gt;/* Operation would block */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EINPROGRESS     36              &lt;/span&gt;&lt;span class="cm"&gt;/* Operation now in progress */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EALREADY        37              &lt;/span&gt;&lt;span class="cm"&gt;/* Operation already in progress */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* ipc/network software -- argument errors */&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTSOCK        38              &lt;/span&gt;&lt;span class="cm"&gt;/* Socket operation on non-socket */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDESTADDRREQ    39              &lt;/span&gt;&lt;span class="cm"&gt;/* Destination address required */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EMSGSIZE        40              &lt;/span&gt;&lt;span class="cm"&gt;/* Message too long */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROTOTYPE      41              &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol wrong type for socket */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOPROTOOPT     42              &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol not available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROTONOSUPPORT 43              &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol not supported */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESOCKTNOSUPPORT 44              &lt;/span&gt;&lt;span class="cm"&gt;/* Socket type not supported */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#define ENOTSUP             45              &lt;/span&gt;&lt;span class="cm"&gt;/* Operation not supported */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#if !__DARWIN_UNIX03 &amp;amp;&amp;amp; !defined(KERNEL)&lt;/span&gt;
&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * This is the same for binary and source copmpatability, unless compiling&lt;/span&gt;
&lt;span class="cm"&gt; * the kernel itself, or compiling __DARWIN_UNIX03; if compiling for the&lt;/span&gt;
&lt;span class="cm"&gt; * kernel, the correct value will be returned.  If compiling non-POSIX&lt;/span&gt;
&lt;span class="cm"&gt; * source, the kernel return value will be converted by a stub in libc, and&lt;/span&gt;
&lt;span class="cm"&gt; * if compiling source with __DARWIN_UNIX03, the conversion in libc is not&lt;/span&gt;
&lt;span class="cm"&gt; * done, and the caller gets the expected (discrete) value.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cp"&gt;#define     EOPNOTSUPP       ENOTSUP        &lt;/span&gt;&lt;span class="cm"&gt;/* Operation not supported on socket */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* !__DARWIN_UNIX03 &amp;amp;&amp;amp; !KERNEL */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPFNOSUPPORT    46              &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol family not supported */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#define     EAFNOSUPPORT    47              &lt;/span&gt;&lt;span class="cm"&gt;/* Address family not supported by protocol family */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EADDRINUSE      48              &lt;/span&gt;&lt;span class="cm"&gt;/* Address already in use */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EADDRNOTAVAIL   49              &lt;/span&gt;&lt;span class="cm"&gt;/* Can&amp;#39;t assign requested address */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* ipc/network software -- operational errors */&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENETDOWN        50              &lt;/span&gt;&lt;span class="cm"&gt;/* Network is down */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENETUNREACH     51              &lt;/span&gt;&lt;span class="cm"&gt;/* Network is unreachable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENETRESET       52              &lt;/span&gt;&lt;span class="cm"&gt;/* Network dropped connection on reset */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECONNABORTED    53              &lt;/span&gt;&lt;span class="cm"&gt;/* Software caused connection abort */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECONNRESET      54              &lt;/span&gt;&lt;span class="cm"&gt;/* Connection reset by peer */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOBUFS         55              &lt;/span&gt;&lt;span class="cm"&gt;/* No buffer space available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EISCONN         56              &lt;/span&gt;&lt;span class="cm"&gt;/* Socket is already connected */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTCONN        57              &lt;/span&gt;&lt;span class="cm"&gt;/* Socket is not connected */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESHUTDOWN       58              &lt;/span&gt;&lt;span class="cm"&gt;/* Can&amp;#39;t send after socket shutdown */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ETOOMANYREFS    59              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many references: can&amp;#39;t splice */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#define     ETIMEDOUT       60              &lt;/span&gt;&lt;span class="cm"&gt;/* Operation timed out */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ECONNREFUSED    61              &lt;/span&gt;&lt;span class="cm"&gt;/* Connection refused */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define     ELOOP           62              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many levels of symbolic links */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENAMETOOLONG    63              &lt;/span&gt;&lt;span class="cm"&gt;/* File name too long */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* should be rearranged */&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     EHOSTDOWN       64              &lt;/span&gt;&lt;span class="cm"&gt;/* Host is down */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#define     EHOSTUNREACH    65              &lt;/span&gt;&lt;span class="cm"&gt;/* No route to host */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOTEMPTY       66              &lt;/span&gt;&lt;span class="cm"&gt;/* Directory not empty */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* quotas &amp;amp; mush */&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROCLIM        67              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many processes */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EUSERS          68              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many users */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDQUOT          69              &lt;/span&gt;&lt;span class="cm"&gt;/* Disc quota exceeded */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Network File System */&lt;/span&gt;
&lt;span class="cp"&gt;#define     ESTALE          70              &lt;/span&gt;&lt;span class="cm"&gt;/* Stale NFS file handle */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     EREMOTE         71              &lt;/span&gt;&lt;span class="cm"&gt;/* Too many levels of remote in path */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EBADRPC         72              &lt;/span&gt;&lt;span class="cm"&gt;/* RPC struct is bad */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ERPCMISMATCH    73              &lt;/span&gt;&lt;span class="cm"&gt;/* RPC version wrong */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROGUNAVAIL    74              &lt;/span&gt;&lt;span class="cm"&gt;/* RPC prog. not avail */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROGMISMATCH   75              &lt;/span&gt;&lt;span class="cm"&gt;/* Program version wrong */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROCUNAVAIL    76              &lt;/span&gt;&lt;span class="cm"&gt;/* Bad procedure for program */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#define     ENOLCK          77              &lt;/span&gt;&lt;span class="cm"&gt;/* No locks available */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENOSYS          78              &lt;/span&gt;&lt;span class="cm"&gt;/* Function not implemented */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     EFTYPE          79              &lt;/span&gt;&lt;span class="cm"&gt;/* Inappropriate file type or format */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EAUTH           80              &lt;/span&gt;&lt;span class="cm"&gt;/* Authentication error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENEEDAUTH       81              &lt;/span&gt;&lt;span class="cm"&gt;/* Need authenticator */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Intelligent device errors */&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPWROFF         82      &lt;/span&gt;&lt;span class="cm"&gt;/* Device power is off */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EDEVERR         83      &lt;/span&gt;&lt;span class="cm"&gt;/* Device error, e.g. paper out */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#define     EOVERFLOW       84              &lt;/span&gt;&lt;span class="cm"&gt;/* Value too large to be stored in data type */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* Program loading errors */&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define EBADEXEC    85      &lt;/span&gt;&lt;span class="cm"&gt;/* Bad executable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define EBADARCH    86      &lt;/span&gt;&lt;span class="cm"&gt;/* Bad CPU type in executable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define ESHLIBVERS  87      &lt;/span&gt;&lt;span class="cm"&gt;/* Shared library version mismatch */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define EBADMACHO   88      &lt;/span&gt;&lt;span class="cm"&gt;/* Malformed Macho file */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#define     ECANCELED       89              &lt;/span&gt;&lt;span class="cm"&gt;/* Operation canceled */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define EIDRM               90              &lt;/span&gt;&lt;span class="cm"&gt;/* Identifier removed */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define ENOMSG              91              &lt;/span&gt;&lt;span class="cm"&gt;/* No message of desired type */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define EILSEQ              92              &lt;/span&gt;&lt;span class="cm"&gt;/* Illegal byte sequence */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define ENOATTR             93              &lt;/span&gt;&lt;span class="cm"&gt;/* Attribute not found */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#define EBADMSG             94              &lt;/span&gt;&lt;span class="cm"&gt;/* Bad message */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define EMULTIHOP   95              &lt;/span&gt;&lt;span class="cm"&gt;/* Reserved */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ENODATA         96              &lt;/span&gt;&lt;span class="cm"&gt;/* No message available on STREAM */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define ENOLINK             97              &lt;/span&gt;&lt;span class="cm"&gt;/* Reserved */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define ENOSR               98              &lt;/span&gt;&lt;span class="cm"&gt;/* No STREAM resources */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define ENOSTR              99              &lt;/span&gt;&lt;span class="cm"&gt;/* Not a STREAM */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EPROTO          100             &lt;/span&gt;&lt;span class="cm"&gt;/* Protocol error */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define ETIME               101             &lt;/span&gt;&lt;span class="cm"&gt;/* STREAM ioctl timeout */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#if __DARWIN_UNIX03 || defined(KERNEL)&lt;/span&gt;
&lt;span class="cm"&gt;/* This value is only discrete when compiling __DARWIN_UNIX03, or KERNEL */&lt;/span&gt;
&lt;span class="cp"&gt;#define     EOPNOTSUPP      102             &lt;/span&gt;&lt;span class="cm"&gt;/* Operation not supported on socket */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* __DARWIN_UNIX03 || KERNEL */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define ENOPOLICY   103             &lt;/span&gt;&lt;span class="cm"&gt;/* No such policy registered */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= 200809L&lt;/span&gt;
&lt;span class="cp"&gt;#define ENOTRECOVERABLE 104         &lt;/span&gt;&lt;span class="cm"&gt;/* State not recoverable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define EOWNERDEAD      105         &lt;/span&gt;&lt;span class="cm"&gt;/* Previous owner died */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#if __DARWIN_C_LEVEL &amp;gt;= __DARWIN_C_FULL&lt;/span&gt;
&lt;span class="cp"&gt;#define     EQFULL          106             &lt;/span&gt;&lt;span class="cm"&gt;/* Interface output queue is full */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     ELAST           106             &lt;/span&gt;&lt;span class="cm"&gt;/* Must be equal largest errno */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef KERNEL&lt;/span&gt;
&lt;span class="cm"&gt;/* pseudo-errors returned inside kernel to modify return to process */&lt;/span&gt;
&lt;span class="cp"&gt;#define     ERESTART        (-1)            &lt;/span&gt;&lt;span class="cm"&gt;/* restart syscall */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define     EJUSTRETURN     (-2)            &lt;/span&gt;&lt;span class="cm"&gt;/* don&amp;#39;t modify regs, just return */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#ifdef BSD_KERNEL_PRIVATE&lt;/span&gt;
&lt;span class="cp"&gt;#define ERECYCLE    (-5)            &lt;/span&gt;&lt;span class="cm"&gt;/* restart lookup under heavy vnode pressure/recycling */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define EREDRIVEOPEN        (-6)&lt;/span&gt;
&lt;span class="cp"&gt;#define EKEEPLOOKING        (-7)&lt;/span&gt;
&lt;span class="cp"&gt;#define ERESERVEDNAME       (-8)            &lt;/span&gt;&lt;span class="cm"&gt;/* path is known but not usable */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;/* used for cvwait error returns to Libc */&lt;/span&gt;
&lt;span class="cp"&gt;#define ECVCERORR   256&lt;/span&gt;
&lt;span class="cp"&gt;#define ECVPERORR   512&lt;/span&gt;
&lt;span class="cp"&gt;#else &lt;/span&gt;&lt;span class="cm"&gt;/* BSD_KERNEL_PRIVATE */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;/* -5, -6 and -7 and -106 are reserved for kernel internal use */&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* BSD_KERNEL_PRIVATE */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef PRIVATE&lt;/span&gt;
&lt;span class="cp"&gt;#define     EQSUSPENDED     (-EQFULL)       &lt;/span&gt;&lt;span class="cm"&gt;/* Output queue is suspended */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* PRIVATE */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* KERNEL */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* _SYS_ERRNO_H_ */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-10-22:2013/10/socket-errno-list.html</guid><category>socket</category><category>errno</category></item><item><title>[linux]无法启动 rabbitmq-server，出现 timeout 错误</title><link>https://mozillazg.com/2013/10/linux-RabbitMQ-server-can-not-start-with-host-timeout-error.html</link><description>&lt;p&gt;上次安装 rabbitmq 时，有台服务器上 &lt;code&gt;service rabbitmq-server start&lt;/code&gt; 总是起不来。
错误日志里出现如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;epmd&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yourhostname&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xxxxx&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法就是, 修改 /etc/hosts 将本机的 hostname 加进去：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1    yourhostname
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rabbitmq.com/ec2.html#issues-hostname"&gt;RabbitMQ - Amazon EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/jch/2522701"&gt;Troubleshooting RabbitMQ installation on OSX via homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.sourcefabric.org/discussion/comment/13783"&gt;rabbitmq-server starting.... TIMEOUT - Airtime Support Discussions on Sourcefabric Forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 20 Oct 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-10-20:2013/10/linux-RabbitMQ-server-can-not-start-with-host-timeout-error.html</guid><category>linux</category></item><item><title>[django]修复 "TypeError: delete() got an unexpected keyword argument 'using'"</title><link>https://mozillazg.com/2013/10/django-TypeError-delete-got-an-unexpected-keyword-argument-using.html</link><description>&lt;p&gt;调用 delete 方法时，下面的代码会导致出现标题中的错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;writedb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原因是因为只有单个查询结果对象的 &lt;tt class="docutils literal"&gt;delete&lt;/tt&gt; 方法拥有 &lt;tt class="docutils literal"&gt;using&lt;/tt&gt; 参数，
而查询结果集对象的 &lt;tt class="docutils literal"&gt;delete&lt;/tt&gt; 方法没有 &lt;tt class="docutils literal"&gt;using&lt;/tt&gt; 关键字参数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;writedb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-10-13:2013/10/django-TypeError-delete-got-an-unexpected-keyword-argument-using.html</guid><category>python</category><category>django</category></item><item><title>[django]修复 "dictionary update sequence element 0 has length 1, 2 is required"</title><link>https://mozillazg.com/2013/10/django-dictionary-update-sequence-element-0-has-length-1-2-is-required.html</link><description>&lt;p&gt;定义 url 路由时，下面的代码会导致出现标题中的错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^foo/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;view_func_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原因是因为忘了写 &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; 这个关键字参数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^foo/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;view_func_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-10-13:2013/10/django-dictionary-update-sequence-element-0-has-length-1-2-is-required.html</guid><category>python</category><category>django</category></item><item><title>[python]for 循环中的局部变量陷阱</title><link>https://mozillazg.com/2013/10/python-for-loop-pit.html</link><description>&lt;p&gt;先看一段代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从这段代码，我们可以知道：for 循环中用于循环主体的变量会影响上下文的局部变量。&lt;/p&gt;
&lt;p&gt;所以，类似下面这样的代码就会有问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# error&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-10-13:2013/10/python-for-loop-pit.html</guid><category>python</category></item><item><title>[django]按天分组统计数据</title><link>https://mozillazg.com/2013/09/django-group-by-day.html</link><description>&lt;p&gt;假设有以下 model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date_created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按天统计数量的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;

&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_trunc_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date_created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;Foobar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [{&amp;#39;number&amp;#39;: 10, &amp;#39;day&amp;#39;: datetime.datetime(2013, 9, 29, 0, 0, 0}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3543379/django-annotate-groupings-by-month"&gt;python - Django annotate groupings by month - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-29:2013/09/django-group-by-day.html</guid><category>django</category><category>python</category></item><item><title>[django]按小时分组统计数据</title><link>https://mozillazg.com/2013/09/django-group-by-hour.html</link><description>&lt;p&gt;假设有以下 model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date_created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按小时统计数量的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;

&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_trunc_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date_created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foobar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [{&amp;#39;number&amp;#39;: 10, &amp;#39;hour&amp;#39;: datetime.datetime(2013, 9, 28, 19, 0, 0},&lt;/span&gt;
&lt;span class="c1"&gt;#  {&amp;#39;number&amp;#39;: 12, &amp;#39;hour&amp;#39;: datetime.datetime(2013, 9, 29, 19, 0, 0}]&lt;/span&gt;

&lt;span class="n"&gt;result_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result_new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
        &lt;span class="n"&gt;result_new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [{&amp;#39;number&amp;#39;: 22, &amp;#39;hour&amp;#39;: datetime.datetime(2013, 9, 28, 19, 0, 0},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3543379/django-annotate-groupings-by-month"&gt;python - Django annotate groupings by month - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-29:2013/09/django-group-by-hour.html</guid><category>django</category><category>python</category></item><item><title>[django]按月分组统计数据</title><link>https://mozillazg.com/2013/09/django-group-by-month.html</link><description>&lt;p&gt;假设有以下 model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date_created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按月统计数量的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;

&lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_trunc_sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;date_created&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;Foobar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [{&amp;#39;number&amp;#39;: 10, &amp;#39;month&amp;#39;: datetime.datetime(2013, 9, 1, 0, 0)}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3543379/django-annotate-groupings-by-month"&gt;python - Django annotate groupings by month - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-29:2013/09/django-group-by-month.html</guid><category>django</category><category>python</category></item><item><title>[linux]bash 下 ; &amp;&amp; || 的区别</title><link>https://mozillazg.com/2013/09/linux-bash-run-mutil-cmd.html</link><description>&lt;p&gt;linux 中 bash 下执行多个命令时，; &amp;amp;&amp;amp; || 操作符的区别：&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="27%" /&gt;
&lt;col width="73%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;cmd1 ; cmd2&lt;/td&gt;
&lt;td&gt;cmd1 和 cmd2 &lt;strong&gt;都会&lt;/strong&gt; 被执行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cmd1 &amp;amp;&amp;amp; cmd2&lt;/td&gt;
&lt;td&gt;如果 cmd1 执行 &lt;strong&gt;成功&lt;/strong&gt; 则执行 cmd2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cmd1 || cmd2&lt;/td&gt;
&lt;td&gt;如果 cmd1 执行 &lt;strong&gt;失败&lt;/strong&gt; 则执行 cmd2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://superuser.com/questions/619016/what-is-the-difference-between-command-command-and-command-command"&gt;linux - what is the difference between &amp;quot;command &amp;amp;&amp;amp; command&amp;quot; and &amp;quot;command ; command&amp;quot; - Super User&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-28:2013/09/linux-bash-run-mutil-cmd.html</guid><category>linux</category><category>bash</category><category>shell</category></item><item><title>[python]Windows 下的 ANSI 编码</title><link>https://mozillazg.com/2013/09/python-windows-ansi.html</link><description>&lt;p&gt;Windows 下用记事本保存文件时有个 ANSI 编码，那么如何用 python 保存一个 ANSI 编码的文件呢？&lt;/p&gt;
&lt;p&gt;python 中使用 &lt;code&gt;mbcs&lt;/code&gt; 编码（Windows only）表示 ANSI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mbcs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行上面的代码，就可以创建一个 ANSI 编码的文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ANSI == Windows 本地编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在简体中文 Windows 系统中：ansi == gbk :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mbcs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xc4\xe3\xba\xc3&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;你好&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mbcs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gbk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\u4f60\u597d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://comments.gmane.org/gmane.org.user-groups.python.chinese/93052"&gt;[CPyUG] 请问在python中如何将utf8编码的文件转换成ansi编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/library/codecs.html#python-specific-encodings"&gt;7.8. codecs — Codec registry and base classes — Python v2.7.5 documentation &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 24 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-24:2013/09/python-windows-ansi.html</guid></item><item><title>[英语]data or datas</title><link>https://mozillazg.com/2013/09/english-data-or-datas.html</link><description>&lt;p&gt;data is right, datas is wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have some data in one file and then some more in another, that is not two data or two datas; it is just data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forum.wordreference.com/showthread.php?t=11171"&gt;Data or Datas? - WordReference Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-23:2013/09/english-data-or-datas.html</guid><category>english</category><category>英语</category></item><item><title>[MySQL]修复 DatabaseError: (1061, "Duplicate key name 'bar_xxx_uniq'") 错误</title><link>https://mozillazg.com/2013/09/mysql-DatabaseError-1061-Duplicate-key-name.html</link><description>&lt;p&gt;当 MySQL 数据库的索引 key 出现重复时，就会提示类似的错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DatabaseError: (1061, "Duplicate key name 'abc_xxx_uniq'")&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决办法是移除重复的索引 key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ALTER TABLE `foo`.`bar` DROP INDEX `bar_xxx_uniq`;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 10 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-10:2013/09/mysql-DatabaseError-1061-Duplicate-key-name.html</guid><category>mysql</category></item><item><title>[英语]IHMO 是什么意思？</title><link>https://mozillazg.com/2013/09/english-ihmo.html</link><description>&lt;p&gt;有个哥们总是不自觉的&lt;a href="https://github.com/makinacorpus/django-screamshot/pull/18#issuecomment-23845044"&gt;跟我说 IHMO&lt;/a&gt;，害我看得一头雾水，只好上网找一下解释了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you're talking about the commonly used IM/chat/e-mail abbreviation, I think you may have transposed a letter.&lt;/p&gt;
&lt;p&gt;"imho" is an acronym for "In my humble opinion."&lt;/p&gt;
&lt;p&gt;On the other hand, if you really are asking about "ihmo," I'm afraid I have no clue. "I have many onions," maybe?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思是说：一般情况下在网络上是 "In my humble opinion." 即“依我愚见”的简写。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://uk.answers.yahoo.com/question/index?qid=20061210085159AAqLHjm"&gt;What does ihmo mean? - Yahoo! UK &amp;amp; Ireland Answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-05:2013/09/english-ihmo.html</guid><category>英语</category></item><item><title>[django]同时使用 render_to_response 和 set_cookie</title><link>https://mozillazg.com/2013/09/django-render_to_response-and-set_cookie.html</link><description>&lt;p&gt;render_to_response 返回的其实也是一个 response 对象，直接使用这个 response 对象即可:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4981601/django-use-render-to-response-and-set-cookie"&gt;Django: use render_to_response and set cookie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-09-01:2013/09/django-render_to_response-and-set_cookie.html</guid><category>django</category><category>python</category></item><item><title>[django]更改 request.GET 字典的键值时出现 "AttributeError: This QueryDict instance is immutable" 错误</title><link>https://mozillazg.com/2013/08/django-attributeerror-this-querydict-instance-is-immutable.html</link><description>&lt;p&gt;当修改 request.GET/request.POST 时，会出现: "AttributeError: This QueryDict instance is immutable":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;  &lt;span class="c1"&gt;# AttributeError: This QueryDict instance is immutable&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为默认的 QueryDict 是&lt;strong&gt;不可修改&lt;/strong&gt;的。解决办法就是复制一份副本，对副本进行修改：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 添加这一句&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.djangofoo.com/67/changing-request-post-values-querydict-immutable"&gt;Changing request.POST values (QueryDict instance is immutable) | Django foo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7067020/cannot-urlencode-after-storing-querydict-in-session/7068497#7068497"&gt;django - cannot urlencode() after storing QueryDict in session - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 31 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-31:2013/08/django-attributeerror-this-querydict-instance-is-immutable.html</guid><category>django</category><category>querydict</category><category>python</category></item><item><title>给终端文字加点颜色和特效</title><link>https://mozillazg.com/2013/08/ansi-escape-sequences.html</link><description>&lt;p&gt;这个叫做：ANSI Escape Sequences/Code 。&lt;/p&gt;
&lt;p&gt;文字特效相关的字符格式是：&lt;code&gt;ESC[#;#;....;#m&lt;/code&gt; ，其中 # 的取值见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;# 的值&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;python 代码&lt;/th&gt;
&lt;th&gt;截图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;00 或 0&lt;/td&gt;
&lt;td&gt;正常显示&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[00m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01 或 1&lt;/td&gt;
&lt;td&gt;粗体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[01m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;02 或 2&lt;/td&gt;
&lt;td&gt;模糊&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[02m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;03 或 3&lt;/td&gt;
&lt;td&gt;斜体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[03m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;04 或 4&lt;/td&gt;
&lt;td&gt;下划线&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[04m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/04.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;05 或 5&lt;/td&gt;
&lt;td&gt;闪烁（慢）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[05m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;06 或 6&lt;/td&gt;
&lt;td&gt;闪烁（快）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[06m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;07 或 7&lt;/td&gt;
&lt;td&gt;反转显示（前景色与背景色调过来）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[07m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/07.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;08 或 8&lt;/td&gt;
&lt;td&gt;隐藏&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[08m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/08.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;正常&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[22m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;不斜体&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[23m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;无下划线&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[24m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;不闪烁&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[25m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;不反转&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[26m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;不隐藏&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[27m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前景色&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;黑色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[30m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/30.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[31m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/31.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;绿色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[32m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/32.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;黄色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[33m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/33.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[34m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/34.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;品红/紫红&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[35m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/35.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;青色/蓝绿&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[36m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/36.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;白色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[37m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/37.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;xterm-256 色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[38;5;7m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/38.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;默认色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[39m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;背景色&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;黑色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[40m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/38.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[41m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/41.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;绿色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[42m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/42.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;黄色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[43m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/43.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[44m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/44.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;品红/紫红&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[45m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/45.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;青色/蓝绿&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[46m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/46.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;白色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[47m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/47.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;xterm-256 色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[48;5;7m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="" src="/static/images/48.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;默认色&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'\033[49m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!--
https://github.com/robertknight/konsole/blob/master/tests/color-spaces.pl
Quoting &lt;https://github.com/robertknight/konsole/blob/master/user-doc/README.moreColors&gt;:
   ESC[ … 38;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt; … m Select RGB foreground color
   ESC[ … 48;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt; … m Select RGB background color

## 示例

print('\033[31m \033[44m' + 'some red text' + '\033[0;39m' + 'ab')
--&gt;

&lt;p&gt;同时指定背景及前景色： &lt;code&gt;'\033[47;31m' + 'hello' + '\033[0;39m'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/47-31.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.isthe.com/chongo/tech/comp/ansi_escapes.html"&gt;ANSI Escape Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/ANSI_escape_code"&gt;ANSI escape code - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pixelbeat.org/docs/terminal_colours/"&gt;Terminal colour highlights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Xterm"&gt;xterm - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 25 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-25:2013/08/ansi-escape-sequences.html</guid><category>ansi</category><category>color</category><category>terminal</category></item><item><title>[git]按日期列出所有分支信息</title><link>https://mozillazg.com/2013/08/git-show-branches-by-date.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;for k in `git branch|perl -pe s/^..//`;do echo -e &amp;quot;\e[31m&amp;quot;$k&amp;quot;\e[0m&amp;quot; `git log -1 --pretty=format:&amp;#39;- %s %Cgreen(%ci %cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39; &amp;quot;$k&amp;quot;|head -n 2`\\t;done | sort&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="git-show-branches-by-date" src="/static/images/2013-8-17_19-04-55.png" title="title" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.commandlinefu.com/commands/view/2345/show-git-branches-by-date-useful-for-showing-active-branches"&gt;Show git branches by date - useful for showing active branches | commandlinefu.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-17:2013/08/git-show-branches-by-date.html</guid><category>git</category></item><item><title>[git]显示单个文件变更日志</title><link>https://mozillazg.com/2013/08/git-show-file-changelog.html</link><description>&lt;p&gt;&lt;code&gt;git log -p filename&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git log -p fabfile.py
&lt;span class="go"&gt;commit fd792030bc0ac1db0f1f97ec701a2fd8bcb26a07&lt;/span&gt;
&lt;span class="go"&gt;Author: username &amp;lt;email&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Sun Jun 23 15:36:58 2013 +0800&lt;/span&gt;

&lt;span class="go"&gt;    commit title&lt;/span&gt;

&lt;span class="go"&gt;diff --git a/fabfile.py b/fabfile.py&lt;/span&gt;
&lt;span class="go"&gt;index 4ed36fa..1408118 100644&lt;/span&gt;
&lt;span class="go"&gt;--- a/fabfile.py&lt;/span&gt;
&lt;span class="go"&gt;+++ b/fabfile.py&lt;/span&gt;
&lt;span class="go"&gt;@@ -9,28 +9,29 @@ from fabric.api import settings&lt;/span&gt;

&lt;span class="go"&gt; @task&lt;/span&gt;
&lt;span class="go"&gt; def make_html():&lt;/span&gt;
&lt;span class="go"&gt;-    &amp;quot;&amp;quot;&amp;quot;生成 html 文件&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;-    local(&amp;#39;pelican content -o output -s pelicanconf.py&amp;#39;)&lt;/span&gt;
&lt;span class="go"&gt;+    &amp;quot;&amp;quot;&amp;quot;generate the web site&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;+    with settings(warn_only=True):&lt;/span&gt;
&lt;span class="go"&gt;+        local(&amp;#39;pelican content -o output -s pelicanconf.py -D&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;git log filename&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git log fabfile.py
&lt;span class="go"&gt;commit fd792030bc0ac1db0f1f97ec701a2fd8bcb26a07&lt;/span&gt;
&lt;span class="go"&gt;Author: username &amp;lt;email&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Date:   Sun Jun 23 15:36:58 2013 +0800&lt;/span&gt;

&lt;span class="go"&gt;    commit title&lt;/span&gt;


&lt;span class="gp"&gt;$&lt;/span&gt; git log --graph --pretty&lt;span class="o"&gt;=&lt;/span&gt;format:&lt;span class="s1"&gt;&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#39;&lt;/span&gt; --abbrev-commit fabfile.py
&lt;span class="go"&gt;* fd79203 - commit title (8 weeks ago) &amp;lt;username&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;* 7642a05 - commit title (10 weeks ago) &amp;lt;username&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;* d04ba24 - commit title (10 weeks ago) &amp;lt;username&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/278192/view-the-change-history-of-a-file-using-git-versioning"&gt;git log - View the change history of a file using Git versioning - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-17:2013/08/git-show-file-changelog.html</guid><category>git</category></item><item><title>[python]统计列表中重复项的出现次数</title><link>https://mozillazg.com/2013/08/python-count-duplicate-values-of-list.html</link><description>&lt;p&gt;列表项由数字、字符串组成，统计重复项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;列表项由字典组成，统计某一键值的重复数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}]:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;#39;a&amp;#39;: 1 出现2次，&amp;#39;a&amp;#39;: 2 出现1次&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/14374568/counting-duplicate-words-in-python-the-fastest-way"&gt;dictionary - counting duplicate words in python the fastest way - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-17:2013/08/python-count-duplicate-values-of-list.html</guid><category>python</category><category>list</category></item><item><title>[python]返回一个空的生成器</title><link>https://mozillazg.com/2013/08/python-empty-generator.html</link><description>&lt;p&gt;如何返回一个空的生成器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x01C46968&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/13243766/python-empty-generator-function"&gt;Python Empty Generator Function - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-15:2013/08/python-empty-generator.html</guid><category>python</category><category>generator</category></item><item><title>[linux]创建指定大小的文件</title><link>https://mozillazg.com/2013/08/linux-create-a-file-with-given-size.html</link><description>&lt;p&gt;比如创建 10M 大小的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建大小为 10M 的文件：abc.exe&lt;/span&gt;
dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;abc.exe &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10

&lt;span class="c1"&gt;# 只生成属性为 10M 大小的文件，但不占用实际硬盘空间&lt;/span&gt;
dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;abc.exe &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;seek&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rubyer.me/blog/196/"&gt;Linux生成指定大小文件的方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-03:2013/08/linux-create-a-file-with-given-size.html</guid><category>linux</category></item><item><title>[linux]修复 GPG key retrieval failed: [Errno 14] Could not open/read file:///etc/pki/rpm-gpg/RPM-GPG-KEY-rpmforge-dag</title><link>https://mozillazg.com/2013/08/linux-gpg-key-retrieval-failed-errno-14.html</link><description>&lt;p&gt;两种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编辑 &lt;code&gt;/etc/yum/etc/yum.repos.d/rpmforge.repo&lt;/code&gt;，更改 &lt;code&gt;gpgcheck=0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://easylinuxalways.blogspot.jp/2013/04/gpg-key-retrieval-failed.html"&gt;GPG key retrieval failed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-08-02:2013/08/linux-gpg-key-retrieval-failed-errno-14.html</guid><category>linux</category><category>rpmforge</category></item><item><title>[django]修复 MemcachedKeyCharacterError</title><link>https://mozillazg.com/2013/07/django-memcachedkeycharactererror.html</link><description>&lt;h2&gt;错误详情&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;MemcachedKeyCharacterError at /&lt;/p&gt;
&lt;p&gt;Control characters not allowed
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;出现这个错误是因为 key 值不合法：长度大于 250、包含空格或控制符&lt;/p&gt;
&lt;h2&gt;解决&lt;/h2&gt;
&lt;p&gt;去掉非法字符或将 key 进行编码(base64/md5/sha1/...)&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/11322746"&gt;php - Can memcached keys contain spaces? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-07-09:2013/07/django-memcachedkeycharactererror.html</guid><category>django</category><category>memcached</category></item><item><title>[python]设置 gunicorn 绑定多个地址</title><link>https://mozillazg.com/2013/07/python-gunicorn-multiple-address.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;有两种方式可以设置 gunicorn  绑定多个地址。&lt;/p&gt;
&lt;h2&gt;命令行参数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn -b unix:/tmp/gunicorn.sock -b 127.0.0.1:8000 wsgi:app

gunicorn --bind unix:/tmp/gunicorn.sock --bind 127.0.0.1:8000 wsgi:app
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置文件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unix:/tmp/gunicorn.sock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1:8000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0:1234&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.gunicorn.org/en/latest/configure.html"&gt;Congiuration - gunicorn documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benoitc/gunicorn/commit/b7b51adf13e92044211b267ba07e3498585f219a"&gt;allows gunicorn to bind to multiple address - b7b51ad - benoitc/gunicorn - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 08 Jul 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-07-08:2013/07/python-gunicorn-multiple-address.html</guid><category>python</category><category>gunicorn</category></item><item><title>[python] 发送邮件时设置邮件的优先级/重要性</title><link>https://mozillazg.com/2013/07/python-send-email-set-priority.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;设置邮件 header 中 X-Priority 的值就可以了：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;X-Priority 的值&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;"1"&lt;/td&gt;
&lt;td&gt;最高级别（重要性高）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"2"&lt;/td&gt;
&lt;td&gt;介于中间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"3"&lt;/td&gt;
&lt;td&gt;普通级别（不提示重要性）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"4"&lt;/td&gt;
&lt;td&gt;介于中间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"5"&lt;/td&gt;
&lt;td&gt;最低级别（重要性低）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;python 使用示例&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/a/11844141"&gt;http://stackoverflow.com/a/11844141&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.Message&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;

&lt;span class="n"&gt;smtp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;me&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-Priority&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Urgent!&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Nothing.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;h2&gt;django 使用示例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;

&lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;X-Priority&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# 注意值是字符串&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_emails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11843148/smtp-sending-an-priority-email"&gt;python - SMTP sending an priority email - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.chilkatsoft.com/braindump/email_headers/X-Priority_header.html"&gt;X-Priority Header Field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-07-02:2013/07/python-send-email-set-priority.html</guid><category>python</category><category>email</category><category>X-Priority</category></item><item><title>Cygwin 中的软件包管理工具： apt-cyg</title><link>https://mozillazg.com/2013/06/cygwin-install-packages-by-apt-cyg.html</link><description>&lt;p&gt;apt-cyg 可以在 Cygwin 中实现类似 linux 下的 &lt;code&gt;yum&lt;/code&gt; 或 &lt;code&gt;apt-get&lt;/code&gt; 的功能。&lt;/p&gt;
&lt;h2&gt;主页&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/apt-cyg/"&gt;http://code.google.com/p/apt-cyg/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn --force &lt;span class="nb"&gt;export&lt;/span&gt; http://apt-cyg.googlecode.com/svn/trunk/ /bin/
$ chmod +x /bin/apt-cyg
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg install &amp;lt;package names&amp;gt;      # 安装软件包&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-cyg install bind-utils
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg remove &amp;lt;package names&amp;gt;      # 移除软件包&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg update     # 更新 setup.ini 文件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg show      # 列出已安装的软件包&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg find &amp;lt;pattern(s)&amp;gt;     # 查找名称匹配的软件包&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-cyg describe &amp;lt;pattern(s)&amp;gt;     # 查找描述匹配的软件包&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg packageof &amp;lt;commands or files&amp;gt;     # 定位命令或文件属于哪个软件包&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-cyg packageof dig
Found usr/bin/dig in the package bind-utils
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apt-cyg     # 显示帮助信息&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-cyg
apt-cyg: Installs and removes Cygwin packages.
&lt;span class="s2"&gt;&amp;quot;apt-cyg install &amp;lt;package names&amp;gt;&amp;quot;&lt;/span&gt; to install packages
&lt;span class="s2"&gt;&amp;quot;apt-cyg remove &amp;lt;package names&amp;gt;&amp;quot;&lt;/span&gt; to remove packages
&lt;span class="s2"&gt;&amp;quot;apt-cyg update&amp;quot;&lt;/span&gt; to update setup.ini
&lt;span class="s2"&gt;&amp;quot;apt-cyg show&amp;quot;&lt;/span&gt; to show installed packages
&lt;span class="s2"&gt;&amp;quot;apt-cyg find &amp;lt;patterns&amp;gt;&amp;quot;&lt;/span&gt; to find packages matching patterns
&lt;span class="s2"&gt;&amp;quot;apt-cyg describe &amp;lt;patterns&amp;gt;&amp;quot;&lt;/span&gt; to describe packages matching patterns
&lt;span class="s2"&gt;&amp;quot;apt-cyg packageof &amp;lt;commands or files&amp;gt;&amp;quot;&lt;/span&gt; to locate parent packages
Options:
--mirror, -m &amp;lt;url&amp;gt; : &lt;span class="nb"&gt;set&lt;/span&gt; mirror
--cache, -c &amp;lt;dir&amp;gt;  : &lt;span class="nb"&gt;set&lt;/span&gt; cache
--file, -f &amp;lt;file&amp;gt;  : &lt;span class="nb"&gt;read&lt;/span&gt; package names from file
--noupdate, -u     : don&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t update setup.ini from mirror
--help
--version
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-23:2013/06/cygwin-install-packages-by-apt-cyg.html</guid><category>Cygwin</category></item><item><title>[python]解决编译安装 lxml 时提示：libxml/xmlversion.h:No such file or directory</title><link>https://mozillazg.com/2013/06/python-install-lxml-libxml-xmlversion.h-No-such-file-or-directory.html</link><description>&lt;p&gt;编译安装 lxml 时，出现了如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;libxml/xmlversion.h: No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;出现这个错误是因为有些依赖包没有安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libxml2&lt;/li&gt;
&lt;li&gt;libxml2-dev&lt;/li&gt;
&lt;li&gt;libxslt&lt;/li&gt;
&lt;li&gt;libxslt-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要安装好要上面的依赖包就可以了&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-23:2013/06/python-install-lxml-libxml-xmlversion.h-No-such-file-or-directory.html</guid><category>python</category><category>lxml</category><category>libxml</category><category>libxslt</category></item><item><title>mysql 基于 master-master 的双机热备配置</title><link>https://mozillazg.com/2013/06/mysql-master-master.html</link><description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;master-master 就是两台服务器互为主从：        &lt;br /&gt;
master1-slave(master2) &amp;amp;&amp;amp; master2-slave(master1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master1: 192.168.100.191&lt;/li&gt;
&lt;li&gt;master2: 192.168.100.166&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;master1-slave(master2)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;mysql 版本最好一致&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;设置 master1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建给 slave 登录用的用户名密码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; GRANT REPLICATION SLAVE ON *.* TO &lt;span class="s1"&gt;&amp;#39;backup&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;192.168.100.166&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span class="s1"&gt;&amp;#39;yNZE7fK9*@aMA?*ppF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# humanreadable&lt;/span&gt;
mysql&amp;gt; &lt;span class="c1"&gt;# grant replication slave on *.* to &amp;#39;backup&amp;#39;@&amp;#39;192.168.100.166&amp;#39; identified by &amp;#39;yNZE7fK9*@aMA?*ppF&amp;#39;;&lt;/span&gt;

mysql&amp;gt; create database hello default charset utf8&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 my.cnf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vim /etc/my.cnf&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;
server-id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;#主机id，整数&lt;/span&gt;
&lt;span class="c1"&gt;#开启二进制日志，并且名称为 /var/lib/mysql/mysql-bin.***&lt;/span&gt;
&lt;span class="c1"&gt;# 如果是个路径则，保存到该路径下(log-bin=/var/log/mysql-bin.log  -&amp;gt; /var/log/mysql-bin.***)&lt;/span&gt;
log-bin&lt;span class="o"&gt;=&lt;/span&gt;mysql-bin
read-only&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;#主机读写权限，读写都可以&lt;/span&gt;
binlog-do-db&lt;span class="o"&gt;=&lt;/span&gt;hello   &lt;span class="c1"&gt;#记录日志的数据库：需要的备份数据，多个写多行&lt;/span&gt;
&lt;span class="c1"&gt;# binlog-do-db=hello2&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不记录日志的数据库：不需要备份的数据库，多个写多行&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema

&lt;span class="c1"&gt;# 自增字段奇数递增，防止冲突（1, 3, 5, ...,）&lt;/span&gt;
auto-increment-increment &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# 每次递增的步长&lt;/span&gt;
auto-increment-offset &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# 初始值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启 mysql: &lt;code&gt;serivce mysqld restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导出数据库&lt;/p&gt;
&lt;p&gt;锁定数据库，不要退出 mysql shell&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt;FLUSH TABLES WITH READ LOCK&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt;# flush tables with &lt;span class="nb"&gt;read&lt;/span&gt; lock&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新开一个终端，导出数据库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysqldump --master-data -uroot -p hello &amp;gt; hello.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看主服务器的状态&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; show master status&lt;span class="se"&gt;\G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
*************************** 1. row ***************************
            File: mysql-bin.000001
        Position: 98
    Binlog_Do_DB: hello
Binlog_Ignore_DB: mysql,test,information_schema
&lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

ERROR: 
No query specified
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;记下 Position 和 File 的值。
解锁&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; UNLOCK TABLES&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt; &lt;span class="c1"&gt;# unlock tables;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;设置 slave(master2)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编辑 my.cnf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vim /etc/my.cnf&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;
server-id&lt;span class="o"&gt;=&lt;/span&gt;2
log-bin&lt;span class="o"&gt;=&lt;/span&gt;mysql-bin
replicate-do-db &lt;span class="o"&gt;=&lt;/span&gt;hello &lt;span class="c1"&gt;#只复制某个库，多个写多行&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不复制某个库&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema
relay-log&lt;span class="o"&gt;=&lt;/span&gt;mysqld-relay-bin  &lt;span class="c1"&gt;# 开启日志中继&lt;/span&gt;
log-slave-updates  &lt;span class="c1"&gt;# slave将复制事件写进自己的二进制日志&lt;/span&gt;
&lt;span class="c1"&gt;#5.5&lt;/span&gt;
&lt;span class="c1"&gt;#log-slave-updates = ON&lt;/span&gt;
&lt;span class="c1"&gt;#5.1&lt;/span&gt;
&lt;span class="c1"&gt;#log-slave-updates = 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入 master 导出的数据库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; create database hello default charset utf8&lt;span class="p"&gt;;&lt;/span&gt;
mysql -uroot -p hello &amp;lt; hello.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 master 信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; slave stop&lt;span class="p"&gt;;&lt;/span&gt;

mysql&amp;gt; CHANGE MASTER TO
-&amp;gt; &lt;span class="nv"&gt;MASTER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.100.191&amp;#39;&lt;/span&gt;, //主服务器的IP地址
-&amp;gt; &lt;span class="nv"&gt;MASTER_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backup&amp;#39;&lt;/span&gt;, //同步数据库的用户
-&amp;gt; &lt;span class="nv"&gt;MASTER_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yNZE7fK9*@aMA?*ppF&amp;#39;&lt;/span&gt;, //同步数据库的密码
-&amp;gt; &lt;span class="nv"&gt;MASTER_CONNECT_RETRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60,  // 如果从服务器发现主服务器断掉，重新连接的时间差&lt;span class="o"&gt;(&lt;/span&gt;秒&lt;span class="o"&gt;)&lt;/span&gt;
-&amp;gt; &lt;span class="nv"&gt;MASTER_LOG_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql-bin.000001&amp;#39;&lt;/span&gt;, //主服务器二进制日志的文件名&lt;span class="o"&gt;(&lt;/span&gt;前面要求记住的 File 参数&lt;span class="o"&gt;)&lt;/span&gt;
-&amp;gt; &lt;span class="nv"&gt;MASTER_LOG_POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;98&lt;span class="p"&gt;;&lt;/span&gt; //日志文件的开始位置&lt;span class="o"&gt;(&lt;/span&gt;前面要求记住的 Position 参数&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; CHANGE MASTER TO &lt;span class="nv"&gt;MASTER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.100.191&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;MASTER_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backup&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;MASTER_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yNZE7fK9*@aMA?*ppF&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;MASTER_CONNECT_RETRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60, &lt;span class="nv"&gt;MASTER_LOG_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql-bin.000001&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;MASTER_LOG_POS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;98&lt;span class="p"&gt;;&lt;/span&gt;

mysql &amp;gt; slave start&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启 master, slave: &lt;code&gt;service mysqld restart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看 slave 状态：&lt;/p&gt;
&lt;p&gt;进入 slave mysql:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; show slave status&lt;span class="se"&gt;\G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
*************************** 1. row ***************************
            Slave_IO_State: Connecting to master
                Master_Host: 192.168.100.191
                Master_User: backup
                Master_Port: 3306
            Connect_Retry: 60
            Master_Log_File: mysql-bin.000001
        Read_Master_Log_Pos: 98
            Relay_Log_File: mysqld-relay-bin.000001
            Relay_Log_Pos: 98
    Relay_Master_Log_File: mysql-bin.000001
        Slave_IO_Running: Yes
        Slave_SQL_Running: Yes
            Replicate_Do_DB: hello
        Replicate_Ignore_DB: mysql,test,information_schema
        Exec_Master_Log_Pos: 98
            Relay_Log_Space: 98
            Until_Log_Pos: 0
    Seconds_Behind_Master: NULL
&lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意一定要有下面两项，没有的话查看错误日志(less /var/log/mysqld.log)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        Slave_IO_Running: Yes
        Slave_SQL_Running: Yes
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;p&gt;master 服务器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; use hello&lt;span class="p"&gt;;&lt;/span&gt;
Database changed
mysql&amp;gt; create table test&lt;span class="o"&gt;(&lt;/span&gt;id int&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt; insert int &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt;

mysql&amp;gt; show master status&lt;span class="se"&gt;\G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
*************************** 1. row ***************************
            File: mysql-bin.000002  &lt;span class="c1"&gt;# 注意这里&lt;/span&gt;
        Position: &lt;span class="m"&gt;276&lt;/span&gt;    &lt;span class="c1"&gt;# 注意这里&lt;/span&gt;
    Binlog_Do_DB: hello
Binlog_Ignore_DB: mysql,test,information_schema
&lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;slave 服务器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; use hello&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt; show tables&lt;span class="p"&gt;;&lt;/span&gt;
+-----------------+
&lt;span class="p"&gt;|&lt;/span&gt; Tables_in_hello &lt;span class="p"&gt;|&lt;/span&gt;
+-----------------+
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;            &lt;span class="p"&gt;|&lt;/span&gt; 
+-----------------+
&lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; &lt;span class="k"&gt;select&lt;/span&gt; * from test&lt;span class="p"&gt;;&lt;/span&gt;
+------+
&lt;span class="p"&gt;|&lt;/span&gt; id   &lt;span class="p"&gt;|&lt;/span&gt;
+------+
&lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; 
+------+
&lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;

mysql&amp;gt; show slave status&lt;span class="se"&gt;\G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
*************************** 1. row ***************************
            Slave_IO_State: Waiting &lt;span class="k"&gt;for&lt;/span&gt; master to send event
                Master_Host: 192.168.100.191
                Master_User: backup
                Master_Port: 3306
            Connect_Retry: 60
            Master_Log_File: mysql-bin.000002  &lt;span class="c1"&gt;# 跟 master 一样&lt;/span&gt;
        Read_Master_Log_Pos: &lt;span class="m"&gt;276&lt;/span&gt;  &lt;span class="c1"&gt;# 跟 master 一样&lt;/span&gt;
            Relay_Log_File: mysqld-relay-bin.000003
            Relay_Log_Pos: 413
    Relay_Master_Log_File: mysql-bin.000002
        Slave_IO_Running: Yes
        Slave_SQL_Running: Yes
            Replicate_Do_DB: hello
        Replicate_Ignore_DB: mysql,test,information_schema
                Last_Errno: 0
                Last_Error: 
            Skip_Counter: 0
        Exec_Master_Log_Pos: 276
            Relay_Log_Space: 413
    Seconds_Behind_Master: 0
&lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;master2-slave(master1)&lt;/h2&gt;
&lt;h3&gt;master2:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; grant replication slave on *.* to &lt;span class="s1"&gt;&amp;#39;backup&amp;#39;&lt;/span&gt;@&lt;span class="s1"&gt;&amp;#39;192.168.100.191&amp;#39;&lt;/span&gt; identified by &lt;span class="s1"&gt;&amp;#39;yNZE7fK9*@aMA?*ppF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt; flush tables with &lt;span class="nb"&gt;read&lt;/span&gt; lock&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt; show master status&lt;span class="se"&gt;\G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
*************************** 1. row ***************************
            File: mysql-bin.000002
        Position: 276
    Binlog_Do_DB: 
Binlog_Ignore_DB: 
mysql&amp;gt; unlock tables&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vim /etc/my.cnf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# as master&lt;/span&gt;
&lt;span class="c1"&gt;#开启二进制日志，并且名称为 /var/log/mysql/mysql-bin.***&lt;/span&gt;
log-bin&lt;span class="o"&gt;=&lt;/span&gt;mysql-bin
read-only&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;#主机读写权限，读写都可以&lt;/span&gt;
binlog-do-db&lt;span class="o"&gt;=&lt;/span&gt;hello   &lt;span class="c1"&gt;#记录日志的数据库：需要的备份数据，多个写多行&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不记录日志的数据库：不需要备份的数据库，多个写多行&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema


&lt;span class="c1"&gt;# 自增字段偶数递增，防止冲突（2, 4, 6, ...,）&lt;/span&gt;
auto-increment-increment &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# 每次递增的步长&lt;/span&gt;
auto-increment-offset &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# 初始值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;service mysqld restart&lt;/p&gt;
&lt;h4&gt;slave:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; slave stop&lt;span class="p"&gt;;&lt;/span&gt;

mysql&amp;gt;  CHANGE MASTER TO &lt;span class="nv"&gt;MASTER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.100.166&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;MASTER_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;backup&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;MASTER_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yNZE7fK9*@aMA?*ppF&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;MASTER_CONNECT_RETRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;60, &lt;span class="nv"&gt;MASTER_LOG_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql-bin.000002, MASTER_LOG_POS=276&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

mysql&amp;gt; slave start&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vim /etc/my.cnf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# as slave&lt;/span&gt;
replicate-do-db &lt;span class="o"&gt;=&lt;/span&gt;hello &lt;span class="c1"&gt;#只复制某个库，多个写多行&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不复制某个库&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema
relay-log&lt;span class="o"&gt;=&lt;/span&gt;mysqld-relay-bin  &lt;span class="c1"&gt;# 开启日志中继&lt;/span&gt;
log-slave-updates  &lt;span class="c1"&gt;# slave将复制事件写进自己的二进制日志&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;serivce mysqld restart&lt;/p&gt;
&lt;h4&gt;测试&lt;/h4&gt;
&lt;p&gt;master2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; use hello&lt;span class="p"&gt;;&lt;/span&gt;    
mysql&amp;gt; insert into &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2&lt;span class="p"&gt;;&lt;/span&gt;
mysql&amp;gt; &lt;span class="k"&gt;select&lt;/span&gt; * from test&lt;span class="p"&gt;;&lt;/span&gt;
+------+
&lt;span class="p"&gt;|&lt;/span&gt; id   &lt;span class="p"&gt;|&lt;/span&gt;
+------+
&lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; 
&lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; 
+------+
&lt;span class="m"&gt;2&lt;/span&gt; rows in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
mysql&amp;gt; show master status&lt;span class="se"&gt;\G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
*************************** 1. row ***************************
            File: mysql-bin.000003
        Position: 187
    Binlog_Do_DB: hello
Binlog_Ignore_DB: mysql,test,information_schema
&lt;span class="m"&gt;1&lt;/span&gt; row in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;slave:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; show slave status &lt;span class="se"&gt;\G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
*************************** 1. row ***************************
            Slave_IO_State: Waiting &lt;span class="k"&gt;for&lt;/span&gt; master to send event
                Master_Host: 192.168.100.166
                Master_User: backup
                Master_Port: 3306
            Connect_Retry: 60
            Master_Log_File: mysql-bin.000003
        Read_Master_Log_Pos: 187
            Relay_Log_File: mysqld-relay-bin.000003
            Relay_Log_Pos: 324
    Relay_Master_Log_File: mysql-bin.000003
        Slave_IO_Running: Yes
        Slave_SQL_Running: Yes
            Replicate_Do_DB: hello
        Replicate_Ignore_DB: mysql,test,information_schema
                Last_Errno: 0
                Last_Error: 
            Skip_Counter: 0
        Exec_Master_Log_Pos: 187
            Relay_Log_Space: 324
            Until_Condition: None
            Until_Log_File: 
            Until_Log_Pos: 0
    Seconds_Behind_Master: 0

mysql&amp;gt; use hello&lt;span class="p"&gt;;&lt;/span&gt;

mysql&amp;gt; &lt;span class="k"&gt;select&lt;/span&gt; * from test&lt;span class="p"&gt;;&lt;/span&gt;
+------+
&lt;span class="p"&gt;|&lt;/span&gt; id   &lt;span class="p"&gt;|&lt;/span&gt;
+------+
&lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; 
&lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; 
+------+
&lt;span class="m"&gt;2&lt;/span&gt; rows in &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;0.00 sec&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--less /var/log/mysqld.log--&gt;

&lt;p&gt;最后的配置文件&lt;/p&gt;
&lt;p&gt;master1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/my.cnf&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# as master&lt;/span&gt;
server-id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;#主机id，整数&lt;/span&gt;
&lt;span class="c1"&gt;#开启二进制日志，并且名称为 /var/lib/mysql/mysql-bin.***&lt;/span&gt;
log-bin&lt;span class="o"&gt;=&lt;/span&gt;mysql-bin
read-only&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;#主机读写权限，读写都可以&lt;/span&gt;
binlog-do-db&lt;span class="o"&gt;=&lt;/span&gt;hello   &lt;span class="c1"&gt;#记录日志的数据库：需要的备份数据，多个写多行&lt;/span&gt;
&lt;span class="c1"&gt;# binlog-do-db=hello2&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不记录日志的数据库：不需要备份的数据库，多个写多行&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema

&lt;span class="c1"&gt;# as slave&lt;/span&gt;
replicate-do-db &lt;span class="o"&gt;=&lt;/span&gt;hello &lt;span class="c1"&gt;#只复制某个库，多个写多行&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不复制某个库&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema
relay-log&lt;span class="o"&gt;=&lt;/span&gt;mysqld-relay-bin  &lt;span class="c1"&gt;# 开启日志中继&lt;/span&gt;
log-slave-updates  &lt;span class="c1"&gt;# slave将复制事件写进自己的二进制日志&lt;/span&gt;


&lt;span class="c1"&gt;# 自增字段奇数递增，防止冲突（1, 3, 5, ...,）&lt;/span&gt;
auto-increment-increment &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# 每次递增的步长&lt;/span&gt;
auto-increment-offset &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# 初始值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;master2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/my.cnf&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;mysqld&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# as slave&lt;/span&gt;
server-id&lt;span class="o"&gt;=&lt;/span&gt;2
log-bin&lt;span class="o"&gt;=&lt;/span&gt;mysql-bin
replicate-do-db &lt;span class="o"&gt;=&lt;/span&gt;hello &lt;span class="c1"&gt;#只复制某个库，多个写多行&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不复制某个库&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
replicate-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema
relay-log&lt;span class="o"&gt;=&lt;/span&gt;mysqld-relay-bin  &lt;span class="c1"&gt;# 开启日志中继&lt;/span&gt;
log-slave-updates  &lt;span class="c1"&gt;# 示slave将复制事件写进自己的二进制日志&lt;/span&gt;

&lt;span class="c1"&gt;# as master&lt;/span&gt;
&lt;span class="c1"&gt;#开启二进制日志，并且名称为 /var/lib/mysql/mysql-bin.***&lt;/span&gt;
log-bin&lt;span class="o"&gt;=&lt;/span&gt;mysql-bin
read-only&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;#主机读写权限，读写都可以&lt;/span&gt;
binlog-do-db&lt;span class="o"&gt;=&lt;/span&gt;hello   &lt;span class="c1"&gt;#记录日志的数据库：需要的备份数据，多个写多行&lt;/span&gt;
&lt;span class="c1"&gt;# binlog-do-db=hello2&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;mysql &lt;span class="c1"&gt;#不记录日志的数据库：不需要备份的数据库，多个写多行&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;
binlog-ignore-db&lt;span class="o"&gt;=&lt;/span&gt;information_schema


&lt;span class="c1"&gt;# 自增字段偶数递增，防止冲突（2, 4, 6, ...,）&lt;/span&gt;
auto-increment-increment &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# 每次递增的步长&lt;/span&gt;
auto-increment-offset &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;# 初始值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.d5s.cn/archives/95"&gt;MYSQL 主从服务器配置 | 无影的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://database.51cto.com/art/200510/8434.htm"&gt;Mysql 数据库双机热备的配置 - 51CTO.COM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://serverfault.com/questions/268627/mysql-master-master-replication-of-all-databases-how"&gt;MySQL Master-Master Replication of ALL databases. How? - Server Fault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.1/en/replication.html"&gt;MySQL :: MySQL 5.1 Reference Manual :: 16 Replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="file:///D:/Settings/Mozilla/ScrapBook/data/20130522165305/index.html"&gt;MySqL的主从复制和读写分离 - ZhouLS的个人空间 - 开源中国社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/hguisu/article/details/7325124"&gt;高性能Mysql主从架构的复制原理及配置详解 - guisu，程序人生。 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mvbridge.blog.sohu.com/172644721.html"&gt;MySQL master slave 安装部署及常见问题-桥-搜狐博客&lt;/a&gt;
&lt;!--* [)--&gt;
&lt;!--https://groups.google.com/forum/#!topic/django-users/0RiRw6jlnAs--&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.phpok.com/archives/29/"&gt;三台Mysql实现数据同步及主从模式 - 情感个人博客站 - Powered by Sablog-X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.csdn.net/wh62592855/article/details/6726724"&gt;MYSQL中的auto_increment_increment和auto_increment_offset - 朝着梦想 渐行前进 - 博客频道 - CSDN.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/8262863/how-is-the-mysql-auto-increment-step-size-determined"&gt;auto increment - How is the MySQL auto_increment step size determined - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/refman/5.1/en/replication-options-master.html#sysvar_auto_increment_increment"&gt;MySQL :: MySQL 5.1 Reference Manual :: 16.1.3.2 Replication Master Options and Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 21 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-21:2013/06/mysql-master-master.html</guid><category>mysql</category><category>replication</category></item><item><title>[python]第三方模块 python-dateutil：扩展并增强 datetime 模块的功能</title><link>https://mozillazg.com/2013/06/python-third-party-model-python-dateutil.html</link><description>&lt;h2&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展并增强 datetime 模块的功能。支持 Python 2.3+。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;主页&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://labix.org/python-dateutil"&gt;http://labix.org/python-dateutil&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;文档&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://labix.org/python-dateutil"&gt;http://labix.org/python-dateutil&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install python-dateutil

&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="c1"&gt;# download from https://pypi.python.org/pypi/python-dateutil&lt;/span&gt;
python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;简单使用&lt;/h2&gt;
&lt;p&gt;获取历史上的今天，上个月的今天，下个月的今天 &lt;a href="http://labix.org/python-dateutil#head-6a1472b7c74e5b8bab7784f11214250d34e09aa5"&gt;link&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dateutil.relativedelta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;relativedelta&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;relativedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;years&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;relativedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;months&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;relativedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;months&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多用法请查看官方文档：&lt;a href="https://pypi.python.org/pypi/python-dateutil"&gt;https://pypi.python.org/pypi/python-dateutil&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-09:2013/06/python-third-party-model-python-dateutil.html</guid><category>python-third-party-model</category><category>python</category><category>python-dateutil</category><category>dateutil</category><category>datetime</category></item><item><title>[python]解决使用 argparse 时出现：ValueError: unsupported format character 'p' (0x70) at index 8</title><link>https://mozillazg.com/2013/06/python-valueerror-unsupported-format-character-p-0x70-at-index-8.html</link><description>&lt;p&gt;将程序从 optparse 转到 argparse 后，出现了如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
  File &amp;quot;C:\PYTHON26\lib\site-packages\argparse-1.2.1-py2.6.egg\argparse.py&amp;quot;, line 230, in format_help
    func(*args)
  File &amp;quot;C:\PYTHON26\lib\site-packages\argparse-1.2.1-py2.6.egg\argparse.py&amp;quot;, line 317, in _format_usage
    usage = usage % dict(prog=self._prog)
ValueError: unsupported format character &amp;#39;p&amp;#39; (0x70) at index 8
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;将程序中的 &lt;code&gt;%prog&lt;/code&gt; 改为 &lt;code&gt;%(prog)s&lt;/code&gt; ，&lt;code&gt;%default&lt;/code&gt; 改为 &lt;code&gt;%(default)s&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mail.python.org/pipermail/python-dev/2009-December/094598.html"&gt;[Python-Dev] Pronouncement on PEP 389: argparse?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/library/argparse.html"&gt;argparse — Parser for command-line options, arguments and sub-commands - Python 2.7 Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-07:2013/06/python-valueerror-unsupported-format-character-p-0x70-at-index-8.html</guid><category>python</category><category>argparse</category></item><item><title>[python]解决 64 位 windows 下使用 pip 安装带 c 扩展的模块时，出现 "ValueError: [u'path']" 错误</title><link>https://mozillazg.com/2013/06/python-Windows-x64-compile-c-valueerror-path.html</link><description>&lt;p&gt;今天在 64 位 Windows 下使用 pip 安装 rcssmin 时，出现了如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
   File &lt;span class="s2"&gt;&amp;quot;C:\Python27\lib\distutils\msvc9compiler.py&amp;quot;&lt;/span&gt;, line 299, in query_vcvarsall

      raise ValueError&lt;span class="o"&gt;(&lt;/span&gt;str&lt;span class="o"&gt;(&lt;/span&gt;list&lt;span class="o"&gt;(&lt;/span&gt;result.keys&lt;span class="o"&gt;())))&lt;/span&gt;

 ValueError: &lt;span class="o"&gt;[&lt;/span&gt;u&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;这是因为在编译 c 扩展程序时，出现了错误。&lt;/p&gt;
&lt;p&gt;解决办法是，安装 Visual Studio 2008 Professional x64，并且在安装时选中 x64 compiler tools:&lt;/p&gt;
&lt;p&gt;&lt;img alt="install vs2008" src="/static/images/install_vs_x64_compiler_tools.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4676728/value-error-trying-to-install-python-for-windows-extensions"&gt;command line - Value error trying to install Python for Windows extensions - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-06:2013/06/python-Windows-x64-compile-c-valueerror-path.html</guid><category>python</category><category>ValueError</category></item><item><title>[django]使用 South 重命名 model 字段名</title><link>https://mozillazg.com/2013/06/django-south-rename-model-field.html</link><description>&lt;p&gt;本文将讲述如何使用 South 重命名表的字段名。&lt;/p&gt;
&lt;p&gt;假设应用 foobar 有个 model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;想要将 foo 字段名改为 bar。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;改好 models.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 south 命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python manage.py schemamigration yourapp rename_field_foo_to_bar --empty&lt;/span&gt;
&lt;span class="c1"&gt;# 本例是&lt;/span&gt;
python manage.py schemamigration foobar rename_field_foo_to_bar --empty
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更改生成的 000x_xxx.py 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SchemaMigration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 更改列名&lt;/span&gt;
        &lt;span class="c1"&gt;# db.rename_column(&amp;#39;yourapp_foo&amp;#39;, &amp;#39;oldname&amp;#39;, &amp;#39;newname&amp;#39;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foobar_foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 撤销更改&lt;/span&gt;
        &lt;span class="c1"&gt;# db.rename_column(&amp;#39;yourapp_foo&amp;#39;, &amp;#39;newname&amp;#39;, &amp;#39;oldname&amp;#39;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foobar_foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3235995/django-how-to-rename-a-model-field-using-south"&gt;Django - How to rename a model field using South? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-05:2013/06/django-south-rename-model-field.html</guid><category>django</category><category>python</category><category>south</category></item><item><title>[django]使用 South 重命名 model 名称</title><link>https://mozillazg.com/2013/06/django-south-rename-model-or-table.html</link><description>&lt;p&gt;本文将讲述如何使用 South 重命名表名。&lt;/p&gt;
&lt;p&gt;假设应用 foobar 有个 model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;想要将 model Foo 改名为 Bar。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;改好 models.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 south 命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# python manage.py schemamigration yourapp rename_model_foo_to_bar --empty&lt;/span&gt;
&lt;span class="c1"&gt;# 本例是&lt;/span&gt;
python manage.py schemamigration foobar rename_model_foo_to_bar --empty
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更改生成的 000x_xxx.py 文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SchemaMigration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 更改表名&lt;/span&gt;
        &lt;span class="c1"&gt;# db.rename_table(&amp;#39;yourapp_foo&amp;#39;, &amp;#39;yourapp_bar&amp;#39;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foobar_foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foobar_bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;backwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 撤销更改&lt;/span&gt;
        &lt;span class="c1"&gt;# db.rename_table(&amp;#39;yourapp_bar&amp;#39;, &amp;#39;yourapp_foo&amp;#39;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foobar_bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foobar_foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2862979/easiest-way-to-rename-a-model-using-django-south?rq=1"&gt;Easiest way to rename a model using Django/South? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-05:2013/06/django-south-rename-model-or-table.html</guid><category>django</category><category>python</category><category>south</category></item><item><title>[django]解决发送密码重置邮件的发件人是 "webmaster@localhost" 的问题</title><link>https://mozillazg.com/2013/06/django-fix-reset-password-use-webmaster@localhost-send-mail.html</link><description>&lt;p&gt;默认情况下，django 将通过 webmaster@localhost 发送密码重置邮件。&lt;/p&gt;
&lt;p&gt;这明显不是我们想要的，更改 settings.py 文件即可修复这个问题。&lt;/p&gt;
&lt;p&gt;增加一个配置项 DEFAULT_FROM_EMAIL：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DEFAULT_FROM_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo@bar.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时的发件人将会是：foo@bar.com&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://markmail.org/thread/yiomiws5gvyxvfia#query:+page:1+mid:sb6fpukeijedzxzg+state:results"&gt;Re: [Django] #13847: PasswordResetForm sends emails using "webmaster@localhost" - Django - com.googlegroups.django-updates - MarkMail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 04 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-04:2013/06/django-fix-reset-password-use-webmaster@localhost-send-mail.html</guid><category>django</category><category>python</category><category>send_mail</category></item><item><title>[django]让 BigIntegerField 字段自增长</title><link>https://mozillazg.com/2013/06/django-let-bigintegerfield-auto-increment.html</link><description>&lt;p&gt;默认的 id 字段是 IntegerField 属性，长度是 11。&lt;/p&gt;
&lt;p&gt;现在要将它改为 BigIntegerField 属性，因为它的长度是更长。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigIntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改后的数据库字段信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; desc foo_bar&lt;span class="p"&gt;;&lt;/span&gt;
+--------------+------------+------+-----+---------+-------+
&lt;span class="p"&gt;|&lt;/span&gt; Field        &lt;span class="p"&gt;|&lt;/span&gt; Type       &lt;span class="p"&gt;|&lt;/span&gt; Null &lt;span class="p"&gt;|&lt;/span&gt; Key &lt;span class="p"&gt;|&lt;/span&gt; Default &lt;span class="p"&gt;|&lt;/span&gt; Extra &lt;span class="p"&gt;|&lt;/span&gt;
+--------------+------------+------+-----+---------+-------+
&lt;span class="p"&gt;|&lt;/span&gt; id           &lt;span class="p"&gt;|&lt;/span&gt; bigint&lt;span class="o"&gt;(&lt;/span&gt;20&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; NO   &lt;span class="p"&gt;|&lt;/span&gt; PRI &lt;span class="p"&gt;|&lt;/span&gt; NULL    &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;问题出来了，更改后的 id 没有自增长的功能。&lt;/p&gt;
&lt;p&gt;解决办法就是自定义一个字段属性：&lt;/p&gt;
&lt;p&gt;代码结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;foo   &lt;span class="c1"&gt;# app&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;-fields.py
&lt;span class="p"&gt;|&lt;/span&gt;-models.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# fields.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;south.modelsinspector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_introspection_rules&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BigIntegerAutoField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigIntegerField&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mysql&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__module__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bigint AUTO_INCREMENT&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BigIntegerAutoField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;add_introspection_rules&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^foo\.fields\.BigIntegerAutoField&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;


&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BigIntegerAutoField&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigIntegerAutoField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&amp;gt; desc foo_bar&lt;span class="p"&gt;;&lt;/span&gt;
+--------------+------------+------+-----+---------+----------------+
&lt;span class="p"&gt;|&lt;/span&gt; Field        &lt;span class="p"&gt;|&lt;/span&gt; Type       &lt;span class="p"&gt;|&lt;/span&gt; Null &lt;span class="p"&gt;|&lt;/span&gt; Key &lt;span class="p"&gt;|&lt;/span&gt; Default &lt;span class="p"&gt;|&lt;/span&gt; Extra          &lt;span class="p"&gt;|&lt;/span&gt;
+--------------+------------+------+-----+---------+----------------+
&lt;span class="p"&gt;|&lt;/span&gt; id           &lt;span class="p"&gt;|&lt;/span&gt; bigint&lt;span class="o"&gt;(&lt;/span&gt;20&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; NO   &lt;span class="p"&gt;|&lt;/span&gt; PRI &lt;span class="p"&gt;|&lt;/span&gt; NULL    &lt;span class="p"&gt;|&lt;/span&gt; auto_increment &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2672975/django-biginteger-auto-increment-field-as-primary-key"&gt;python - Django BigInteger auto-increment field as primary key? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 03 Jun 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-06-03:2013/06/django-let-bigintegerfield-auto-increment.html</guid><category>django</category><category>python</category><category>BigIntegerField</category><category>auto-increment</category><category>mysql</category></item><item><title>[javascript]列出对象所有属性</title><link>https://mozillazg.com/2013/05/javascript-list-object-all-properties.html</link><description>&lt;p&gt;当我们想知道某个对象拥有哪些的属性时，可以用下面的方法（现代浏览器）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法对于我们使用第三方 javascript 插件，而该插件的文档不是很详细时有很大的帮助&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;trackFormatter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;properties:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="console debug object properties image" src="/static/images/2013-05-23_01.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object"&gt;json - How to list the properties of a javascript object - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 23 May 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-05-23:2013/05/javascript-list-object-all-properties.html</guid><category>javascript</category><category>web</category></item><item><title>[linux]screen 常用命令</title><link>https://mozillazg.com/2013/05/linux-screen-command.html</link><description>&lt;p&gt;通过 screen 命令可以让终端命令在我们断开远程服务器后依旧运行而不会中断。&lt;/p&gt;
&lt;h2&gt;安装 screen 命令&lt;/h2&gt;
&lt;p&gt;redhat/centos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install screen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ubuntu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install screen
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;常用的 screen 命令&lt;/h2&gt;
&lt;p&gt;新建一个名为 django 的 screen shell：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;screen -S django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新建一个名为 django 的后台 screen shell：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;screen -dS django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看所有的 screen shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen -ls
There are screens on:
    1429.django &lt;span class="o"&gt;(&lt;/span&gt;Detached&lt;span class="o"&gt;)&lt;/span&gt;
    23264.abc   &lt;span class="o"&gt;(&lt;/span&gt;Detached&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt; Sockets in /var/run/screen/S-abc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开后台状态为 Detached 且名称为 django 的 screen shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen -r django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将当前 screen shell 转到后台（Detached），按快捷键: &lt;code&gt;Ctrl + a + d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开后台状态为 Attached 且名称为 django 的 screen shell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen -r django
There is a screen on:
    1429.django &lt;span class="o"&gt;(&lt;/span&gt;Attached&lt;span class="o"&gt;)&lt;/span&gt;
There is no screen to be resumed matching django.
$ screen -x django
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 16 May 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-05-16:2013/05/linux-screen-command.html</guid><category>linux</category><category>screen</category></item><item><title>[linux]编译 aria2c 时，出现 C compiler cannot create executables 错误</title><link>https://mozillazg.com/2013/05/linux-compile-aria2c-error-C-compiler-cannot-create-executables.html</link><description>&lt;p&gt;编译安装 aria2c 时，出现了如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@dev aria2-1.17.1]# ./configure
checking for gcc... gcc
checking whether the C compiler works... no
configure: error: in `/root/temp/aria2-1.17.1&amp;#39;:
configure: error: C compiler cannot create executables
See `config.log&amp;#39; for more details
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法： 清空 LIBS 及 CFLAGS 变量的值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[root@dev aria2-1.17.1]# export LIBS=
[root@dev aria2-1.17.1]# 
[root@dev aria2-1.17.1]# export CFLAGS=
[root@dev aria2-1.17.1]# ./configure
checking for gcc... gcc
checking whether the C compiler works... yes
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 11 May 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-05-11:2013/05/linux-compile-aria2c-error-C-compiler-cannot-create-executables.html</guid><category>linux</category></item><item><title>[django]__unicode__: Bad Unicode data 问题</title><link>https://mozillazg.com/2013/05/django-__unicode__-bad-unicode-data.html</link><description>&lt;p&gt;问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Bad&lt;/span&gt; &lt;span class="n"&gt;Unicode&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;更改 model 的 &lt;code&gt;__unicode__&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Before&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_foo_display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# it&amp;#39;s bad&lt;/span&gt;

&lt;span class="c1"&gt;# To&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__unicode__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_foo_display&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# it&amp;#39;s Ok&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/coleifer/django-simple-ratings/issues/3"&gt;Bad Unicode data · Issue #3 · coleifer/django-simple-ratings · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 05 May 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-05-05:2013/05/django-__unicode__-bad-unicode-data.html</guid><category>django</category><category>python</category></item><item><title>[python][linux]CentOS 下安装 Pillow</title><link>https://mozillazg.com/2013/04/pythonlinuxcentos-xia-an-zhuang-pillow.html</link><description>&lt;p&gt;安装依赖：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install libjpeg libjpeg-devel freetype freetype-devel zlib zlib-devel littlecms littlecms-devel libwebp libwebp-devel libfreetype libfreetype-devel`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装 Pillow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -I pillow
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 20 Apr 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-04-20:2013/04/pythonlinuxcentos-xia-an-zhuang-pillow.html</guid><category>python</category><category>linux</category><category>centos</category><category>pillow</category><category>pil</category></item><item><title>[django]让后台新增用户的表单包含 email 字段</title><link>https://mozillazg.com/2013/04/django-admin-add-user-form-include-email-field.html</link><description>&lt;p&gt;默认情况下，后台新增用户的表单不包含 email 字段。
每次新增用户后都需求再次修改新增的用户来添加 email 地址。&lt;/p&gt;
&lt;p&gt;本文将实现在新增用户的同时将 email 地址也加上，一次完成用户添加，省去一个步骤。&lt;/p&gt;
&lt;p&gt;默认情况下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="before" src="/static/images/2013-4-19-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;本文将实现：&lt;/p&gt;
&lt;p&gt;&lt;img alt="after" src="/static/images/2013-4-19-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;在应用目录下修改/新建 admin.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserAdmin&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUserAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;add_fieldsets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;classes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wide&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;fields&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyUserAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6858028/extending-new-user-form-in-the-admin-django"&gt;Extending new user form, in the admin Django - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-04-19:2013/04/django-admin-add-user-form-include-email-field.html</guid><category>python</category><category>django</category><category>admin</category><category>UserAdmin</category></item><item><title>[django]list_display 中包含外键内的字段</title><link>https://mozillazg.com/2013/04/django-admin-list_display-include-foreignkey.html</link><description>&lt;p&gt;本文将实现 list_display 中包含外键内的字段，同样适用于自定义要显示的列。&lt;/p&gt;
&lt;p&gt;比如包含 User 中的 email 地址。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/static/images/2013-4-18-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;admin.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user_email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;role&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="c1"&gt;# 显示用户邮箱地址&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="n"&gt;user_email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;邮箱&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HelloAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4013585/django-include-data-from-foreignkey-in-admin-list-display-function"&gt;Django - Include data from foreignkey in admin list_display function - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-04-18:2013/04/django-admin-list_display-include-foreignkey.html</guid><category>django</category><category>python</category><category>list_display</category><category>admin</category></item><item><title>[django]自定义字段在后台显示的名称</title><link>https://mozillazg.com/2013/04/django-custom-field-display-name-on-admin-pages.html</link><description>&lt;p&gt;默认情况下后台显示的字段名称是依据 models.py 中的字段名来显示的。
下面要做的就是自定义字段在后台的显示名称（比如显示为中文）。&lt;/p&gt;
&lt;p&gt;只需在定义字段的时候定义参数 verbose_name 的值即可。&lt;/p&gt;
&lt;p&gt;对于普通字段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;软件名称&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于 OneToOneField, ForeignKey 及 ManyToManyField ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OneToOneField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;software&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SoftWare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;软件名称&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;作者&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样之后，后台就会会显示我们定义的名称。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/static/images/2013-04-13-001.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/models/#verbose-field-names"&gt;Models | Django documentation | Django&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-04-13:2013/04/django-custom-field-display-name-on-admin-pages.html</guid><category>python</category><category>django</category><category>verbose_name</category></item><item><title>[django]自定义 model 在后台显示的名称</title><link>https://mozillazg.com/2013/04/django-custom-model-display-name-on-admin-pages.html</link><description>&lt;p&gt;默认情况下后台显示的 model 名称是依据 models.py 中的 class 名称来显示的。
下面要做的就是自定义 model 在后台的显示名称（比如显示为中文）。&lt;/p&gt;
&lt;p&gt;只需在 model 类中定义 Meta 类并增加属性 verbose_name/verbose_name_plural 即可。&lt;/p&gt;
&lt;p&gt;verbose_name 定义的是单数名称， verbose_name_plural 定义的是复数名称。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;software&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;软件信息&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/static/images/2013-04-13-002.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/models/options/#verbose-name"&gt;Model Meta options | Django documentation | Django&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-04-13:2013/04/django-custom-model-display-name-on-admin-pages.html</guid><category>python</category><category>django</category><category>verbose_name</category><category>verbose_name_plural</category></item><item><title>[django]如何在 search_fields 中包含外键字段</title><link>https://mozillazg.com/2013/04/django-search_fields-include-foreign-key-field.html</link><description>&lt;p&gt;我们知道在 admin.py 中定义 search_fields 可以控制在后台管理界面中能够搜索的字段。&lt;/p&gt;
&lt;p&gt;但是，当 search_fields 包含外键字段时，此时进行搜索会报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeError at /admin/hello/foo/&lt;/p&gt;
&lt;p&gt;Related Field has invalid lookup: icontains&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决的办法是修改 search_fields 中的外键字段名称。&lt;/p&gt;
&lt;p&gt;将 search_fields 中的外键字段改为 &lt;code&gt;foreign_key__related_fieldname&lt;/code&gt; 这种形式就可以了。
这种用法适用于 ForeignKey 及 ManyToManyField 。&lt;/p&gt;
&lt;p&gt;models.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;admin.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;search_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello__name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  &lt;span class="c1"&gt;# 搜索 Hello 中的 name 字段&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields"&gt;The Django admin site | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-04-13:2013/04/django-search_fields-include-foreign-key-field.html</guid><category>python</category><category>django</category><category>search_fields</category><category>foreign-key</category></item><item><title>[django]合并多个查询结果集(queryset)并按字段排序</title><link>https://mozillazg.com/2013/03/django-merge-queryset-then-sort.html</link><description>&lt;h2&gt;需求&lt;/h2&gt;
&lt;p&gt;合并博文的喜爱及转发信息，并按时间排序。&lt;/p&gt;
&lt;p&gt;相关 models :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;

    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reblog_from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#...&lt;/span&gt;

    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;解决方案&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;attrgetter&lt;/span&gt;

&lt;span class="c1"&gt;#...&lt;/span&gt;

&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 获取博文&lt;/span&gt;
&lt;span class="n"&gt;likes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;likes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;like_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 获取喜爱信息&lt;/span&gt;
&lt;span class="c1"&gt;# likes = Like.objects.filter(post=post)&lt;/span&gt;
&lt;span class="n"&gt;reblogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reblog_from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 获取转发信息&lt;/span&gt;

&lt;span class="c1"&gt;# 合并喜爱及转发信息，并按时间逆序排序&lt;/span&gt;
&lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reblogs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;created_at&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;使用 itertools.chain 函数合并可迭代对象&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;使用 sorted 函数排序（按对象属性排序）&lt;/strong&gt;。
关于排序请参考博文：
&lt;a href="http://mozillazg.com/2013/03/python-sorting-how-to.html"&gt;[python]排序（Sorting Mini-HOW TO）&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2/library/itertools.html#itertools.chain"&gt;itertools — Functions creating iterators for efficient looping — Python v2.7.3 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mozillazg.com/2013/03/python-sorting-how-to.html"&gt;[python]排序（Sorting Mini-HOW TO）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 28 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-28:2013/03/django-merge-queryset-then-sort.html</guid><category>django</category><category>python</category><category>queryset</category><category>sort</category><category>merge</category></item><item><title>[python]在 zope2 中获取当前时间及格式化输出</title><link>https://mozillazg.com/2013/03/python-zope2-datetime.html</link><description>&lt;p&gt;可以使用 Zope2 内置的 &lt;code&gt;DateTime()&lt;/code&gt; 获取当前时间。&lt;/p&gt;
&lt;h2&gt;Script(Python)&lt;/h2&gt;
&lt;p&gt;新建 Script(Python) 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return DateTime()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2013/03/18 12:38:22.825950 GMT-4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;格式输出：&lt;/p&gt;
&lt;p&gt;return DateTime().strftime('%Y-%m-%d %H:%M:%S')
结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2013/03/18 12:38
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;DTML&lt;/h2&gt;
&lt;p&gt;新建 DTML 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;dtml-var expr=&amp;quot;DateTime()&amp;quot; fmt=&amp;quot;%Y/%m/%d %H:%M&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2013/03/18 12:40
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.faqs.org/docs/ZopeBook/AppendixB.html"&gt;ZopeBook Appendix B: API Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 18 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-18:2013/03/python-zope2-datetime.html</guid><category>python</category><category>zope2</category></item><item><title>[python]zope2 文件下载及导出为 csv 文件</title><link>https://mozillazg.com/2013/03/python-zope2-download-file-and-generator-csv-file.html</link><description>&lt;p&gt;本文将简单实现 zope2 导出数据库数据为 csv 文件并提供下载链接。&lt;/p&gt;
&lt;p&gt;先建一个 &lt;strong&gt;Z SQL Method&lt;/strong&gt;，ID 为 &lt;strong&gt;query_sql&lt;/strong&gt;，内容就是查询所有结果的 sql 语句 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select * from user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再建一个 &lt;strong&gt;Script (Python)&lt;/strong&gt; ID 为 &lt;strong&gt;hello_py&lt;/strong&gt;, 内容是调用上面定义的 Z SQL Method，并将结果转换为&lt;strong&gt;逗号分隔&lt;/strong&gt;的 cvs 格式，下面将详细说明：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;REQUEST&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;

&lt;span class="n"&gt;query_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_sql&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 获取数据库查询结果&lt;/span&gt;
&lt;span class="n"&gt;dics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query_result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dictionaries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# 将查询结果转换为一个字典&lt;/span&gt;

&lt;span class="c1"&gt;# 输出查询结果包含的字段名称，也就是 csv 文件的第一行&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dics&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#print x.keys()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 输出每条查询结果中各字段的值&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# 设置返回的 response 对象的 Header&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/ms-excel;charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 文件 MIME 类型及编码&lt;/span&gt;
&lt;span class="c1"&gt;# 声明是个附件，不要打开而是下载，同时设置文件名&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment; filename=txt.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;printed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后建一个 DTML 文件，ID 为 &lt;strong&gt;txt.csv&lt;/strong&gt; 用来调用上面的脚本，这个文件其实就是要下载的附件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;dtml-var hello_py&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后就是再建一个 DTML 文件，ID 为 download 。主要是提供一个指向 txt.csv DTML 文件的链接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;txt.csv&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download txt.csv&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--效果：--&gt;

&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gqliu.blog.163.com/blog/static/22584907200831065054649/"&gt;用Zope上传下载文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 18 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-18:2013/03/python-zope2-download-file-and-generator-csv-file.html</guid><category>python</category><category>zope2</category><category>csv</category></item><item><title>[python]解决 zope2 后台编辑器中文编码问题</title><link>https://mozillazg.com/2013/03/python-zope2-zmi-chinese-problem.html</link><description>&lt;p&gt;默认情况下 zope2 的后台编辑器不能正常显示中文：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#24050;&amp;amp;#25552;&amp;amp;#20132;&amp;amp;#21464;&amp;amp;#26356;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 manage 后台稍作修改后就可以正常保存中文了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;已提交变更&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在zope的根目录的propertyies页下面，增加如下特性：management_page_set: utf-8。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="alt" src="/static/images/2013-3-zope2-chinese-01.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://comments.gmane.org/gmane.comp.web.zope.chinese/541"&gt;如何改变Zope默认的编码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://315ok.org/blogs/zmizhongwenluanmawentijiejue"&gt;ZMI 中文 乱码问题解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-15:2013/03/python-zope2-zmi-chinese-problem.html</guid><category>python</category><category>zope2</category></item><item><title>[python]修复 ZMySQLDA-2.0.8 出现的“ImportError: No module named ImageFile”错误</title><link>https://mozillazg.com/2013/03/python-fix-zmysqlda-2.0.8-no-module-named-imagefile.html</link><description>&lt;p&gt;修改 ZMySQLDA 文件夹内的 DA.py、DABase.py 文件，将&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ImageFile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImageFile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;App.ImageFile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImageFile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[zope@localhost ZMySQLDA]$&lt;/span&gt; cat DA.py &lt;span class="p"&gt;|&lt;/span&gt; grep App.Image -n
&lt;span class="go"&gt;96:from App.ImageFile import ImageFile&lt;/span&gt;

&lt;span class="gp"&gt;[zope@localhost ZMySQLDA]$&lt;/span&gt; cat DABase.py &lt;span class="p"&gt;|&lt;/span&gt; grep App.Image -n
&lt;span class="go"&gt;92:from App.ImageFile import ImageFile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rescue.unchor.com/4"&gt;zope の version up で Products "COREBlog" "EPos" でエラー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mxm-mad-science.blogspot.com/2008/01/installing-zmysqlda-in-zope-using.html"&gt;Installing ZMySQLDA in Zope using buildout on Ubuntu and perhaps Debian in general&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-08:2013/03/python-fix-zmysqlda-2.0.8-no-module-named-imagefile.html</guid><category>python</category><category>zope</category><category>mysql</category></item><item><title>[firefox]禁用在线查看 PDF 文件的功能</title><link>https://mozillazg.com/2013/03/firefox-disable-pdf-js.html</link><description>&lt;p&gt;最近更新了 firefox 后发现没法下载 PDF 文件了，因为默认情况下 firefox 会直接在浏览器中打开 PDF 文件。问题是，有的 PDF 文件很大啊，你也给我直接打开，我的网速受不了啊。有时我就是想保存 PDF 文件，不想直接打开。&lt;/p&gt;
&lt;p&gt;下面说一下如何禁用这个功能，恢复保存 PDF 文件的功能。&lt;/p&gt;
&lt;p&gt;打开 &lt;a href="about:config"&gt;about:config&lt;/a&gt; 输入 &lt;code&gt;pdfjs.disabled&lt;/code&gt; 双击它，将它的值改为 true：&lt;/p&gt;
&lt;p&gt;&lt;img alt="set pdfjs.disabled to true" src="/static/images/2013-03-06-firefox-pdf-js.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-06:2013/03/firefox-disable-pdf-js.html</guid><category>firefox</category><category>pdf.js</category></item><item><title>pelican 使用笔记</title><link>https://mozillazg.com/2013/03/pelican-notes.html</link><description>&lt;p&gt;记录一些使用 Pelican 写博客的经验。&lt;/p&gt;
&lt;h2&gt;Markdown&lt;/h2&gt;
&lt;h3&gt;多级列表&lt;/h3&gt;
&lt;p&gt;官方的 Markdown 语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* list
  * sublist
  * sublist
* list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelican 使用的是 python-markdown 来解析 markdown 文件，
而 python-markdown 的关于多级列表的语法跟官方的有点不一样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* list
    * sublist
    * sublist
* list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;子列表与父列表之间的对齐方式是：至少空出4个空格或1一个 Tab 键。
官方的语法兼容 python-markdown 的语法，所以不要担心兼容性。&lt;/p&gt;
&lt;h3&gt;语法高亮&lt;/h3&gt;
&lt;p&gt;python-markdown 使用 pygments 来实现语法高亮的功能，并且支持指定编程语言。&lt;/p&gt;
&lt;p&gt;比如，指定代码用的是 Python 编程语言：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:::python
print &amp;#39;hello, world&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello, world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我用的比较多的语言标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:::text&lt;/li&gt;
&lt;li&gt;:::python&lt;/li&gt;
&lt;li&gt;:::django&lt;/li&gt;
&lt;li&gt;:::html+django&lt;/li&gt;
&lt;li&gt;:::bash&lt;/li&gt;
&lt;li&gt;:::console&lt;/li&gt;
&lt;li&gt;:::nginx&lt;/li&gt;
&lt;li&gt;:::apacheconf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的语言标记，可以通过查看网站 &lt;a href="http://pygments.org/demo/"&gt;Pygments — Python syntax highlighter&lt;/a&gt; 的源代码操作相关的语言标记（查看 id 为 flt_lang 的 select 的 option 值）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：该语法不兼容官方 markdown 语法。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/"&gt;Pelican — Pelican documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite Extension — Python Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 04 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-04:2013/03/pelican-notes.html</guid><category>pelican</category><category>markdown</category><category>pygments</category><category>python-markdown</category></item><item><title>[python]排序（Sorting Mini-HOW TO）</title><link>https://mozillazg.com/2013/03/python-sorting-how-to.html</link><description>&lt;p&gt;本文整理自 &lt;a href="http://wiki.python.org/moin/HowTo/Sorting/"&gt;HowTo/Sorting - Python Wiki&lt;/a&gt;，如有不妥之处，请翻阅英文原文。&lt;/p&gt;
&lt;p&gt;Python 内置的 &lt;code&gt;sort()&lt;/code&gt; 方法可以实现对列表的原地排序功能。内置的 &lt;code&gt;sorted()&lt;/code&gt; 函数则不会修改原列表，而是生成一个经过排序的新列表。&lt;/p&gt;
&lt;p&gt;下面总结一些常用的排序方法。&lt;/p&gt;
&lt;h2&gt;基本排序&lt;/h2&gt;
&lt;p&gt;最简单的方法就是使用 &lt;code&gt;sorted()&lt;/code&gt; 函数，它将返回一个经过排序的新列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也可以使用 &lt;code&gt;list.sort()&lt;/code&gt; 方法， 但是它会修改原列表，所以一般使用 &lt;code&gt;sorted()&lt;/code&gt;。如果你不再需要原始列表的话，用用 &lt;code&gt;list.sort()&lt;/code&gt; 也无妨。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另一个不同点是，&lt;code&gt;list.sort()&lt;/code&gt; 方法只能作用于列表，而 &lt;code&gt;sorted()&lt;/code&gt; 函数则接受任何可迭代对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Key 函数&lt;/h2&gt;
&lt;p&gt;从 Python 2.4 开始， &lt;code&gt;list.sort()&lt;/code&gt; 及 &lt;code&gt;sorted()&lt;/code&gt; 增加了一个 &lt;code&gt;key&lt;/code&gt; 参数，该参数接受一个函数作为它的值，可以通过那个函数定义排序应该遵循的规则。&lt;/p&gt;
&lt;p&gt;比如，对字符串做不区分大小写的排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is a test string from Andrew&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Andrew&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 对照&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is a test string from Andrew&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Andrew&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;key&lt;/code&gt; 参数的值必须是个函数，该函数有一个参数（列表元素）并且返回一个用来排序的 key（按这个 key 进行排序）。&lt;/p&gt;
&lt;p&gt;一般通过使用对象的某个索引作为 key 的值来对复杂对象进行排序。比如对一个多维数组进行排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;student_tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 按列表元素（元组）的第3个值排序&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_tuples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;span class="c1"&gt;# sort by age&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个技术也可以用来按对象的属性值进行排序。比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;student_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 按 age 属性的值排序&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# sort by age&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Operator 模块函数&lt;/h2&gt;
&lt;p&gt;由于 key 参数比较常用，所以 Python 内置了一些用来简单、快速生成相关函数的方法。
&lt;a href="http://docs.python.org/library/operator.html#module-operator"&gt;operator 模块&lt;/a&gt; 提供了 &lt;a href="http://docs.python.org/2/library/operator.html#operator.itemgetter"&gt;itemgetter&lt;/a&gt;，&lt;a href="http://docs.python.org/2/library/operator.html#operator.attrgetter"&gt;attrgetter&lt;/a&gt;，
以及从 Python 2.6 开始提供的 &lt;a href="http://docs.python.org/2/library/operator.html#operator.methodcaller"&gt;methodcaller&lt;/a&gt; 函数。&lt;/p&gt;
&lt;p&gt;使用这些函数，上面的例子将变得更简单、更快速：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrgetter&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;student_tuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_tuples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 按元素索引排序&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;student_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# 按对象属性排序&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过 operator 模块提供的函数还可以实现多重排序的功能。比如，先按 grade 排序再按 age 排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_tuples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://docs.python.org/2/library/operator.html#operator.methodcaller"&gt;methodcaller&lt;/a&gt;
函数可以让元素调用一个方法，然后按方法的返回值进行排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alfalfa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;methodcaller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# word.count(&amp;#39;a&amp;#39;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alfalfa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 等价于&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alfalfa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;升序和降序&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;list.sort()&lt;/code&gt; 和 &lt;code&gt;sorted()&lt;/code&gt; 都接受一个布尔类型的 &lt;code&gt;reverse&lt;/code&gt; 参数。这个参数用来标记是否使用降序排序。比如获取按 age 降序排序的 student 数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_tuples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;平衡（Stability）排序和复杂排序&lt;/h2&gt;
&lt;p&gt;从 Python 2.2 开始，排序将保证能够 &lt;a href="http://en.wikipedia.org/wiki/Sorting_algorithm#Stability"&gt;stable&lt;/a&gt;。
这意味着当多个记录拥有相同的 key 时，它们的原始顺序将被保留。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;itemgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里有两条记录都包含 'blue' 并且原列表中 ('blue', 1) 排在 ('blue', 2) 之前，排序后这个顺序依旧被保留。&lt;/p&gt;
&lt;p&gt;这个非常有用的特性可以用来实现包含多重排序（一会升序，一会降序）的复杂排序。比如，目标是实现 student 数据先以 grade 降序排序再以 age 升序排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;student_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;     &lt;span class="c1"&gt;# sort on secondary key&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# now sort on primary key, descending&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 使用的 &lt;a href="http://en.wikipedia.org/wiki/Timsort"&gt;Timsort&lt;/a&gt; 排序算法能够高效的实现多重排序。&lt;/p&gt;
&lt;h2&gt;以前的实现方式(Decorate-Sort-Undecorate)&lt;/h2&gt;
&lt;p&gt;Python 2.4 之前的惯用方法之一是使用 Decorate-Sort-Undecorate，比如将 student 数据按 grade 排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;decorated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_objects&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;decorated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;decorated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;               &lt;span class="c1"&gt;# undecorate&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方法的另一个名字是 &lt;a href="http://en.wikipedia.org/wiki/Schwartzian_transform"&gt;Schwartzian transform&lt;/a&gt;，有兴趣的可以去了解一下。&lt;/p&gt;
&lt;h2&gt;以前的实现方式(使用 cmp 参数)&lt;/h2&gt;
&lt;p&gt;Python 2.4 之前惯用的另一种方法是使用 cmp 参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;numeric_compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;numeric_compare&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;倒序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reverse_numeric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3 不再支持 cmp 参数，那么如果转换之前的程序呢？可以使用下面的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cmp_to_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Convert a cmp= function into a key= function&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;K&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__gt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__le__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__ge__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__ne__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cmp_to_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse_numeric&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Python 2.7 中，&lt;code&gt;cmp_to_key()&lt;/code&gt; 工具已经被内置到 &lt;a href="http://docs.python.org/2/library/functools.html#functools.cmp_to_key"&gt;functools&lt;/a&gt; 模块中。&lt;/p&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于本地化排序，可以使用 &lt;a href="http://docs.python.org/2/library/locale.html#locale.strxfrm"&gt;locale.strxfrm()&lt;/a&gt; 作为 key 函数或使用 &lt;a href="http://docs.python.org/2/library/locale.html#locale.strcoll"&gt;locale.strcoll()&lt;/a&gt; 作为比较函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reverse&lt;/code&gt; 参数依然能够保存排序的稳定性（比如，拥有相同记录的 keys 依旧保留了原来的顺序），有趣的是，就算是不使用该参数也可以通过使用两次 &lt;code&gt;reversed&lt;/code&gt; 函数来实现这种效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果想给类排序的话，只需添加相关的比较方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__eq__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ne__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__lt__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__le__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__gt__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__ge__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student_objects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一般情况下，只需定义上面6个比较操作就可以了。&lt;a href="http://docs.python.org/2/library/functools.html#functools.total_ordering"&gt;functools.total_ordering&lt;/a&gt; 类装饰器可以很方便就实现这个需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;key 函数也可以不访问要排序对象的相关数据，访问外部资源也是可以的。比如，学生成绩存储在一个字典中，这个字典可以用来对学生名字进行排序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;newgrades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;newgrades&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;!--## 参考--&gt;

&lt;!--* [TimSort 中的核心过程 - YD Blog - ITeye技术网站](http://yangdong.iteye.com/blog/1170214)--&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-03-03:2013/03/python-sorting-how-to.html</guid><category>python</category><category>sorting</category><category>sort</category><category>sorted</category></item><item><title>更改 phpMyAdmin 默认访问端口(apache2)</title><link>https://mozillazg.com/2013/02/change-phpmyadmin-default-visit-port.html</link><description>&lt;p&gt;将访问 phpMyAdmin 的端口从默认的 80 改为 8081 。&lt;/p&gt;
&lt;p&gt;本文的 phpmyadmin 目录：&lt;code&gt;/var/www/phpmyadmin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编辑 apache 配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vi /etc/apache2/sites-available/phpmyadmin&lt;/span&gt;

&amp;lt;VirtualHost *:8081&amp;gt;
    ServerName 127.0.0.1
    DocumentRoot /var/www/phpmyadmin
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置 apache 监听 8081 端口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# vi /etc/apache2/ports.conf&lt;/span&gt;

&lt;span class="c1"&gt;# 添加&lt;/span&gt;
NameVirtualHost *:8081
Listen 8081
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启 apache 服务：&lt;code&gt;service apache2 restart&lt;/code&gt;，
现在可以通过 http://ip:8081/phpmyadmin/ 访问 phpMyAdmin 了。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ubuntuforums.org/showthread.php?t=1329607"&gt;PHPMyAdmin Port Change - Ubuntu Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 27 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-27:2013/02/change-phpmyadmin-default-visit-port.html</guid><category>phpmyadmin</category><category>mysql</category><category>ubuntu</category></item><item><title>[django]添加额外的 form 错误信息</title><link>https://mozillazg.com/2013/02/django-add-extra-error-messages.html</link><description>&lt;p&gt;通过两种方法给 Django 表单添加额外的错误信息。&lt;/p&gt;
&lt;p&gt;第一种方法，使用 form 自定义校验（更详细的请查看 &lt;a href="https://docs.djangoproject.com/en/dev/ref/forms/validation/"&gt;django 官方文档&lt;/a&gt;）：&lt;/p&gt;
&lt;p&gt;定义 &lt;code&gt;clean&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RegisterForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cleaned_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RegisterForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;re_username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;r&amp;#39;^[a-zA-Z\d][-a-zA-Z\d]*$&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This email address already exists!&amp;#39;&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_class&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re_username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Username may only contain alphanumeric characters or&amp;#39;&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;dashes and cannot begin with a dash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_class&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# ...&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cleaned_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;定义 &lt;code&gt;clean_&lt;/code&gt; 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SendForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_recipient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recipient&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This user doesn&amp;#39;t exists!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message/send.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SendForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c1"&gt;# ....&lt;/span&gt;
            &lt;span class="n"&gt;recipient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recipient&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="n"&gt;recipient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SendForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;context_instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种方法，更新 form.errors 字典：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.forms.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ErrorList&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;message/send.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SendForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="c1"&gt;# ....&lt;/span&gt;
            &lt;span class="n"&gt;recipient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recipient&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;recipient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;
                &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This user doesn&amp;#39;t exists!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recipient&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ErrorList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;extra_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# ...&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse_lazy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;inbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SendForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;context_instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/forms/validation/"&gt;Form and field validation | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/blob/master/django/forms/forms.py"&gt;django/django/forms/forms.py at master · django/django · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/blob/master/django/forms/util.py"&gt;django/django/forms/util.py at master · django/django · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 27 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-27:2013/02/django-add-extra-error-messages.html</guid><category>django</category><category>form</category><category>python</category></item><item><title>[django]修复 bad character range 异常</title><link>https://mozillazg.com/2013/02/django-bad-character-range.html</link><description>&lt;p&gt;出现 bad character range 异常， 是因为程序某个地方的正则表达式写错了，
不是一个有效的正则表达式。&lt;/p&gt;
&lt;p&gt;比如正则 &lt;code&gt;[_-\d]&lt;/code&gt; 就是一个无效的正则，会报 &lt;code&gt;bad character range&lt;/code&gt; 异常。
将正则修改为 &lt;code&gt;[-_\d]&lt;/code&gt; 使之成为一个有效的正则，就可以修复该异常。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1526137/bad-character-range-exception"&gt;django - "bad character range" exception? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 26 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-26:2013/02/django-bad-character-range.html</guid><category>python</category><category>django</category></item><item><title>[django]在模板中对变量作减法操作</title><link>https://mozillazg.com/2013/02/django-variable-subtraction-in-django-templates.html</link><description>&lt;p&gt;我们知道可以使用内置过滤器 &lt;code&gt;add&lt;/code&gt; 对变量做加法操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;   # 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实，&lt;code&gt;add&lt;/code&gt; 也可以做减法操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;-1&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;  # 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9948095/variable-subtraction-in-django-templates"&gt;Variable subtraction in django templates - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-25:2013/02/django-variable-subtraction-in-django-templates.html</guid><category>django</category><category>python</category></item><item><title>[英语]I am about to do something</title><link>https://mozillazg.com/2013/02/english-i-am-about-to-do.html</link><description>&lt;p&gt;I am about to do something&lt;/p&gt;
&lt;p&gt;我正好要做某事，我准备做某事。&lt;/p&gt;
&lt;p&gt;I was about to leave.   &lt;br /&gt;
我正好要离开。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am about to do this&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://funofenglish.blogspot.com/2006/05/meeting.html"&gt;英語趣談 Fun of English: I was about to leave.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-25:2013/02/english-i-am-about-to-do.html</guid><category>英语</category></item><item><title>[database]Windows 下安装使用 MongoDB（hello world）</title><link>https://mozillazg.com/2013/02/hello-mongodb-on-windows.html</link><description>&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;从 &lt;a href="http://www.mongodb.org/downloads"&gt;http://www.mongodb.org/downloads&lt;/a&gt; 下载 mongodb 压缩包，
解压到某个目录下，假设最后的目录路径为：c:\mongodb\，将 &lt;code&gt;;c:\mongodb\bin&lt;/code&gt; 追加到环境变量 path 中。&lt;/p&gt;
&lt;p&gt;新建一个目录用来存放数据库文件，比如该目录为：c:\mongodb\data 。&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;启动服务器&lt;/h3&gt;
&lt;p&gt;命令行下执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;mongod --dbpath c:\mongodb\data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;hello world&lt;/h3&gt;
&lt;p&gt;命令行下执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;mongo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进入数据库终端（默认是连接到 test 数据库）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; var &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; x
&lt;span class="go"&gt;hello world&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.mongodb.org/manual/"&gt;The MongoDB Manual — MongoDB Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/cn/opensource/os-django-mongo/"&gt;结合使用 MongoDB 和 Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-25:2013/02/hello-mongodb-on-windows.html</guid><category>MongoDB，数据库</category></item><item><title>[django]复制/克隆一条查询结果</title><link>https://mozillazg.com/2013/02/django-copy-or-clone-a-query-result-and-insert-it-into-database.html</link><description>&lt;p&gt;复制/克隆一条查询结果，并将它插入到数据库中：&lt;/p&gt;
&lt;p&gt;将 pk 值设为 None 即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tagline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Blogging is easy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# post.pk == 1&lt;/span&gt;

&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# post.pk == 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果该 model 继承于另一个 model 的话，必须将 &lt;code&gt;pk&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 的值都设为 None:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ThemeBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;django_blog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ThemeBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Django&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tagline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Django is easy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;django_blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# django_blog.pk == 3&lt;/span&gt;


&lt;span class="n"&gt;django_blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;django_blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;django_blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# django_blog.pk == 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意都是：这种方法不会复制相关对象。如果想复制相关（类似多对对的）对象的话，需要先将相关对象取出来然后在保存到新的对象中。例如，&lt;code&gt;Entry&lt;/code&gt; 与 &lt;code&gt;Author&lt;/code&gt; 是多对多关系：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# some previous entry&lt;/span&gt;
&lt;span class="n"&gt;old_authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old_authors&lt;/span&gt; &lt;span class="c1"&gt;# saves new many2many relations&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4733609/how-do-i-clone-a-django-model-instance-object-and-save-it-to-the-database"&gt;python - How do I clone a Django model instance object and save it to the database? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#copying-model-instances"&gt;Making queries | Django documentation | Django &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 24 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-24:2013/02/django-copy-or-clone-a-query-result-and-insert-it-into-database.html</guid><category>python</category><category>django</category></item><item><title>[django]编写作用于视图（view）的装饰器（Decorator）</title><link>https://mozillazg.com/2013/02/django-custom-decorators-optional-keyword-arguments-for-views.html</link><description>&lt;p&gt;本文假设读者已经知道如何编写基本的装饰器代码，否则请自行 google：“python 装饰器”and/or “python decorator”。&lt;/p&gt;
&lt;h2&gt;不带参数的装饰器&lt;/h2&gt;
&lt;!--分两种情况：--&gt;

&lt;!--* 视图函数只有一个 request 参数--&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_does_not_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;returned_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returned_wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@object_does_not_exist&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;带参数的装饰器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一种写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_does_not_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;returned_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returned_wrapper&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@object_does_not_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# 记得加个闭合括号，否则会出现类似 takes exactly 1 argument (0 given) 的错误&lt;/span&gt;
&lt;span class="nd"&gt;@object_does_not_exist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_does_not_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;returned_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returned_wrapper&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;

    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@object_does_not_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@object_does_not_exist&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二种方法可以解决 &lt;code&gt;got an unexpected keyword argument&lt;/code&gt; 错误。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://typeandflow.blogspot.com/2011/06/python-decorator-with-optional-keyword.html"&gt;Type and Flow: Python Decorator with Optional Keyword Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/blob/master/django/contrib/auth/decorators.py"&gt;https://github.com/django/django/blob/master/django/contrib/auth/decorators.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/blob/master/django/utils/http.py"&gt;https://github.com/django/django/blob/master/django/utils/http.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://numericalrecipes.wordpress.com/2009/05/25/signature-preserving-function-decorators/"&gt;Signature Preserving Function Decorators | Numerical Recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://helpful.knobs-dials.com/index.php/Python_decorator_notes#To_the_decorated_function"&gt;Python decorator notes - Helpful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 23 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-23:2013/02/django-custom-decorators-optional-keyword-arguments-for-views.html</guid><category>python</category><category>django</category><category>decorator</category><category>装饰器</category></item><item><title>[linux]解决 sendmail 错误： FEATURE() should be before MAILER()</title><link>https://mozillazg.com/2013/02/linux-fix-sendmail-configuration-error-feature-should-be-before-mailer.html</link><description>&lt;p&gt;错误详情：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; m4 /etc/mail/sendmail.mc &amp;gt; /etc/mail/sendmail.cf
&lt;span class="go"&gt;*** ERROR: FEATURE() should be before MAILER()&lt;/span&gt;
&lt;span class="go"&gt;*** MAILER(`local&amp;#39;) must appear after FEATURE(`always_add_domain&amp;#39;)*** ERROR: FEATURE() should be before MAILER()&lt;/span&gt;
&lt;span class="go"&gt;*** MAILER(`local&amp;#39;) must appear after FEATURE(`allmasquerade&amp;#39;)*** ERROR: FEATURE() should be before MAILER()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;按照提示，编辑 /etc/mail/sendmail.mc 文件，将 FEATURE() 放到 MAILER() 之前：&lt;/p&gt;
&lt;p&gt;更改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dnl #
dnl # Default Mailer setup
MAILER_DEFINITIONS
MAILER(`local&amp;#39;)dnl
MAILER(`smtp&amp;#39;)dnl

dnl # Masquerading options
FEATURE(`always_add_domain&amp;#39;)dnl
MASQUERADE_AS(`tumblr.3sd.me&amp;#39;)dnl
FEATURE(`allmasquerade&amp;#39;)dnl
FEATURE(`masquerade_envelope&amp;#39;)dnl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dnl #

dnl # Masquerading options
FEATURE(`always_add_domain&amp;#39;)dnl
MASQUERADE_AS(`tumblr.3sd.me&amp;#39;)dnl
FEATURE(`allmasquerade&amp;#39;)dnl
FEATURE(`masquerade_envelope&amp;#39;)dnl

dnl # Default Mailer setup
MAILER_DEFINITIONS
MAILER(`local&amp;#39;)dnl
MAILER(`smtp&amp;#39;)dnl
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 22 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-22:2013/02/linux-fix-sendmail-configuration-error-feature-should-be-before-mailer.html</guid><category>linux</category><category>ubuntu</category><category>sendmail</category></item><item><title>[django]线上部署后，访问 admin 时出现“DoesNotExist at /admin/ Site matching query does not exist.”错误</title><link>https://mozillazg.com/2013/02/django-online-server-admin-doesnotexist-at-admin.html</link><description>&lt;p&gt;将 django 项目部署到服务器后，访问 admin 时出现如下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DoesNotExist at /admin/
Site matching query does not exist.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上网搜索后，参考 &lt;a href="http://stackoverflow.com/questions/9736975/django-admin-doesnotexist-at-admin"&gt;http://stackoverflow.com/questions/9736975/django-admin-doesnotexist-at-admin&lt;/a&gt; 修复了该问题，下面记录一下解决过程。&lt;/p&gt;
&lt;p&gt;两种解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一种办法是：编辑 settings.py 文件，从 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 配置项中移除 &lt;code&gt;'django.contrib.sites',&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种办法：通过 &lt;code&gt;python manage.py shell&lt;/code&gt; 为 Site model 添加一条记录（将网站的域名添加进去）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python manage.py shell

&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; from django.contrib.sites.models import Site
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; Site.objects.create&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tumblr.3sd.me&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tumblr.3sd.me&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;Site: tumblr.3sd.me&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我使用第二种办法解决了我的问题&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9736975/django-admin-doesnotexist-at-admin"&gt;django admin DoesNotExist at /admin/ - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-19:2013/02/django-online-server-admin-doesnotexist-at-admin.html</guid><category>django</category><category>python</category></item><item><title>[django] 创建后台超级用户时出现 TypeError: decode() argument 1 must be string, not None 错误</title><link>https://mozillazg.com/2013/02/django-typeerror-decod-argument-1-must-be-string-not-none.html</link><description>&lt;p&gt;错误信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;You just installed Django&amp;#39;s auth system, which means you don&amp;#39;t have any superusers defined.&lt;/span&gt;
&lt;span class="go"&gt;Would you like to create one now? (yes/no): yes&lt;/span&gt;
&lt;span class="go"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;manage.py&amp;quot;, line 10, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    execute_from_command_line(sys.argv)&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;/usr/local/lib/python2.7/dist-packages/django/core/management/__init__.py&amp;quot;, line 443, in execute_from_command_line&lt;/span&gt;

&lt;span class="go"&gt;  ...&lt;/span&gt;

&lt;span class="go"&gt;  File &amp;quot;/usr/local/lib/python2.7/dist-packages/django/contrib/auth/management/commands/createsuperuser.py&amp;quot;, line 70, in handle&lt;/span&gt;
&lt;span class="go"&gt;    default_username = get_default_username()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;/usr/local/lib/python2.7/dist-packages/django/contrib/auth/management/__init__.py&amp;quot;, line 105, in get_default_username&lt;/span&gt;
&lt;span class="go"&gt;    default_username = get_system_username()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;/usr/local/lib/python2.7/dist-packages/django/contrib/auth/management/__init__.py&amp;quot;, line 85, in get_system_username&lt;/span&gt;
&lt;span class="go"&gt;    return getpass.getuser().decode(locale.getdefaultlocale()[1])&lt;/span&gt;
&lt;span class="go"&gt;TypeError: decode() argument 1 must be string, not None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行 &lt;code&gt;python manage.py createsuperuser&lt;/code&gt; 也会报上面的错误。&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;设置正确的系统编码即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8
&lt;span class="gp"&gt;$&lt;/span&gt; python manage.py createsuperuser
&lt;span class="go"&gt;Username (leave blank to use &amp;#39;hello&amp;#39;): admin&lt;/span&gt;
&lt;span class="go"&gt;E-mail address:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/wenjiashe521/archive/2012/08/24/2653773.html"&gt;BUG！！！======&amp;gt; syncdb 时 “ TypeError: decode() argument 1 must be string, not None ” - 事件轮询，回不到过去 - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/10564215/django-1-4-defining-user"&gt;python - Django 1.4 defining user - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/9886178/python-os-getenv-on-osx-django-1-4"&gt;Python os.getenv on OSX (Django 1.4) - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-19:2013/02/django-typeerror-decod-argument-1-must-be-string-not-none.html</guid><category>python</category><category>django</category></item><item><title>[python]将列表分组成包含多个子列表的列表</title><link>https://mozillazg.com/2013/02/python-group-list-in-sub-lists-of-n-items.html</link><description>&lt;p&gt;想取得的效果是： [1, 2, 3, 4, 5, 6, 7] --&amp;gt; [[1, 2, 3], [4, 5, 6], [7]]&lt;/p&gt;
&lt;p&gt;下面三种方法取自博文 &lt;a href="http://sandrotosi.blogspot.com/2011/04/python-group-list-in-sub-lists-of-n.html"&gt;http://sandrotosi.blogspot.com/2011/04/python-group-list-in-sub-lists-of-n.html&lt;/a&gt; 及评论。&lt;/p&gt;
&lt;h2&gt;第一种方法&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;group_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Given an iterator, it returns sub-lists made of n items&lt;/span&gt;
&lt;span class="sd"&gt;    (except the last that can have len &amp;lt; n)&lt;/span&gt;
&lt;span class="sd"&gt;    inspired by http://countergram.com/python-group-iterator-list-function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# tested as fast as separate counter&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;
            &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# tested faster than accumulator[:] = []&lt;/span&gt;
            &lt;span class="c1"&gt;# and tested as fast as re-using one list object&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;group_iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;group_iter&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x02A43418&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group_iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group_iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第二种方法：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;original_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;original_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;list_size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_list&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;list_size&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第三种方法：&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;splitarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arraylen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arraylen&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;gsize&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsize&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;gsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;gsize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arraylen&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;gsize&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arraylen&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;gsize&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;original_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;original_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;list_size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_list&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;list_size&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.activestate.com/recipes/303060-group-a-list-into-sequential-n-tuples/"&gt;Group a list into sequential n-tuples « Python recipes « ActiveState Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sandrotosi.blogspot.com/2011/04/python-group-list-in-sub-lists-of-n.html"&gt;Sandro Tosi: Python: group a list in sub-lists of n items&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.garyrobinson.net/2008/04/splitting-a-pyt.html"&gt;Gary Robinson's Rants: Splitting a Python list into sublists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-19:2013/02/python-group-list-in-sub-lists-of-n-items.html</guid><category>python</category></item><item><title>[django]官方编码规范</title><link>https://mozillazg.com/2013/02/django-offical-coding-style.html</link><description>&lt;p&gt;请以最新的官方英文版为准：&lt;a href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/"&gt;https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;编码风格&lt;/h2&gt;
&lt;p&gt;当编写 Django 代码时，请遵循下列编码规范。&lt;/p&gt;
&lt;h3&gt;Python 风格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;除非另有规定，否则请遵循 &lt;a href="http://www.python.org/dev/peps/pep-0008"&gt;PEP 8&lt;/a&gt; 风格指南。    &lt;br /&gt;
  你可以使用类似 &lt;a href="http://pypi.python.org/pypi/pep8"&gt;pep8&lt;/a&gt; 的工具检查你的代码，
  但是，请记住 &lt;a href="http://www.python.org/dev/peps/pep-0008"&gt;PEP 8&lt;/a&gt; 只是个指南，并非强制约束，因此应当以你所处项目/团队的风格为主。    &lt;br /&gt;
  一个比较大的例外就是，&lt;a href="http://www.python.org/dev/peps/pep-0008"&gt;PEP 8&lt;/a&gt; 规定代码行长最长不能超过 79 个字符。问题是现在是 21 世纪了，我们有高分辨率的显示器可以显示超过 79 个字符的代码行。如果这这个约定让代码看起来很丑或难以阅读的话，那么就没必要限制行长不超过 79 个字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用4个空格进行缩进。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用下划线而不是小驼峰法（camelCase）命名变量、函数及方法名（比如，poll.get_unique_voters()，不要使用 poll.getUniqueVoters）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用首字母大写（InitialCaps）的方式命名类名（或能够返回类的工厂函数）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档字符串中，使用动词（action words）。比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Calculates something and returns the result.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;反例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Calculate something and return the result.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;模板风格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在模板中，大括号及标签内容之间使用一个（只需一个）空格。    &lt;br /&gt;
  应该这样：&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;别这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;视图风格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在视图中，视图函数的第一个参数应该被命名为 request。     &lt;br /&gt;
  应该这样：&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;别这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;模型风格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字段名应该全部小写，使用下划线代替小驼峰法。
  应该这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;别这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Last_Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;class Meta&lt;/code&gt; 应该在字段被定义&lt;em&gt;后&lt;/em&gt;才出现，使用一个空行分隔。
  应该这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;people&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;别这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;people&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也别这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;verbose_name_plural&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;people&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;model 内的类和方法的定义顺序应该遵循如下顺序（不是所有项都是必需的）：       &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的数据库字段          &lt;/li&gt;
&lt;li&gt;自定义&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/managers/"&gt;管理器属性（manager attributes）&lt;/a&gt;         &lt;/li&gt;
&lt;li&gt;&lt;code&gt;class Meta&lt;/code&gt;          &lt;/li&gt;
&lt;li&gt;&lt;code&gt;def __unicode__()&lt;/code&gt;       &lt;/li&gt;
&lt;li&gt;&lt;code&gt;def __str__()&lt;/code&gt;       &lt;/li&gt;
&lt;li&gt;&lt;code&gt;def save()&lt;/code&gt;          &lt;/li&gt;
&lt;li&gt;&lt;code&gt;def get_absolute_url()&lt;/code&gt;          &lt;/li&gt;
&lt;li&gt;其他自定义方法        &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果一个 model 字段定义了 &lt;code&gt;choices&lt;/code&gt;，那么定义的多元元组的名称应该全部大写。例如：      &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;DIRECTION_UP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;DIRECTION_DOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;DIRECTION_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTION_UP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIRECTION_DOWN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;django.conf.settings 的使用&lt;/h3&gt;
&lt;p&gt;模块不常用的设置项被储存在 &lt;code&gt;django.conf.settings&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;Modules should not in general use settings stored in &lt;code&gt;django.conf.settings&lt;/code&gt; at the top level (i.e. evaluated when the module is imported). The explanation for this is as follows:&lt;/p&gt;
&lt;p&gt;Manual configuration of settings (i.e. not relying on the &lt;code&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt; environment variable) is allowed and possible as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="n"&gt;SOME_SETTING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, if any setting is accessed before the settings.configure line, this will not work. (Internally, &lt;code&gt;settings&lt;/code&gt; is a &lt;code&gt;LazyObject&lt;/code&gt; which configures itself automatically when the settings are accessed if it has not already been configured).&lt;/p&gt;
&lt;p&gt;So, if there is a module containing some code as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.urlresolvers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_callable&lt;/span&gt;

&lt;span class="n"&gt;default_foo_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FOO_VIEW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...then importing this module will cause the settings object to be configured. That means that the ability for third parties to import the module at the top level is incompatible with the ability to configure the settings object manually, or makes it very difficult in some circumstances.&lt;/p&gt;
&lt;p&gt;Instead of the above code, a level of laziness or indirection must be used, such as &lt;code&gt;django.utils.functional.LazyObject&lt;/code&gt;, &lt;code&gt;django.utils.functional.lazy()&lt;/code&gt; or &lt;code&gt;lambda&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mark all strings for internationalization; see the i18n documentation for details.&lt;/li&gt;
&lt;li&gt;Remove import statements that are no longer used when you change code. The most common tools for this task are pyflakes and pylint.&lt;/li&gt;
&lt;li&gt;Systematically remove all trailing whitespaces from your code as those add unnecessary bytes, add visual clutter to the patches and can also occasionally cause unnecessary merge conflicts. Some IDE’s can be configured to automatically remove them and most VCS tools can be set to highlight them in diff outputs. Note, however, that patches which only remove whitespace (or only make changes for nominal PEP 8 conformance) are likely to be rejected, since they only introduce noise rather than code improvement. Tidy up when you’re next changing code in the area.&lt;/li&gt;
&lt;li&gt;Please don’t put your name in the code you contribute. Our policy is to keep contributors’ names in the AUTHORS file distributed with Django – not scattered throughout the codebase itself. Feel free to include a change to the AUTHORS file in your patch if you make more than a single trivial change.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 01 Feb 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-02-01:2013/02/django-offical-coding-style.html</guid><category>django</category><category>python</category></item><item><title>[django]使用 apache + mod_wsgi 部署 django</title><link>https://mozillazg.com/2013/01/django-deploying-with-apache-mode-wsgi.html</link><description>&lt;p&gt;本文测试环境：linux mint，python 2.7，django 1.4&lt;/p&gt;
&lt;h2&gt;安装依赖&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install apache2
&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install libapache2-mod-wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;设置 django&lt;/h2&gt;
&lt;p&gt;本例中项目名为 bbs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;span class="go"&gt;/var/www/bbs&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; tree . -d
&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;|-- bb  # 应用&lt;/span&gt;
&lt;span class="go"&gt;|-- bbs  # settings.py wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;|-- static  # 静态文件&lt;/span&gt;
&lt;span class="go"&gt;|   `-- css&lt;/span&gt;
&lt;span class="go"&gt;`-- templates  # TEMPLATE_DIRS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置 settings：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/var/www/bbs/templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 这里要是绝对路径&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/var/www/bbs/static&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置 wsgi.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/var/www/bbs/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 项目目录的绝对路径&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bbs.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本例中使用 /var/www/bbs/static/ 保存静态文件，使用命令
&lt;code&gt;python manage.py collectstatic&lt;/code&gt; 收集静态文件。&lt;/p&gt;
&lt;p&gt;最终 /var/www/bbs/static/ 目录结构应该类似（admin 目录及其目录下文件一定要有）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tree static -d
&lt;span class="go"&gt;static&lt;/span&gt;
&lt;span class="go"&gt;|-- admin&lt;/span&gt;
&lt;span class="go"&gt;|   |-- css&lt;/span&gt;
&lt;span class="go"&gt;|   |-- img&lt;/span&gt;
&lt;span class="go"&gt;|   |   `-- gis&lt;/span&gt;
&lt;span class="go"&gt;|   `-- js&lt;/span&gt;
&lt;span class="go"&gt;|       `-- admin&lt;/span&gt;
&lt;span class="go"&gt;`-- css&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置 apache&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo vim /etc/apache2/conf.d/bbs.conf


&lt;span class="go"&gt;WSGIPythonPath /var/www/bbs&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;VirtualHost *:80&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    ServerName bbs.com&lt;/span&gt;

&lt;span class="go"&gt;    Alias /static/ /var/www/bbs/static/&lt;/span&gt;

&lt;span class="go"&gt;    &amp;lt;Directory /var/www/bbs/static&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    Order deny,allow&lt;/span&gt;
&lt;span class="go"&gt;    Allow from all&lt;/span&gt;
&lt;span class="go"&gt;    &amp;lt;/Directory&amp;gt;&lt;/span&gt;

&lt;span class="go"&gt;    WSGIScriptAlias / /var/www/bbs/bbs/wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;    &amp;lt;Directory /var/www/bbs/bbs&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    &amp;lt;Files wsgi.py&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    Order allow,deny&lt;/span&gt;
&lt;span class="go"&gt;    Allow from all&lt;/span&gt;
&lt;span class="go"&gt;    &amp;lt;/Files&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    &amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改目录权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo chown www-data:www-data /var/www/bbs -R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动 apache 服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; service apache2 restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="前台" src="/static/images/2013-1-django-deploying-apache-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="后台" src="/static/images/2013-1-django-deploying-apache-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;后续 linux 相关的工作暂且不表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;配置项目目录访问权限&lt;del&gt;&lt;/li&gt;
&lt;li&gt;配置 iptables ，开放 80 端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试项目及配置文件可以从 &lt;a href="https://github.com/mozillazg/django-simple-projects/tree/master/projects/bbs"&gt;这个代码仓库&lt;/a&gt; 中获取。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/modwsgi/"&gt;How to use Django with Apache and mod_wsgi | Django documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango"&gt;IntegrationWithDjango - modwsgi - How to use Django with mod_wsgi. - Python WSGI adapter module for Apache.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-31:2013/01/django-deploying-with-apache-mode-wsgi.html</guid><category>python</category><category>django</category><category>apache</category><category>mod_wsgi</category></item><item><title>[django]使用 nginx + fastcgi 部署 django</title><link>https://mozillazg.com/2013/01/django-deploying-with-fastcgi-nginx.html</link><description>&lt;p&gt;本文测试环境：linux mint，python 2.7，django 1.4&lt;/p&gt;
&lt;h2&gt;安装依赖&lt;/h2&gt;
&lt;p&gt;安装 flup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo pip install flup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装 nginx&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;设置 django&lt;/h2&gt;
&lt;p&gt;本例中项目名为 bbs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;span class="go"&gt;/var/www/bbs&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; tree . -d
&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;|-- bb  # 应用&lt;/span&gt;
&lt;span class="go"&gt;|-- bbs  # settings.py wsgi.py&lt;/span&gt;
&lt;span class="go"&gt;|-- static  # 静态文件&lt;/span&gt;
&lt;span class="go"&gt;|   `-- css&lt;/span&gt;
&lt;span class="go"&gt;`-- templates  # TEMPLATE_DIRS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置 settings：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;/var/www/bbs/templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 这里要是绝对路径&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/var/www/bbs/static&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配置 wsgi.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/var/www/bbs/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 项目目录的绝对路径&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bbs.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本例中使用 /var/www/bbs/static/ 保存静态文件，使用命令
&lt;code&gt;python manage.py collectstatic&lt;/code&gt; 收集静态文件。&lt;/p&gt;
&lt;p&gt;最终 /var/www/bbs/static/ 目录结构应该类似（admin 目录及其目录下文件一定要有）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tree static -d
&lt;span class="go"&gt;static&lt;/span&gt;
&lt;span class="go"&gt;|-- admin&lt;/span&gt;
&lt;span class="go"&gt;|   |-- css&lt;/span&gt;
&lt;span class="go"&gt;|   |-- img&lt;/span&gt;
&lt;span class="go"&gt;|   |   `-- gis&lt;/span&gt;
&lt;span class="go"&gt;|   `-- js&lt;/span&gt;
&lt;span class="go"&gt;|       `-- admin&lt;/span&gt;
&lt;span class="go"&gt;`-- css&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置 nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; vim /etc/nginx/conf.d/bbs.conf

&lt;span class="go"&gt;server {&lt;/span&gt;
&lt;span class="go"&gt;    listen   80;&lt;/span&gt;
&lt;span class="go"&gt;    server_name bbs.com;&lt;/span&gt;
&lt;span class="go"&gt;    access_log /var/log/nginx/bbs.access.log;&lt;/span&gt;
&lt;span class="go"&gt;    error_log /var/log/nginx/bbs.error.log;&lt;/span&gt;

&lt;span class="go"&gt;    location / {&lt;/span&gt;
&lt;span class="gp"&gt;        #&lt;/span&gt; host and port to fastcgi server
&lt;span class="go"&gt;        fastcgi_pass 127.0.0.1:8081;  # host:port&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param PATH_INFO $fastcgi_script_name;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param REQUEST_METHOD $request_method;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param QUERY_STRING $query_string;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param CONTENT_TYPE $content_type;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param CONTENT_LENGTH $content_length;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_pass_header Authorization;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_intercept_errors off;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param SERVER_PROTOCOL $server_protocol;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param SERVER_PORT $server_port;&lt;/span&gt;
&lt;span class="go"&gt;        fastcgi_param SERVER_NAME $server_name;&lt;/span&gt;
&lt;span class="go"&gt;        }&lt;/span&gt;

&lt;span class="go"&gt;    location /static/ {  # STATIC_URL&lt;/span&gt;
&lt;span class="go"&gt;        alias /var/www/bbs/static/;  # STATIC_ROOT &lt;/span&gt;
&lt;span class="go"&gt;    }&lt;/span&gt;

&lt;span class="go"&gt;    location /meida/ {  # MEDIA_URL&lt;/span&gt;
&lt;span class="go"&gt;        alias /var/www/bbs/media/;  # MEDIA_ROOT &lt;/span&gt;
&lt;span class="go"&gt;    }&lt;/span&gt;

&lt;span class="gp"&gt;    #&lt;/span&gt; 如果 admin 文件夹在 static 目录下，可以不配置下面项
&lt;span class="go"&gt;    location /static/admin/ {  # admin static file&lt;/span&gt;
&lt;span class="go"&gt;        alias /var/www/bbs/static/admin/;&lt;/span&gt;
&lt;span class="go"&gt;    }&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以 fastcgi 的形式运行 django 项目（注意：这里的 host 及 port 要与上面配置的一样）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python manage.py runfcgi &lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;127.0.0.1 &lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8081
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;终止 fastcgi 话，查看相关进程然后结束掉即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep cgi
&lt;span class="go"&gt;mzg       2500  0.0  5.0  34860 12480 ?        S    15:43   0:00 python manage.py runfcgi host=127.0.0.1 port=8081&lt;/span&gt;
&lt;span class="go"&gt;mzg       2501  0.0  4.7  34860 11784 ?        S    15:43   0:00 python manage.py runfcgi host=127.0.0.1 port=8081&lt;/span&gt;
&lt;span class="go"&gt;mzg       2502  0.0  4.7  34860 11788 ?        S    15:43   0:00 python manage.py runfcgi host=127.0.0.1 port=8081&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; sudo &lt;span class="nb"&gt;kill&lt;/span&gt; 2500
&lt;span class="gp"&gt;$&lt;/span&gt; ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep cgi
&lt;span class="go"&gt;mzg       2745  0.0  0.3   5128   876 pts/1    S+   16:05   0:00 grep --colour=auto cgi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测试环境的话，由于域名是虚构的，所以要配置 /etc/hosts 添加 &lt;code&gt;127.0.0.1  bbs.com&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo vim /etc/hosts
&lt;span class="gp"&gt;$&lt;/span&gt; tail /etc/hosts
&lt;span class="go"&gt;127.0.0.1   bbs.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更改目录权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo chown www-data:www-data /var/www/bbs -R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动 nginx 服务&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; service nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="前台" src="/static/images/2013-1-django-deploying-nginx-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="后台" src="/static/images/2013-1-django-deploying-nginx-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;后续 linux 相关的工作暂且不表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;配置项目目录访问权限&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;配置 iptables ，开放 80 端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试项目及配置文件可以从 &lt;a href="https://github.com/mozillazg/django-simple-projects/tree/master/projects/bbs"&gt;这个代码仓库&lt;/a&gt; 中获取。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/howto/deployment/fastcgi/"&gt;How to use Django with FastCGI, SCGI, or AJP | Django documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dmclaughlin.com/2008/11/03/complete-guide-to-deploying-django-on-ubuntu-with-nginx-fastcgi-and-mysql/"&gt;David McLaughlin » Complete guide to deploying django on Ubuntu with nginx, FastCGI and MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-31:2013/01/django-deploying-with-fastcgi-nginx.html</guid><category>python</category><category>django</category><category>nginx</category><category>fastcgi</category></item><item><title>修改 pelican 3.1 使之支持中文文件夹作为分类目录</title><link>https://mozillazg.com/2013/01/fix-pelican-use-chinese-folder-as-category.html</link><description>&lt;p&gt;前提：&lt;/p&gt;
&lt;p&gt;windows + pelican 3.1 + python 2.6    &lt;br /&gt;
并且 pelican 配置文件中设置了 &lt;code&gt;USE_FOLDER_AS_CATEGORY = True&lt;/code&gt;（默认为 True，只要不设置为 False 即可）&lt;/p&gt;
&lt;p&gt;默认情况下，pelican 不支持中文文件夹作为分类目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;d:\myblog&amp;gt;pelican content -o output -s pelicanconf.py -D&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;

&lt;span class="go"&gt;CRITICAL: &amp;#39;utf8&amp;#39; codec can&amp;#39;t decode byte 0xd3 in position 2: invalid continuation byte&lt;/span&gt;
&lt;span class="go"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\Scripts\pelican-script.py&amp;quot;, line 9, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;    load_entry_point(&amp;#39;pelican==3.1&amp;#39;, &amp;#39;console_scripts&amp;#39;, &amp;#39;pelican&amp;#39;)()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\site-packages\pelican\__init__.py&amp;quot;, line 319, in main&lt;/span&gt;
&lt;span class="go"&gt;    pelican.run()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\site-packages\pelican\__init__.py&amp;quot;, line 152, in run&lt;/span&gt;
&lt;span class="go"&gt;    p.generate_context()&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\site-packages\pelican\generators.py&amp;quot;, line 337, in generate_context&lt;/span&gt;
&lt;span class="go"&gt;    .decode(&amp;#39;utf-8&amp;#39;)&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;C:\Python26\lib\encodings\utf_8.py&amp;quot;, line 16, in decode&lt;/span&gt;
&lt;span class="go"&gt;    return codecs.utf_8_decode(input, errors, True)&lt;/span&gt;
&lt;span class="go"&gt;UnicodeDecodeError: &amp;#39;utf8&amp;#39; codec can&amp;#39;t decode byte 0xd3 in position 2: invalid continuation byte&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从错误信息中我们可以看到 pelican 对文件夹名称默认按 utf8 编码进行解码，而在 windows 下文件（夹）名称默认是按 gbk 进行编码的，所以就出现了编码错误。&lt;/p&gt;
&lt;p&gt;下面我们来修复这个错误。&lt;/p&gt;
&lt;p&gt;编辑文件 &lt;code&gt;C:\Python26\lib\site-packages\pelican\generators.py&lt;/code&gt; 进行以下两步操作即可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先导入 sys 模块：&lt;code&gt;import sys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后编辑第 338 行左右的&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;\
           &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;\
           &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此处的修改是为了让程序使用系统默认的输入编码（简体中文版 Windows 下默认是 gbk）进行解码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进行相关修改后，再次执行 &lt;code&gt;pelican content -o output -s pelicanconf.py -D&lt;/code&gt; 生成 html 文件，执行过程一切顺利。&lt;/p&gt;
&lt;p&gt;但也有一个不完美的地方：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-issue-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-issue-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然在浏览器中这个不会是乱码，但看起来还是有点不爽。
下面我们要将它变成中文拼音，这样就不会乱码了。&lt;/p&gt;
&lt;p&gt;继续编辑 generators.py 文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入相关模块：&lt;code&gt;from pelican.utils import slugify&lt;/code&gt; 。
   这个模块的作用是将非 ASCII 字符转换为 ASCII 字符，比如，将 &lt;code&gt;中国&lt;/code&gt; 转换为 &lt;code&gt;zhong-guo&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;将 199 行左右的&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arts&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;arts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arts&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;arts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改后的效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-fixed-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/2013-1-pelican-fixed-02.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-31:2013/01/fix-pelican-use-chinese-folder-as-category.html</guid><category>pelican</category><category>python</category></item><item><title>[linux] 更改 ssh 私钥 Passphrase</title><link>https://mozillazg.com/2013/01/linux-ssh-change-passphrase.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.ssh
&lt;span class="gp"&gt;$&lt;/span&gt; ssh-keygen -f id_rsa -p
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cyberciti.biz/faq/howto-ssh-changing-passphrase/"&gt;OpenSSH Change a Passphrase With ssh-keygen command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-31:2013/01/linux-ssh-change-passphrase.html</guid><category>linux</category><category>ssh</category></item><item><title>[英语]I wanted to let you know that</title><link>https://mozillazg.com/2013/01/english-i-wanted-to-let-you-know-that.html</link><description>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I wanted to let you know that I've decied to retire at the end of this year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I wanted to let you know that I really appreciate all the hard work you put into this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;just to let you know that&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.phrasemix.com/phrases/i-wanted-to-let-you-know-that-clause"&gt;English Phrase: I wanted to let you know that (clause)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-29:2013/01/english-i-wanted-to-let-you-know-that.html</guid><category>英语</category></item><item><title>[英语]May be not or May not be?</title><link>https://mozillazg.com/2013/01/english-may-be-not-or-may-not-be.html</link><description>&lt;p&gt;摘自：&lt;a href="http://www.usingenglish.com/forum/ask-teacher/46869-may-not-may-not.html"&gt;http://www.usingenglish.com/forum/ask-teacher/46869-may-not-may-not.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the difference between "may be not" and "may not be" ?&lt;/p&gt;
&lt;p&gt;Example:    &lt;br /&gt;
- She may be not a student.   &lt;br /&gt;
- She may not be a student.   &lt;br /&gt;
==&amp;gt; Do the two sentences have the same meaning?&lt;/p&gt;
&lt;p&gt;[1] She may be not a student, ...    &lt;br /&gt;
Meaning =&amp;gt; True, she is not a student, she's a teacher, but she works just as hard as a student. She studies English at home on her own time.&lt;/p&gt;
&lt;p&gt;[2] She may not be a student.    &lt;br /&gt;
Meaning =&amp;gt; There is a possibility that she is not a student.&lt;/p&gt;
&lt;p&gt;Modal may, like modal must, is ambiguous between epistemic and deontic modality:&lt;/p&gt;
&lt;p&gt;Deontic modality    &lt;br /&gt;
Ex: She may go to school.    &lt;br /&gt;
=&amp;gt; permission; e.g., she is allowed to go.&lt;/p&gt;
&lt;p&gt;Negated    &lt;br /&gt;
Ex: She may not go to school.    &lt;br /&gt;
=&amp;gt; permission to go to school is denied.    &lt;br /&gt;
Epistempic modality    &lt;br /&gt;
Ex: She may be at school.    &lt;br /&gt;
=&amp;gt; possibility;e.g., It is possible that she is at school.      &lt;/p&gt;
&lt;p&gt;Negated    &lt;br /&gt;
Ex: She may not be at school.    &lt;br /&gt;
=&amp;gt; There's a possibility that she is not at school.      &lt;/p&gt;
&lt;p&gt;Ex: She may be not at school, but ...       &lt;br /&gt;
=&amp;gt; True, she is not at school, she's at home, but she's at home studying right now as if she were in school.    &lt;br /&gt;
Does that help?     &lt;br /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-29:2013/01/english-may-be-not-or-may-not-be.html</guid><category>英语</category></item><item><title>[django]使用内置的 comments 实现评论功能</title><link>https://mozillazg.com/2013/01/django-built-in-comments-framework.html</link><description>&lt;h2&gt;安装 comments 应用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编辑 settings 文件，&lt;code&gt;INSTALLED_APPS&lt;/code&gt; 项添加 &lt;code&gt;'django.contrib.comments',&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.comments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行 &lt;code&gt;python manage.py syncdb&lt;/code&gt; 创建评论表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;编辑 urls.py 文件，添加评论相关的 url：&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^comments/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.contrib.comments.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;示例 views&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topic_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Topic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;topic_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                              &lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;基本使用&lt;/h2&gt;
&lt;p&gt;首先要导入 comments 模板标签：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;comments&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;模板标签的使用（基于上面的 views）：&lt;/p&gt;
&lt;h3&gt;获取评论数&lt;/h3&gt;
&lt;p&gt;获取 topic 对象的评论数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;get_comment_count&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;comment_count&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Comments(&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment_count&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;):&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;显示评论：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用默认的显示方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;render_comment_list&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;topic&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-comments-01" src="/static/images/2013-1-27-django-comments-01.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义显示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;get_comment_list&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;comment_list&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;comment_list&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Posted by: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment.user_name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; on &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment.submit_date&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment.comment&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-comments-01" src="/static/images/2013-1-27-django-comments-02.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;评论链接&lt;/h3&gt;
&lt;p&gt;要使用自带的评论链接功能需要在 models 中定义 get_absolute_url 方法（请参考 &lt;a href="https://docs.djangoproject.com/en/dev/ref/models/instances/#get-absolute-url"&gt;get_absolute_url&lt;/a&gt;）：&lt;/p&gt;
&lt;p&gt;urls.py：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;r&amp;#39;^topic/(?P&amp;lt;topic_id&amp;gt;\d+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello.views.display_topic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;display_topic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;models.py：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@models.permalink&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display_topic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;模板中显示评论链接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;comment_list&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;{# 显示评论链接 #}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment.id&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;get_comment_permalink&lt;/span&gt; &lt;span class="nv"&gt;comment&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      #&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;forloop&lt;/span&gt;&lt;span class="nv"&gt;.counter&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;{# end #}&lt;/span&gt;

  Posted by: &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment.user_name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; on &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment.submit_date&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;comment.comment&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-comments-permalink" src="/static/images/2013-1-28-django-comments-permalink.png" /&gt;&lt;/p&gt;
&lt;h3&gt;用于发表评论的表单&lt;/h3&gt;
&lt;h4&gt;默认显示方式：&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;get_comment_form&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;form&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;comment_form_target&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;csrf_token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.as_p&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Comment&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-comments-form-01" src="/static/images/2013-1-28-django-comments-form-01.png" /&gt;&lt;/p&gt;
&lt;p&gt;comments form 包含如下字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name ——名称&lt;/li&gt;
&lt;li&gt;email ——邮箱&lt;/li&gt;
&lt;li&gt;url ——网址&lt;/li&gt;
&lt;li&gt;comment ——内容&lt;/li&gt;
&lt;li&gt;honeypot ——防止机器乱填垃圾信息&lt;/li&gt;
&lt;li&gt;content_type ——与后台有关，可以去后台 Comments 应用中看看&lt;/li&gt;
&lt;li&gt;object_pk ——对应的帖子 id&lt;/li&gt;
&lt;li&gt;timestamp ——时间戳&lt;/li&gt;
&lt;li&gt;security_hash ——用于安全检测&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;自定义显示&lt;/h4&gt;
&lt;p&gt;由于默认生成的表单一般让人不太满意，所以就需要通过自定义来调整一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;get_comment_form&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;form&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;comment_form_target&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;csrf_token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name: &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id_email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;E-mail: &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.email&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Web Site: &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;id_comment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Comment: &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.comment&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.content_type&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.object_pk&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.timestamp&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.security_hash&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display: none;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.honeypot&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Comment&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-comments-form-02" src="/static/images/2013-1-28-django-comments-form-02.png" /&gt;&lt;/p&gt;
&lt;h3&gt;评论发表成功后跳转回当前页面&lt;/h3&gt;
&lt;p&gt;只需在 form 中包含字段 "next" 即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;next&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/topic/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;topic.id&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Comment&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基于 django 1.4.3 的示例项目：&lt;a href="https://github.com/mozillazg/django-simple-projects/tree/master/projects/comments"&gt;仓库&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href="/static/downloads/django-comments.tar.gz"&gt;下载&lt;/a&gt; 。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://newliu.com/post/11/"&gt;Django学习笔记—Comments库的使用方法小记 | NewLiu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/comments/"&gt;Django’s comments framework | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/django/django/blob/master/django/contrib/comments/forms.py"&gt;django/contrib/comments/forms.py ·GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.4/topics/forms/#customizing-the-form-template"&gt;Working with forms | Django documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-27:2013/01/django-built-in-comments-framework.html</guid><category>python</category><category>django</category></item><item><title>[django]使用 Paginator 实现分页功能</title><link>https://mozillazg.com/2013/01/django-pagination-by-use-paginator.html</link><description>&lt;p&gt;在 django 中使用 Paginator 可以很方便的实现分页功能，下面就通过一个具体的例子来讲讲如何使用 Paginator。&lt;/p&gt;
&lt;h2&gt;在 view 中使用 Paginator&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.paginator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.paginator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EmptyPage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.paginator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PageNotAnInteger&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hello.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Topic&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="c1"&gt;# 每页显示的记录数&lt;/span&gt;
    &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Topic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;paginator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paginator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topics&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 实例化一个分页对象&lt;/span&gt;

    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 获取页码&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 获取某页对应的记录&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;PageNotAnInteger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 如果页码不是个整数&lt;/span&gt;
        &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 取第一页的记录&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EmptyPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# 如果页码太大，没有相应的记录&lt;/span&gt;
        &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paginator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 取最后一页的记录&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topics&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;topics&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;模板中的相关操作&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;topics.object_list&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;topic.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- 第一种分页显示方式 --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;{# topics.paginator.page_range 这个函数返回包含一个所有页码数的 range 对象 #}&lt;/span&gt;
  &lt;span class="c"&gt;{# 即 range(1, topics.paginator.num_pages + 1) #}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;page_number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;topics.paginator.page_range&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;ifequal&lt;/span&gt; &lt;span class="nv"&gt;page_number&lt;/span&gt;  &lt;span class="nv"&gt;topics.number&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;page_number&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?page=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;page_number&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;page_number&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endifequal&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;


&lt;span class="c"&gt;&amp;lt;!-- 另一种分页显示方式 --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;topics.has_previous&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?page=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;topics.previous_page_number&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="c"&gt;{# topics.paginator.number_pages 返回总页数 #}&lt;/span&gt;
  Page &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;topics.number&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; of &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;topics.paginator.num_pages&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;.
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;topics.has_next&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?page=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;topics.next_page_number&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Next&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-pagination" src="/static/images/2013-1-26-django-pagination.png" /&gt;&lt;/p&gt;
&lt;p&gt;基于 django 1.4.3 的示例项目：&lt;a href="https://github.com/mozillazg/django-simple-projects/tree/master/projects/pagination"&gt;仓库&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href="/static/downloads/pagination.tar.gz"&gt;下载&lt;/a&gt; 。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.4/topics/pagination"&gt;Pagination - Django Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Sat, 26 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-26:2013/01/django-pagination-by-use-paginator.html</guid><category>python</category><category>django</category></item><item><title>[django]使用自定义 context processor 实现模板全局变量</title><link>https://mozillazg.com/2013/01/django-global-template-variable-by-use-custom-context-processor.html</link><description>&lt;p&gt;本文使用的是 django 1.4.3。&lt;/p&gt;
&lt;h2&gt;写一个 context processor 函数&lt;/h2&gt;
&lt;p&gt;可以把这个函数放在项目的任何地方，本文是放在应用目录下的 context_processors.py 文件中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hello.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 只有一个参数（HttpRequeset 对象）&lt;/span&gt;
    &lt;span class="n"&gt;all_categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all_categories&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;  &lt;span class="c1"&gt;# 返回值必须是个字典&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：context processor 函数只有一个参数，即 HttpRequest 对象，并且函数的返回值必须是个字典。&lt;/p&gt;
&lt;h2&gt;修改 settings 文件&lt;/h2&gt;
&lt;p&gt;修改 TEMPLATE_CONTEXT_PROCESSORS 选项值，添加新建的 context processor 函数。
如果没有 TEMPLATE_CONTEXT_PROCESSORS 这一项的话，需要把它添加到 settings 文件中。
各版本的 django 的 TEMPLATE_CONTEXT_PROCESSORS 的默认值不一样，具体见 &lt;a href="https://docs.djangoproject.com/en/1.4/ref/settings/#template-context-processors"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.context_processors.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.core.context_processors.debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.core.context_processors.i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.core.context_processors.media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.core.context_processors.static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.core.context_processors.tz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages.context_processors.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;hello.context_processors.categories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 自定义的 context processors 函数&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在 views 中使用&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RequestContext&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;


&lt;span class="c1"&gt;# 第一种用法&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                              &lt;span class="n"&gt;context_instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# 第二种用法&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;模板中使用定义的变量&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Categories:
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;{# 自定义的 context processor 函数的返回值是：{&amp;#39;categories&amp;#39;: all_categories}，该字典的 key 可以直接在模板中作为变量使用 #}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;category&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;category.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;django&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例项目下载：&lt;a href="/static/downloads/2013.01.23.mysite.tar.gz"&gt;mysite.tar.gz&lt;/a&gt;，django 版本：1.4.3。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://matthewphiong.com/django-global-template-variable"&gt;Django “Global” Template Variable — matthewphiong blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#django.template.RequestContext"&gt;django.template.RequestContext&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors"&gt;Writing your own context processors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.4/ref/settings/#template-context-processors"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/faq/usage/#how-do-i-make-a-variable-available-to-all-my-templates"&gt;How do I make a variable available to all my templates?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-23:2013/01/django-global-template-variable-by-use-custom-context-processor.html</guid><category>python</category><category>django</category></item><item><title>[firefox]在地址栏使用通配符过滤书签及历史记录</title><link>https://mozillazg.com/2013/01/firefox-on-address-bar-use-wildcard-filter-history-and-bookmarks.html</link><description>&lt;p&gt;通过在地址栏使用相应的通配符从而实现只搜索书签或历史记录的功能。&lt;/p&gt;
&lt;p&gt;打开 &lt;a href="about:config"&gt;about:config&lt;/a&gt; 搜索 &lt;code&gt;urlbar&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img alt="about:config urlbar" src="/static/images/2013-1-19-firefox-about-config-urlbar.png" /&gt;&lt;/p&gt;
&lt;p&gt;从上图可以看出，默认情况下相关通配符的功能如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;browser.urlbar.match.title            #      只匹配标题
browser.urlbar.match.url              @      只匹配 URL
browser.urlbar.restrict.bookmark      *      只搜索书签
browser.urlbar.restrict.history       ^      只搜索历史记录
browser.urlbar.restrict.openpage      %      只搜索所有打开的标签页
browser.urlbar.restrict.tag           +      只搜索标签
browser.urlbar.restrict.typed         ~      只搜索曾经在地址栏输入过的记录（URL + 标题）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如，只搜索标题包含 firefox 的记录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以组合使用，不同字符间要加空格。比如，只搜索所有书签中 URL 包含 firefox 的记录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* @ firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后就是，上面的字符都可以自定义，可以怎么方便怎么来。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kb.mozillazine.org/Browser.urlbar.match.url"&gt;Location Bar search - MozillaZine Knowledge Base&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Fri, 18 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-18:2013/01/firefox-on-address-bar-use-wildcard-filter-history-and-bookmarks.html</guid><category>firefox</category></item><item><title>[django] Variables and attributes may not begin with underscores</title><link>https://mozillazg.com/2013/01/django-variables-and-attributes-may-not-begin-with-underscores.html</link><description>&lt;p&gt;当尝试在模板中&lt;strong&gt;调用以下划线开头的对象时&lt;/strong&gt;，会报如下类似错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TemplateSyntaxError at /&lt;/p&gt;
&lt;p&gt;Variables and attributes may not begin with underscores: 'user._meta.get_field('name').help_text'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方法就是，将调用以下划线开头的对象的操作封装到模板过滤器中。&lt;/p&gt;
&lt;h2&gt;如何创建自定义模板过滤器&lt;/h2&gt;
&lt;p&gt;在 models.py 文件所在目录新建一个 templatetags 目录:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hello/
    models.py
    templatetags/
        hello_extras.py
        __init__.py
    views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;hello_extras.py 中保存着我们自定义的模板过滤器。&lt;/p&gt;
&lt;p&gt;在 hello_extras.py 文件的开头需要包含如下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本例中我们将定义一个 help_text 过滤器，用于获取 models 中字段的 help_text 的值，所以 hello_extras.py 的内容为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@register.filter&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;help_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;help_text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在模板中使用自定义过滤器时，要记得导入过滤器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;hello_extras&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;本例的模板文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;hello_extras&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;users&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;help_text&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;： &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;user.name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;models 文件节选：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;姓名&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;模板渲染结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;姓名：tom&lt;/p&gt;
&lt;p&gt;姓名：jim&lt;/p&gt;
&lt;p&gt;姓名：eric&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;测试项目下载：&lt;a href="/static/downloads/2013.01.17.mysite.tar.gz"&gt;mysite.tar.gz&lt;/a&gt; ，测试环境：django 1.4.3。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4279905/access-django-model-fields-label-and-help-text"&gt;access django model fields label and help_text - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/6571649/model-name-of-objects-in-django-templates"&gt;Model name of objects in django templates - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/howto/custom-template-tags/"&gt;Custom template tags and filters | Django documentation | Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 17 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-17:2013/01/django-variables-and-attributes-may-not-begin-with-underscores.html</guid><category>python</category><category>django</category></item><item><title>使用 Pelican 生成静态博客</title><link>https://mozillazg.com/2013/01/use-pelican-to-generate-static-blog.html</link><description>&lt;h2&gt;安装 Pelican&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;sudo pip install pelican&lt;/span&gt;
&lt;span class="go"&gt;sudo pip install webassets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;使用&lt;/h2&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;h3&gt;主题&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-15:2013/01/use-pelican-to-generate-static-blog.html</guid><category>pelican</category></item><item><title>[linux]入手 VPS 后首先该做的事情</title><link>https://mozillazg.com/2013/01/linux-vps-first-things-need-to-do.html</link><description>&lt;p&gt;本文将介绍入手 VPS 后首先该做的一些事情。&lt;/p&gt;
&lt;p&gt;本文推荐使用 Xshell 作为 Windows 下的 SSH 客户端。&lt;/p&gt;
&lt;h2&gt;更改 root 用户密码&lt;/h2&gt;
&lt;p&gt;使用 root 登录 ssh 后，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;Xshell:\&amp;gt; ssh root@192.168.1.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先要做的事情就是更改 root 密码，密码记得要复杂点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; passwd
&lt;span class="go"&gt;Enter new UNIX password: &lt;/span&gt;
&lt;span class="go"&gt;Retype new UNIX password: &lt;/span&gt;
&lt;span class="go"&gt;passwd: password updated successfully&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改完密码之后可以断开 ssh 重新使用 root 登录验证一下密码。&lt;/p&gt;
&lt;h2&gt;创建普通用户&lt;/h2&gt;
&lt;p&gt;为了安全，平时我们应该以普通用户的身份操作 VPS。所以需要创建一个普通用户。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; useradd -m hello
&lt;span class="gp"&gt;#&lt;/span&gt; passwd hello
&lt;span class="go"&gt;Enter new UNIX password: &lt;/span&gt;
&lt;span class="go"&gt;Retype new UNIX password: &lt;/span&gt;
&lt;span class="go"&gt;passwd: password updated successfully&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;给用户添加 sudo 命令的使用权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\nhello ALL=(ALL) ALL\n&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/sudoers
&lt;span class="gp"&gt;#&lt;/span&gt; tail -3 /etc/sudoers

&lt;span class="go"&gt;hello ALL=(ALL) ALL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!--
如果不想每次使用 `sudo` 都输入 root 密码，上面的命令修改为：

    :::console
    # echo -e "\nhello ALL=(ALL) NOPASSWD:ALL\n" &gt;&gt; /etc/sudoers
    # tail -3 /etc/sudoers

    hello ALL=(ALL) NOPASSWD:ALL
--&gt;

&lt;h2&gt;使用 SSH 密匙认证登录 VPS&lt;/h2&gt;
&lt;p&gt;为了安全与方便，需要使用 SSH 密匙认证的方式来登录 VPS 。&lt;/p&gt;
&lt;p&gt;首先切换到普通用户下，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; sudo su -l hello
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果出现 sudo: unable to resolve host xxx 错误:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看 hostname:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; head /etc/hostname
&lt;span class="go"&gt;ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改文件 /etc/hosts，增加一行内容 &lt;code&gt;127.0.0.1 hostname&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\n127.0.0.1 ubuntu\n&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts
&lt;span class="gp"&gt;#&lt;/span&gt; tail -3 /etc/hosts

&lt;span class="go"&gt;127.0.0.1 ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生成密钥（可选，可以使用本地已有的公钥，把公钥内容追加到 ~/.ssh/authorized_keys 里就可以了）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ssh-keygen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一路回车。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.ssh 
&lt;span class="gp"&gt;$&lt;/span&gt; cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys
&lt;span class="gp"&gt;$&lt;/span&gt; ls 
&lt;span class="go"&gt;authorized_keys  id_rsa  id_rsa.pub&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; chmod &lt;span class="m"&gt;600&lt;/span&gt; authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;id_rsa 文件就是客户端用来登录的私钥了，下面我们要把他从服务器上下载下来。&lt;/p&gt;
&lt;p&gt;点击 Xshell 导航栏的“new file transfer” 图标，进入一个终端界面后：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /home/hello/.ssh
&lt;span class="gp"&gt;$&lt;/span&gt; get id_rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时 id_rsa 文件已经在 Xshell 的安装目录下了。然后再配置 xshell 使用密钥登录即可。&lt;/p&gt;
&lt;h2&gt;禁用 root 登录及密码认证登录&lt;/h2&gt;
&lt;p&gt;为了安全起见，我们需要配置 SSH 从而达到禁用 root 登录及密码认证登录的目的。&lt;/p&gt;
&lt;p&gt;在进行下面的配置前你需要再三确认可以通过上面生成的密钥以普通用户的身份登录 VPS，并且 root 密码正确无误的记下来了。&lt;/p&gt;
&lt;p&gt;编辑 sshd 服务器端配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo vi /etc/ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将 26 行左右的 &lt;code&gt;#PermitRootLogin yes&lt;/code&gt; 改为 &lt;code&gt;PermitRootLogin no&lt;/code&gt; ，     &lt;br /&gt;
50 行左右的 &lt;code&gt;#PasswordAuthentication yes&lt;/code&gt; 改为 &lt;code&gt;PasswordAuthentication no&lt;/code&gt;。                 &lt;br /&gt;
修改端口, 将 &lt;code&gt;#Port 22&lt;/code&gt; 改为 &lt;code&gt;Port 端口号数字&lt;/code&gt;(比如： &lt;code&gt;Port 7564&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;重启 ssh 服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo service sshd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;配置防火墙&lt;/h2&gt;
&lt;p&gt;下面将使用 iptables 作为服务器的防火墙，如果服务器没有安装的话需要先安装 iptables。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install iptables             &lt;span class="c1"&gt;# ubuntu&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; yum install iptables                      &lt;span class="c1"&gt;# centos&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于 centos/redhat（适用 centos 5, centos 6）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo vi /etc/sysconfig/iptables

&lt;span class="gp"&gt;#&lt;/span&gt; Firewall configuration written by system-config-firewall
&lt;span class="gp"&gt;#&lt;/span&gt; Manual customization of this file is not recommended.
&lt;span class="go"&gt;*filter&lt;/span&gt;
&lt;span class="go"&gt;:INPUT ACCEPT [0:0]&lt;/span&gt;
&lt;span class="go"&gt;:FORWARD ACCEPT [0:0]&lt;/span&gt;
&lt;span class="go"&gt;:OUTPUT ACCEPT [0:0]&lt;/span&gt;
&lt;span class="go"&gt;-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT&lt;/span&gt;
&lt;span class="go"&gt;-A INPUT -p icmp -j ACCEPT&lt;/span&gt;
&lt;span class="go"&gt;-A INPUT -i lo -j ACCEPT&lt;/span&gt;
&lt;span class="go"&gt;-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT   # 如果有修改 sshd 服务端口号，改为修改后的数字&lt;/span&gt;
&lt;span class="go"&gt;-A INPUT -j REJECT --reject-with icmp-host-prohibited&lt;/span&gt;
&lt;span class="go"&gt;-A FORWARD -j REJECT --reject-with icmp-host-prohibited&lt;/span&gt;
&lt;span class="go"&gt;-A INPUT -j DROP&lt;/span&gt;
&lt;span class="go"&gt;COMMIT&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ubuntu：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo vi /etc/iptables.up.rules  &lt;span class="c1"&gt;# 添加上面的规则&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; sudo vim /etc/network/interfaces
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在  'iface lo inet loopback' 后增加一行 pre-up iptables-restore &amp;lt; /etc/iptables.up.rules&lt;/p&gt;
&lt;p&gt;应用防火墙规则：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo service iptables restart  &lt;span class="c1"&gt;# centos  5, 6&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; sudo iptables-restore &amp;lt; /etc/iptables.up.rules   &lt;span class="c1"&gt;# ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;开机启动 iptables ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo chkconfig iptables on  &lt;span class="c1"&gt;# redhat/centos  5, 6&lt;/span&gt;

&lt;span class="gp"&gt;$&lt;/span&gt; sudo apt-get install sysv-rc-conf  &lt;span class="c1"&gt;# ubuntu&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; sudo sysv-rc-conf iptables on    &lt;span class="c1"&gt;# ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://matrix.42qu.com/10728837"&gt;Linux : 大三学生的作品- 42qu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linode.com/wiki/index.php/Configuring_IPtables_on_ubuntu_server"&gt;Configuring IPtables on ubuntu server - LinodeWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.kolab.org/en-US/Kolab_Groupware/3.0/html/Community_Installation_Guide/chap-Community_Installation_Guide-Preparing_the_System.html#sect-Community_Installation_Guide-Preparing_the_System-System_Firewall"&gt;Chapter 1. Preparing the System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">mozillazg</dc:creator><pubDate>Thu, 10 Jan 2013 00:00:00 +0000</pubDate><guid>tag:mozillazg.com,2013-01-10:2013/01/linux-vps-first-things-need-to-do.html</guid><category>linux</category><category>vps</category><category>ssh</category><category>iptables</category><category>ubuntu</category><category>centos</category></item></channel></rss>