<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Huang Huang 的博客</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/web.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2015-11-17T20:00:00+00:00</updated><entry><title>使用 weinre 远程调试微信页面</title><link href="https://mozillazg.com/2015/11/how-to-debug-wechat-web-page-with-weinre.html" rel="alternate"></link><updated>2015-11-17T20:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-11-17:2015/11/how-to-debug-wechat-web-page-with-weinre.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="/static/images/weinre/weinre-demo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源： &lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/"&gt;https://people.apache.org/~pmuellr/weinre-docs/latest/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;weinre 介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;weinre is WEb INspector REmote. Pronounced like the word "winery". Or maybe like the word "weiner". Who knows, really.&lt;/p&gt;
&lt;p&gt;weinre is a debugger for web pages, like FireBug (for FireFox) and Web Inspector (for WebKit-based browsers), except it's designed to work remotely, and in particular, to allow you debug web pages on a mobile device such as a phone.&lt;/p&gt;
&lt;p&gt;—— 摘自 &lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/Home.html"&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo npm -g install weinre
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;启动服务端&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;weinre --boundHost 0.0.0.0 --httpPort 8081
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开本地浏览器，访问 &lt;a href="http://localhost:8081"&gt;http://localhost:8081&lt;/a&gt; 可以看到一个 web 界面：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_7.png" /&gt;         &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Snip20151117_8.png" /&gt;&lt;/p&gt;
&lt;h2&gt;在待调试的页面中注入 weinre 代码&lt;/h2&gt;
&lt;p&gt;在页面中引入一个脚本就可以了，本例中是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://本机ip:8081/target/target-script-min.js#anonymous&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;远程调试&lt;/h2&gt;
&lt;p&gt;打开 &lt;a href="http://localhost:8081/client/#anonymous"&gt;http://localhost:8081/client/#anonymous&lt;/a&gt; 在这个页面进行调试:&lt;/p&gt;
&lt;p&gt;我们随便找一个公众号比如“语音云开放平台”，然后向这个公众号内的登录页面注入 &lt;code&gt;weinre&lt;/code&gt; 代码，
然后，我们就可以看到打开的页面了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-17-26_com.tencent.mm.png" /&gt;          &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Snip20151117_9.png" /&gt;         &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Snip20151117_10.png" /&gt;&lt;/p&gt;
&lt;h2&gt;修改 html&lt;/h2&gt;
&lt;p&gt;在调试页面内修改 html 内容会直接反映到移动端：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_13.png" /&gt;        &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-23-23_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;h2&gt;修改 css&lt;/h2&gt;
&lt;p&gt;比如修改 &lt;code&gt;background-color&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_14.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-25-12_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;h2&gt;执行 javascript&lt;/h2&gt;
&lt;p&gt;原先隐藏的菜单：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-18-16_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以在调试页面控制台里执行 javascript 把菜单显示出来：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_11.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-20-31_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;alert:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/static/images/weinre/Snip20151117_15.png" /&gt;       &lt;br /&gt;
&lt;img alt="" src="/static/images/weinre/Screenshot_2015-11-17-14-26-05_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;更多内容请查阅 &lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/"&gt;官方文档&lt;/a&gt; ;)&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://people.apache.org/~pmuellr/weinre-docs/latest/"&gt;weinre 官网&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="wechat"></category><category term="微信"></category><category term="weinre"></category><category term="移动端开发"></category></entry><entry><title>使用 mitmproxy 搭建代理服务器的方式来调试微信开发</title><link href="https://mozillazg.com/2015/11/how-to-debug-wechat-web-page-with-mitmproxy.html" rel="alternate"></link><updated>2015-11-16T19:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-11-16:2015/11/how-to-debug-wechat-web-page-with-mitmproxy.html</id><summary type="html">&lt;p&gt;&lt;img alt="6adc8d35564a0044d1cec9e225f38794.png" src="/static/images/mitmproxy/6adc8d35564a0044d1cec9e225f38794.png" /&gt;&lt;/p&gt;
&lt;p&gt;图片来源：&lt;a class="reference external" href="https://blog.selectel.ru/analiz-http-trafika-s-mitmproxy/"&gt;https://blog.selectel.ru/analiz-http-trafika-s-mitmproxy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲述如何使用代理服务器的方式本地调试已上线的
微信公众号内的网页。&lt;/p&gt;
&lt;p&gt;因为已经上线了，所以不能随便在线上服务器上修改代码增加 alert 之类的代码，也不能在线上启用 debug 模式。
所以，我们要通过在本地搭建代理服务器的方式来修改服务端返回
的信息，比如：将 jssdk 的调用改为 debug 模式，
替换页面内容为本地修改后的内容等等&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;mitmproxy 介绍&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;mitmproxy is a console tool that allows interactive examination and modification of HTTP traffic. It differs from mitmdump in that all flows are kept in memory, which means that it’s intended for taking and manipulating small-ish samples. Use the ? shortcut key to view, context-sensitive documentation from any mitmproxy screen.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;— 摘自 &lt;a class="reference external" href="http://docs.mitmproxy.org/en/latest/mitmproxy.html"&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;安装 mitmproxy&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们这里使用 mitmproxy 在 github 上的最新代码&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone git&amp;#64;github.com:mitmproxy/mitmproxy.git --depth=1
$ cd mitmproxy
$ virtualenv venv
$ source venv/bin/activate
$ pip install .
$
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-word"&gt;
&lt;h2 id="hidhello-word"&gt;hello word&lt;a class="headerlink" href="#hidhello-word" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;直接执行 &lt;tt class="docutils literal"&gt;mitmproxy&lt;/tt&gt; 命令就会启动一个监听 &lt;tt class="docutils literal"&gt;0.0.0.0:8080&lt;/tt&gt; 的代理服务器:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snip20151116_1.png" src="/static/images/mitmproxy/Snip20151116_1.png" /&gt;
&lt;img alt="Snip20151116_2.png" src="/static/images/mitmproxy/Snip20151116_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是这个服务器不会修改任何服务器的返回内容，所以我们需要另一种启动方式 &lt;tt class="docutils literal"&gt;mitmproxy &lt;span class="pre"&gt;-s&lt;/span&gt; script.py&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;script.py 的内容如下，作用是将任意页面的响应改为 &lt;tt class="docutils literal"&gt;hello world&lt;/tt&gt; :&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'hello world'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;执行 &lt;tt class="docutils literal"&gt;mitmproxy &lt;span class="pre"&gt;-s&lt;/span&gt; script.py&lt;/tt&gt; 启动代理服务器，然后在手机上配置好 wifi 代理。
现在在手机浏览器上访问任意网页都将显示 &lt;tt class="docutils literal"&gt;hello world&lt;/tt&gt; :)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Snip20151116_4.png" src="/static/images/mitmproxy/Snip20151116_4.png" /&gt;
&lt;img alt="Screenshot_2015-11-16-16-48-38_com.tencent.mm.png" src="/static/images/mitmproxy/Screenshot_2015-11-16-16-48-38_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面我就讲几个微信开发中应该会用到的调试方式（以 “语音云开放平台”这个公众号为例）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wx-config-debug-true"&gt;
&lt;h2 id="hidwx-config-debug-true"&gt;修改 wx.config, 将 debug 参数改为 true&lt;a class="headerlink" href="#hidwx-config-debug-true" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上线后的公众号网页内的 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt; 中 &lt;tt class="docutils literal"&gt;debug&lt;/tt&gt; 参数的值都是 &lt;tt class="docutils literal"&gt;false&lt;/tt&gt;，
既然我要调试问题自然就要开启调试模式了。&lt;/p&gt;
&lt;p&gt;比如修改【我的应用】-【个人资料】这个页面的 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt;。
通过 mitmproxy 搭建的代理服务器，我们找到了 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt; 所在文件：
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://wx.openspeech.cn/xfyun-wx/userInfo/xxx&lt;/span&gt;&lt;/tt&gt;，查看源码发现 &lt;tt class="docutils literal"&gt;wx.config&lt;/tt&gt; 的代码片段如下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;script&amp;gt;
if(typeof wx != &amp;quot;undefined&amp;quot;){
    wx.config({
        debug : false,
        appId : '',
        timestamp : '',
        nonceStr : '',
        signature : ''
        jsApiList : [ 'checkJsApi', 'hideMenuItems', 'hideOptionMenu',
                'showOptionMenu', 'hideAllNonBaseMenuItem','onMenuShareAppMessage','onMenuShareTimeline' ]
    });
}
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;知道了这个后，我们就可以修改 &lt;tt class="docutils literal"&gt;debug&lt;/tt&gt; 参数了。修改后的 &lt;tt class="docutils literal"&gt;script.py&lt;/tt&gt; 内容如下&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re

from libmproxy.models import decoded


def response(context, flow):
    with decoded(flow.response):
        if flow.request.path.startswith('/xfyun-wx/userInfo/'):
            body = flow.response.content
            flow.response.content = re.sub(
                r'{\s*debug\s*:\s*false,', '{debug:true,', body
            )
&lt;/pre&gt;
&lt;p&gt;按 &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; 退出先有的代理服务器，然后重新启动代理服务器：&lt;tt class="docutils literal"&gt;mitmproxy &lt;span class="pre"&gt;-s&lt;/span&gt; script.py&lt;/tt&gt;。
效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot_2015-11-16-18-15-49_com.tencent.mm.png" src="/static/images/mitmproxy/Screenshot_2015-11-16-18-15-49_com.tencent.mm.png" /&gt;
&lt;img alt="Screenshot_2015-11-16-18-16-00_com.tencent.mm.png" src="/static/images/mitmproxy/Screenshot_2015-11-16-18-16-00_com.tencent.mm.png" /&gt;&lt;/p&gt;
&lt;p&gt;我好像帮他们发现了一个 bug ;)&lt;/p&gt;
&lt;p&gt;下面我再举一些例子，更多例子请参考 &lt;a class="reference external" href="https://github.com/mitmproxy/mitmproxy/tree/master/examples"&gt;官方仓库的 example 目录&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;禁用本地缓存&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
def request(context, flow):
    headers = flow.request.headers
    for key in ['If-None-Match', 'If-Modified-Since']:
        headers.pop(key, None)
&lt;/pre&gt;
&lt;p&gt;如果这样还不行的话，可以尝试修改 response：替换 headers 以及修改 html 中与 cache 有关的 meta 标签内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;替换为本地文件内容&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
def response(context, flow):
    if flow.request.pretty_url == 'http://www.baidu.com':
        with decoded(flow.response):
            with open('baidu.html') as f:
                flow.response.content = f.read()
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;终止连接&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
def request(context, flow):
    if flow.request.path.startswith('/static/images/'):
        context.kill_flow(flow)
&lt;/pre&gt;
&lt;p&gt;更详细的用法请查阅 &lt;a class="reference external" href="http://docs.mitmproxy.org/en/stable/scripting/inlinescripts.html"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.mitmproxy.org/en/stable/index.html"&gt;mitmproxy 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mitmproxy/mitmproxy"&gt;https://github.com/mitmproxy/mitmproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="wechat"></category><category term="微信"></category><category term="mitmproxy"></category><category term="python"></category><category term="移动端开发"></category></entry><entry><title>JSON Web Token (JWT) 简介</title><link href="https://mozillazg.com/2015/06/hello-jwt.html" rel="alternate"></link><updated>2015-06-30T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-06-24:2015/06/hello-jwt.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/rfc7519"&gt;JSON Web Token (JWT)&lt;/a&gt;
是一种基于 token 的认证方案。&lt;/p&gt;
&lt;div class="section" id="json-web-token"&gt;
&lt;h2 id="hidjson-web-token"&gt;JSON Web Token 的结构&lt;a class="headerlink" href="#hidjson-web-token" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一个 JWT token 看起来是这样的:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjEzODY4OTkxMzEsImlzcyI6ImppcmE6MTU0ODk1OTUiLCJxc2giOiI4MDYzZmY0Y2ExZTQxZGY3YmM5MGM4YWI2ZDBmNjIwN2Q0OTFjZjZkYWQ3YzY2ZWE3OTdiNDYxNGI3MTkyMmU5IiwiaWF0IjoxMzg2ODk4OTUxfQ.uKqU9dTB6gKwG6jQCuXYAiMNdfNRw98Hw_IWuA5MaMo
&lt;/pre&gt;
&lt;p&gt;可以简化为下面这样的结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
base64url_encode(Header) + '.' + base64url_encode(Claims) + '.' + base64url_encode(Signature)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="header"&gt;
&lt;h2 id="hidheader"&gt;Header&lt;a class="headerlink" href="#hidheader" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Header 包含了一些元数据，至少会表明 token 类型以及 签名方法。比如&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
      &amp;quot;typ&amp;quot; : &amp;quot;JWT&amp;quot;,
      &amp;quot;alg&amp;quot; : &amp;quot;HS256&amp;quot;
}
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;type&lt;/tt&gt;: 必需。token 类型，&lt;tt class="docutils literal"&gt;JWT&lt;/tt&gt; 表示是 JSON Web Token.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;alg&lt;/tt&gt;: 必需。token 所使用的签名算法，可用的值在 &lt;a class="reference external" href="http://tools.ietf.org/html/rfc7518#section-3.1"&gt;这里&lt;/a&gt; 有规定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="claims-payload"&gt;
&lt;h2 id="hidclaims-payload"&gt;Claims (Payload)&lt;a class="headerlink" href="#hidclaims-payload" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Claims 部分包含了一些跟这个 token 有关的重要信息。
JWT 标准规定了一些字段，下面节选一些字段:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;iss&lt;/tt&gt;: The issuer of the token，token 是给谁的&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;sub&lt;/tt&gt;: The subject of the token，token 主题&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;exp&lt;/tt&gt;: Expiration Time。 token 过期时间，Unix 时间戳格式&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;iat&lt;/tt&gt;: Issued At。 token 创建时间， Unix 时间戳格式&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;jti&lt;/tt&gt;: JWT ID。针对当前 token 的唯一标识&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了规定的字段外，可以包含其他任何 JSON 兼容的字段。&lt;/p&gt;
&lt;p&gt;Payload 示例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
    &amp;quot;iss&amp;quot;: &amp;quot;mozillazg.com&amp;quot;,
    &amp;quot;exp&amp;quot;: 1435055117,
    &amp;quot;user_id&amp;quot;: 1,
    &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="signature"&gt;
&lt;h2 id="hidsignature"&gt;Signature&lt;a class="headerlink" href="#hidsignature" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JWT 标准遵照 JSON Web Signature (JWS) 标准来生成签名。签名主要用于验证 token 是否有效，是否被篡改。 签名时可以 这些算法进行签名，比如 HMAC SHA-256:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
content = base64url_encode(Header) + '.' + base64url_encode(Claims)
signature = hmacsha256.hash(content)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;说到这里有一点需要特别注意的是，默认情况下，JWT 中信息都是明文的，即 Claims 的内容并没有
被加密，可以通过 base64url_decode(text) 的方式解码得到 Claims&lt;/strong&gt; 。
所以，不要在 Claims 里包含敏感信息，如果一定要包含敏感信息的话，记得先将 Claims 的内容进行加密（比如，使用 JSON Web Encryption (JWE) 标准进行加密）
然后在进行 base64url_encode 操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2 id="hidpython"&gt;Python 实现&lt;a class="headerlink" href="#hidpython" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;已有的轮子&lt;/strong&gt;: 上 PyPI 上 &lt;a class="reference external" href="https://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=JWT&amp;amp;submit=search"&gt;搜索 JWT&lt;/a&gt; 即可。
用的比较多是 &lt;a class="reference external" href="https://pypi.python.org/pypi/PyJWT/"&gt;PyJWT&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手动简单实现&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import base64
import json
import hashlib
import hmac


def base64url_encode(s):
    return base64.urlsafe_b64encode(s).replace('=', '')

headers = json.dumps({
    &amp;quot;typ&amp;quot; : &amp;quot;JWT&amp;quot;,
    &amp;quot;alg&amp;quot; : &amp;quot;HS256&amp;quot;
})
claims = json.dumps({
    &amp;quot;iss&amp;quot;: &amp;quot;mozillazg.com&amp;quot;,
    &amp;quot;exp&amp;quot;: 1435055117,
    &amp;quot;user_id&amp;quot;: 1,
    &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
})
content = base64url_encode(headers) + '.' + base64url_encode(claims)
secret_key = 'your secret key'
signature = hmac.new(secret_key, content, hashlib.sha256).digest()

token = content + '.' + base64url_encode(signature)
&lt;/pre&gt;
&lt;p&gt;最后得到的 token 的值是&lt;/p&gt;
&lt;pre class="literal-block"&gt;
eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJpc3MiOiAibW96aWxsYXpnLmNvbSIsICJmb28iOiAiYmFyIiwgInVzZXJfaWQiOiAxLCAiZXhwIjogMTQzNTA1NTExN30.iFAK1B-6xRlmlSHnS2P24wsS6Ko6iZjbSPHdldzIhp4
&lt;/pre&gt;
&lt;p&gt;之所以用 &lt;tt class="docutils literal"&gt;base64url_encode&lt;/tt&gt; 而不是 &lt;tt class="docutils literal"&gt;base64.b64encode&lt;/tt&gt; 是因为 token 可能会被用作 url 参数，
而 base64 中的 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt;， &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;， &lt;tt class="docutils literal"&gt;=&lt;/tt&gt; 在 url 里被转义成 &lt;tt class="docutils literal"&gt;%2B&lt;/tt&gt; &lt;tt class="docutils literal"&gt;%2F&lt;/tt&gt; &lt;tt class="docutils literal"&gt;%3D&lt;/tt&gt;，导致 token 的值变得更长了，所以这里使用 base64url 即进行如下替换 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; -&amp;gt; &lt;tt class="docutils literal"&gt;-&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; -&amp;gt; &lt;tt class="docutils literal"&gt;_&lt;/tt&gt;, 删除 &lt;tt class="docutils literal"&gt;=&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;再次提示， &lt;strong&gt;claims 的值并没有被加密&lt;/strong&gt;，就算不知道 secert_key 的值也可以得到 claims 的值。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jwt.io/"&gt;http://jwt.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html"&gt;http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html"&gt;https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about"&gt;http://www.intridea.com/blog/2013/11/7/json-web-token-the-useful-little-standard-you-haven-t-heard-about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/"&gt;https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs"&gt;http://www.toptal.com/web/cookie-free-authentication-with-json-web-tokens-an-example-in-laravel-and-angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://scotch.io/tutorials/the-anatomy-of-a-json-web-token"&gt;https://scotch.io/tutorials/the-anatomy-of-a-json-web-token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpadilla/pyjwt/"&gt;https://github.com/jpadilla/pyjwt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/JSON_Web_Token"&gt;https://en.wikipedia.org/wiki/JSON_Web_Token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tools.ietf.org/html/rfc7519"&gt;http://tools.ietf.org/html/rfc7519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Base64#URL_applications"&gt;https://en.wikipedia.org/wiki/Base64#URL_applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://tools.ietf.org/html/rfc4648#section-5"&gt;https://tools.ietf.org/html/rfc4648#section-5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="jwt"></category></entry><entry><title>[JavaScript] 使用 flotr2 绘制包含子项的饼图</title><link href="https://mozillazg.com/2013/12/flotr2-pie-chart-with-broken-down-slices.html" rel="alternate"></link><updated>2013-12-05T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-12-05:2013/12/flotr2-pie-chart-with-broken-down-slices.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.humblesoftware.com/flotr2/"&gt;Flotr2&lt;/a&gt; 是一个用于绘制 HTML5 图形和图表的开源 JS 库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 flotr2 不支持环形饼图，所以对于包含子项的饼图只能通过其他办法来实现。&lt;/p&gt;
&lt;p&gt;我的实现方法是，首先显示最外层的饼图，再通过点击某一个项显示它包含的子项的饼图。
具体代码请见：&lt;/p&gt;
&lt;iframe width="100%" height="350" src="http://jsfiddle.net/M8rT7/embedded/" allowfullscreen="allowfullscreen" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;当然，由于 flotr2 的局限性，这个图并不完美。如果想要更好的效果，
可以试试其他的 JS 图表插件实现的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.highcharts.com/demo/pie-donut"&gt;Highcharts - Donut chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amcharts.com/javascript-charts/pie-chart-with-broken-down-slice/"&gt;Pie chart with broken down slices | amCharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bl.ocks.org/kerryrodden/7090426"&gt;Sequences sunburst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="javascript"></category><category term="flotr2"></category></entry><entry><title>[javascript]列出对象所有属性</title><link href="https://mozillazg.com/2013/05/javascript-list-object-all-properties.html" rel="alternate"></link><updated>2013-05-23T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2013-05-23:2013/05/javascript-list-object-all-properties.html</id><summary type="html">&lt;p&gt;当我们想知道某个对象拥有哪些的属性时，可以用下面的方法（现代浏览器）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法对于我们使用第三方 javascript 插件，而该插件的文档不是很详细时有很大的帮助&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;trackFormatter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;properties:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="console debug object properties image" src="/static/images/2013-05-23_01.png" /&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object"&gt;json - How to list the properties of a javascript object - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="javascript"></category><category term="web"></category></entry></feed>