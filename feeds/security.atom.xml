<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Huang Huang 的博客</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/security.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2021-04-03T00:00:00+00:00</updated><entry><title>《浅析软件供应链攻击之包抢注低成本钓鱼》阅读笔记</title><link href="https://mozillazg.com/2021/04/security-the-way-of-sofeware-supply-chain-attack-notes-01.html" rel="alternate"></link><updated>2021-04-03T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2021-04-03:2021/04/security-the-way-of-sofeware-supply-chain-attack-notes-01.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;本文是 &lt;a class="reference external" href="https://mp.weixin.qq.com/s/JWSjKZWyuSvXdzYhU0INmQ"&gt;浅析软件供应链攻击之包抢注低成本钓鱼&lt;/a&gt;
这篇文章的阅读笔记。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;软件供应链攻击方法&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;产品开发阶段&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;源代码编译遭攻击污染：IDE 污染、日常开发和运维工具被入侵置入病毒和后门&lt;/li&gt;
&lt;li&gt;供应商预留后门：vpn、笔记本、chrome 插件等日常工具预置后门&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;产品分发阶段&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;捆绑下载，正常软件被捆绑了恶意代码&lt;/li&gt;
&lt;li&gt;下载劫持，包括官网下载链接遭替换、HTTP流量/域名劫持等中间人劫持、P2P缓存毒化劫持等&lt;/li&gt;
&lt;li&gt;依赖包抢注：抢注相似包名、抢注企业内部包名&lt;ul&gt;
&lt;li&gt;开发者没有及时到官方源注册包名，造成攻击者可以抢先注册&lt;/li&gt;
&lt;li&gt;开发者生成依赖配置文件引用了官方源不存在的包&lt;/li&gt;
&lt;li&gt;开发者包命名不够规范，造成使用者容易被误导&lt;/li&gt;
&lt;li&gt;使用者安装知名软件时，根据直觉直接敲打广为人知的名称，但实际上官方包另有其名&lt;/li&gt;
&lt;li&gt;使用者在使用命令行手敲安装包名时，漏敲或多敲或错敲个别字符，或不经意粘贴其他内容，造成安装恶意软件包&lt;/li&gt;
&lt;li&gt;开发者错误指引或使用者错误使用不安全的安装选项&lt;/li&gt;
&lt;li&gt;攻击者抢注包名的一些手段:&lt;ul&gt;
&lt;li&gt;分析官方源库全部包名称&lt;/li&gt;
&lt;li&gt;分析软件包的引用方式&lt;/li&gt;
&lt;li&gt;分析GitHub开源项目的名称、README.md、依赖关系文件&lt;/li&gt;
&lt;li&gt;挖掘网站泄露信息&lt;/li&gt;
&lt;li&gt;直接抢注知名软件名称、常见名词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物流链劫持，硬件产品（比如服务器、笔记本、U盘等）在物理运输过程中被调包或加料植入木马后门&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3 id="hidid6"&gt;产品使用阶段&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;升级更新劫持，包括官网升级程序被替换，HTTP流量/域名劫持等中间人劫持&lt;/li&gt;
&lt;li&gt;官方云控作恶，官方下发命令操控用户主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;软件供应链攻击应对防范措施&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;安全人员&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;企业内部维护可信软件仓库，尽量减少企业人员从各种未知渠道下载软件。&lt;/li&gt;
&lt;li&gt;监测服务器和PC运行软件的异常操作和流量，甚至提前对软件进行沙盒检测，主动发现潜在隐患。&lt;/li&gt;
&lt;li&gt;全面梳理和维护企业在用软硬件信息，在供应链攻击曝光时做到快速止损定损。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;开发人员&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用官方渠道下载的IDE；软件分发及升级采用HTTPS等加密传输；避免内置远程控制能力；定期自检官网代码和执行程序是否存在恶意篡改。&lt;/li&gt;
&lt;li&gt;关于防范包抢注攻击：对于企业内部包，可以及时到PyPI/NPM/RubyGems等官方源注册包名（可以上传空包占位以免内部代码泄露），防止企业自身遭遇抢注攻击；对于开源包，也及时到官方源注册并上传最新代码，既方便用户也能防止用户遭遇攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3 id="hidid10"&gt;使用人员&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;始终保持任何外来软件都不是完全安全可信的态度，优先选择知名有口碑有安全意识的软件。&lt;/li&gt;
&lt;li&gt;关于防范包抢注攻击：安装软件时务必谨慎，按照官方指引确保安装方式正确，如命令行手敲命令时注意拼写准确，以防一不小心机器就成肉鸡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="软件供应链安全"></category><category term="supply-chain-security"></category></entry><entry><title>软件供应链安全之软件依赖替代攻击</title><link href="https://mozillazg.com/2021/03/security-the-way-of-sofeware-supply-chain-attack-about-dependencies-substitution-attack.html" rel="alternate"></link><updated>2021-03-21T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2021-03-21:2021/03/security-the-way-of-sofeware-supply-chain-attack-about-dependencies-substitution-attack.html</id><summary type="html">&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;前言&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;记录一下软件供应链攻击中软件依赖的替代攻击方法。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;替代攻击&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一般公司内都会开发一些内部依赖包，即项目的依赖中会即包括外部依赖包也包括内部依赖包。
公司内部的软件包索引系统一般会回源到上游系统（
公共包索引系统，比如 PyPI、npm，可能会使用多个上游，比如同时使用多个 mirror 和官方的索引系统）。&lt;/p&gt;
&lt;p&gt;替代攻击指的是攻击者在公共包索引系统中注册一个跟内部包同名/拼写相似的软件包，然后等待有人安装这个同名/拼写相似的软件包：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;比如恶意包版本特别高，如果项目中依赖的内部包未指定特定版本，在安装依赖时可能会出现回源/上翻从而安装了恶意包&lt;/li&gt;
&lt;li&gt;内部索引系统或上游系统删了某个软件包/版本，但是实际上还有项目在用，这些项目可能会因此安装上恶意包&lt;/li&gt;
&lt;li&gt;内部索引系统异常，出现了非预期的内部包回源现象&lt;/li&gt;
&lt;li&gt;有些包的名字非常容易出现拼写错误，安装时如果不注意的话，就容易安装上非预期的恶意包&lt;/li&gt;
&lt;li&gt;有些软件在索引系统中使用的包名字跟代码里实际使用的名字不一样，攻击者注册了这个代码里的这个名字&lt;/li&gt;
&lt;li&gt;回源到某个上游系统时，上游系统在某一时间段出现过域名过期，然后被攻击者抢注了域名&lt;/li&gt;
&lt;li&gt;恶意包虽然被上游系统删除了，但是内部系统中有缓存&lt;/li&gt;
&lt;li&gt;使用的上游系统被入侵，攻击者替换了系统中的软件包&lt;/li&gt;
&lt;li&gt;依赖包的所有者的帐号被攻击者盗号，攻击者使用该帐号发布了恶意包&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.blog/2021-02-12-avoiding-npm-substitution-attacks/"&gt;Avoiding npm substitution attacks - The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://azure.microsoft.com/zh-cn/resources/3-ways-to-mitigate-risk-using-private-package-feeds/"&gt;azure.microsoft.com/en-us/resources/3-ways-to-mitigate-risk-using-private-package-feeds/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;alex.birsan/dependency-confusion-4a5d60fec610"&gt;Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies | by Alex Birsan | Feb, 2021 | Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="软件供应链安全"></category><category term="supply-chain-security"></category></entry></feed>