<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Huang Huang 的博客</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/k8s.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2020-06-07T00:00:00+00:00</updated><entry><title>kubernetes 用户扮演 API</title><link href="https://mozillazg.com/2020/06/k8s-kubernetes-kubectl-syntax-of-impersonate-as-user-or-serviceaccount-or-group.html" rel="alternate"></link><updated>2020-06-07T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2020-06-07:2020/06/k8s-kubernetes-kubectl-syntax-of-impersonate-as-user-or-serviceaccount-or-group.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;记录一下 kubernetes 中扮演另一个用户的 API 和用法（信息主要来自官方文档和源码）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2 id="hidapi"&gt;API&lt;a class="headerlink" href="#hidapi" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;请求 api server 的时候指定以下 http header 之一即可实现用户扮演的需求（当然，请求方必须有扮演该用户的权限） （信息来自 &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation"&gt;文档&lt;/a&gt; ）:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt;: 扮演的用户的用户名&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Group&lt;/span&gt;&lt;/tt&gt;: 扮演的用户组，多个值（出现多次）表示多个组，需要同时指定 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Extra-(&lt;/span&gt; extra name )&lt;/tt&gt;: 动态指定的 key，用于指定用户的其他信息，需要同时指定 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Impersonate-User: jane.doe&amp;#64;example.com
Impersonate-Group: developers
Impersonate-Group: admins
Impersonate-Extra-dn: cn=jane,ou=engineers,dc=example,dc=com
Impersonate-Extra-acme.com%2Fproject: some-project
Impersonate-Extra-scopes: view
Impersonate-Extra-scopes: development
&lt;/pre&gt;
&lt;div class="section" id="impersonate-user-impersonate-group"&gt;
&lt;h3 id="hidimpersonate-user-impersonate-group"&gt;Impersonate-User 和 Impersonate-Group 值的语法&lt;a class="headerlink" href="#hidimpersonate-user-impersonate-group" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt; 的值即可以是 User 也可以是 service account，对应的语法如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;lt;User&amp;gt;&lt;/tt&gt;: 普通的自定义 User ，比如 &lt;tt class="docutils literal"&gt;alice&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;bob&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system:serviceaccount:&amp;lt;namespace&amp;gt;:&amp;lt;serviceaccount&amp;gt;&lt;/span&gt;&lt;/tt&gt;: 某个 namespace 下的 service account，比如
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system:serviceaccount:kube-system:default&lt;/span&gt;&lt;/tt&gt; 表示 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kube-system&lt;/span&gt;&lt;/tt&gt; namespace 下的 &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; service account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Group&lt;/span&gt;&lt;/tt&gt; 的值即可以是普通的自定义 Group 也可以是系统内置的一些特定 group ，对应的语法如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;lt;Group&amp;gt;&lt;/tt&gt;: 普通的自定义 Group ，比如 &lt;tt class="docutils literal"&gt;admins&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;developers&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;system:authenticated&lt;/tt&gt;: 所有已认证用户&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;system:unauthenticated&lt;/tt&gt;: 所有未认证用户&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;system:serviceaccounts&lt;/tt&gt;: 所有 serviceaccount （无论是哪个 namespace 下的）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system:serviceaccounts:&amp;lt;namespace&amp;gt;&lt;/span&gt;&lt;/tt&gt; : 某个 namespace 下的所有 serviceaccount&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="kubectl"&gt;
&lt;h2 id="hidkubectl"&gt;kubectl&lt;a class="headerlink" href="#hidkubectl" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;kubectl 命令的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--as&lt;/span&gt;&lt;/tt&gt; 可以配置 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt; 的值， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--as-group&lt;/span&gt;&lt;/tt&gt; 可以配置
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Group&lt;/span&gt;&lt;/tt&gt; 的值，例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kubectl &lt;span class="pre"&gt;--as=system:serviceaccount:kube-system:default&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kubectl &lt;span class="pre"&gt;--as=superman&lt;/span&gt; &lt;span class="pre"&gt;--as-group=system:masters&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;配置扮演用户的权限&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;默认情况下大部分 user 或 serviceaccount 都是没有扮演用户的权限的，可以通过 RBAC 的方式配置权限。&lt;/p&gt;
&lt;p&gt;简单来说就是需要为发起扮演的用户绑定一个拥有 &lt;tt class="docutils literal"&gt;impersonate&lt;/tt&gt; 权限的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;可以扮演 user、group、serviceaccount 的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterRole&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;impersonator&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rules&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;serviceaccounts&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Extra-(&lt;/span&gt; extra name )&lt;/tt&gt; header 支持的 &lt;tt class="docutils literal"&gt;(extra name)&lt;/tt&gt; 也是需要绑定相应的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;比如下面的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 表示可以在扮演是设置 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Extra-scopes&lt;/span&gt;&lt;/tt&gt; header，其中的 &lt;tt class="docutils literal"&gt;scopes&lt;/tt&gt; 就是在下面的 &lt;tt class="docutils literal"&gt;resources&lt;/tt&gt; 里定义的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterRole&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scopes-impersonator&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rules&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# Can set &amp;quot;Impersonate-Extra-scopes&amp;quot; header.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authentication.k8s.io&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userextras/scopes&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时还可以通过 &lt;tt class="docutils literal"&gt;resourceNames&lt;/tt&gt; 的值限制 header 的有效值，例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterRole&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;limited-impersonator&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rules&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# Can impersonate the user &amp;quot;jane.doe@example.com&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resourceNames&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jane.doe@example.com&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Can impersonate the groups &amp;quot;developers&amp;quot; and &amp;quot;admins&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resourceNames&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;developers&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admins&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Can impersonate the extras field &amp;quot;scopes&amp;quot; with the values &amp;quot;view&amp;quot; and &amp;quot;development&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authentication.k8s.io&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userextras/scopes&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resourceNames&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;view&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation"&gt;Authenticating - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#referring-to-subjects"&gt;Using RBAC Authorization - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/56877489/what-is-the-syntax-for-kubectl-can-i-command"&gt;kubernetes - What is the syntax for kubectl can-i command? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/92eb072989eba22236d034b56cc2bf159dfb4915/staging/src/k8s.io/apiserver/pkg/endpoints/filters/impersonation.go#L41"&gt;kubernetes/impersonation.go at 92eb072989eba22236d034b56cc2bf159dfb4915 · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="kubernetes"></category><category term="k8s"></category><category term="kubectl"></category></entry><entry><title>太多的 service 信息环境变量可能会导致容器中执行 bash 命令特别的慢</title><link href="https://mozillazg.com/2020/06/kubernetes-k8s-too-many-service-environment-variables-cause-pod-container-start-bash-too-slow.html" rel="alternate"></link><updated>2020-06-06T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2020-06-06:2020/06/kubernetes-k8s-too-many-service-environment-variables-cause-pod-container-start-bash-too-slow.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当集群里创建了特别多的 service 时可能会导致容器中 bash 启动特别慢，原因是 service 相关的环境变量信息太多了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;解决方法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先说解决方法：可以考虑通过配置 pod spec 增加 &lt;tt class="docutils literal"&gt;enableServiceLinks: false&lt;/tt&gt; 禁用自动注入 service 信息到环境变量的方式来加速 bash 启动速度。 详见： &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/issues/60099"&gt;Service-environment variables should be optional · Issue #60099 · kubernetes/kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面再说一下 debug 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="debug"&gt;
&lt;h2 id="hiddebug"&gt;DEBUG&lt;a class="headerlink" href="#hiddebug" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过下面的 DEBUG 方法发现导致容器中执行 bash 特别慢是因为环境变量太多导致的。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;模拟环境&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;测试环境变量比较少的时候启动 bash 的时间:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ docker run -it --rm ubuntu:16.04 bash
# env |wc -l
8

# time bash -c exit

real        0m0.003s
user        0m0.000s
sys 0m0.000s
&lt;/pre&gt;
&lt;p&gt;可以看到启动速度是非常快的。下面模拟一下环境变量特别多的环境:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# for i in {1..10000}; do export &amp;quot;SERVICE_$i&amp;quot;=&amp;quot;$i&amp;quot;; done
# env |wc -l
10008
&lt;/pre&gt;
&lt;p&gt;看一下在环境变量特别多的环境下的 bash 启动时间:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# time bash -c exit

real        0m0.395s
user        0m0.380s
sys 0m0.000s
&lt;/pre&gt;
&lt;p&gt;可以看到速度慢了 100 多倍。&lt;/p&gt;
&lt;p&gt;下面来 debug 一下速度慢的真正原因，是否真的是环境变量特别多导致的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;debug 问题原因&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先安装一下 strace 命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt-get update
# apt-get install strace
&lt;/pre&gt;
&lt;p&gt;然后通过 strace 命令来对比不同启动时间下的差别 （实际上一般会先通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; 来统计系统调用时间，这里通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; 无法得到实际原因所以就没写这个步骤了）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# strace -T -o result_slow.log -- bash -c exit

# 实际场景下一般是到没有问题的容器中去获取 result_fast 的结果
# for i in {1..10000}; do unset &amp;quot;SERVICE_$i&amp;quot;; done
# strace -T -o result_fast.log -- bash -c exit
&lt;/pre&gt;
&lt;p&gt;通过对比 result_fast.log 和 result_slow.log 发现有个比较大的差别是 execve 系统调用的参数不一样并且花费的时间也有很大差别:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# result_slow.log
execve(&amp;quot;/bin/bash&amp;quot;, [&amp;quot;bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;exit&amp;quot;], [/* 10008 vars */]) = 0 &amp;lt;0.002256&amp;gt;

# result_fast.log
execve(&amp;quot;/bin/bash&amp;quot;, [&amp;quot;bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;exit&amp;quot;], [/* 8 vars */]) = 0 &amp;lt;0.000345&amp;gt;
&lt;/pre&gt;
&lt;p&gt;通过查看 &lt;a class="reference external" href="https://man7.org/linux/man-pages/man2/execve.2.html"&gt;文档&lt;/a&gt; 可知 &lt;tt class="docutils literal"&gt;execve&lt;/tt&gt; 系统调用的第三个参数传入的是环境变量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int execve(const char *pathname, char *const argv[],
           char *const envp[]);
&lt;/pre&gt;
&lt;p&gt;也就是环境变量的数量不一样导致 execve 所花的时间有很大差异。可以通过执行 strace 命令的时候加一个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt; 参数来查看这个 &lt;tt class="docutils literal"&gt;/* 10008 vars */&lt;/tt&gt; 的具体内容来验证:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
execve(&amp;quot;/bin/bash&amp;quot;, [&amp;quot;bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;exit&amp;quot;], [&amp;quot;SERVICE_9928=9928&amp;quot;, &amp;quot;SERVICE_9911=9911&amp;quot;, ... , &amp;quot;SERVICE_76=76&amp;quot;, &amp;quot;_=/usr/bin/strace&amp;quot;]) = 0 &amp;lt;0.001230&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;总结&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当集群里创建了特别多的 service 并且介意由此导致的 bash 启动特别慢的问题时，可以考虑通过配置 pod spec 增加 &lt;tt class="docutils literal"&gt;enableServiceLinks: false&lt;/tt&gt; 禁用自动注入 service 信息到环境变量的方式来加速 bash 启动速度。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/issues/60099"&gt;Service-environment variables should be optional · Issue #60099 · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/03/linux-debug-with-strace-cookbook-examples.html"&gt;strace 常用操作 - Huang Huang 的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://man7.org/linux/man-pages/man2/execve.2.html"&gt;execve(2) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="k8s"></category><category term="kubernetes"></category><category term="bash"></category></entry><entry><title>当有多个可用的 Pod Security Policy 时 k8s 的 PSP 选择策略</title><link href="https://mozillazg.com/2020/05/k8s-kubernetes-use-which-psp-when-there-are-multiple-pod-security-policies.html" rel="alternate"></link><updated>2020-05-17T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2020-05-17:2020/05/k8s-kubernetes-use-which-psp-when-there-are-multiple-pod-security-policies.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录一下，当有多个可用的 psp 时，k8s 会为当前 pod 选择哪个 psp，即 psp 的选择策略是啥。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;官方文档的介绍&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/#policy-order"&gt;官方文档&lt;/a&gt; 对这种情况的介绍如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Policy Order&lt;/p&gt;
&lt;p&gt;In addition to restricting pod creation and update, pod security policies can also be used to provide default values for many of the fields that it controls. When multiple policies are available, the pod security policy controller selects policies according to the following criteria:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;PodSecurityPolicies which allow the pod as-is, without changing defaults or mutating the pod, are preferred. The order of these non-mutating PodSecurityPolicies doesn’t matter.&lt;/li&gt;
&lt;li&gt;If the pod must be defaulted or mutated, the first PodSecurityPolicy (ordered by name) to allow the pod is selected.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note: During update operations (during which mutations to pod specs are disallowed) only non-mutating PodSecurityPolicies are used to validate the pod.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说就是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;优先考虑不用修改默认值（修改 pod/container 的 securityContext 值）或改变 pod spec（增加安全相关注解等） 的 psp（详见 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/af0e1319c35fa143ef6dcb891d753099b6ac1e4b/pkg/security/podsecuritypolicy/provider.go#L67"&gt;源码&lt;/a&gt;  &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/af0e1319c35fa143ef6dcb891d753099b6ac1e4b/pkg/security/podsecuritypolicy/provider.go#L128"&gt;源码&lt;/a&gt; ），如果没有满足不变条件的 psp 则选择按名称从小到大(a-z)排序后的第一个 psp。&lt;/li&gt;
&lt;li&gt;当然，还有一个没有明说的策略是，可供选择的 psp 必须满足 pod 声明所需的安全相关需求（securityContext 中定义的），对于不满足需求的 psp 自然是直接就过滤掉了不会参与上面的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们来做一些实验来验证这几个选择策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;按名称排序选择第一个&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，我们定义以下两个 PSP 并且配置 default namespace 的 psp serviceaccount 可以使用这两个 psp （假设文件名叫 psp.yaml）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-a
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-b
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: psp:test
  namespace: default
rules:
- apiGroups:
  - policy
  resourceNames:
  - psp-b
  - psp-a
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: psp:test:binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: psp:test
subjects:
  - kind: ServiceAccount
    name: psp
    namespace: default
&lt;/pre&gt;
&lt;p&gt;应用一下上面的 yaml 文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl create sa psp
serviceaccount/psp created
$ kubectl apply -f psp.yaml
podsecuritypolicy.policy/psp-a created
podsecuritypolicy.policy/psp-b created
role.rbac.authorization.k8s.io/psp:test created
rolebinding.rbac.authorization.k8s.io/psp:test:binding created
$ kubectl get psp
NAME    PRIV    CAPS   SELINUX    RUNASUSER   FSGROUP    SUPGROUP   READONLYROOTFS   VOLUMES
psp-a   false          RunAsAny   RunAsAny    RunAsAny   RunAsAny   false            configMap,emptyDir,secret
psp-b   false          RunAsAny   RunAsAny    RunAsAny   RunAsAny   false            configMap,emptyDir,secret
&lt;/pre&gt;
&lt;p&gt;然后创建一个 deployment，看看出来的 pod 实际会用哪个 psp （假设文件名称叫 deployment.yaml）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: test
  name: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test
  template:
    metadata:
      labels:
        app: test
    spec:
      serviceAccountName: psp
      containers:
      - image: busybox
        name: busybox
        command:
          - sleep
          - &amp;quot;233666&amp;quot;
&lt;/pre&gt;
&lt;p&gt;创建 deployment 并查看生成的 pod 使用的 psp:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl apply -f deployment.yaml
deployment.apps/test created
$ kubectl get pod -l app=test
NAME                    READY   STATUS              RESTARTS   AGE
test-7ff7bc8569-s9487   0/1     ContainerCreating   0          12s
$ kubectl get pod test-7ff7bc8569-s9487 -o jsonpath='{.metadata.annotations}'
map[kubernetes.io/psp:psp-a seccomp.security.alpha.kubernetes.io/pod:docker/default]
&lt;/pre&gt;
&lt;p&gt;通过 pod 的注解我们可以知道这个 pod 使用的 psp 是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; ， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 两个定义的 psp 策略完全一样，当时却使用了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; 符合第二个按名称排序选择第一个的选择策略。&lt;/p&gt;
&lt;p&gt;下面我们来验证一下第一个策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pod-psp"&gt;
&lt;h2 id="hidpod-psp"&gt;优先考虑不用修改默认值或改变 pod 的 psp&lt;a class="headerlink" href="#hidpod-psp" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;前面定义的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 中的注解 &lt;tt class="docutils literal"&gt;seccomp.security.alpha.kubernetes.io/defaultProfileName&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;seccomp.security.alpha.kubernetes.io/allowedProfileNames&lt;/tt&gt; 就是一个会改变 pod 的规则，下面删除一下 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 中的这两个注解，按照选择策略，这次应该会使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 这个 psp。&lt;/p&gt;
&lt;p&gt;修改 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 删除 seccomp 注解:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-a
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-b
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: psp:test
  namespace: default
rules:
- apiGroups:
  - policy
  resourceNames:
  - psp-b
  - psp-a
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: psp:test:binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: psp:test
subjects:
  - kind: ServiceAccount
    name: psp
    namespace: default
&lt;/pre&gt;
&lt;p&gt;更新一下已有的 psp:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl apply -f psp.yaml
podsecuritypolicy.policy/psp-a configured
podsecuritypolicy.policy/psp-b configured
role.rbac.authorization.k8s.io/psp:test unchanged
rolebinding.rbac.authorization.k8s.io/psp:test:binding unchanged
&lt;/pre&gt;
&lt;p&gt;还是使用前面的 deployment.yaml 来测试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl delete -f deployment.yaml
deployment.apps &amp;quot;test&amp;quot; deleted
$ kubectl apply -f deployment.yaml
deployment.apps/test created
$ kubectl get pod -l app=test
NAME                    READY   STATUS              RESTARTS   AGE
test-7ff7bc8569-bc62g   0/1     ContainerCreating   0          8s
$ kubectl get pod test-7ff7bc8569-bc62g -o jsonpath='{.metadata.annotations}'
map[kubernetes.io/psp:psp-b]
&lt;/pre&gt;
&lt;p&gt;可以看到，这次确实是使用了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 这个 psp，验证了第一个选择策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/#policy-order"&gt;Pod Security Policies - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://banzaicloud.com/blog/pod-security-policy/"&gt;An illustrated deepdive into Pod Security Policies · Banzai Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"&gt;Configure Service Accounts for Pods - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/92ea33efc509052b208e094390a363c5dbd21b7c/plugin/pkg/admission/security/podsecuritypolicy/admission.go"&gt;kubernetes/admission.go at 92ea33efc509052b208e094390a363c5dbd21b7c · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/af0e1319c35fa143ef6dcb891d753099b6ac1e4b/pkg/security/podsecuritypolicy/provider.go"&gt;kubernetes/provider.go at af0e1319c35fa143ef6dcb891d753099b6ac1e4b · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="k8s"></category><category term="kubernetes"></category><category term="psp"></category><category term="pod-security-policy"></category></entry></feed>