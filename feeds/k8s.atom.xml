<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mozillazg's blog</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/k8s.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2021-07-31T00:00:00+00:00</updated><entry><title>echo-k8s-webhook: 记录 k8s Admission Webhook 的请求内容</title><link href="https://mozillazg.com/2021/07/introduce-echo-k8s-webhook-project.html" rel="alternate"></link><updated>2021-07-31T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2021-07-31:2021/07/introduce-echo-k8s-webhook-project.html</id><summary type="html">&lt;p&gt;最近开发了一个项目可以用来记录 k8s Admission Webhook 中 apiserver 调用 webhook server 时发送的请求内容，
用于辅助开发 Admission Webhook 组件或依赖需要了解各种资源变更时的 webhook 请求内容的需求（比如对于 Policy 类型的 webhook 我们需要事先知道各种资源的变更请求的内容，以便基于请求内容来写相应的 policy 逻辑）：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mozillazg/echo-k8s-webhook"&gt;https://github.com/mozillazg/echo-k8s-webhook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体使用方法详见项目 README。&lt;/p&gt;
</summary><category term="kubernetes"></category></entry><entry><title>Pod 从创建到 Running 背后发生了什么</title><link href="https://mozillazg.com/2021/07/k8s-kubernetes-what-happen-when-pod-from-create-to-running.html" rel="alternate"></link><updated>2021-07-25T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2021-07-25:2021/07/k8s-kubernetes-what-happen-when-pod-from-create-to-running.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录一下 Pod 从创建到最终 Running 背后发生的事情，
以便对 k8s 的一些工作机制有一个更深入一点的了解。&lt;/p&gt;
&lt;p&gt;本文内容所针对的 Kubernetes 版本为 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/tree/v1.21.3"&gt;v1.21.3&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="pod-pod-etcd"&gt;
&lt;h3 id="hidpod-pod-etcd"&gt;从发送创建 Pod 的请求到 Pod 信息存入 etcd&lt;a class="headerlink" href="#hidpod-pod-etcd" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先讲一下从客户端发送创建 Pod 的请求到 apiserver 然后 apiserver 把数据存入 etcd 过程中发生的事情：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;客户端向 apiserver 发送创建 Pod 的请求: &lt;tt class="docutils literal"&gt;POST &lt;span class="pre"&gt;/api/v1/namespaces/{namespace}/pods&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;apiserver 收到请求后&lt;ol class="arabic"&gt;
&lt;li&gt;首先会对请求做 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/ca643a4d1f7bfe34773c74f79527be4afd95bf39/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authentication.go#L45-L82"&gt;认证（authentication）&lt;/a&gt; ，解析请求所携带的认证信息得到 User 信息，然后将 User 信息写入请求的 Context 中。
支持的认证方法详见 &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;认证通过后，再对 User 做 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/ca643a4d1f7bfe34773c74f79527be4afd95bf39/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization.go#L45-L78"&gt;鉴权（Authorization）&lt;/a&gt; ，检查当前 User 对这个请求所操作的资源是否有相应的操作权限。
支持的鉴权方法详见 &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/"&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;认证和鉴权都通过后，请求的 body 将会被反序列化为 &lt;tt class="docutils literal"&gt;runtime.Object&lt;/tt&gt; 对象。&lt;/li&gt;
&lt;li&gt;在 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/f86b59ab79227929e7f283b859b4c59317399807/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/create.go#L50-L201"&gt;存入&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/a1fac8cbd9289d95db4831a83239292ed56ce59d/staging/src/k8s.io/apiserver/pkg/registry/generic/registry/store.go#L365-L377"&gt;etcd 之前&lt;/a&gt; ，
反序列化后的对象会 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/34cab8f80a9104be7fe5d8a5a22c3207dab46268/staging/src/k8s.io/apiserver/pkg/registry/rest/create.go#L74-L119"&gt;先被&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/a1fac8cbd9289d95db4831a83239292ed56ce59d/pkg/registry/core/pod/strategy.go#L82-L92"&gt;填充默认值&lt;/a&gt; 和进行 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/a1fac8cbd9289d95db4831a83239292ed56ce59d/pkg/registry/core/pod/strategy.go#L104-L108"&gt;字段校验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;然后这个请求和对象还会被 Admission Controllers 处理一遍。
Admission Controllers 即包括 kube-apiserver 内置的 &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"&gt;admission controllers&lt;/a&gt; 也包括用户自行实现的 &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/"&gt;admission webhooks&lt;/a&gt; 。&lt;ul&gt;
&lt;li&gt;Admission Controllers 既可以实现对请求做进一步的校验（比如按一定策略对请求校验，拦截未使用指定 docker registory 的 Pod）（ validating admission ）） 也可以实现修改请求创建/修改的对象的属性的需求（比如给 Pod 注入 sidecar 容器）（ mutating admission ））。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/f86b59ab79227929e7f283b859b4c59317399807/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/create.go#L169-L177"&gt;先处理 mutating admission&lt;/a&gt; 然后 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/a1fac8cbd9289d95db4831a83239292ed56ce59d/staging/src/k8s.io/apiserver/pkg/registry/generic/registry/store.go#L379-L385"&gt;再处理 validating admission&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;只要有一个 Admission Controller 返回失败，请求就会失败。&lt;/li&gt;
&lt;li&gt;多个 Admission Controller &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/61774cd7176cae0c0324d23ab20e6c6b3038153f/staging/src/k8s.io/apiserver/pkg/admission/chain.go#L30-L60"&gt;串行执行&lt;/a&gt; ，
每个 Admission Controller 内部都有自己的逻辑，比如，&lt;ul&gt;
&lt;li&gt;ValidatingAdmissionWebhook Controller 内部会 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/b3aeaa4ed7bf8d419a96b4456a97bdf4c29e4330/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/validating/dispatcher.go#L94-L147"&gt;并发执行&lt;/a&gt; 定义的多个 validating admission webhook ，执行完成后只返回 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/b3aeaa4ed7bf8d419a96b4456a97bdf4c29e4330/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/validating/dispatcher.go#L149-L162"&gt;第一个错误&lt;/a&gt; （未被忽略的那个错误，因为 webhook 可以配置忽略错误）&lt;/li&gt;
&lt;li&gt;MutatingAdmissionWebhook Controller 内部会 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/b3aeaa4ed7bf8d419a96b4456a97bdf4c29e4330/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/mutating/dispatcher.go#L94-L189"&gt;串行执行&lt;/a&gt; 定义的多个 mutating webhook ，出错（未被忽略的错误，因为 webhook 可以配置忽略错误）就 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/b3aeaa4ed7bf8d419a96b4456a97bdf4c29e4330/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/mutating/dispatcher.go#L168-L184"&gt;返回&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Admission controllers 处理完以后， &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/a1fac8cbd9289d95db4831a83239292ed56ce59d/staging/src/k8s.io/apiserver/pkg/registry/generic/registry/store.go#L401-L419"&gt;对象被存入到 etcd 中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;最后根据执行结果方法相应的 Response。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;此时 Pod 就创建成功了，但是还没有被调度到某个节点并且状态是 Pending。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="pod"&gt;
&lt;h3 id="hidpod"&gt;Pod 调度&lt;a class="headerlink" href="#hidpod" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;kube-scheduler 组件负责 Pod 的调度工作，具体过程如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;kube-scheduler 通过 Informer 机制 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/22a8a9ab455e23a841952872bdc7e042c75a878f/pkg/scheduler/eventhandlers.go#L358-L461"&gt;监控 Pod 等资源的变更事件并注册相应的回调函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当上面的 Pod 创建成功后， &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/22a8a9ab455e23a841952872bdc7e042c75a878f/pkg/scheduler/eventhandlers.go#L388-L411"&gt;触发了 Pod 的变更事件&lt;/a&gt; ，因为此时这个 Pod 满足 &lt;tt class="docutils literal"&gt;nodeName&lt;/tt&gt; 的值为空并且 &lt;tt class="docutils literal"&gt;schedulerName&lt;/tt&gt; 中指定的是已知的 Scheduler Framework Name，所以这个 Pod 对象会被放入到 &lt;tt class="docutils literal"&gt;SchedulingQueue&lt;/tt&gt; 队列中等待处理。&lt;/li&gt;
&lt;li&gt;kube-scheduler 中 &lt;tt class="docutils literal"&gt;SchedulingQueue&lt;/tt&gt; 中的待调度 Pod 会由 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/318677cc93e281f4c78e94c58562d1f1b2e34061/pkg/scheduler/scheduler.go#L441-L614"&gt;scheduleOne&lt;/a&gt; 函数进行处理，Pod 调度逻辑就在这个函数里:&lt;ol class="arabic"&gt;
&lt;li&gt;根据 Pod 的 &lt;tt class="docutils literal"&gt;schedulerName&lt;/tt&gt; 字段的值找到 Pod 指定要使用的 Scheduler Framework (fwk)&lt;/li&gt;
&lt;li&gt;根据调度算法（内置的策略加 fwk 实现的策略）得出适合这个 Pod 的最佳节点（调度算法的详细说明以后再单独细说）&lt;/li&gt;
&lt;li&gt;如果调度算法失败了：&lt;ol class="arabic"&gt;
&lt;li&gt;执行 fwk.RunPostFilterPlugins 函数，获取可能的 nominatedNode&lt;/li&gt;
&lt;li&gt;产生一个 &lt;tt class="docutils literal"&gt;FailedScheduling&lt;/tt&gt; Event、 更新 Pod 的 &lt;tt class="docutils literal"&gt;status.conditions&lt;/tt&gt; 字段增加一个 &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; 为 &lt;tt class="docutils literal"&gt;PodScheduled&lt;/tt&gt; &lt;tt class="docutils literal"&gt;status&lt;/tt&gt; 为 &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; 的 PodCondition 以及更新 &lt;tt class="docutils literal"&gt;status.nominatedNodeName&lt;/tt&gt; 字段的值为前面获取的 &lt;tt class="docutils literal"&gt;nominatedNode&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;如果调度算法成功返回了节点信息，首先执行 &lt;tt class="docutils literal"&gt;fwk.RunReservePluginsReserve&lt;/tt&gt; 如果失败了执行 &lt;tt class="docutils literal"&gt;fwk.RunReservePluginsUnreserve&lt;/tt&gt; 然后按上面 3.2 的操作记录调度失败&lt;/li&gt;
&lt;li&gt;然后再执行 &lt;tt class="docutils literal"&gt;fwk.RunPermitPlugins `` 如果失败了执行 ``fwk.RunReservePluginsUnreserve&lt;/tt&gt; 然后按上面 3.2 的操作记录调度失败&lt;/li&gt;
&lt;li&gt;最后执行 binding 操作&lt;ol class="arabic"&gt;
&lt;li&gt;执行 &lt;tt class="docutils literal"&gt;fwk.WaitOnPermit&lt;/tt&gt; 如果失败了执行 &lt;tt class="docutils literal"&gt;fwk.RunReservePluginsUnreserve&lt;/tt&gt; 然后按上面 3.2 的操作记录调度失败&lt;/li&gt;
&lt;li&gt;执行 &lt;tt class="docutils literal"&gt;fwk.RunPreBindPlugins&lt;/tt&gt; 如果失败了执行 &lt;tt class="docutils literal"&gt;fwk.RunReservePluginsUnreserve&lt;/tt&gt; 然后按上面 3.2 的操作记录调度失败&lt;/li&gt;
&lt;li&gt;执行真正的 binding 操作 &lt;tt class="docutils literal"&gt;sched.bind&lt;/tt&gt; ， &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/c03b4c78507be4e6d50a2549e2c337bbda1aa87e/pkg/scheduler/framework/plugins/defaultbinder/default_binder.go#L50-L61"&gt;默认的 Bind 实现&lt;/a&gt; 会去 post 当前 Pod 的 &lt;tt class="docutils literal"&gt;binding&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/72ab11193a419f0e0e66e86c4e6be9991c3682f2/staging/src/k8s.io/client-go/kubernetes/typed/core/v1/pod_expansion.go#L38-L41"&gt;子资源&lt;/a&gt;  记录 Pod 被调度到哪个节点上了， 如果失败了执行 &lt;tt class="docutils literal"&gt;fwk.RunReservePluginsUnreserve&lt;/tt&gt; 然后按上面 3.2 的操作记录调度失败&lt;/li&gt;
&lt;li&gt;执行 &lt;tt class="docutils literal"&gt;fwk.RunPostBindPlugins&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当 apiserver 收到对 Pod &lt;tt class="docutils literal"&gt;binding&lt;/tt&gt; 子资源的 post 请求的时候，会触发 binding 的 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/a1fac8cbd9289d95db4831a83239292ed56ce59d/pkg/registry/core/pod/storage/storage.go#L161-L186"&gt;create&lt;/a&gt; 逻辑， &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/a1fac8cbd9289d95db4831a83239292ed56ce59d/pkg/registry/core/pod/storage/storage.go#L188-L234"&gt;更新 Pod&lt;/a&gt; 的 &lt;tt class="docutils literal"&gt;nodeName&lt;/tt&gt; 字段为请求中包含的 NodeName 以及 更新 Pod 的 &lt;tt class="docutils literal"&gt;status.conditions&lt;/tt&gt; 字段增加一个 type 为 &lt;tt class="docutils literal"&gt;PodScheduled&lt;/tt&gt; status 为 &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; 的 pod condition 。&lt;/p&gt;
&lt;p&gt;此时 Pod 就被调度到一个节点上了，但是 Pod 的还是 Pending 因为 Pod 内的容器还没有在被调度的节点上运行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3 id="hidid2"&gt;节点上运行 Pod 中的容器&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;kubelet 组件负责在节点上运行 Pod 中定义的容器，具体的过程如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;kubelet 组件启动后会 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/config/apiserver.go#L36-L55"&gt;watch&lt;/a&gt; 所有 &lt;tt class="docutils literal"&gt;nodeName&lt;/tt&gt; 字段的值是当前节点名称的 Pod 的 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L1887-L2016"&gt;变更事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当 Pod 经过调度后，它的 &lt;tt class="docutils literal"&gt;nodeName&lt;/tt&gt; 字段会被设置为被选中的节点的名称，此时会触发 kubelet 中 pod &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L2075-L2111"&gt;ADD&lt;/a&gt; 事件（因为之前没在这个节点上处理过）:&lt;ol class="arabic"&gt;
&lt;li&gt;触发 Pod &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L2030-L2063"&gt;更新&lt;/a&gt; 的 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/01a4e4facebda8a643383625d3cece724efe2a66/pkg/kubelet/pod_workers.go#L196-L234"&gt;处理&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/01a4e4facebda8a643383625d3cece724efe2a66/pkg/kubelet/pod_workers.go#L157-L194"&gt;逻&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L1463-L1726"&gt;辑&lt;/a&gt; :&lt;ol class="arabic"&gt;
&lt;li&gt;首先执行 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L1826-L1838"&gt;canRunPod&lt;/a&gt; 检查（ &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L809-L815"&gt;检查&lt;/a&gt;  AppArmor 、 NoNewPrivs  以及 ProcMount 这三个特性），如果检查不通过的话，不会进行后续的操作&lt;/li&gt;
&lt;li&gt;如果网络插件未就绪并且当前 Pod 未使用 Host 网络的话，返回 &lt;tt class="docutils literal"&gt;network is not ready&lt;/tt&gt; 的错误以及产生一个 &lt;tt class="docutils literal"&gt;NetworkNotReady&lt;/tt&gt; 的 Event&lt;/li&gt;
&lt;li&gt;如果启用了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cgroups-per-qos&lt;/span&gt;&lt;/tt&gt; 功能，将为 Pod 创建 Cgroups&lt;/li&gt;
&lt;li&gt;创建存放 Pod 容器数据的目录：&lt;ul&gt;
&lt;li&gt;Pod 目录，比如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/var/run/kubelet/pods/{PodUID}&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;PodVolumes 目录，比如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{PodDir}/volumes&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;PodPlugins 目录，比如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{PodDir}/plugins&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L1699-L1702"&gt;volumeManager.WaitForAttachAndMount&lt;/a&gt; 等待 Pod 中所有容器的 &lt;tt class="docutils literal"&gt;volumeMounts&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;volumeDevices&lt;/tt&gt; 中使用的 volume 被成功 attatch 和 mount （关于 volumeManager 相关内容以后再单独细说）。 如果失败的话，返回 mount 失败的 event 和错误&lt;/li&gt;
&lt;li&gt;获取 Pod 中指定的 &lt;tt class="docutils literal"&gt;imagePullSecrets&lt;/tt&gt; 所使用的那些 secret 数据的内容。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/461c0c1656994cbf393ea6f0ca9cf2454db93e7b/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L693-L899"&gt;容器运行时创建容器&lt;/a&gt; :&lt;ol class="arabic"&gt;
&lt;li&gt;执行 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/629d5ab21349021cf7d38236620785071ee541b4/pkg/kubelet/kuberuntime/kuberuntime_sandbox.go#L36-L73"&gt;createPodSandbox&lt;/a&gt; 方法创建一个 pod sandbox&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/8d86470417a3641e1971364902d172ad3026bda3/pkg/kubelet/cri/remote/remote_runtime.go#L99-L130"&gt;内部&lt;/a&gt; 会通过 gRPC 调用不同 CRI（Container Runtime Interface） 所实现的 &lt;tt class="docutils literal"&gt;RunPodSandbox&lt;/tt&gt; 接口&lt;/li&gt;
&lt;li&gt;不同 CRI 实现 &lt;tt class="docutils literal"&gt;RunPodSandbox&lt;/tt&gt; 接口的方法可能会不尽相同。以 Docker 为例，dockershim 中实现的 &lt;tt class="docutils literal"&gt;RunPodSandbox&lt;/tt&gt; 接口的 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/7735cf7f2674627283db081d61a2c45f4b70ee8f/pkg/kubelet/dockershim/docker_sandbox.go#L84-L205"&gt;内部操作&lt;/a&gt; 如下：&lt;ol class="arabic"&gt;
&lt;li&gt;pull sandbox 容器（pause 容器）所用的镜像（默认是 &lt;tt class="docutils literal"&gt;k8s.gcr.io/pause:3.4.1&lt;/tt&gt; ，）&lt;/li&gt;
&lt;li&gt;调用 docker client api 创建 sandbox 容器&lt;/li&gt;
&lt;li&gt;创建 sandbox checkpoint&lt;/li&gt;
&lt;li&gt;启动 sandbox 容器&lt;/li&gt;
&lt;li&gt;更新容器内的 resolv.conf 文件的内容&lt;/li&gt;
&lt;li&gt;如果 Pod 使用的是 Host 网络，直接返回, 如果不是用的 Host 网络的话，继续&lt;/li&gt;
&lt;li&gt;通过 CNI 插件 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/7735cf7f2674627283db081d61a2c45f4b70ee8f/pkg/kubelet/dockershim/network/plugins.go#L410-L424"&gt;配置容器网络&lt;/a&gt; :&lt;ul&gt;
&lt;li&gt;实际上是调用 CNI 插件的二进制可执行文件， &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/6f79600e73584bbf600b414f8a79846f30fdf457/vendor/github.com/containernetworking/cni/libcni/api.go#L400-L422"&gt;执行&lt;/a&gt; 一个 &lt;tt class="docutils literal"&gt;ADD&lt;/tt&gt; 指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果网络配置失败&lt;ol class="arabic"&gt;
&lt;li&gt;清理网络资源：执行 CNI 插件的 &lt;tt class="docutils literal"&gt;DEL&lt;/tt&gt; 指令&lt;/li&gt;
&lt;li&gt;停止前面启动的容器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后再通过调用 CRI 的 &lt;tt class="docutils literal"&gt;PodSandboxStatus&lt;/tt&gt; 接口查询一下创建的 pod sandbox 的状态，确保创建的 pod sandbox 无异常，同时获取 status 中包含的 pod IP 信息。&lt;/li&gt;
&lt;li&gt;启动 ephemeral 容器， &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/e781d2a672f044d47e75f0ec7015666d06164410/pkg/kubelet/kuberuntime/kuberuntime_container.go#L130-L239"&gt;启动容器&lt;/a&gt; 的步骤如下：&lt;ol class="arabic"&gt;
&lt;li&gt;使用前面 6 获取的 secret 数据 pull image&lt;/li&gt;
&lt;li&gt;调用 CRI 的 &lt;tt class="docutils literal"&gt;CreateContainer&lt;/tt&gt; 接口创建容器&lt;/li&gt;
&lt;li&gt;调用 CRI 的 &lt;tt class="docutils literal"&gt;StartContainer&lt;/tt&gt; 接口启动容器&lt;/li&gt;
&lt;li&gt;执行 container 中定义的 &lt;tt class="docutils literal"&gt;lifecycle.postStart&lt;/tt&gt; hook&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;启动 init 容器&lt;/li&gt;
&lt;li&gt;启动剩下的容器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;容器启动完成后，将当前 Pod &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L2109"&gt;注册&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/6af7eb6d494d8f742e18a3b965053e3a518bf6d7/pkg/kubelet/prober/prober_manager.go#L153-L197"&gt;到&lt;/a&gt;  probeManager 中。 probeManager 负责异步执行容器中定义的 &lt;tt class="docutils literal"&gt;startupProbe&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;readinessProbe&lt;/tt&gt; 以及 &lt;tt class="docutils literal"&gt;livenessProbe&lt;/tt&gt; 操作。&lt;ul&gt;
&lt;li&gt;这些 probe 操作的结果会发送到 &lt;tt class="docutils literal"&gt;startupManager&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;readinessManager&lt;/tt&gt; 以及 &lt;tt class="docutils literal"&gt;livenessManager&lt;/tt&gt; 中，从而触发响应的 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L1991-L2002"&gt;事件响应逻辑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;比如 readinessProbe 执行成功了会触发更新 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/6af7eb6d494d8f742e18a3b965053e3a518bf6d7/pkg/kubelet/status/status_manager.go#L61-L72"&gt;statusManager&lt;/a&gt; 中记录的 Pod 的 status 信息，更新 ContainersReady 和 Ready 信息，以及 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L1998"&gt;触发&lt;/a&gt; Pod 信息同步操作（这里会有更新 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/d10d7e8dc94dc58bb432039f99e902115e66d4cc/pkg/kubelet/kubelet.go#L1585-L1586"&gt;statusManager&lt;/a&gt; 把 statusManager 中的Pod 状态 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/6af7eb6d494d8f742e18a3b965053e3a518bf6d7/pkg/kubelet/kubelet_pods.go#L1517-L1576"&gt;更新&lt;/a&gt; 为 Running 的 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/6af7eb6d494d8f742e18a3b965053e3a518bf6d7/pkg/kubelet/kubelet_pods.go#L1415-L1515"&gt;逻辑&lt;/a&gt; ）。&lt;/li&gt;
&lt;li&gt;statusManager 里有个 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/6af7eb6d494d8f742e18a3b965053e3a518bf6d7/pkg/kubelet/status/status_manager.go#L161-L179"&gt;协程&lt;/a&gt; 会定期把待更新的 pod 状态通过 apiserver 进行 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/6af7eb6d494d8f742e18a3b965053e3a518bf6d7/pkg/kubelet/status/status_manager.go#L548-L617"&gt;更新&lt;/a&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过 kubelet 中一些列的处理后，此时 Pod 的状态就变成 Running 了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;总结&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录了一下 Pod 从创建到最终 Running 背后发生的事情，其中有些细节没有展开，
后面再补充或者另写一些文章说一下那些没展开的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/tree/v1.21.3"&gt;kubernetes/kubernetes at v1.21.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/home/"&gt;Kubernetes Documentation | Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="kubernetes"></category></entry><entry><title>在 Kubernetes RBAC Role/ClusterRole 规则中使用通配符 *</title><link href="https://mozillazg.com/2021/06/k8s-kubernetes-rbac-rules-use-star-wildcard.html" rel="alternate"></link><updated>2021-06-06T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2021-06-06:2021/06/k8s-kubernetes-rbac-rules-use-star-wildcard.html</id><summary type="html">&lt;p&gt;在编写 Kubernetes RBAC Role/ClusterRole 中 &lt;tt class="docutils literal"&gt;rules&lt;/tt&gt; 字段中定义的规则时，我们可以通过通配符 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt;
来实现规则中匹配任意字符的需求。&lt;/p&gt;
&lt;p&gt;不过通配符 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 也不是可以任意使用的，下面是 &lt;tt class="docutils literal"&gt;rules&lt;/tt&gt; 字段使用的 &lt;tt class="docutils literal"&gt;PolicyRule&lt;/tt&gt; 的定义:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// PolicyRule holds information that describes a policy rule, but does not contain information&lt;/span&gt;
&lt;span class="c1"&gt;// about who the rule applies to or which namespace the rule applies to.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PolicyRule&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. &amp;#39;*&amp;#39; represents all verbs.&lt;/span&gt;
        &lt;span class="nx"&gt;Verbs&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;verbs&amp;quot; protobuf:&amp;quot;bytes,1,rep,name=verbs&amp;quot;`&lt;/span&gt;

        &lt;span class="c1"&gt;// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of&lt;/span&gt;
        &lt;span class="c1"&gt;// the enumerated resources in any API group will be allowed.&lt;/span&gt;
        &lt;span class="c1"&gt;// +optional&lt;/span&gt;
        &lt;span class="nx"&gt;APIGroups&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;apiGroups,omitempty&amp;quot; protobuf:&amp;quot;bytes,2,rep,name=apiGroups&amp;quot;`&lt;/span&gt;
        &lt;span class="c1"&gt;// Resources is a list of resources this rule applies to. &amp;#39;*&amp;#39; represents all resources.&lt;/span&gt;
        &lt;span class="c1"&gt;// +optional&lt;/span&gt;
        &lt;span class="nx"&gt;Resources&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;resources,omitempty&amp;quot; protobuf:&amp;quot;bytes,3,rep,name=resources&amp;quot;`&lt;/span&gt;
        &lt;span class="c1"&gt;// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.&lt;/span&gt;
        &lt;span class="c1"&gt;// +optional&lt;/span&gt;
        &lt;span class="nx"&gt;ResourceNames&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;resourceNames,omitempty&amp;quot; protobuf:&amp;quot;bytes,4,rep,name=resourceNames&amp;quot;`&lt;/span&gt;

        &lt;span class="c1"&gt;// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path&lt;/span&gt;
        &lt;span class="c1"&gt;// Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding.&lt;/span&gt;
        &lt;span class="c1"&gt;// Rules can either apply to API resources (such as &amp;quot;pods&amp;quot; or &amp;quot;secrets&amp;quot;) or non-resource URL paths (such as &amp;quot;/api&amp;quot;),  but not both.&lt;/span&gt;
        &lt;span class="c1"&gt;// +optional&lt;/span&gt;
        &lt;span class="nx"&gt;NonResourceURLs&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;nonResourceURLs,omitempty&amp;quot; protobuf:&amp;quot;bytes,5,rep,name=nonResourceURLs&amp;quot;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过阅读 kubernetes 中 PolicyRule 匹配逻辑的 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/v1.21.1/plugin/pkg/auth/authorizer/rbac/rbac.go#L178-L193"&gt;源&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/v1.21.1/pkg/apis/rbac/v1/evaluation_helpers.go"&gt;代码&lt;/a&gt;
可以知道 &lt;tt class="docutils literal"&gt;PolicyRule&lt;/tt&gt; 中各个字段使用通配符 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 时有如下限制：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;verbs&lt;/tt&gt; 字段只支持通过使用 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 匹配所有 Verb，不支持使用 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 跟其他字符实现组合匹配：&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt; ： &lt;strong&gt;有效&lt;/strong&gt; ，匹配所有 Verb&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;de*&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;de*te&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*te&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;apiGroups&lt;/tt&gt; 字段只支持通过使用 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 匹配所有 APIGroup ，不支持使用 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 跟其他字符实现组合匹配：&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt; ： &lt;strong&gt;有效&lt;/strong&gt; ，匹配所有 APIGroup&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;co*&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;c*e&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*re&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;resources&lt;/tt&gt; 字段只支持通过使用 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 匹配所有 resource，以及通过 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 匹配所有 resource 的特定 &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#referring-to-resources"&gt;subresource&lt;/a&gt; ：&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt; ： &lt;strong&gt;有效&lt;/strong&gt; ，匹配所有 resource&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;po*&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;po*s&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*ts&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;*/&amp;lt;subresource&amp;gt;&lt;/span&gt;&lt;/tt&gt;:  &lt;strong&gt;有效&lt;/strong&gt; ，匹配所有 resource 的特定 &lt;tt class="docutils literal"&gt;&amp;lt;subresource&amp;gt;&lt;/tt&gt; ，比如 &lt;tt class="docutils literal"&gt;*/status&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;*/scale&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&amp;lt;subresource&amp;gt;&lt;/tt&gt;:  无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;resourceNames&lt;/tt&gt; 字段不支持通配符 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; ，当 &lt;tt class="docutils literal"&gt;resourceNames&lt;/tt&gt; 字段的值为空时匹配所有 resource name&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nonResourceURLs&lt;/tt&gt; 字段只支持通过 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 匹配所有 nonResourceURL、以及通过字符串末尾的 &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 匹配以特定字符串开头的任意 nonResourceURL：&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt; ： &lt;strong&gt;有效&lt;/strong&gt; ，匹配所有 nonResourceURL&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/health*&lt;/tt&gt;:  &lt;strong&gt;有效&lt;/strong&gt; ，匹配以 &lt;tt class="docutils literal"&gt;/health&lt;/tt&gt; 开头的任意 nonResourceURL，比如 &lt;tt class="docutils literal"&gt;/health&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;/healthy&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;/health/foo/bar&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*foo&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/*foo&lt;/tt&gt;: 无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;参考资料&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/"&gt;Using RBAC Authorization | Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/v1.21.1/plugin/pkg/auth/authorizer/rbac/rbac.go#L178-L193"&gt;kubernetes/rbac.go at v1.21.1 · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="kubernetes"></category><category term="RBAC"></category></entry><entry><title>在不生成 crd client 代码的情况下通过 client-go 增删改查 k8s crd 资源</title><link href="https://mozillazg.com/2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html" rel="alternate"></link><updated>2020-07-19T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2020-07-19:2020/07/k8s-kubernetes-client-go-list-get-create-update-patch-delete-crd-resource-without-generate-client-code-update-or-create-via-yaml.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一般情况下管理 crd 资源都是通过由 &lt;a class="reference external" href="https://github.com/kubernetes/code-generator"&gt;code-generator&lt;/a&gt; 生成的 crd client 来操作，但是有时也会有只想简单的操作一下资源不想去导入或生成 crd client 相关代码的需求，这里简单的记录一下在不生成 crd client 代码的情况下通过 client-go 增删改查 k8s crd 资源的方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="crd"&gt;
&lt;h2 id="hidcrd"&gt;示例 CRD&lt;a class="headerlink" href="#hidcrd" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先来定义一个测试用的 CRD （其实已有的 Pod 之类的也是可以的，没啥特别的不一定要自定义 CRD，这里只是展示这个能力，因为一般如果是内置的资源的话，直接用内置的 client 和内置的资源 struct 就可以了）（这个 crd 来自 &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/"&gt;官方文档&lt;/a&gt; ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiextensions.k8s.io/v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;CustomResourceDefinition&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# name must match the spec fields below, and be in the form: &amp;lt;plural&amp;gt;.&amp;lt;group&amp;gt;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;crontabs.stable.example.com&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# group name to use for REST API: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;group&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;stable.example.com&lt;/span&gt;
  &lt;span class="c1"&gt;# list of versions supported by this CustomResourceDefinition&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;versions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
      &lt;span class="c1"&gt;# Each version can be enabled/disabled by Served flag.&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;served&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="c1"&gt;# One and only one version must be marked as the storage version.&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;storage&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;openAPIV3Schema&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
          &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;properties&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cronSpec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
                &lt;span class="l l-Scalar l-Scalar-Plain"&gt;replicas&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;type&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
  &lt;span class="c1"&gt;# either Namespaced or Cluster&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scope&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Namespaced&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;names&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# plural name to be used in the URL: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;plural&amp;gt;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;plural&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;crontabs&lt;/span&gt;
    &lt;span class="c1"&gt;# singular name to be used as an alias on the CLI and for display&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;singular&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;crontab&lt;/span&gt;
    &lt;span class="c1"&gt;# kind is normally the CamelCased singular type. Your resource manifests use this.&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;CronTab&lt;/span&gt;
    &lt;span class="c1"&gt;# shortNames allow shorter string to match your resource on the CLI&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;shortNames&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后通过 kubectl 创建一下这个 crd ，然后再创建几个 crd 对象&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl apply -f crd.yaml
customresourcedefinition.apiextensions.k8s.io/crontabs.stable.example.com created

$ cat c.yaml
---
apiVersion: &amp;quot;stable.example.com/v1&amp;quot;
kind: CronTab
metadata:
  name: cron-1
spec:
  cronSpec: &amp;quot;* * * * */5&amp;quot;
  image: my-awesome-cron-image-1

---
apiVersion: &amp;quot;stable.example.com/v1&amp;quot;
kind: CronTab
metadata:
  name: cron-2
spec:
  cronSpec: &amp;quot;* * * * */8&amp;quot;
  image: my-awesome-cron-image-2

---
apiVersion: &amp;quot;stable.example.com/v1&amp;quot;
kind: CronTab
metadata:
  name: cron-3
spec:
  cronSpec: &amp;quot;* * * * */10&amp;quot;
  image: my-awesome-cron-image-3

$ kubectl apply -f c.yaml
crontab.stable.example.com/cron-1 created
crontab.stable.example.com/cron-2 created
crontab.stable.example.com/cron-3 created

$ kubectl get crontab.stable.example.com
NAME     AGE
cron-1   9s
cron-2   9s
cron-3   9s
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="list"&gt;
&lt;h2 id="hidlist"&gt;list 资源&lt;a class="headerlink" href="#hidlist" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先是如何 list 前面创建的3个资源，类似 &lt;tt class="docutils literal"&gt;kubectl get crontab.stable.example.com&lt;/tt&gt; 的效果。&lt;/p&gt;
&lt;p&gt;简单来说就是通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;k8s.io/client-go/dynamic&lt;/span&gt;&lt;/tt&gt; 里的 &lt;tt class="docutils literal"&gt;Interface&lt;/tt&gt; 提供的方法来操作 crd 资源。
关键是怎么拿到 &lt;tt class="docutils literal"&gt;NamespaceableResourceInterface&lt;/tt&gt; 实例以及把结果转换为自定义的结构体。&lt;/p&gt;
&lt;p&gt;完整的 list 资源的代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;path/filepath&amp;quot;&lt;/span&gt;

        &lt;span class="nx"&gt;metav1&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;k8s.io/apimachinery/pkg/apis/meta/v1&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;k8s.io/apimachinery/pkg/runtime/schema&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;k8s.io/client-go/dynamic&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;k8s.io/client-go/tools/clientcmd&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;gvr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GroupVersionResource&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;stable.example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;v1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;crontabs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CrontabSpec&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;CronSpec&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;cronSpec&amp;quot;`&lt;/span&gt;
        &lt;span class="nx"&gt;Image&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;image&amp;quot;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Crontab&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TypeMeta&lt;/span&gt;   &lt;span class="s"&gt;`json:&amp;quot;,inline&amp;quot;`&lt;/span&gt;
        &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectMeta&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;metadata,omitempty&amp;quot;`&lt;/span&gt;

        &lt;span class="nx"&gt;Spec&lt;/span&gt; &lt;span class="nx"&gt;CrontabSpec&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;spec,omitempty&amp;quot;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CrontabList&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TypeMeta&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;,inline&amp;quot;`&lt;/span&gt;
        &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListMeta&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;metadata,omitempty&amp;quot;`&lt;/span&gt;

        &lt;span class="nx"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nx"&gt;Crontab&lt;/span&gt; &lt;span class="s"&gt;`json:&amp;quot;items&amp;quot;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;listCrontabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;CrontabList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gvr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListOptions&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MarshalJSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctList&lt;/span&gt; &lt;span class="nx"&gt;CrontabList&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ctList&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ctList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;kubeconfig&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;HOME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.kube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;config&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;clientcmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BuildConfigFromFlags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;kubeconfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewForConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;listCrontabs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s %s %s %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CronSpec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行结果如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ go run main.go
default cron-1 * * * * */5 my-awesome-cron-image-1
default cron-2 * * * * */8 my-awesome-cron-image-2
default cron-3 * * * * */10 my-awesome-cron-image-3
&lt;/pre&gt;
&lt;p&gt;代码相对来说比较简单，有一个要注意的地方就是 gvr 里各个字段的值来自 crd 定义的 yaml 文件:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spec&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# group name to use for REST API: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;# 对应 Group 字段的值&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;group&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;stable.example.com&lt;/span&gt;
  &lt;span class="c1"&gt;# list of versions supported by this CustomResourceDefinition&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;versions&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;   &lt;span class="c1"&gt;# 对应 Version 字段的可选值&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;names&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# plural name to be used in the URL: /apis/&amp;lt;group&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;plural&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;# 对应 Resource 字段的值&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;plural&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;crontabs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意：因为这个 crd 定义的是 namespace 资源，如果是非 namespace 资源的话，应当改为使用不指定 namespace 的方法:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
client.Resource(gvr).List(metav1.ListOptions{})
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="get"&gt;
&lt;h2 id="hidget"&gt;get 资源&lt;a class="headerlink" href="#hidget" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;get 资源的方法也是通过 &lt;tt class="docutils literal"&gt;dynamic.Interface&lt;/tt&gt; 来实现，关键是怎么把结果转换为上面定义的结构体， 关键代码示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;getCrontab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Crontab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gvr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetOptions&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MarshalJSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt; &lt;span class="nx"&gt;Crontab&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;getCrontab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cron-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s %s %s %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CronSpec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ go run main.go
default cron-1 * * * * */5 my-awesome-cron-image-1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="create"&gt;
&lt;h2 id="hidcreate"&gt;create 资源&lt;a class="headerlink" href="#hidcreate" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;create 资源的方法也是通过 &lt;tt class="docutils literal"&gt;dynamic.Interface&lt;/tt&gt; 来实现 ，这里主要记录一下怎么基于 yaml 文本的内容来创建资源。&lt;/p&gt;
&lt;p&gt;关键代码示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;createCrontabWithYaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yamlData&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Crontab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewDecodingSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unstructured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UnstructuredJSONScheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;unstructured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unstructured&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;decoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yamlData&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;gvk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gvr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CreateOptions&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MarshalJSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt; &lt;span class="nx"&gt;Crontab&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nx"&gt;createData&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;apiVersion: &amp;quot;stable.example.com/v1&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;kind: CronTab&lt;/span&gt;
&lt;span class="s"&gt;metadata:&lt;/span&gt;
&lt;span class="s"&gt;  name: cron-4&lt;/span&gt;
&lt;span class="s"&gt;spec:&lt;/span&gt;
&lt;span class="s"&gt;  cronSpec: &amp;quot;* * * * */15&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  image: my-awesome-cron-image-4&lt;/span&gt;
&lt;span class="s"&gt;`&lt;/span&gt;
        &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;createCrontabWithYaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s %s %s %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CronSpec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ go run main.go
default cron-4 * * * * */15 my-awesome-cron-image-4

$ kubectl get crontab.stable.example.com cron-4
NAME     AGE
cron-4   5m33s
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="update"&gt;
&lt;h2 id="hidupdate"&gt;update 资源&lt;a class="headerlink" href="#hidupdate" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;update 资源的方法也是通过 &lt;tt class="docutils literal"&gt;dynamic.Interface&lt;/tt&gt; 来实现 ，这里主要记录一下怎么基于 yaml 文本的内容来更新资源。&lt;/p&gt;
&lt;p&gt;关键代码示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;updateCrontabWithYaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yamlData&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;Crontab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;yaml&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewDecodingSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unstructured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UnstructuredJSONScheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;unstructured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unstructured&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;decoder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yamlData&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;gvk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gvr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetOptions&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SetResourceVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetResourceVersion&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gvr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UpdateOptions&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;utd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MarshalJSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt; &lt;span class="nx"&gt;Crontab&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nx"&gt;updateData&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;`&lt;/span&gt;
&lt;span class="s"&gt;apiVersion: &amp;quot;stable.example.com/v1&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;kind: CronTab&lt;/span&gt;
&lt;span class="s"&gt;metadata:&lt;/span&gt;
&lt;span class="s"&gt;  name: cron-2&lt;/span&gt;
&lt;span class="s"&gt;spec:&lt;/span&gt;
&lt;span class="s"&gt;  cronSpec: &amp;quot;* * * * */15&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;  image: my-awesome-cron-image-2-update&lt;/span&gt;
&lt;span class="s"&gt;`&lt;/span&gt;
        &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;updateCrontabWithYaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s %s %s %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CronSpec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 $ kubectl get crontab.stable.example.com cron-2 -o jsonpath='{.spec}'
map[cronSpec:* * * * */8 image:my-awesome-cron-image-2]

$ go run main.go
default cron-2 * * * * */15 my-awesome-cron-image-2-update

$ kubectl get crontab.stable.example.com cron-2 -o jsonpath='{.spec}'
map[cronSpec:* * * * */15 image:my-awesome-cron-image-2-update]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="patch"&gt;
&lt;h2 id="hidpatch"&gt;patch 资源&lt;a class="headerlink" href="#hidpatch" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;patch 资源的方法跟 patch pod 之类的代码类似，关键代码示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;patchCrontab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pt&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PatchType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gvr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metav1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PatchOptions&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;patchData&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="nb"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`{&amp;quot;spec&amp;quot;: {&amp;quot;image&amp;quot;: &amp;quot;my-awesome-cron-image-1-patch&amp;quot;}}`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;patchCrontab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cron-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MergePatchType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;patchData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行效果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl get crontab.stable.example.com cron-1 -o jsonpath='{.spec.image}'
my-awesome-cron-image-1

$ go run main.go

$ kubectl get crontab.stable.example.com cron-1 -o jsonpath='{.spec.image}'
my-awesome-cron-image-1-patch
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="delete"&gt;
&lt;h2 id="hiddelete"&gt;delete 资源&lt;a class="headerlink" href="#hiddelete" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;delete 资源相对来说简单很多，关键代码示例如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;deleteCrontab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gvr&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;deleteCrontab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cron-3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ go run main.go
$ kubectl get crontab.stable.example.com
NAME     AGE
cron-1   4h5m
cron-2   4h5m
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;总结&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录了一下 list、get、create、update、patch、delete crd 资源的方法，其他方法大同小异就没记录了。 简单来说就是可以通过 &lt;tt class="docutils literal"&gt;dynamic.Interface&lt;/tt&gt; 在不生成特定的 client 代码的情况下操作 crd 资源。&lt;/p&gt;
&lt;p&gt;BTW, 另外一个非常规的操作 crd 资源的办法就是直接请求 api server 的 rest api 而不是借助封装好的方法，后面有时间的时候再记录一下这个方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/client-go/"&gt;kubernetes/client-go: Go client for Kubernetes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/code-generator"&gt;kubernetes/code-generator: Generators for kube-like API types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/"&gt;Extend the Kubernetes API with CustomResourceDefinitions | Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/"&gt;Access Clusters Using the Kubernetes API | Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="k8s"></category><category term="kubernetes"></category><category term="crd"></category><category term="client-go"></category></entry><entry><title>kubernetes 用户扮演 API</title><link href="https://mozillazg.com/2020/06/k8s-kubernetes-kubectl-syntax-of-impersonate-as-user-or-serviceaccount-or-group.html" rel="alternate"></link><updated>2020-06-07T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2020-06-07:2020/06/k8s-kubernetes-kubectl-syntax-of-impersonate-as-user-or-serviceaccount-or-group.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;记录一下 kubernetes 中扮演另一个用户的 API 和用法（信息主要来自官方文档和源码）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h2 id="hidapi"&gt;API&lt;a class="headerlink" href="#hidapi" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;请求 api server 的时候指定以下 http header 之一即可实现用户扮演的需求（当然，请求方必须有扮演该用户的权限） （信息来自 &lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation"&gt;文档&lt;/a&gt; ）:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt;: 扮演的用户的用户名&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Group&lt;/span&gt;&lt;/tt&gt;: 扮演的用户组，多个值（出现多次）表示多个组，需要同时指定 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Extra-(&lt;/span&gt; extra name )&lt;/tt&gt;: 动态指定的 key，用于指定用户的其他信息，需要同时指定 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Impersonate-User: jane.doe&amp;#64;example.com
Impersonate-Group: developers
Impersonate-Group: admins
Impersonate-Extra-dn: cn=jane,ou=engineers,dc=example,dc=com
Impersonate-Extra-acme.com%2Fproject: some-project
Impersonate-Extra-scopes: view
Impersonate-Extra-scopes: development
&lt;/pre&gt;
&lt;div class="section" id="impersonate-user-impersonate-group"&gt;
&lt;h3 id="hidimpersonate-user-impersonate-group"&gt;Impersonate-User 和 Impersonate-Group 值的语法&lt;a class="headerlink" href="#hidimpersonate-user-impersonate-group" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt; 的值即可以是 User 也可以是 service account，对应的语法如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;lt;User&amp;gt;&lt;/tt&gt;: 普通的自定义 User ，比如 &lt;tt class="docutils literal"&gt;alice&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;bob&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system:serviceaccount:&amp;lt;namespace&amp;gt;:&amp;lt;serviceaccount&amp;gt;&lt;/span&gt;&lt;/tt&gt;: 某个 namespace 下的 service account，比如
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system:serviceaccount:kube-system:default&lt;/span&gt;&lt;/tt&gt; 表示 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kube-system&lt;/span&gt;&lt;/tt&gt; namespace 下的 &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; service account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Group&lt;/span&gt;&lt;/tt&gt; 的值即可以是普通的自定义 Group 也可以是系统内置的一些特定 group ，对应的语法如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;lt;Group&amp;gt;&lt;/tt&gt;: 普通的自定义 Group ，比如 &lt;tt class="docutils literal"&gt;admins&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;developers&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;system:authenticated&lt;/tt&gt;: 所有已认证用户&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;system:unauthenticated&lt;/tt&gt;: 所有未认证用户&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;system:serviceaccounts&lt;/tt&gt;: 所有 serviceaccount （无论是哪个 namespace 下的）&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system:serviceaccounts:&amp;lt;namespace&amp;gt;&lt;/span&gt;&lt;/tt&gt; : 某个 namespace 下的所有 serviceaccount&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="kubectl"&gt;
&lt;h2 id="hidkubectl"&gt;kubectl&lt;a class="headerlink" href="#hidkubectl" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;kubectl 命令的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--as&lt;/span&gt;&lt;/tt&gt; 可以配置 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-User&lt;/span&gt;&lt;/tt&gt; 的值， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--as-group&lt;/span&gt;&lt;/tt&gt; 可以配置
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Group&lt;/span&gt;&lt;/tt&gt; 的值，例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kubectl &lt;span class="pre"&gt;--as=system:serviceaccount:kube-system:default&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kubectl &lt;span class="pre"&gt;--as=superman&lt;/span&gt; &lt;span class="pre"&gt;--as-group=system:masters&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;配置扮演用户的权限&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;默认情况下大部分 user 或 serviceaccount 都是没有扮演用户的权限的，可以通过 RBAC 的方式配置权限。&lt;/p&gt;
&lt;p&gt;简单来说就是需要为发起扮演的用户绑定一个拥有 &lt;tt class="docutils literal"&gt;impersonate&lt;/tt&gt; 权限的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;可以扮演 user、group、serviceaccount 的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterRole&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;impersonator&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rules&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;serviceaccounts&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Extra-(&lt;/span&gt; extra name )&lt;/tt&gt; header 支持的 &lt;tt class="docutils literal"&gt;(extra name)&lt;/tt&gt; 也是需要绑定相应的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt;比如下面的 &lt;tt class="docutils literal"&gt;ClusterRole&lt;/tt&gt; 表示可以在扮演是设置 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Impersonate-Extra-scopes&lt;/span&gt;&lt;/tt&gt; header，其中的 &lt;tt class="docutils literal"&gt;scopes&lt;/tt&gt; 就是在下面的 &lt;tt class="docutils literal"&gt;resources&lt;/tt&gt; 里定义的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterRole&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;scopes-impersonator&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rules&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# Can set &amp;quot;Impersonate-Extra-scopes&amp;quot; header.&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authentication.k8s.io&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userextras/scopes&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时还可以通过 &lt;tt class="docutils literal"&gt;resourceNames&lt;/tt&gt; 的值限制 header 的有效值，例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiVersion&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;kind&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterRole&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;metadata&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;limited-impersonator&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;rules&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# Can impersonate the user &amp;quot;jane.doe@example.com&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resourceNames&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jane.doe@example.com&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Can impersonate the groups &amp;quot;developers&amp;quot; and &amp;quot;admins&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resourceNames&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;developers&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admins&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Can impersonate the extras field &amp;quot;scopes&amp;quot; with the values &amp;quot;view&amp;quot; and &amp;quot;development&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apiGroups&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authentication.k8s.io&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resources&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userextras/scopes&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;verbs&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;impersonate&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;resourceNames&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;view&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation"&gt;Authenticating - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#referring-to-subjects"&gt;Using RBAC Authorization - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/56877489/what-is-the-syntax-for-kubectl-can-i-command"&gt;kubernetes - What is the syntax for kubectl can-i command? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/92eb072989eba22236d034b56cc2bf159dfb4915/staging/src/k8s.io/apiserver/pkg/endpoints/filters/impersonation.go#L41"&gt;kubernetes/impersonation.go at 92eb072989eba22236d034b56cc2bf159dfb4915 · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="kubernetes"></category><category term="k8s"></category><category term="kubectl"></category></entry><entry><title>太多的 service 信息环境变量可能会导致容器中执行 bash 命令特别的慢</title><link href="https://mozillazg.com/2020/06/kubernetes-k8s-too-many-service-environment-variables-cause-pod-container-start-bash-too-slow.html" rel="alternate"></link><updated>2020-06-06T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2020-06-06:2020/06/kubernetes-k8s-too-many-service-environment-variables-cause-pod-container-start-bash-too-slow.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当集群里创建了特别多的 service 时可能会导致容器中 bash 启动特别慢，原因是 service 相关的环境变量信息太多了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;解决方法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先说解决方法：可以考虑通过配置 pod spec 增加 &lt;tt class="docutils literal"&gt;enableServiceLinks: false&lt;/tt&gt; 禁用自动注入 service 信息到环境变量的方式来加速 bash 启动速度。 详见： &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/issues/60099"&gt;Service-environment variables should be optional · Issue #60099 · kubernetes/kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面再说一下 debug 方法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="debug"&gt;
&lt;h2 id="hiddebug"&gt;DEBUG&lt;a class="headerlink" href="#hiddebug" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过下面的 DEBUG 方法发现导致容器中执行 bash 特别慢是因为环境变量太多导致的。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;模拟环境&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;测试环境变量比较少的时候启动 bash 的时间:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ docker run -it --rm ubuntu:16.04 bash
# env |wc -l
8

# time bash -c exit

real        0m0.003s
user        0m0.000s
sys 0m0.000s
&lt;/pre&gt;
&lt;p&gt;可以看到启动速度是非常快的。下面模拟一下环境变量特别多的环境:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# for i in {1..10000}; do export &amp;quot;SERVICE_$i&amp;quot;=&amp;quot;$i&amp;quot;; done
# env |wc -l
10008
&lt;/pre&gt;
&lt;p&gt;看一下在环境变量特别多的环境下的 bash 启动时间:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# time bash -c exit

real        0m0.395s
user        0m0.380s
sys 0m0.000s
&lt;/pre&gt;
&lt;p&gt;可以看到速度慢了 100 多倍。&lt;/p&gt;
&lt;p&gt;下面来 debug 一下速度慢的真正原因，是否真的是环境变量特别多导致的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;debug 问题原因&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先安装一下 strace 命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# apt-get update
# apt-get install strace
&lt;/pre&gt;
&lt;p&gt;然后通过 strace 命令来对比不同启动时间下的差别 （实际上一般会先通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; 来统计系统调用时间，这里通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; 无法得到实际原因所以就没写这个步骤了）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# strace -T -o result_slow.log -- bash -c exit

# 实际场景下一般是到没有问题的容器中去获取 result_fast 的结果
# for i in {1..10000}; do unset &amp;quot;SERVICE_$i&amp;quot;; done
# strace -T -o result_fast.log -- bash -c exit
&lt;/pre&gt;
&lt;p&gt;通过对比 result_fast.log 和 result_slow.log 发现有个比较大的差别是 execve 系统调用的参数不一样并且花费的时间也有很大差别:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# result_slow.log
execve(&amp;quot;/bin/bash&amp;quot;, [&amp;quot;bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;exit&amp;quot;], [/* 10008 vars */]) = 0 &amp;lt;0.002256&amp;gt;

# result_fast.log
execve(&amp;quot;/bin/bash&amp;quot;, [&amp;quot;bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;exit&amp;quot;], [/* 8 vars */]) = 0 &amp;lt;0.000345&amp;gt;
&lt;/pre&gt;
&lt;p&gt;通过查看 &lt;a class="reference external" href="https://man7.org/linux/man-pages/man2/execve.2.html"&gt;文档&lt;/a&gt; 可知 &lt;tt class="docutils literal"&gt;execve&lt;/tt&gt; 系统调用的第三个参数传入的是环境变量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int execve(const char *pathname, char *const argv[],
           char *const envp[]);
&lt;/pre&gt;
&lt;p&gt;也就是环境变量的数量不一样导致 execve 所花的时间有很大差异。可以通过执行 strace 命令的时候加一个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt; 参数来查看这个 &lt;tt class="docutils literal"&gt;/* 10008 vars */&lt;/tt&gt; 的具体内容来验证:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
execve(&amp;quot;/bin/bash&amp;quot;, [&amp;quot;bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;exit&amp;quot;], [&amp;quot;SERVICE_9928=9928&amp;quot;, &amp;quot;SERVICE_9911=9911&amp;quot;, ... , &amp;quot;SERVICE_76=76&amp;quot;, &amp;quot;_=/usr/bin/strace&amp;quot;]) = 0 &amp;lt;0.001230&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;总结&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当集群里创建了特别多的 service 并且介意由此导致的 bash 启动特别慢的问题时，可以考虑通过配置 pod spec 增加 &lt;tt class="docutils literal"&gt;enableServiceLinks: false&lt;/tt&gt; 禁用自动注入 service 信息到环境变量的方式来加速 bash 启动速度。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/issues/60099"&gt;Service-environment variables should be optional · Issue #60099 · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mozillazg.com/2019/03/linux-debug-with-strace-cookbook-examples.html"&gt;strace 常用操作 - mozillazg's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://man7.org/linux/man-pages/man2/execve.2.html"&gt;execve(2) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="k8s"></category><category term="kubernetes"></category><category term="bash"></category></entry><entry><title>当有多个可用的 Pod Security Policy 时 k8s 的 PSP 选择策略</title><link href="https://mozillazg.com/2020/05/k8s-kubernetes-use-which-psp-when-there-are-multiple-pod-security-policies.html" rel="alternate"></link><updated>2020-05-17T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2020-05-17:2020/05/k8s-kubernetes-use-which-psp-when-there-are-multiple-pod-security-policies.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单记录一下，当有多个可用的 psp 时，k8s 会为当前 pod 选择哪个 psp，即 psp 的选择策略是啥。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;官方文档的介绍&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/#policy-order"&gt;官方文档&lt;/a&gt; 对这种情况的介绍如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Policy Order&lt;/p&gt;
&lt;p&gt;In addition to restricting pod creation and update, pod security policies can also be used to provide default values for many of the fields that it controls. When multiple policies are available, the pod security policy controller selects policies according to the following criteria:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;PodSecurityPolicies which allow the pod as-is, without changing defaults or mutating the pod, are preferred. The order of these non-mutating PodSecurityPolicies doesn’t matter.&lt;/li&gt;
&lt;li&gt;If the pod must be defaulted or mutated, the first PodSecurityPolicy (ordered by name) to allow the pod is selected.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note: During update operations (during which mutations to pod specs are disallowed) only non-mutating PodSecurityPolicies are used to validate the pod.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说就是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;优先考虑不用修改默认值（修改 pod/container 的 securityContext 值）或改变 pod spec（增加安全相关注解等） 的 psp（详见 &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/af0e1319c35fa143ef6dcb891d753099b6ac1e4b/pkg/security/podsecuritypolicy/provider.go#L67"&gt;源码&lt;/a&gt;  &lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/af0e1319c35fa143ef6dcb891d753099b6ac1e4b/pkg/security/podsecuritypolicy/provider.go#L128"&gt;源码&lt;/a&gt; ），如果没有满足不变条件的 psp 则选择按名称从小到大(a-z)排序后的第一个 psp。&lt;/li&gt;
&lt;li&gt;当然，还有一个没有明说的策略是，可供选择的 psp 必须满足 pod 声明所需的安全相关需求（securityContext 中定义的），对于不满足需求的 psp 自然是直接就过滤掉了不会参与上面的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们来做一些实验来验证这几个选择策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;按名称排序选择第一个&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，我们定义以下两个 PSP 并且配置 default namespace 的 psp serviceaccount 可以使用这两个 psp （假设文件名叫 psp.yaml）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-a
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-b
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: psp:test
  namespace: default
rules:
- apiGroups:
  - policy
  resourceNames:
  - psp-b
  - psp-a
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: psp:test:binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: psp:test
subjects:
  - kind: ServiceAccount
    name: psp
    namespace: default
&lt;/pre&gt;
&lt;p&gt;应用一下上面的 yaml 文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl create sa psp
serviceaccount/psp created
$ kubectl apply -f psp.yaml
podsecuritypolicy.policy/psp-a created
podsecuritypolicy.policy/psp-b created
role.rbac.authorization.k8s.io/psp:test created
rolebinding.rbac.authorization.k8s.io/psp:test:binding created
$ kubectl get psp
NAME    PRIV    CAPS   SELINUX    RUNASUSER   FSGROUP    SUPGROUP   READONLYROOTFS   VOLUMES
psp-a   false          RunAsAny   RunAsAny    RunAsAny   RunAsAny   false            configMap,emptyDir,secret
psp-b   false          RunAsAny   RunAsAny    RunAsAny   RunAsAny   false            configMap,emptyDir,secret
&lt;/pre&gt;
&lt;p&gt;然后创建一个 deployment，看看出来的 pod 实际会用哪个 psp （假设文件名称叫 deployment.yaml）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: test
  name: test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test
  template:
    metadata:
      labels:
        app: test
    spec:
      serviceAccountName: psp
      containers:
      - image: busybox
        name: busybox
        command:
          - sleep
          - &amp;quot;233666&amp;quot;
&lt;/pre&gt;
&lt;p&gt;创建 deployment 并查看生成的 pod 使用的 psp:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl apply -f deployment.yaml
deployment.apps/test created
$ kubectl get pod -l app=test
NAME                    READY   STATUS              RESTARTS   AGE
test-7ff7bc8569-s9487   0/1     ContainerCreating   0          12s
$ kubectl get pod test-7ff7bc8569-s9487 -o jsonpath='{.metadata.annotations}'
map[kubernetes.io/psp:psp-a seccomp.security.alpha.kubernetes.io/pod:docker/default]
&lt;/pre&gt;
&lt;p&gt;通过 pod 的注解我们可以知道这个 pod 使用的 psp 是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; ， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 两个定义的 psp 策略完全一样，当时却使用了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; 符合第二个按名称排序选择第一个的选择策略。&lt;/p&gt;
&lt;p&gt;下面我们来验证一下第一个策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pod-psp"&gt;
&lt;h2 id="hidpod-psp"&gt;优先考虑不用修改默认值或改变 pod 的 psp&lt;a class="headerlink" href="#hidpod-psp" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;前面定义的 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-a&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 中的注解 &lt;tt class="docutils literal"&gt;seccomp.security.alpha.kubernetes.io/defaultProfileName&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;seccomp.security.alpha.kubernetes.io/allowedProfileNames&lt;/tt&gt; 就是一个会改变 pod 的规则，下面删除一下 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 中的这两个注解，按照选择策略，这次应该会使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 这个 psp。&lt;/p&gt;
&lt;p&gt;修改 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 删除 seccomp 注解:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-a
  annotations:
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-b
spec:
  privileged: false
  runAsUser:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  volumes:
  - configMap
  - emptyDir
  - secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: psp:test
  namespace: default
rules:
- apiGroups:
  - policy
  resourceNames:
  - psp-b
  - psp-a
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: psp:test:binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: psp:test
subjects:
  - kind: ServiceAccount
    name: psp
    namespace: default
&lt;/pre&gt;
&lt;p&gt;更新一下已有的 psp:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl apply -f psp.yaml
podsecuritypolicy.policy/psp-a configured
podsecuritypolicy.policy/psp-b configured
role.rbac.authorization.k8s.io/psp:test unchanged
rolebinding.rbac.authorization.k8s.io/psp:test:binding unchanged
&lt;/pre&gt;
&lt;p&gt;还是使用前面的 deployment.yaml 来测试:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ kubectl delete -f deployment.yaml
deployment.apps &amp;quot;test&amp;quot; deleted
$ kubectl apply -f deployment.yaml
deployment.apps/test created
$ kubectl get pod -l app=test
NAME                    READY   STATUS              RESTARTS   AGE
test-7ff7bc8569-bc62g   0/1     ContainerCreating   0          8s
$ kubectl get pod test-7ff7bc8569-bc62g -o jsonpath='{.metadata.annotations}'
map[kubernetes.io/psp:psp-b]
&lt;/pre&gt;
&lt;p&gt;可以看到，这次确实是使用了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;psp-b&lt;/span&gt;&lt;/tt&gt; 这个 psp，验证了第一个选择策略。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;参考资料&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/#policy-order"&gt;Pod Security Policies - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://banzaicloud.com/blog/pod-security-policy/"&gt;An illustrated deepdive into Pod Security Policies · Banzai Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"&gt;Configure Service Accounts for Pods - Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/92ea33efc509052b208e094390a363c5dbd21b7c/plugin/pkg/admission/security/podsecuritypolicy/admission.go"&gt;kubernetes/admission.go at 92ea33efc509052b208e094390a363c5dbd21b7c · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kubernetes/kubernetes/blob/af0e1319c35fa143ef6dcb891d753099b6ac1e4b/pkg/security/podsecuritypolicy/provider.go"&gt;kubernetes/provider.go at af0e1319c35fa143ef6dcb891d753099b6ac1e4b · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="k8s"></category><category term="kubernetes"></category><category term="psp"></category><category term="pod-security-policy"></category></entry></feed>