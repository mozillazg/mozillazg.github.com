<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mozillazg's Blog</title><link href="https://mozillazg.com/" rel="alternate"></link><link href="https://mozillazg.com/feeds/linux.atom.xml" rel="self"></link><id>https://mozillazg.com/</id><updated>2019-06-01T00:00:00+00:00</updated><entry><title>一个因为网卡 txqueuelen 参数值太小导致丢包的 case</title><link href="https://mozillazg.com/2019/06/linux-client-io-timeout-server-lost-drop-packet-tcp-retransmitted-ifconfig-txqueuelen.html" rel="alternate"></link><updated>2019-06-01T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2019-06-01:2019/06/linux-client-io-timeout-server-lost-drop-packet-tcp-retransmitted-ifconfig-txqueuelen.html</id><summary type="html">&lt;p&gt;前段时间线上的一个服务出现 tcp 重传特别严重，同时客户端与服务端通信的过程中经常出现 io timeout 错误。最后发现是因为网卡 txqueuelen 参数的值设置的太小导致的。&lt;/p&gt;
&lt;p&gt;简单记录一下当时的现象，万一将来遇到类似的现象的时候有个参考，整体不是很完整只给自己备忘一下，有空的时候再完善。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;客户端&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;客户端程序使用 go 写的，与服务端端之间以 http 长连接的方式进行通信，直观的现象是日志中经常出现
&lt;tt class="docutils literal"&gt;read tcp &lt;span class="pre"&gt;&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;:&lt;/span&gt; i/o timeout&lt;/tt&gt; 错误。&lt;/p&gt;
&lt;p&gt;由于没有客户端服务器的权限所以没有在客户端抓包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;服务端&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;服务端最先观察到的现象是客户端在频繁的重连（这里只的是频繁的发送 http 请求，前面讲到了客户端与服务端是以 http 长连接的方式通信的，正常情况是连上之后只发一个 http 请求，要等很久才会发其他的 http 请求，也就是不会出现频繁的发送 http 请求的情况）。&lt;/p&gt;
&lt;p&gt;然后查看服务端主机的系统监控，发现 tcp 重传的指标特别高。&lt;/p&gt;
&lt;p&gt;服务端抓包发现的异常情况是: 服务端丢包重传一段时间后，客户端发起了关闭连接的操作，然后又没有完成最后 ACK 而是直接 RST。&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
server -&amp;gt; client    [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
server -&amp;gt; client    [TCP Retransmission] [PSH, ACK] Seq=6195 Ack=1 Win=59 Len=38
client -&amp;gt; server    [FIN, ACK] Seq=1 Ack=6233 Win=60 Len=0
server -&amp;gt; client    [PSH, ACK] Seq=6233 Ack=2 Win=59 Len=190
server -&amp;gt; client    [FIN, ACK] Seq=6423 Ack=2 Win=59 Len=0
client -&amp;gt; server    [RST] Seq=2 Win=0 Len=0
client -&amp;gt; server    [RST] Seq=2 Win=0 Len=0
&lt;/pre&gt;
&lt;p&gt;通过 ifconfig 查看网卡状态，可以发现 RX dropped 的值特别高:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ifconfig

eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 10.0.x.x  netmask 255.255.255.0  broadcast 10.0.x.255
        inet6 xxxx  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether xxx  txqueuelen 1000  (Ethernet)
        RX packets xxx  bytes xxx (68.2 TiB)
        RX errors 0  dropped 6485541  overruns 0  frame 0
        TX packets xxx  bytes xxx (68.5 TiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/pre&gt;
&lt;p&gt;最后公司网络&amp;amp;虚拟化团队说是因为虚拟化时网卡的 txqueuelen 参数设置太小导致的丢包，加大了 txqueuelen 的值后丢包问题就大大缓解了（客户端没有再重连了）。&lt;/p&gt;
&lt;p&gt;这篇文章写的不是很详细，有很多证据没法拿出来或者说是缺失了，期望将来能找个时间以及找到一个可以简单在本地重现的方法，那个时候再完善这篇文章，暂时只能算是简单的 case 备忘。&lt;/p&gt;
&lt;p&gt;BTW, 还碰到一个丢包的 case 是：最终通过开启网卡多队列以及中断绑定来解决大流量下的网络丢包问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;参考资料&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://m.newsmth.net/article/KernelTech/60177"&gt;[合集] 请教：协议栈什么情况下丢包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="丢包"></category></entry><entry><title>net.ipv4.ip_local_port_range 的值究竟影响了啥</title><link href="https://mozillazg.com/2019/05/linux-what-net.ipv4.ip_local_port_range-effect-or-mean.html" rel="alternate"></link><updated>2019-05-04T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2019-05-04:2019/05/linux-what-net.ipv4.ip_local_port_range-effect-or-mean.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;网上关于 &lt;tt class="docutils literal"&gt;net.ipv4.ip_local_port_range&lt;/tt&gt; 的值的效果众说纷纭（下面所说的连接都假定使用的是相同的协议(都是 TCP 或 UDP)）:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;大部分文章都说这个值决定了客户端的一个 ip 可用的端口数量，即一个 ip 最多只能创建 60K 多一点的连接（1025-65535），如果要突破这个限制需要客户端机器绑定多个 ip。&lt;/li&gt;
&lt;li&gt;还有部分文章说的是这个值决定的是 socket 四元组中的本地端口数量，即一个 ip 对同一个目标 ip+port 最多可以创建 60K 多一点连接，只要目标 ip 或端口不一样就可以使用相同的本地端口，不一定需要多个客户端 ip 就可以突破端口数量限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;文档&lt;/a&gt; 中的介绍也很模糊:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ip_local_port_range - 2 INTEGERS
    Defines the local port range that is used by TCP and UDP to
    choose the local port. The first number is the first, the
    second the last local port number.
    If possible, it is better these numbers have different parity.
    (one even and one odd values)
    The default values are 32768 and 60999 respectively.
&lt;/pre&gt;
&lt;p&gt;下面就来做一些实验来确认这个选项的实际效果。&lt;/p&gt;
&lt;p&gt;实验环境:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ uname -a
Linux vagrant 4.15.0-29-generic #31-Ubuntu SMP Tue Jul 17 15:39:52 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="ip"&gt;
&lt;h2 id="hidip"&gt;相同目标 ip 和相同目标端口下的端口数量限制&lt;a class="headerlink" href="#hidip" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先设置 ip_local_port_range 的值为非常小的范围:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ echo &amp;quot;61000 61001&amp;quot; | sudo tee /proc/sys/net/ipv4/ip_local_port_range
61000 61001

$ cat /proc/sys/net/ipv4/ip_local_port_range
61000       61001
&lt;/pre&gt;
&lt;p&gt;然后对相同 ip 和端口发送 tcp 请求。创建两个连接，达到最大端口数量限制:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 123.125.114.144 80 -v &amp;amp;
[1] 16196
$ nohup: ignoring input and appending output to 'nohup.out'

$ nohup nc 123.125.114.144 80 -v &amp;amp;
[2] 16197
$ nohup: ignoring input and appending output to 'nohup.out'

$ ss -ant |grep 10.0.2.15:61
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:80
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:80
&lt;/pre&gt;
&lt;p&gt;然后再创建第三个连接，此时预期应该会失败，因为超出的端口数量现在:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vagrant&amp;#64;vagrant:~$ nc 123.125.114.144 80 -v
nc: connect to 123.125.114.144 port 80 (tcp) failed: Cannot assign requested address
&lt;/pre&gt;
&lt;p&gt;可以看到确实如预期的失败了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;相同目标 ip 不同目标端口&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面看看相同目标 ip 不同目标端口是否可以突破这个端口限制:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 123.125.114.144 443 -v &amp;amp;
[3] 16215
$ nohup: ignoring input and appending output to 'nohup.out'

$ nohup nc 123.125.114.144 443 -v &amp;amp;
[4] 16216
$ nohup: ignoring input and appending output to 'nohup.out'

$ ss -ant |grep 10.0.2.15:61
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:80
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:80
&lt;/pre&gt;
&lt;p&gt;可以看到相同目标 ip 不同目标端口下，每个目标端口都有一个独立的端口限制，即，相同源 ip 的源端口是可以相同的。&lt;/p&gt;
&lt;p&gt;按照推测这两个目标端口应该只能创建四个连接，下面试试看:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ss -ant |grep 10.0.2.15:61
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61001       123.125.114.144:80
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:443
ESTAB   0        0                10.0.2.15:61000       123.125.114.144:80

$ nc 123.125.114.144 443 -v
nc: connect to 123.125.114.144 port 443 (tcp) failed: Cannot assign requested address
&lt;/pre&gt;
&lt;p&gt;确实是不能再创建连接了，因为每个目标端口都达到了 ip_local_port_range 的限制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;多个目标 ip 相同目标端口&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面看一下多个目标 ip 相同目标端口下的情况:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 220.181.57.216 80 -v &amp;amp;
[5] 16222
$ nohup: ignoring input and appending output to 'nohup.out'

$ nohup nc 220.181.57.216 80 -v &amp;amp;
[6] 16223
$ nohup: ignoring input and appending output to 'nohup.out'

$ nc 220.181.57.216 80 -v
nc: connect to 220.181.57.216 port 80 (tcp) failed: Cannot assign requested address

$ ss -ant |grep :80
SYN-SENT  0        1               10.0.2.15:61001       220.181.57.216:80
SYN-SENT  0        1               10.0.2.15:61000       220.181.57.216:80
SYN-SENT  0        1               10.0.2.15:61001      123.125.114.144:80
SYN-SENT  0        1               10.0.2.15:61000      123.125.114.144:80
&lt;/pre&gt;
&lt;p&gt;可以看到，每个目标 ip 都有独立的 ip_local_port_range 限制。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2 id="hidid4"&gt;多个目标 ip 不同目标端口&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面看一下多个目标 ip 相同不同端口下的情况，按照前面的经验两个 ip 加两个端口应该只能创建 8 个连接&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ nohup nc 123.125.114.144 80 -v &amp;amp;

$ nohup nc 123.125.114.144 80 -v &amp;amp;

$ nc 123.125.114.144 80 -v
nc: connect to 123.125.114.144 port 80 (tcp) failed: Cannot assign requested address

$ nohup nc 123.125.114.144 443 -v &amp;amp;

$ nohup nc 123.125.114.144 443 -v &amp;amp;

$ nc 123.125.114.144 443 -v
nc: connect to 123.125.114.144 port 443 (tcp) failed: Cannot assign requested address

$ nohup nc 220.181.57.216 80 -v &amp;amp;

$ nohup nc 220.181.57.216 80 -v &amp;amp;

$ nc 220.181.57.216 80 -v
nc: connect to 220.181.57.216 port 80 (tcp) failed: Cannot assign requested address

$ nohup nc 220.181.57.216 443 -v &amp;amp;

$ nohup nc 220.181.57.216 443 -v &amp;amp;

$ nc 220.181.57.216 443 -v
nc: connect to 220.181.57.216 port 443 (tcp) failed: Cannot assign requested address

$ ss -ant |grep 10.0.2.15:61
SYN-SENT  0        1               10.0.2.15:61001       220.181.57.216:80
ESTAB     0        0               10.0.2.15:61001      123.125.114.144:443
ESTAB     0        0               10.0.2.15:61000       220.181.57.216:443
SYN-SENT  0        1               10.0.2.15:61000       220.181.57.216:80
SYN-SENT  0        1               10.0.2.15:61001      123.125.114.144:80
ESTAB     0        0               10.0.2.15:61000      123.125.114.144:443
SYN-SENT  0        1               10.0.2.15:61000      123.125.114.144:80
ESTAB     0        0               10.0.2.15:61001       220.181.57.216:443
&lt;/pre&gt;
&lt;p&gt;可以看到确实如预期的只能创建8个连接。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;总结&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;那么是否就可以说前言中的第一种说法就是错的呢，查了一下资料其实也不能说第一种说法是错误的：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;当系统的内核版本小于 3.2 时，第一种说法是正确的&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://marc.info/?l=haproxy&amp;amp;m=139315478227467&amp;amp;w=2"&gt;当系统的内核版本大于等于 3.2 时，第二种说法是正确的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;kernel.org/doc/Documentation/networking/ip-sysctl.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;pawilon/tuning-your-linux-kernel-and-haproxy-instance-for-high-loads-1a2105ea553e"&gt;Tuning your Linux kernel and HAProxy instance for high loads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://medium.freecodecamp.org/load-testing-haproxy-part-2-4c8677780df6"&gt;Load Testing HAProxy (Part 2) – freeCodeCamp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/2332741/what-is-the-theoretical-maximum-number-of-open-tcp-connections-that-a-modern-lin"&gt;What is the theoretical maximum number of open TCP connections that a modern Linux box can have - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://vincent.bernat.ch/en/blog/2014-tcp-time-wait-state-linux#connection-table-slot"&gt;Coping with the TCP TIME-WAIT state on busy Linux servers | Vincent Bernat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://marc.info/?l=haproxy&amp;amp;m=139315478227467&amp;amp;w=2"&gt;'Re: Fix for rare EADDRNOTAVAIL error' - MARC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="sysctl"></category></entry><entry><title>strace 常用操作</title><link href="https://mozillazg.com/2019/03/linux-debug-with-strace-cookbook-examples.html" rel="alternate"></link><updated>2019-03-30T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2019-03-30:2019/03/linux-debug-with-strace-cookbook-examples.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;前言&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/strace.1.html"&gt;strace&lt;/a&gt; 可以用来查看/记录程序运行过程中调用的
&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/syscalls.2.html"&gt;系统调用&lt;/a&gt; 以及接收到的进程信号（signal），
对于我们日常 debug 疑难杂症非常的有帮助，是一个非常好的 debug 工具。本文简单记录一下 strace 的常用功能和操作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;输出的含义&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们通过一个简单的命令来查看 strace 程序的典型输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ strace ls /tmp/trace
execve&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/ls&amp;quot;&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;/tmp/trace&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;/* &lt;span class="m"&gt;41&lt;/span&gt; vars */&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
brk&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;                                  &lt;span class="o"&gt;=&lt;/span&gt; 0x11af000
mmap&lt;span class="o"&gt;(&lt;/span&gt;NULL, 4096, PROT_READ&lt;span class="p"&gt;|&lt;/span&gt;PROT_WRITE, MAP_PRIVATE&lt;span class="p"&gt;|&lt;/span&gt;MAP_ANONYMOUS, -1, 0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x7f0738c16000
access&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ld.so.preload&amp;quot;&lt;/span&gt;, R_OK&lt;span class="o"&gt;)&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; -1 ENOENT &lt;span class="o"&gt;(&lt;/span&gt;No such file or directory&lt;span class="o"&gt;)&lt;/span&gt;
open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ld.so.cache&amp;quot;&lt;/span&gt;, O_RDONLY&lt;span class="o"&gt;)&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; 3
fstat&lt;span class="o"&gt;(&lt;/span&gt;3, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;st_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;S_IFREG&lt;span class="p"&gt;|&lt;/span&gt;0644, &lt;span class="nv"&gt;st_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;35759, ...&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
mmap&lt;span class="o"&gt;(&lt;/span&gt;NULL, 35759, PROT_READ, MAP_PRIVATE, 3, 0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x7f0738c0a000
close&lt;span class="o"&gt;(&lt;/span&gt;3&lt;span class="o"&gt;)&lt;/span&gt;                                &lt;span class="o"&gt;=&lt;/span&gt; 0
open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lib64/libselinux.so.1&amp;quot;&lt;/span&gt;, O_RDONLY&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 3
read&lt;span class="o"&gt;(&lt;/span&gt;3, &lt;span class="s2"&gt;&amp;quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&amp;gt;\0\1\0\0\0PX\0\0\0\0\0\0&amp;quot;&lt;/span&gt;..., 832&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 832
fstat&lt;span class="o"&gt;(&lt;/span&gt;3, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;st_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;S_IFREG&lt;span class="p"&gt;|&lt;/span&gt;0755, &lt;span class="nv"&gt;st_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;122040, ...&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
....
fstat&lt;span class="o"&gt;(&lt;/span&gt;1, &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;st_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;S_IFCHR&lt;span class="p"&gt;|&lt;/span&gt;0620, &lt;span class="nv"&gt;st_rdev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;makedev&lt;span class="o"&gt;(&lt;/span&gt;136, 0&lt;span class="o"&gt;)&lt;/span&gt;, ...&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
mmap&lt;span class="o"&gt;(&lt;/span&gt;NULL, 4096, PROT_READ&lt;span class="p"&gt;|&lt;/span&gt;PROT_WRITE, MAP_PRIVATE&lt;span class="p"&gt;|&lt;/span&gt;MAP_ANONYMOUS, -1, 0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x7fb97a060000
write&lt;span class="o"&gt;(&lt;/span&gt;1, &lt;span class="s2"&gt;&amp;quot;test_dir  test.txt\n&amp;quot;&lt;/span&gt;, 19test_dir  test.txt
&lt;span class="o"&gt;)&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; 19
close&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;                                &lt;span class="o"&gt;=&lt;/span&gt; 0
munmap&lt;span class="o"&gt;(&lt;/span&gt;0x7fb97a060000, 4096&lt;span class="o"&gt;)&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; 0
close&lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;                                &lt;span class="o"&gt;=&lt;/span&gt; 0
exit_group&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;                           &lt;span class="o"&gt;=&lt;/span&gt; ?
+++ exited with &lt;span class="m"&gt;0&lt;/span&gt; +++
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如下面的这个输出:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
execve(&amp;quot;/bin/ls&amp;quot;, [&amp;quot;ls&amp;quot;, &amp;quot;/tmp/trace&amp;quot;], [/* 41 vars */]) = 0
&lt;/pre&gt;
&lt;p&gt;的含义如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;execve&lt;/tt&gt;: 系统调用的名称。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(&amp;quot;/bin/ls&amp;quot;,&lt;/span&gt; [&amp;quot;ls&amp;quot;, &lt;span class="pre"&gt;&amp;quot;/tmp/trace&amp;quot;],&lt;/span&gt; [/* 41 vars &lt;span class="pre"&gt;*/])&lt;/span&gt;&lt;/tt&gt;: 这个括号里是系统调用的参数。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;= 0&lt;/tt&gt; : 这个 0 是系统调用的返回值，不一定是数字看具体的系统调用返回啥结果就是啥值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面有些系统调用的返回值比较特殊，比如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
access(&amp;quot;/etc/ld.so.preload&amp;quot;, R_OK)      = -1 ENOENT (No such file or directory)
&lt;/pre&gt;
&lt;p&gt;后面这个 &lt;tt class="docutils literal"&gt;ENOENT (No such file or directory)&lt;/tt&gt; 中的 &lt;tt class="docutils literal"&gt;ENOENT&lt;/tt&gt; 是错误码，
&lt;tt class="docutils literal"&gt;(No such file or directory)&lt;/tt&gt; 是错误码的解释。&lt;/p&gt;
&lt;p&gt;上面是系统调用相关的输出格式和含义，下面再看一个进程信号(signal)的输出格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ strace -p 15718
Process &lt;span class="m"&gt;15718&lt;/span&gt; attached
&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;1, &lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;, NULL, NULL, NULL&lt;span class="o"&gt;)&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; ? ERESTARTNOHAND &lt;span class="o"&gt;(&lt;/span&gt;To be restarted &lt;span class="k"&gt;if&lt;/span&gt; no handler&lt;span class="o"&gt;)&lt;/span&gt;
--- SIGTERM &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;si_signo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SIGTERM, &lt;span class="nv"&gt;si_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SI_USER, &lt;span class="nv"&gt;si_pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;15757, &lt;span class="nv"&gt;si_uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;500&lt;span class="o"&gt;}&lt;/span&gt; ---
+++ killed by SIGTERM +++
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--- SIGTERM {si_signo=SIGTERM, si_code=SI_USER, si_pid=15757, si_uid=500} ---
&lt;/pre&gt;
&lt;p&gt;这一句就是进程接收到的具体 signal 的信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2 id="hidid3"&gt;常用命令行参数&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;常用的参数组合:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
strace -f -s 1024 -tt -T -yy -p &amp;lt;pid&amp;gt;
strace -f -s 1024 -tt -T -yy -p &amp;lt;pid&amp;gt; -o &amp;lt;filename&amp;gt;
strace -c -p &amp;lt;pid&amp;gt;
strace -f -s 1024 -tt -T -yy -C -p &amp;lt;pid&amp;gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; &amp;lt;pid&amp;gt;&lt;/tt&gt;: 附加到进程中，记录某个进程的系统调用和进程信号信息。多个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; &amp;lt;pid&amp;gt;&lt;/tt&gt; 可以实现同时追踪多个进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt;: 同时追踪子进程的系统调用情况（如果是多线程程序的话，会同时追踪所有线程）。如果不加 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; 参数的话默认只追踪指定的单个进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt; &amp;lt;filename&amp;gt;&lt;/tt&gt;: 把输出结果保存到文件中（默认是输出到标准错误）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-ff&lt;/span&gt;&lt;/tt&gt;: 与 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt; &amp;lt;filename&amp;gt;&lt;/tt&gt; 一起使用，会把每个 pid (进程 pid 或线程 id) 的 strace 数据保存到 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;filename&amp;gt;.&amp;lt;pid&amp;gt;&lt;/span&gt;&lt;/tt&gt; 的文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &amp;lt;expr&amp;gt;&lt;/tt&gt;: 过滤事件，只输出符合规则的事件，可以用来指定只看某些系统调用的情况，比如： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; open,read&lt;/tt&gt; 。
或者不看某些系统调用： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; '!open,read'&lt;/tt&gt; ，更强大的过滤功能可以查看 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/strace.1.html"&gt;strace(1)&lt;/a&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt; &amp;lt;size&amp;gt;&lt;/tt&gt;: 指定字符串数据的大小，默认 32。可以通过 -s 来显示更详细的信息或精简信息（比如很多系统调用的参数的值会被截断，可以通过 -s 配置更大的 size 来查看更详细的参数值）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-tt&lt;/span&gt;&lt;/tt&gt;: 显示系统调用是在哪个时刻调用的，包含微秒（ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/tt&gt; 参数一样的效果就是时间不包含微秒）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e open,read -s 2 -tt ls
14:32:18.877470 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.878249 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.878867 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.879386 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.879871 read(3, &amp;quot;\177E&amp;quot;..., 832) = 832
14:32:18.880923 read(3, &amp;quot;no&amp;quot;..., 1024)  = 420
14:32:18.881255 read(3, &amp;quot;&amp;quot;, 1024)       = 0

上面的第一列时间信息即为 -tt 的效果。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-T&lt;/span&gt;&lt;/tt&gt;: 显示执行系统调用所花费的时间，单位是秒&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e read -s 2 -T pwd
read(3, &amp;quot;\177E&amp;quot;..., 832)                = 832 &amp;lt;0.000012&amp;gt;

上面行末的 &amp;lt;0.000012&amp;gt; 即为 -T 的效果。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-y&lt;/span&gt;&lt;/tt&gt;: 输出文件描述符所对应的文件路径&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e read -s 10  cat test.txt
read(3, &amp;quot;\177ELF\2\1\1\3\0\0&amp;quot;..., 832)  = 832
read(3, &amp;quot;hello\n&amp;quot;, 131072)              = 6
hello
read(3, &amp;quot;&amp;quot;, 131072)                     = 0

$ strace -e read -s 10 -y  cat test.txt
read(3&amp;lt;/lib/x86_64-linux-gnu/libc-2.27.so&amp;gt;, &amp;quot;\177ELF\2\1\1\3\0\0&amp;quot;..., 832) = 832
read(3&amp;lt;/path/to/test.txt&amp;gt;, &amp;quot;hello\n&amp;quot;, 131072) = 6
hello
read(3&amp;lt;/path/to/test.txt&amp;gt;, &amp;quot;&amp;quot;, 131072) = 0

可以看到加了 -y 后文件描述符后面会跟它所对应的文件的路径
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-yy&lt;/span&gt;&lt;/tt&gt;: 输出文件描述更详细的信息，比如 socket 文件描述符输出所对应的协议信息。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e connect -s 3  nc baidu.com 80
...
connect(3, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0
...

$ strace -e connect -s 3 -y  nc baidu.com 80
...
connect(3&amp;lt;socket:[22180]&amp;gt;, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0

$ strace -e connect -s 3 -yy  nc baidu.com 80
...
connect(3&amp;lt;UDP:[22202]&amp;gt;, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 0

可以看到 -yy 会显示上面的 UDP 这个协议信息。
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt;: 统计系统调用的次数、种类以及错误信息，会隐藏详细的追踪信息（前面的 -e 过滤参数也可以用于这个）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -c cat test.txt
hello
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 18.45    0.000019           3         7           mmap
 18.45    0.000019           5         4           mprotect
 17.48    0.000018           9         2           munmap
 13.59    0.000014           4         4           openat
  9.71    0.000010          10         1           write
  6.80    0.000007           2         3           read
  5.83    0.000006           2         3         3 access
  3.88    0.000004           1         5           fstat
  2.91    0.000003           1         6           close
  1.94    0.000002           1         3           brk
  0.97    0.000001           1         1           execve
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0         1           fadvise64
------ ----------- ----------- --------- --------- ----------------
100.00    0.000103                    41         3 total
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-C&lt;/span&gt;&lt;/tt&gt;: 跟 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; 类似，只是增加了会输出详细的追踪信息&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ strace -e read -C -s 3 cat test.txt
read(3, &amp;quot;\177EL&amp;quot;..., 832)               = 832
read(3, &amp;quot;hel&amp;quot;..., 131072)               = 6
hello
read(3, &amp;quot;&amp;quot;, 131072)                     = 0
+++ exited with 0 +++
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
  0.00    0.000000           0         3           read
------ ----------- ----------- --------- --------- ----------------
100.00    0.000000                     3           total
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;: 显示系统调用时传入的参数变量的具体内容，而不是默认显示为 &lt;tt class="docutils literal"&gt;/* 8 vars */&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;常用过滤表达式&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &amp;lt;expr&amp;gt;&lt;/tt&gt; 这个参数可以用来指定需要 trace 哪些事件，格式如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[qualifier=][!][?]value1[,[?]value2]...

其中 qualifier 的值是 trace, abbrev, verbose, raw,
signal, read, write, fault, inject, or kvm 。默认是 trace

value 就是各种过滤条件了。
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/tt&gt; : &lt;tt class="docutils literal"&gt;&amp;lt;set&amp;gt;&lt;/tt&gt; 是系统调用名称（默认是 &lt;tt class="docutils literal"&gt;trace=all&lt;/tt&gt; ），比如 &lt;tt class="docutils literal"&gt;trace=open,close,read,write&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=/&amp;lt;regex&amp;gt;&lt;/span&gt;&lt;/tt&gt;: 可以通过这种方式来用正则表达式指定系统调用名称，支持的正则语法可以参考 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/regex.7.html"&gt;regex(7)&lt;/a&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%file&lt;/span&gt;&lt;/tt&gt;: 文件相关系统调用。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%desc&lt;/span&gt;&lt;/tt&gt;: 文件描述符相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%process&lt;/span&gt;&lt;/tt&gt;: 进程管理相关系统调用。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%network&lt;/span&gt;&lt;/tt&gt;: 网络相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%signal&lt;/span&gt;&lt;/tt&gt;: 信号相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%ipc&lt;/span&gt;&lt;/tt&gt;: IPC 相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;trace=%memory&lt;/span&gt;&lt;/tt&gt;: 内存 mapping 相关。&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;signal=&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&amp;lt;set&amp;gt;&lt;/tt&gt; 是进程信号的名称（默认是 &lt;tt class="docutils literal"&gt;signal=all&lt;/tt&gt; ），比如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; signal=SIGTERM&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-e&lt;/span&gt; &lt;span class="pre"&gt;read=&amp;lt;set&amp;gt;&lt;/span&gt;&lt;/tt&gt;: 追踪指定 fd 上的数据并打印 hex 和 ascii 格式的数据， &lt;tt class="docutils literal"&gt;&amp;lt;set&amp;gt;&lt;/tt&gt; 是 fd 比如:&lt;tt class="docutils literal"&gt;read=3,5&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;常见系统调用&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/open.2.html"&gt;open()&lt;/a&gt; : 用于打开或创建一个文件。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/read.2.html"&gt;read()&lt;/a&gt; : 用于读取一个文件。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/write.2.html"&gt;write()&lt;/a&gt; : 写文件。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/connect.2.html"&gt;connect()&lt;/a&gt; : 建立网络连接。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/sendto.2.html"&gt;sendto()&lt;/a&gt; : 发送网络数据。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/recvfrom.2.html"&gt;recvfrom()&lt;/a&gt; : 接收网络数据。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/futex.2.html"&gt;futex()&lt;/a&gt; : 锁相关操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多关于某个系统调用的含义/用途可以通过 &lt;tt class="docutils literal"&gt;man 2 &amp;lt;syscall&amp;gt;&lt;/tt&gt; （把 &lt;tt class="docutils literal"&gt;&amp;lt;syscall&amp;gt;&lt;/tt&gt; 替换为实际的系统调用名称，比如 &lt;tt class="docutils literal"&gt;man 2 open&lt;/tt&gt; ）命令行查看或者访问
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://man7.org/linux/man-pages/man2/&amp;lt;syscall&amp;gt;.2.html&lt;/span&gt;&lt;/tt&gt; 这个网址（把 &lt;tt class="docutils literal"&gt;&amp;lt;syscall&amp;gt;&lt;/tt&gt; 替换为实际的系统调用名称, 比如 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/open.2.html"&gt;http://man7.org/linux/man-pages/man2/open.2.html&lt;/a&gt;）亦或是 Google 一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;总结&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;更多关于 strace 的信息可以从参考资料的 strace(1) 中获取，如果对输出中系统调用不了解的话可以参考参考资料中的 syscalls(2) 中的信息，同时也别忘了搜索引擎是你的好朋友，有啥不明白的记得 Google 一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2 id="hidid7"&gt;参考资料&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/strace.1.html"&gt;strace(1) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/syscalls.2.html"&gt;syscalls(2) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/regex.7.html"&gt;regex(7) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="strace"></category><category term="debug"></category></entry><entry><title>Bash Shell 常用语法和操作</title><link href="https://mozillazg.com/2018/08/linux-bash-shell-script-cookbook.html" rel="alternate"></link><updated>2018-08-12T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2018-08-12:2018/08/linux-bash-shell-script-cookbook.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;变量&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;变量名=值&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;数组&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;定义一个数组变量&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="range"&gt;
&lt;h3 id="hidrange"&gt;range&lt;a class="headerlink" href="#hidrange" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;start..end..step&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 输出 1 2 3&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; value in &lt;span class="o"&gt;{&lt;/span&gt;1..3&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c1"&gt;# 输出 1 3 5&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; value in &lt;span class="o"&gt;{&lt;/span&gt;1..6..2&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if"&gt;
&lt;h2 id="hidif"&gt;if&lt;a class="headerlink" href="#hidif" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;if 语句的语法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &amp;lt;different commands&amp;gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &amp;lt;other commands&amp;gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -gt &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;you are &lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt; 18&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -eq &lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;you are &lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt; == 18&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;you are &lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt; 18&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;常用的条件判断&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="38%" /&gt;
&lt;col width="63%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;条件表达式&lt;/th&gt;
&lt;th class="head"&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;! 表达式&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-n 字符串&lt;/td&gt;
&lt;td&gt;字符串长度大于 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-z 字符串&lt;/td&gt;
&lt;td&gt;字符串长度等于 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A = B&lt;/td&gt;
&lt;td&gt;字符串 A B 相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;A != B&lt;/td&gt;
&lt;td&gt;字符串 A B 不相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;m -eq n&lt;/td&gt;
&lt;td&gt;数字 m n 相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;m -gt n&lt;/td&gt;
&lt;td&gt;数字 m 大于 n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;m -lt n&lt;/td&gt;
&lt;td&gt;数字 m 小于 n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-d 路径&lt;/td&gt;
&lt;td&gt;文件路径存在，并且是个目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-e 路径&lt;/td&gt;
&lt;td&gt;文件存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-s 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且大小大于 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-r 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且拥有读权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-w 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且拥有写权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-x 路径&lt;/td&gt;
&lt;td&gt;文件存在，并且拥有执行权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;[]&lt;/tt&gt; 实际调用的是 &lt;tt class="docutils literal"&gt;test&lt;/tt&gt; 命令，我们可以用 &lt;tt class="docutils literal"&gt;test&lt;/tt&gt; 命令来测试条件表达式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 18
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
1
$ &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; -eq 1
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以及可以用 &lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;||&lt;/tt&gt; 组合判断多个条件表达式，实现 and 和 or 的功能&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="case-switch-case"&gt;
&lt;h2 id="hidcase-switch-case"&gt;case(switch case)&lt;a class="headerlink" href="#hidcase-switch-case" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &amp;lt;variable&amp;gt; in
&amp;lt;pattern 1&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &amp;lt;commands&amp;gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&amp;lt;pattern 2&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &amp;lt;other commands&amp;gt;
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; in
start&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; starting
    &lt;span class="p"&gt;;;&lt;/span&gt;
stop&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; stoping
    &lt;span class="p"&gt;;;&lt;/span&gt;
restart&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; restarting
    &lt;span class="p"&gt;;;&lt;/span&gt;
*&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; don&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;t know
    &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="for"&gt;
&lt;h2 id="hidfor"&gt;for&lt;a class="headerlink" href="#hidfor" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; var in &amp;lt;list&amp;gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同时 &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; 也支持 &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;continue&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tom jim jake&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; name in &lt;span class="nv"&gt;$names&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; age in &lt;span class="o"&gt;{&lt;/span&gt;1..10&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$age&lt;/span&gt; -eq &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$age&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$age&lt;/span&gt; -gt &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="while"&gt;
&lt;h2 id="hidwhile"&gt;while&lt;a class="headerlink" href="#hidwhile" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt; -le &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;total++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="until"&gt;
&lt;h2 id="hiduntil"&gt;until&lt;a class="headerlink" href="#hiduntil" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &amp;lt;some test&amp;gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt; -gt &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$total&lt;/span&gt;
    &lt;span class="o"&gt;((&lt;/span&gt;total++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="select"&gt;
&lt;h2 id="hidselect"&gt;select 单项选择&lt;a class="headerlink" href="#hidselect" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;选择功能一般用 case 语法用的多，不过 select 也可以实现，
select 的功能类似 while + case，比较适合反复询问用户选择项直到用户选择了输入了合法的选择项。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; var in &amp;lt;list&amp;gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &amp;lt;commands&amp;gt;
    &lt;span class="o"&gt;[&lt;/span&gt;break&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以用 break 跳出 select 以及可以通过修改 PS3 变量的值修改提示内容。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PS3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;please choice: &amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt; value in &lt;span class="o"&gt;{&lt;/span&gt;1..5&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; -gt &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;函数&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;function_name &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# or&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; function_name &lt;span class="o"&gt;{&lt;/span&gt;
    &amp;lt;commands&amp;gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3 id="hidid6"&gt;参数&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在函数体内可以通过 $1, $2, $3, ... 获取调用时传入的位置参数&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3 id="hidid7"&gt;返回值&lt;a class="headerlink" href="#hidid7" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不支持返回值功能，不过可以用 return x 指定一个状态吗:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; 3
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;   &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3 id="hidid8"&gt;变量作用域&lt;a class="headerlink" href="#hidid8" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;默认函数类的变量是全局变量，可以通过 local 定义局部变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;

    &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;233&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;666&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;, &lt;span class="nv"&gt;$b&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;global&amp;#39;&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3 id="hidid9"&gt;创建跟外部命令同名的函数&lt;a class="headerlink" href="#hidid9" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; ls &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; ls -lh
&lt;span class="o"&gt;}&lt;/span&gt;

ls
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;主要是不要忘了加 command，不加的话，上面的 ls 会无限递归不会按预期的调用 ls 命令。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2 id="hidid10"&gt;字符串操作&lt;a class="headerlink" href="#hidid10" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3 id="hidid11"&gt;字符串替换&lt;a class="headerlink" href="#hidid11" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4 id="hidid12"&gt;替换子串&lt;a class="headerlink" href="#hidid12" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello_world&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/_/-&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
hello-world
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/world/bar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
hello_bar
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4 id="hidid13"&gt;删除前缀&lt;a class="headerlink" href="#hidid13" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foofoo_bar_foofoo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;#foo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foo_bar_foofoo
$ &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;$prefix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foo_bar_foofoo
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h4 id="hidid14"&gt;删除后缀&lt;a class="headerlink" href="#hidid14" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foofoo_bar_foofoo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;%foo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foofoo_bar_foo
$ &lt;span class="nv"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;$suffix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
foofoo_bar_foo
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3 id="hidid15"&gt;打印字符串&lt;a class="headerlink" href="#hidid15" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;推荐使用 &lt;tt class="docutils literal"&gt;printf&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world\\n&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello %s\\n&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;echo&lt;/tt&gt; 也可以：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; hello
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h2 id="hidid16"&gt;文件操作&lt;a class="headerlink" href="#hidid16" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id17"&gt;
&lt;h3 id="hidid17"&gt;保存大段文本&lt;a class="headerlink" href="#hidid17" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;tt class="docutils literal"&gt;tee&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;EOF&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tee test.text &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;hello&lt;/span&gt;
&lt;span class="s"&gt;    world&lt;/span&gt;

&lt;span class="s"&gt;!&lt;/span&gt;

&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;保存包含 EOF 命令的文本可以用多个 EOF 的变种:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tee a.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;tee b.text &amp;lt;&amp;lt; EOF&lt;/span&gt;2
 &lt;span class="nb"&gt;echo&lt;/span&gt; hello
EOF2
EOF


$ tee a.sh &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class="s"&gt;&amp;gt; tee b.text &amp;lt;&amp;lt; EOF&lt;/span&gt;2
&amp;gt; &lt;span class="nb"&gt;echo&lt;/span&gt; hello
&amp;gt; EOF2
&amp;gt; EOF
tee b.text &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF2&lt;/span&gt;
&lt;span class="s"&gt;echo hello&lt;/span&gt;
&lt;span class="s"&gt;EOF2&lt;/span&gt;

$ cat a.sh
tee b.text &lt;span class="s"&gt;&amp;lt;&amp;lt; EOF2&lt;/span&gt;
&lt;span class="s"&gt;echo hello&lt;/span&gt;
&lt;span class="s"&gt;EOF2&lt;/span&gt;

$ bash a.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; hello

$ cat b.text
&lt;span class="nb"&gt;echo&lt;/span&gt; hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;append 更新可以使用 &lt;tt class="docutils literal"&gt;tee &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h2 id="hidid18"&gt;其他实用功能&lt;a class="headerlink" href="#hidid18" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="cd"&gt;
&lt;h3&gt;隔离 &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; 命令的干扰&lt;/h3&gt;
&lt;p&gt;可以用括号来隔离:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pwd=/tmp&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; test/
    ls   &lt;span class="c1"&gt;# pwd = /tmp/test/&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# pwd=/tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3 id="hidid19"&gt;设置功能标志&lt;a class="headerlink" href="#hidid19" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一般会在脚本中设置如下标志：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -euo pipefail
&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$&amp;#39;\n\t&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的功能标志如下：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;运行的时候显示执行到那一条语句了: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -x

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash a.sh
+ &lt;span class="nb"&gt;echo&lt;/span&gt; hello
hello
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;bash &lt;span class="pre"&gt;-x&lt;/span&gt; xx.sh&lt;/tt&gt; 也可以实现同样的效果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash -x a.sh
+ &lt;span class="nb"&gt;echo&lt;/span&gt; hello
hello
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;有任何命令的退出码不是 0 就退出: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-e&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
abc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 1: abc: &lt;span class="nb"&gt;command&lt;/span&gt; not found
hello

$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -e
abc
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 2: abc: &lt;span class="nb"&gt;command&lt;/span&gt; not found
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;bash &lt;span class="pre"&gt;-e&lt;/span&gt; xx.sh&lt;/tt&gt; 也可以实现同样的效果。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;引用未定义的变量时出错并退出: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-u&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$abc&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello

$ bash a.sh

hello

$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -u
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$abc&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; hello

$ bash a.sh
a.sh: line 2: abc: unbound variable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;bash &lt;span class="pre"&gt;-u&lt;/span&gt; xx.sh&lt;/tt&gt; 也可以实现同样的效果。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;管道命令中有一个命令失败整个管道操作的退出码将是失败的那个命令的退出码,
未设置这个标志时是最后一个操作的退出码: &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-o&lt;/span&gt; pipefail&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
la la la &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 1: la: &lt;span class="nb"&gt;command&lt;/span&gt; not found
aa

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
0

$ cat a.sh
&lt;span class="nb"&gt;set&lt;/span&gt; -o pipefail
la la la &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aa&amp;#39;&lt;/span&gt;

$ bash a.sh
a.sh: line 2: la: &lt;span class="nb"&gt;command&lt;/span&gt; not found
aa

$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
127
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;设置单词切分使用的分隔符，默认是 &lt;tt class="docutils literal"&gt;$' \n\t'&lt;/tt&gt; （空格、换行、制表符），
可以通过 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;IFS=$'\n\t'&lt;/span&gt;&lt;/tt&gt; 设置为换行和制表符:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat a.sh
&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foo bar&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foobar tom&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

$ bash a.sh
foo
bar
foobar
tom

$ cat a.sh
&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foo bar&amp;quot;&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;foobar tom&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;$&amp;#39;\n\t&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

$ bash a.sh
foo bar
foobar tom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更多的 set 支持的标志可以查看 &lt;a class="reference external" href="https://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin"&gt;Bash Reference Manual&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h2 id="hidid20"&gt;数学运算&lt;a class="headerlink" href="#hidid20" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以通过 &lt;tt class="docutils literal"&gt;$(( &amp;lt;expression&amp;gt; ))&lt;/tt&gt; 执行数学运算，比如：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;+&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;$(( 1 + 2 ))&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;-&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;$(( 1 - 2 ))&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;$(( 1 * 2 ))&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;$(( 1 / 2 ))&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;%&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;$(( 1 % 2 ))&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支持变量做运算符，比如: &lt;tt class="docutils literal"&gt;$(( a + b ))&lt;/tt&gt; （推荐） 或 &lt;tt class="docutils literal"&gt;$(( $a + $b ))&lt;/tt&gt; （不推荐, 详见 &lt;a class="reference external" href="https://github.com/koalaman/shellcheck/wiki/SC2004"&gt;SC2004 - shellcheck&lt;/a&gt; ）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h2 id="hidid21"&gt;参考资料&lt;a class="headerlink" href="#hidid21" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ryanstutorials.net/bash-scripting-tutorial/bash-if-statements.php"&gt;If Statements - Bash Scripting Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ryanstutorials.net/bash-scripting-tutorial/bash-loops.php"&gt;Loops - Bash Scripting Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gnu.org/software/bash/manual/bashref.html#The-Set-Builtin"&gt;Bash Reference Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://redsymbol.net/articles/unofficial-bash-strict-mode/"&gt;Use the Unofficial Bash Strict Mode (Unless You Looove Debugging)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_04"&gt;Shell Command Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/koalaman/shellcheck"&gt;shellcheck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="bash"></category><category term="shell"></category></entry><entry><title>tcpdump 常用操作</title><link href="https://mozillazg.com/2018/01/tcpdump-common-useful-examples-cookbook.html" rel="alternate"></link><updated>2018-01-14T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2018-01-14:2018/01/tcpdump-common-useful-examples-cookbook.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;常用参数&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-i&lt;/span&gt; interface&lt;/tt&gt;: 设置抓取的网卡名（可以使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-i&lt;/span&gt; any&lt;/tt&gt; 抓取所有网卡的数据包）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-D&lt;/span&gt;&lt;/tt&gt;: 列出可用的网卡列表&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -D
1.eth0
2.nflog &lt;span class="o"&gt;(&lt;/span&gt;Linux netfilter log &lt;span class="o"&gt;(&lt;/span&gt;NFLOG&lt;span class="o"&gt;)&lt;/span&gt; interface&lt;span class="o"&gt;)&lt;/span&gt;
3.nfqueue &lt;span class="o"&gt;(&lt;/span&gt;Linux netfilter queue &lt;span class="o"&gt;(&lt;/span&gt;NFQUEUE&lt;span class="o"&gt;)&lt;/span&gt; interface&lt;span class="o"&gt;)&lt;/span&gt;
4.usbmon1 &lt;span class="o"&gt;(&lt;/span&gt;USB bus number 1&lt;span class="o"&gt;)&lt;/span&gt;
5.any &lt;span class="o"&gt;(&lt;/span&gt;Pseudo-device that captures on all interfaces&lt;span class="o"&gt;)&lt;/span&gt;
6.lo
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt; file&lt;/tt&gt;: 把捕获的包数据写入到文件中（可以使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt; -&lt;/tt&gt; 输出到标准输出）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 -w debug.cap
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-C&lt;/span&gt; size&lt;/tt&gt;: 使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-w&lt;/span&gt;&lt;/tt&gt; 写入文件时，限制文件的最大大小，超出时新开一个文件（单位是 1,000,000 bytes）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -i eth0 -w debug.cap -C 1
$ ls debug* -l
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump &lt;span class="m"&gt;1000956&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 10:16 debug.cap
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump &lt;span class="m"&gt;1000323&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 10:32 debug.cap1
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump &lt;span class="m"&gt;1000017&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 10:51 debug.cap2
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; tcpdump tcpdump  &lt;span class="m"&gt;970705&lt;/span&gt; Jan &lt;span class="m"&gt;14&lt;/span&gt; 11:08 debug.cap3
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-r&lt;/span&gt; file&lt;/tt&gt;: 从文件中读取包数据&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -r debug.cap
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;: 启用 verbose output，抓包时输出包的附加信息（可以使用多个 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-vv&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-vvv&lt;/span&gt;&lt;/tt&gt; 多个 &lt;tt class="docutils literal"&gt;v&lt;/tt&gt; 会显示更多更详细的信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -v
tcpdump -vv
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-A&lt;/span&gt;&lt;/tt&gt;: 以 ASCII 码方式显示每一个数据包(不会显示数据包中链路层头部信息). 在抓取包含网页数据的数据包时, 可方便查看数据&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制打印出每个包的数据(但不包括连接层的头部)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-xx&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制打印出每个包的数据, 其中包括数据链路层的头部&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制和 ASCII 码形式打印出每个包的数据(但不包括连接层的头部)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-XX&lt;/span&gt;&lt;/tt&gt;: 打印每个包的头部数据, 同时会以16进制和 ASCII 码形式打印出每个包的数据, 其中包括数据链路层的头部&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt; count&lt;/tt&gt;: 设置抓取到多少个包后就退出&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -i eth0 -c 100
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt;&lt;/tt&gt;: 不要把地址转换为主机名（直接显示 ip 不要解析为域名）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -n
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-nn&lt;/span&gt;&lt;/tt&gt;: 不要把转换协议和端口号（直接显示协议和端口号，不要转换为协议名称，比如 http）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -nn
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt; snaplen&lt;/tt&gt;: 设置 tcpdump 的数据包抓取长度为 snaplen , 为 0 时表示让 tcpdump 自动选择合适的长度来抓取数据包.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -s 0
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-S&lt;/span&gt;&lt;/tt&gt;: 打印TCP 数据包的顺序号时, 使用绝对的顺序号, 而不是相对的顺序号.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump -S
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-Z&lt;/span&gt; user&lt;/tt&gt;: 使tcpdump 放弃自己的超级权限(如果以root用户启动tcpdump, tcpdump将会有超级用户权限), 并把当前tcpdump的用户ID设置为user, 组ID设置为user首要所属组的ID&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump -Z user2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常用的参数组合:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump -i eth0 -nnS -s &lt;span class="m"&gt;0&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; -Avvv &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;expression&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
sudo tcpdump -i eth0 -nnS -s &lt;span class="m"&gt;1024&lt;/span&gt; -c &lt;span class="m"&gt;100&lt;/span&gt; -Avvv &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;expression&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
sudo tcpdump -i eth0 -nnS -s &lt;span class="m"&gt;1024&lt;/span&gt; -C &lt;span class="m"&gt;10&lt;/span&gt; -c &lt;span class="m"&gt;10000&lt;/span&gt; -v -w debug.cap &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;expression&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认 tcpdump 会抓取所有的数据，可以通过指定过滤规则来过滤数据包。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;常用过滤规则&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;过滤规则一般包含三种修饰符的组合：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;type: 指定id 所代表的对象类型, id可以是名字也可以是数字. 可选的对象类型有: host, net, port 以及portrange，默认是 host&lt;/li&gt;
&lt;li&gt;dir: 描述id 所对应的传输方向, 即发往id 还是从id 接收（而id 到底指什么需要看其前面的type 修饰符）.可取的方向为: src, dst, src or dst, src and dst&lt;/li&gt;
&lt;li&gt;proto: 描述id 所属的协议. 可选的协议有: ether, fddi, tr, wlan, ip, ip6, arp, rarp, decnet, tcp以及 upd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过括号(&lt;tt class="docutils literal"&gt;\( xxx \)&lt;/tt&gt;) 和 bool 操作符可以组合多种过滤规则，一对括号是一组:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;否定操作: &lt;tt class="docutils literal"&gt;!&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;not&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;与操作: &lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;and&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;或操作: &lt;tt class="docutils literal"&gt;||&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;or&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详情见文档：&lt;a class="reference external" href="http://www.tcpdump.org/manpages/pcap-filter.7.html"&gt;Manpage of PCAP-FILTER&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面列出一下常用的过滤规则:&lt;/p&gt;
&lt;div class="section" id="ip"&gt;
&lt;h3 id="hidip"&gt;过滤 ip/域名&lt;a class="headerlink" href="#hidip" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤目标域名是 baidu.com:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dst host baidu.com
&lt;/pre&gt;
&lt;p&gt;源 ip 或者目标 ip 是 192.168.1.3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
host 192.168.1.3
&lt;/pre&gt;
&lt;p&gt;源 ip 是 192.168.1.3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src host 192.168.1.3
&lt;/pre&gt;
&lt;p&gt;目标 ip 是 192.168.1.3:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dst host 192.168.1.3
&lt;/pre&gt;
&lt;p&gt;过滤范围内的 ip /网段 ip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
net 192.168.0.0/24
net 192.168.0.0 mask 255.255.255.0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;过滤端口&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤 80 端口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
port 80
&lt;/pre&gt;
&lt;p&gt;排除端口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
not port 80
host www.example.com and not \(port 80 or port 25\)
host www.example.com and not port 80 and not port 25
&lt;/pre&gt;
&lt;p&gt;端口范围:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(tcp[0:2] &amp;gt; 1500 and tcp[0:2] &amp;lt; 1550) or (tcp[2:2] &amp;gt; 1500 and tcp[2:2] &amp;lt; 1550)

tcp portrange 1501-1549
&lt;/pre&gt;
&lt;p&gt;DNS 53 端口:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
port 53
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3 id="hidid4"&gt;过滤协议&lt;a class="headerlink" href="#hidid4" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ipv4: &lt;tt class="docutils literal"&gt;ip&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;ipv6: &lt;tt class="docutils literal"&gt;ip6&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;tcp: &lt;tt class="docutils literal"&gt;tcp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;udp: &lt;tt class="docutils literal"&gt;udp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;arp: &lt;tt class="docutils literal"&gt;arp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;icmp: &lt;tt class="docutils literal"&gt;icmp&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3 id="hidid5"&gt;过滤协议头&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤 tcp SYN 消息包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[tcpflags] &amp;amp; (tcp-syn) != 0'
&lt;/pre&gt;
&lt;p&gt;过滤 tcp SYN/ACK 消息包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[tcpflags] &amp;amp; (tcp-syn|tcp-ack) != 0'
&lt;/pre&gt;
&lt;p&gt;常用的 tcp 标记:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tcp-fin, tcp-syn, tcp-rst, tcp-push, tcp-ack, tcp-urg, tcp-ece, tcp-cwr
&lt;/pre&gt;
&lt;p&gt;源端口大于1024的TCP数据包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[0:2] &amp;gt; 1024'
&lt;/pre&gt;
&lt;p&gt;注意要用引号引起来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http"&gt;
&lt;h3 id="hidhttp"&gt;过滤 HTTP&lt;a class="headerlink" href="#hidhttp" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;过滤 GET 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420'
&lt;/pre&gt;
&lt;p&gt;上面的 &lt;tt class="docutils literal"&gt;0x47455420&lt;/tt&gt; 是 &lt;tt class="docutils literal"&gt;'GET '&lt;/tt&gt; 的 16 进制:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'GET ']))
['0x47', '0x45', '0x54', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 POST 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x504f5354 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:1] = 0x20'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'POST ']))
['0x50', '0x4f', '0x53', '0x54', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 PUT 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x50555420'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'PUT ']))
['0x50', '0x55', '0x54', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 PATH 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x50415443 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:2] = 0x4820'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'PATCH ']))
['0x50', '0x41', '0x54', '0x43', '0x48', '0x20']
&lt;/pre&gt;
&lt;p&gt;之所以拆分成了多个条件是因为 &lt;tt class="docutils literal"&gt;tcpdump: data size must be 1, 2, or 4&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;过滤 DELETE 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x44454c45 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:2] = 0x5445 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 6:1] = 0x20'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'DELETE ']))
['0x44', '0x45', '0x4c', '0x45', '0x54', '0x45', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 HEAD 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x48454144 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:1] = 0x20'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'HEAD ']))
['0x48', '0x45', '0x41', '0x44', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 OPTIONS 请求:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x4f505449 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:4] = 0x4f4e5320'

&amp;gt;&amp;gt;&amp;gt; list(map(hex, [ord(x) for x in 'OPTIONS ']))
['0x4f', '0x50', '0x54', '0x49', '0x4f', '0x4e', '0x53', '0x20']
&lt;/pre&gt;
&lt;p&gt;过滤 HTTP 响应 (&lt;tt class="docutils literal"&gt;HTTP/1.&lt;/tt&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x48545450 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 4:2] = 0x2f31 &amp;amp;&amp;amp; tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2) + 6:1] = 0x2e'
&lt;/pre&gt;
&lt;p&gt;HTTP request header &amp;amp;&amp;amp; body &amp;amp;&amp;amp; response header &amp;amp;&amp;amp; body:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'(((ip[2:2] - ((ip[0]&amp;amp;0xf)&amp;lt;&amp;lt;2)) - ((tcp[12]&amp;amp;0xf0)&amp;gt;&amp;gt;2)) != 0)'
&lt;/pre&gt;
&lt;p&gt;自动生成 HTTP 相关过滤规则的脚本: &lt;a class="reference external" href="https://www.wireshark.org/tools/string-cf.html"&gt;https://www.wireshark.org/tools/string-cf.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面的规则可以通过括号和操作符进行各种组合，从而组合出复杂的过滤规则。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 192.168.8.3 -Avv
sudo tcpdump dst host baidu.com and dst port &lt;span class="m"&gt;80&lt;/span&gt; -i eth0 -vv
sudo tcpdump dst host baidu.com and not dst port &lt;span class="m"&gt;80&lt;/span&gt; -i eth0 -vv
sudo tcpdump dst host baidu.com and not &lt;span class="se"&gt;\(&lt;/span&gt;dst port &lt;span class="m"&gt;80&lt;/span&gt; or dst port 443&lt;span class="se"&gt;\)&lt;/span&gt; -i en0 -vv
sudo tcpdump dst host baidu.com and &lt;span class="s1"&gt;&amp;#39;tcp[tcpflags] &amp;amp; (tcp-syn) != 0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2 id="hidid6"&gt;参考资料&lt;a class="headerlink" href="#hidid6" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.wireshark.org/CaptureFilters"&gt;CaptureFilters - The Wireshark Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tcpdump.org/manpages/pcap-filter.7.html"&gt;Manpage of PCAP-FILTER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html"&gt;Linux tcpdump命令详解 - ggjucheng - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.zioer.org/2017/07/14/linux-command-for-tcpdump/"&gt;tcpdump命令常用方法 | 卡卡罗特&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://linuxwiki.github.io/NetTools/tcpdump.html#210http-get"&gt;tcpdump - Linux Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/"&gt;Tcpdump advanced filters - Sebastien Wains - A blog about Linux and Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stackoverflow.com/questions/4777042/can-i-use-tcpdump-to-get-http-requests-response-header-and-response-body"&gt;android - Can I use tcpdump to get HTTP requests, response header and response body? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="tcpdump"></category></entry><entry><title>一种解决 HAProxy 节点网络异常（sendmsg: Invalid argument, Connection timed out ）的办法</title><link href="https://mozillazg.com/2017/10/linux-a-way-to-fix-haproxy-network-connection-timeout-ping-sendmsg-Invalid-argument-socket-errno-110-connection-timed-out.html" rel="alternate"></link><updated>2017-10-21T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2017-10-21:2017/10/linux-a-way-to-fix-haproxy-network-connection-timeout-ping-sendmsg-Invalid-argument-socket-errno-110-connection-timed-out.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2 id="hidid1"&gt;问题&lt;a class="headerlink" href="#hidid1" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;之前连接一个 HAProxy 前端服务时总是时不时出现 &lt;tt class="docutils literal"&gt;[Errno 110] Connection timed out&lt;/tt&gt; ，并且本地 ping 服务器丢包率特别高。
到服务器上看了以后，发现 &lt;tt class="docutils literal"&gt;ping 127.0.0.1&lt;/tt&gt; 的丢包率也特别高，而且 ping
命令还出现 &lt;tt class="docutils literal"&gt;ping: sendmsg: Invalid argument&lt;/tt&gt; 错误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
64 bytes from 127.0.0.1: icmp_seq=150 ttl=64 time=0.050 ms
64 bytes from 127.0.0.1: icmp_seq=151 ttl=64 time=0.062 ms
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
ping: sendmsg: Invalid argument
64 bytes from 127.0.0.1: icmp_seq=158 ttl=64 time=0.962 ms
64 bytes from 127.0.0.1: icmp_seq=159 ttl=64 time=0.033 ms
&lt;/pre&gt;
&lt;p&gt;查看 &lt;tt class="docutils literal"&gt;dmesg &lt;span class="pre"&gt;-H&lt;/span&gt;&lt;/tt&gt; 有很多类似 &lt;tt class="docutils literal"&gt;net_ratelimit: 478 callbacks suppressed&lt;/tt&gt; 的记录:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
```
[  +6.555833] net_ratelimit: 478 callbacks suppressed
[Oct19 11:08] net_ratelimit: 57 callbacks suppressed
```
&lt;/pre&gt;
&lt;p&gt;需要提一下的就是，这个 HAProxy 服务在一个非常大的内网(large subnets)里，
内网里很多机器都会去连接这个服务。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2 id="hidid2"&gt;解决方法&lt;a class="headerlink" href="#hidid2" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;修改了一下 sysctl, 加大了 ARP cache:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo sysctl -w net.ipv4.neigh.default.gc_thresh1=1024
$ sudo sysctl -w net.ipv4.neigh.default.gc_thresh2=2048
$ sudo sysctl -w net.ipv4.neigh.default.gc_thresh3=4096
$ sudo sysctl -p
$ sudo sysctl -a |grep net.ipv4.neigh.default.gc_thresh
&lt;/pre&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3 id="hidid3"&gt;为什么要修改为上面的值？&lt;a class="headerlink" href="#hidid3" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先来看看这几个配置项的含义(摘自 &lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
neigh/default/gc_thresh1 - INTEGER
    Minimum number of entries to keep.  Garbage collector will not
    purge entries if there are fewer than this number.
    Default: 128

neigh/default/gc_thresh2 - INTEGER
    Threshold when garbage collector becomes more aggressive about
    purging entries. Entries older than 5 seconds will be cleared
    when over this number.
    Default: 512

neigh/default/gc_thresh3 - INTEGER
    Maximum number of neighbor entries allowed.  Increase this
    when using large numbers of interfaces and when communicating
    with large numbers of directly-connected peers.
    Default: 1024
&lt;/pre&gt;
&lt;p&gt;ARP 相关的 &lt;a class="reference external" href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Welcome%20to%20High%20Performance%20Computing%20(HPC)%20Central/page/Linux%20System%20Tuning%20Recommendations"&gt;简单解释就是&lt;/a&gt; (详见 &lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/arp.7.html"&gt;arp(7)&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh1&lt;/tt&gt;: min IPV4 entries to keep in ARP cache -  garbage collection never runs if this many or less entries are in cache&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh2&lt;/tt&gt;: IPV4 entries allowed in ARP cache before garbage collection will be scheduled in 5 seconds&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh3&lt;/tt&gt;: maximum IPV4 entries allowed in ARP cache; garbage collection runs when this many entries reached&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后我们通过 &lt;tt class="docutils literal"&gt;arp &lt;span class="pre"&gt;-an|wc&lt;/span&gt; &lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/tt&gt; 查看当前记录的 ARP 记录的数量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ arp -an|wc -l
1108
&lt;/pre&gt;
&lt;p&gt;或者通过 &lt;tt class="docutils literal"&gt;ip &lt;span class="pre"&gt;-4&lt;/span&gt; neigh show nud all | wc &lt;span class="pre"&gt;-l&lt;/span&gt;&lt;/tt&gt; 查看当前 IPv4 的 ARP 记录的数量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ip -4 neigh show nud all | wc -l
1112
&lt;/pre&gt;
&lt;p&gt;可以看到上面的值比 &lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_thresh3&lt;/tt&gt; 的默认值 &lt;tt class="docutils literal"&gt;1024&lt;/tt&gt; 要大，
&amp;lt;del&amp;gt;*此时就会进行 gc 操作，如果 gc 操作持续时间太久就会导致新的 ARP 记录无法被创建，进而导致 ARP 通信无法正常完成，TCP 之类的操作更加就无法完成了(有空的时候再仔细求证这个理解...)* ，&amp;lt;/del&amp;gt; 所以我们要修改为更大的值。&lt;/p&gt;
&lt;p&gt;如果上面的值特别大，可以考虑配置再大一点的值，比如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
net.ipv4.neigh.default.gc_thresh1 = 8192
net.ipv4.neigh.default.gc_thresh2 = 32768
net.ipv4.neigh.default.gc_thresh3 = 65536
&lt;/pre&gt;
&lt;p&gt;注：上面修改的都是 IPv4 相关的配置，如果有用到 IPv6 网络的话可以把对应的配置项也修改一下。
注：如果机器性能特别好或者比较介意 gc，可以考虑把值调到非常非常大，然后禁用 gc:
&lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_interval&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;net.ipv4.neigh.default.gc_stale_time&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2 id="hidid5"&gt;参考资料&lt;a class="headerlink" href="#hidid5" title="Permalink to this headline"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1316981"&gt;Bug 1316981 – Arp table kernel tuning necessary for large neutron environments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugzilla.redhat.com/show_bug.cgi?id=1498213"&gt;Bug 1498213 – Increase ARP cache size on loadbalancers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.4/html/installation_and_configuration/setting-up-a-router#deploy-router-arp-cach-tuning-for-large-scale-clusters"&gt;Chapter&amp;nbsp;4.&amp;nbsp;Setting up a Router - Red Hat Customer Portal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.petri.com/csc_arp_cache"&gt;ARP cache: What is it and how can it help you? - Petri&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"&gt;kernel.org/doc/Documentation/networking/ip-sysctl.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Welcome%20to%20High%20Performance%20Computing%20(HPC)%20Central/page/Linux%20System%20Tuning%20Recommendations"&gt;Welcome to High Performance Computing (HPC) Central : Linux System Tuning Recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://networkengineering.stackexchange.com/questions/2327/what-happens-when-the-arp-cache-overflows"&gt;router - What happens when the ARP cache overflows? - Network Engineering Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://packetfence.org/support/faq/article/solving-neighbour-table-overflow-errors-large-subnets.html?no_cache=1"&gt;PacketFence: Solving neighbour table overflow errors (large subnets)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.e-rave.nl/kernel-neighbour-table-overflow"&gt;Kernel: Neighbour table overflow | Mark's Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/arp.7.html"&gt;arp(7) - Linux manual page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://learningnetwork.cisco.com/thread/35629"&gt;ARP and ARP Cache - 35629 - The Cisco Learning Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tcpipguide.com/free/t_ARPCaching.htm"&gt;The TCP/IP Guide - ARP Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol"&gt;Address Resolution Protocol - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="ping"></category><category term="sysctl"></category><category term="HAProxy"></category><category term="ARP"></category></entry><entry><title>如何在 centos 7 上编译 boost</title><link href="https://mozillazg.com/2016/04/linux-how-to-build-boost.python-on-centos7.md.html" rel="alternate"></link><updated>2016-04-17T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2016-04-17:2016/04/linux-how-to-build-boost.python-on-centos7.md.html</id><summary type="html">&lt;p&gt;本文主要记录一下如何在 centos 7 上编译 boost 库，同时也适用于 ubuntu（安装系统包的命令需要改为 &lt;code&gt;apt-get&lt;/code&gt;）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装编译工具 &lt;code&gt;clang&lt;/code&gt; ，也可以使用 &lt;code&gt;gcc&lt;/code&gt; 代替，只需要将下面命令中的 &lt;code&gt;clang&lt;/code&gt; 替换为 &lt;code&gt;gcc&lt;/code&gt; 即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install clang
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 boost: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载 boost_1_60_0.tar.gz( &lt;a href="http://sourceforge.net/projects/boost/files/boost/1.60.0/"&gt;http://sourceforge.net/projects/boost/files/boost/1.60.0/&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;解压: &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv boost_1_60_0.tar.gz /opt/
cd /opt/
tar zxvf boost_1_60_0.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译 boost（同时编译所有的 boost lib， &lt;strong&gt;内存和 CPU 如果不够的话可能会编译失败甚至导致系统死机&lt;/strong&gt; ）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd boost_1_60_0/
# 可以通过 ./bootstrap.sh --help 查看更多选项
./bootstrap.sh  --with-toolset=clang --with-libraries=all
./b2
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译安装 boost.build&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd toos/build/
./bootstrap.sh  --with-toolset=clang
./b2
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 ld&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;/opt/boost_1_60_0/stage/lib&amp;quot; &amp;gt;&amp;gt; /etc/ld.so.conf
ldconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要记下的几个路径，代码编译的时候可能会用到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* boost 目录: `/opt/boost_1_60_0/`
* lib 目录:  `/opt/boost_1_60_0/stage/lib`
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参考资料:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.boost.org/doc/libs/1_60_0/more/getting_started/unix-variants.html"&gt;Boost Getting Started on Unix Variants - 1.60.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="boost"></category><category term="python"></category><category term="c++"></category></entry><entry><title>使用 wireshark 查看 tcpdump 的抓包结果</title><link href="https://mozillazg.com/2015/05/open-tcpdump-result-with-wireshark-gui.html" rel="alternate"></link><updated>2015-05-10T00:00:00+00:00</updated><author><name>mozillazg</name></author><id>tag:mozillazg.com,2015-05-10:2015/05/open-tcpdump-result-with-wireshark-gui.html</id><summary type="html">&lt;p&gt;本文将讲解如何使用 wireshark 查看 tcpdump 的抓包结果&lt;/p&gt;
&lt;h2&gt;保存 tcpdump 抓包结果&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump -i eth0 -w dump.pcap
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; 指定要抓取的网卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; 指定结果保存位置&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -i eth0 -w dump.pcap -v
tcpdump: listening on eth0, link-type EN10MB &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;, capture size &lt;span class="m"&gt;65535&lt;/span&gt; bytes
Got 15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; 主要是为了得到 &lt;code&gt;Got 15&lt;/code&gt; 这个数，当想要停止的时候，按下 &lt;code&gt;ctrl + c&lt;/code&gt; 就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -i eth0 -w dump.pcap -v
tcpdump: listening on eth0, link-type EN10MB &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;, capture size &lt;span class="m"&gt;65535&lt;/span&gt; bytes
^C71 packets captured
&lt;span class="m"&gt;71&lt;/span&gt; packets received by filter
&lt;span class="m"&gt;0&lt;/span&gt; packets dropped by kernel
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后用 &lt;code&gt;sz&lt;/code&gt; 命令或其他方式把 dump.pcap 文件下载到本地：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sz dump.pcap
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;在 wireshark 中打开&lt;/h2&gt;
&lt;p&gt;【file】—【open】选中 dump.pcap 文件就可以查看抓包结果了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="open.png" src="/static/images/tcpdump-wireshark/open.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="open2.png" src="/static/images/tcpdump-wireshark/open2.png" /&gt;&lt;/p&gt;
&lt;p&gt;顺便说一个查看 http 请求和响应的方法:&lt;/p&gt;
&lt;p&gt;&lt;img alt="view-http.png" src="/static/images/tcpdump-wireshark/view-http.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="http.png" src="/static/images/tcpdump-wireshark/http.png" /&gt;&lt;/p&gt;
&lt;h2&gt;其他 tcpdump 技巧&lt;/h2&gt;
&lt;p&gt;抓取本机进程发往指定端口的请求:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump dst port 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过滤 http 请求和响应:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 3sd.me and port 80 -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过滤 GET 请求:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 3sd.me and port 80 and &amp;#39;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过滤 POST 请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tcpdump host 3sd.me and port 80 and &amp;#39;tcp dst port 80 and (tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x504f5354)&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;-A&lt;/code&gt; 参数使返回值人类可读&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tcpdump -A host 3sd.me and port &lt;span class="m"&gt;80&lt;/span&gt; and &lt;span class="s1"&gt;&amp;#39;tcp[((tcp[12:1] &amp;amp; 0xf0) &amp;gt;&amp;gt; 2):4] = 0x47455420&amp;#39;&lt;/span&gt;
tcpdump: verbose output suppressed, use -v or -vv &lt;span class="k"&gt;for&lt;/span&gt; full protocol decode
listening on eth0, link-type EN10MB &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;, capture size &lt;span class="m"&gt;65535&lt;/span&gt; bytes
18:41:59.219052 IP xxx.xxx.xxx.xxxx &amp;gt; 3sd.me.http: Flags &lt;span class="o"&gt;[&lt;/span&gt;P.&lt;span class="o"&gt;]&lt;/span&gt;, seq 2875869606:2875869979, ack 2796606839, win 64240, length 373
E.....@.r..Gh..j..P....P.jI....wP....7..GET /JbVGP HTTP/1.1
Host: 3sd.me
Connection: Keep-Alive
User-Agent: Mozilla/5.0 &lt;span class="o"&gt;(&lt;/span&gt;Macintosh&lt;span class="p"&gt;;&lt;/span&gt; Intel Mac OS X 10.9&lt;span class="p"&gt;;&lt;/span&gt; rv:35.0&lt;span class="o"&gt;)&lt;/span&gt; Gecko/20100101 Firefox/35.0
Accept: text/html, application/xml&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.1
Accept-Language: en
Accept-Encoding: gzip, deflate
Referer: http://3sd.me/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多过滤规则请参考 https://wiki.wireshark.org/CaptureFilters&lt;/p&gt;
&lt;h2&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.wireshark.org/CaptureFilters"&gt;https://wiki.wireshark.org/CaptureFilters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wireshark.org/docs/wsug_html_chunked/AppToolstcpdump.html"&gt;https://www.wireshark.org/docs/wsug_html_chunked/AppToolstcpdump.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wireshark.org/tools/string-cf.html"&gt;https://www.wireshark.org/tools/string-cf.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/site/jimmyxu101/testing/use-tcpdump-to-monitor-http-traffic"&gt;https://sites.google.com/site/jimmyxu101/testing/use-tcpdump-to-monitor-http-traffic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/4777042/can-i-use-tcpdump-to-get-http-requests-response-header-and-response-body"&gt;http://stackoverflow.com/questions/4777042/can-i-use-tcpdump-to-get-http-requests-response-header-and-response-body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/252179/how-to-inspect-outgoing-http-requests-of-a-single-application"&gt;http://askubuntu.com/questions/252179/how-to-inspect-outgoing-http-requests-of-a-single-application&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="tcpdump"></category><category term="wireshark"></category></entry></feed>